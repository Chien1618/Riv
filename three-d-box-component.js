import * as hn from "react";
import ql, { useState as pE, useRef as mE, useEffect as Rv, useMemo as X2 } from "react";
import { addPropertyControls as q2, ControlType as qb } from "framer";
function nA(r) {
  return r && r.__esModule && Object.prototype.hasOwnProperty.call(r, "default") ? r.default : r;
}
var wy = { exports: {} }, cv = {};
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Yb;
function Y2() {
  if (Yb) return cv;
  Yb = 1;
  var r = ql, e = Symbol.for("react.element"), t = Symbol.for("react.fragment"), i = Object.prototype.hasOwnProperty, s = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, u = { key: !0, ref: !0, __self: !0, __source: !0 };
  function f(h, p, v) {
    var _, S = {}, E = null, x = null;
    v !== void 0 && (E = "" + v), p.key !== void 0 && (E = "" + p.key), p.ref !== void 0 && (x = p.ref);
    for (_ in p) i.call(p, _) && !u.hasOwnProperty(_) && (S[_] = p[_]);
    if (h && h.defaultProps) for (_ in p = h.defaultProps, p) S[_] === void 0 && (S[_] = p[_]);
    return { $$typeof: e, type: h, key: E, ref: x, props: S, _owner: s.current };
  }
  return cv.Fragment = t, cv.jsx = f, cv.jsxs = f, cv;
}
var fv = {};
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Wb;
function W2() {
  return Wb || (Wb = 1, process.env.NODE_ENV !== "production" && (function() {
    var r = ql, e = Symbol.for("react.element"), t = Symbol.for("react.portal"), i = Symbol.for("react.fragment"), s = Symbol.for("react.strict_mode"), u = Symbol.for("react.profiler"), f = Symbol.for("react.provider"), h = Symbol.for("react.context"), p = Symbol.for("react.forward_ref"), v = Symbol.for("react.suspense"), _ = Symbol.for("react.suspense_list"), S = Symbol.for("react.memo"), E = Symbol.for("react.lazy"), x = Symbol.for("react.offscreen"), A = Symbol.iterator, C = "@@iterator";
    function R($) {
      if ($ === null || typeof $ != "object")
        return null;
      var Fe = A && $[A] || $[C];
      return typeof Fe == "function" ? Fe : null;
    }
    var M = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function w($) {
      {
        for (var Fe = arguments.length, at = new Array(Fe > 1 ? Fe - 1 : 0), dt = 1; dt < Fe; dt++)
          at[dt - 1] = arguments[dt];
        N("error", $, at);
      }
    }
    function N($, Fe, at) {
      {
        var dt = M.ReactDebugCurrentFrame, Qt = dt.getStackAddendum();
        Qt !== "" && (Fe += "%s", at = at.concat([Qt]));
        var En = at.map(function(tn) {
          return String(tn);
        });
        En.unshift("Warning: " + Fe), Function.prototype.apply.call(console[$], console, En);
      }
    }
    var U = !1, I = !1, P = !1, X = !1, Y = !1, z;
    z = Symbol.for("react.module.reference");
    function L($) {
      return !!(typeof $ == "string" || typeof $ == "function" || $ === i || $ === u || Y || $ === s || $ === v || $ === _ || X || $ === x || U || I || P || typeof $ == "object" && $ !== null && ($.$$typeof === E || $.$$typeof === S || $.$$typeof === f || $.$$typeof === h || $.$$typeof === p || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      $.$$typeof === z || $.getModuleId !== void 0));
    }
    function W($, Fe, at) {
      var dt = $.displayName;
      if (dt)
        return dt;
      var Qt = Fe.displayName || Fe.name || "";
      return Qt !== "" ? at + "(" + Qt + ")" : at;
    }
    function me($) {
      return $.displayName || "Context";
    }
    function Q($) {
      if ($ == null)
        return null;
      if (typeof $.tag == "number" && w("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof $ == "function")
        return $.displayName || $.name || null;
      if (typeof $ == "string")
        return $;
      switch ($) {
        case i:
          return "Fragment";
        case t:
          return "Portal";
        case u:
          return "Profiler";
        case s:
          return "StrictMode";
        case v:
          return "Suspense";
        case _:
          return "SuspenseList";
      }
      if (typeof $ == "object")
        switch ($.$$typeof) {
          case h:
            var Fe = $;
            return me(Fe) + ".Consumer";
          case f:
            var at = $;
            return me(at._context) + ".Provider";
          case p:
            return W($, $.render, "ForwardRef");
          case S:
            var dt = $.displayName || null;
            return dt !== null ? dt : Q($.type) || "Memo";
          case E: {
            var Qt = $, En = Qt._payload, tn = Qt._init;
            try {
              return Q(tn(En));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var oe = Object.assign, Se = 0, B, K, q, se, le, Te, we;
    function gt() {
    }
    gt.__reactDisabledLog = !0;
    function $e() {
      {
        if (Se === 0) {
          B = console.log, K = console.info, q = console.warn, se = console.error, le = console.group, Te = console.groupCollapsed, we = console.groupEnd;
          var $ = {
            configurable: !0,
            enumerable: !0,
            value: gt,
            writable: !0
          };
          Object.defineProperties(console, {
            info: $,
            log: $,
            warn: $,
            error: $,
            group: $,
            groupCollapsed: $,
            groupEnd: $
          });
        }
        Se++;
      }
    }
    function _e() {
      {
        if (Se--, Se === 0) {
          var $ = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: oe({}, $, {
              value: B
            }),
            info: oe({}, $, {
              value: K
            }),
            warn: oe({}, $, {
              value: q
            }),
            error: oe({}, $, {
              value: se
            }),
            group: oe({}, $, {
              value: le
            }),
            groupCollapsed: oe({}, $, {
              value: Te
            }),
            groupEnd: oe({}, $, {
              value: we
            })
          });
        }
        Se < 0 && w("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var Je = M.ReactCurrentDispatcher, We;
    function Mt($, Fe, at) {
      {
        if (We === void 0)
          try {
            throw Error();
          } catch (Qt) {
            var dt = Qt.stack.trim().match(/\n( *(at )?)/);
            We = dt && dt[1] || "";
          }
        return `
` + We + $;
      }
    }
    var yt = !1, Ct;
    {
      var _n = typeof WeakMap == "function" ? WeakMap : Map;
      Ct = new _n();
    }
    function Dt($, Fe) {
      if (!$ || yt)
        return "";
      {
        var at = Ct.get($);
        if (at !== void 0)
          return at;
      }
      var dt;
      yt = !0;
      var Qt = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var En;
      En = Je.current, Je.current = null, $e();
      try {
        if (Fe) {
          var tn = function() {
            throw Error();
          };
          if (Object.defineProperty(tn.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(tn, []);
            } catch (pe) {
              dt = pe;
            }
            Reflect.construct($, [], tn);
          } else {
            try {
              tn.call();
            } catch (pe) {
              dt = pe;
            }
            $.call(tn.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (pe) {
            dt = pe;
          }
          $();
        }
      } catch (pe) {
        if (pe && dt && typeof pe.stack == "string") {
          for (var Wt = pe.stack.split(`
`), ti = dt.stack.split(`
`), Rn = Wt.length - 1, Vn = ti.length - 1; Rn >= 1 && Vn >= 0 && Wt[Rn] !== ti[Vn]; )
            Vn--;
          for (; Rn >= 1 && Vn >= 0; Rn--, Vn--)
            if (Wt[Rn] !== ti[Vn]) {
              if (Rn !== 1 || Vn !== 1)
                do
                  if (Rn--, Vn--, Vn < 0 || Wt[Rn] !== ti[Vn]) {
                    var V = `
` + Wt[Rn].replace(" at new ", " at ");
                    return $.displayName && V.includes("<anonymous>") && (V = V.replace("<anonymous>", $.displayName)), typeof $ == "function" && Ct.set($, V), V;
                  }
                while (Rn >= 1 && Vn >= 0);
              break;
            }
        }
      } finally {
        yt = !1, Je.current = En, _e(), Error.prepareStackTrace = Qt;
      }
      var ae = $ ? $.displayName || $.name : "", ve = ae ? Mt(ae) : "";
      return typeof $ == "function" && Ct.set($, ve), ve;
    }
    function ee($, Fe, at) {
      return Dt($, !1);
    }
    function Be($) {
      var Fe = $.prototype;
      return !!(Fe && Fe.isReactComponent);
    }
    function Ce($, Fe, at) {
      if ($ == null)
        return "";
      if (typeof $ == "function")
        return Dt($, Be($));
      if (typeof $ == "string")
        return Mt($);
      switch ($) {
        case v:
          return Mt("Suspense");
        case _:
          return Mt("SuspenseList");
      }
      if (typeof $ == "object")
        switch ($.$$typeof) {
          case p:
            return ee($.render);
          case S:
            return Ce($.type, Fe, at);
          case E: {
            var dt = $, Qt = dt._payload, En = dt._init;
            try {
              return Ce(En(Qt), Fe, at);
            } catch {
            }
          }
        }
      return "";
    }
    var Ie = Object.prototype.hasOwnProperty, De = {}, et = M.ReactDebugCurrentFrame;
    function Ve($) {
      if ($) {
        var Fe = $._owner, at = Ce($.type, $._source, Fe ? Fe.type : null);
        et.setExtraStackFrame(at);
      } else
        et.setExtraStackFrame(null);
    }
    function Qe($, Fe, at, dt, Qt) {
      {
        var En = Function.call.bind(Ie);
        for (var tn in $)
          if (En($, tn)) {
            var Wt = void 0;
            try {
              if (typeof $[tn] != "function") {
                var ti = Error((dt || "React class") + ": " + at + " type `" + tn + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof $[tn] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw ti.name = "Invariant Violation", ti;
              }
              Wt = $[tn](Fe, tn, dt, at, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (Rn) {
              Wt = Rn;
            }
            Wt && !(Wt instanceof Error) && (Ve(Qt), w("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", dt || "React class", at, tn, typeof Wt), Ve(null)), Wt instanceof Error && !(Wt.message in De) && (De[Wt.message] = !0, Ve(Qt), w("Failed %s type: %s", at, Wt.message), Ve(null));
          }
      }
    }
    var ut = Array.isArray;
    function Bt($) {
      return ut($);
    }
    function Z($) {
      {
        var Fe = typeof Symbol == "function" && Symbol.toStringTag, at = Fe && $[Symbol.toStringTag] || $.constructor.name || "Object";
        return at;
      }
    }
    function H($) {
      try {
        return he($), !1;
      } catch {
        return !0;
      }
    }
    function he($) {
      return "" + $;
    }
    function be($) {
      if (H($))
        return w("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Z($)), he($);
    }
    var He = M.ReactCurrentOwner, Re = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, bt, Xe;
    function ct($) {
      if (Ie.call($, "ref")) {
        var Fe = Object.getOwnPropertyDescriptor($, "ref").get;
        if (Fe && Fe.isReactWarning)
          return !1;
      }
      return $.ref !== void 0;
    }
    function _t($) {
      if (Ie.call($, "key")) {
        var Fe = Object.getOwnPropertyDescriptor($, "key").get;
        if (Fe && Fe.isReactWarning)
          return !1;
      }
      return $.key !== void 0;
    }
    function Ge($, Fe) {
      typeof $.ref == "string" && He.current;
    }
    function it($, Fe) {
      {
        var at = function() {
          bt || (bt = !0, w("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Fe));
        };
        at.isReactWarning = !0, Object.defineProperty($, "key", {
          get: at,
          configurable: !0
        });
      }
    }
    function Tt($, Fe) {
      {
        var at = function() {
          Xe || (Xe = !0, w("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Fe));
        };
        at.isReactWarning = !0, Object.defineProperty($, "ref", {
          get: at,
          configurable: !0
        });
      }
    }
    var k = function($, Fe, at, dt, Qt, En, tn) {
      var Wt = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: e,
        // Built-in properties that belong on the element
        type: $,
        key: Fe,
        ref: at,
        props: tn,
        // Record the component responsible for creating this element.
        _owner: En
      };
      return Wt._store = {}, Object.defineProperty(Wt._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(Wt, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: dt
      }), Object.defineProperty(Wt, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Qt
      }), Object.freeze && (Object.freeze(Wt.props), Object.freeze(Wt)), Wt;
    };
    function ye($, Fe, at, dt, Qt) {
      {
        var En, tn = {}, Wt = null, ti = null;
        at !== void 0 && (be(at), Wt = "" + at), _t(Fe) && (be(Fe.key), Wt = "" + Fe.key), ct(Fe) && (ti = Fe.ref, Ge(Fe, Qt));
        for (En in Fe)
          Ie.call(Fe, En) && !Re.hasOwnProperty(En) && (tn[En] = Fe[En]);
        if ($ && $.defaultProps) {
          var Rn = $.defaultProps;
          for (En in Rn)
            tn[En] === void 0 && (tn[En] = Rn[En]);
        }
        if (Wt || ti) {
          var Vn = typeof $ == "function" ? $.displayName || $.name || "Unknown" : $;
          Wt && it(tn, Vn), ti && Tt(tn, Vn);
        }
        return k($, Wt, ti, Qt, dt, He.current, tn);
      }
    }
    var qe = M.ReactCurrentOwner, J = M.ReactDebugCurrentFrame;
    function Oe($) {
      if ($) {
        var Fe = $._owner, at = Ce($.type, $._source, Fe ? Fe.type : null);
        J.setExtraStackFrame(at);
      } else
        J.setExtraStackFrame(null);
    }
    var Ye;
    Ye = !1;
    function lt($) {
      return typeof $ == "object" && $ !== null && $.$$typeof === e;
    }
    function Pe() {
      {
        if (qe.current) {
          var $ = Q(qe.current.type);
          if ($)
            return `

Check the render method of \`` + $ + "`.";
        }
        return "";
      }
    }
    function Ue($) {
      return "";
    }
    var rt = {};
    function Rt($) {
      {
        var Fe = Pe();
        if (!Fe) {
          var at = typeof $ == "string" ? $ : $.displayName || $.name;
          at && (Fe = `

Check the top-level render call using <` + at + ">.");
        }
        return Fe;
      }
    }
    function Yt($, Fe) {
      {
        if (!$._store || $._store.validated || $.key != null)
          return;
        $._store.validated = !0;
        var at = Rt(Fe);
        if (rt[at])
          return;
        rt[at] = !0;
        var dt = "";
        $ && $._owner && $._owner !== qe.current && (dt = " It was passed a child from " + Q($._owner.type) + "."), Oe($), w('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', at, dt), Oe(null);
      }
    }
    function Ft($, Fe) {
      {
        if (typeof $ != "object")
          return;
        if (Bt($))
          for (var at = 0; at < $.length; at++) {
            var dt = $[at];
            lt(dt) && Yt(dt, Fe);
          }
        else if (lt($))
          $._store && ($._store.validated = !0);
        else if ($) {
          var Qt = R($);
          if (typeof Qt == "function" && Qt !== $.entries)
            for (var En = Qt.call($), tn; !(tn = En.next()).done; )
              lt(tn.value) && Yt(tn.value, Fe);
        }
      }
    }
    function si($) {
      {
        var Fe = $.type;
        if (Fe == null || typeof Fe == "string")
          return;
        var at;
        if (typeof Fe == "function")
          at = Fe.propTypes;
        else if (typeof Fe == "object" && (Fe.$$typeof === p || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        Fe.$$typeof === S))
          at = Fe.propTypes;
        else
          return;
        if (at) {
          var dt = Q(Fe);
          Qe(at, $.props, "prop", dt, $);
        } else if (Fe.PropTypes !== void 0 && !Ye) {
          Ye = !0;
          var Qt = Q(Fe);
          w("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", Qt || "Unknown");
        }
        typeof Fe.getDefaultProps == "function" && !Fe.getDefaultProps.isReactClassApproved && w("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Jn($) {
      {
        for (var Fe = Object.keys($.props), at = 0; at < Fe.length; at++) {
          var dt = Fe[at];
          if (dt !== "children" && dt !== "key") {
            Oe($), w("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", dt), Oe(null);
            break;
          }
        }
        $.ref !== null && (Oe($), w("Invalid attribute `ref` supplied to `React.Fragment`."), Oe(null));
      }
    }
    function qa($, Fe, at, dt, Qt, En) {
      {
        var tn = L($);
        if (!tn) {
          var Wt = "";
          ($ === void 0 || typeof $ == "object" && $ !== null && Object.keys($).length === 0) && (Wt += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var ti = Ue();
          ti ? Wt += ti : Wt += Pe();
          var Rn;
          $ === null ? Rn = "null" : Bt($) ? Rn = "array" : $ !== void 0 && $.$$typeof === e ? (Rn = "<" + (Q($.type) || "Unknown") + " />", Wt = " Did you accidentally export a JSX literal instead of a component?") : Rn = typeof $, w("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", Rn, Wt);
        }
        var Vn = ye($, Fe, at, Qt, En);
        if (Vn == null)
          return Vn;
        if (tn) {
          var V = Fe.children;
          if (V !== void 0)
            if (dt)
              if (Bt(V)) {
                for (var ae = 0; ae < V.length; ae++)
                  Ft(V[ae], $);
                Object.freeze && Object.freeze(V);
              } else
                w("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Ft(V, $);
        }
        return $ === i ? Jn(Vn) : si(Vn), Vn;
      }
    }
    function ma($, Fe, at) {
      return qa($, Fe, at, !0);
    }
    function Ur($, Fe, at) {
      return qa($, Fe, at, !1);
    }
    var Ya = Ur, uo = ma;
    fv.Fragment = i, fv.jsx = Ya, fv.jsxs = uo;
  })()), fv;
}
var jb;
function j2() {
  return jb || (jb = 1, process.env.NODE_ENV === "production" ? wy.exports = Y2() : wy.exports = W2()), wy.exports;
}
var ci = j2(), Uy = { exports: {} }, Rl = {};
/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Zb;
function Z2() {
  return Zb || (Zb = 1, Rl.ConcurrentRoot = 1, Rl.ContinuousEventPriority = 8, Rl.DefaultEventPriority = 32, Rl.DiscreteEventPriority = 2, Rl.IdleEventPriority = 268435456, Rl.LegacyRoot = 0, Rl.NoEventPriority = 0), Rl;
}
var Cl = {};
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Kb;
function K2() {
  return Kb || (Kb = 1, process.env.NODE_ENV !== "production" && (Cl.ConcurrentRoot = 1, Cl.ContinuousEventPriority = 8, Cl.DefaultEventPriority = 32, Cl.DiscreteEventPriority = 2, Cl.IdleEventPriority = 268435456, Cl.LegacyRoot = 0, Cl.NoEventPriority = 0)), Cl;
}
var Qb;
function Q2() {
  return Qb || (Qb = 1, process.env.NODE_ENV === "production" ? Uy.exports = Z2() : Uy.exports = K2()), Uy.exports;
}
var U0 = Q2();
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const A_ = "179", hf = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, df = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, iA = 0, vE = 1, aA = 2, k2 = 3, sA = 0, R_ = 1, Cv = 2, ao = 3, Vl = 0, cs = 1, Go = 2, Hl = 0, Sf = 1, gE = 2, yE = 3, _E = 4, rA = 5, Gu = 100, oA = 101, lA = 102, uA = 103, cA = 104, fA = 200, hA = 201, dA = 202, pA = 203, B0 = 204, P0 = 205, mA = 206, vA = 207, gA = 208, yA = 209, _A = 210, SA = 211, xA = 212, EA = 213, MA = 214, H0 = 0, I0 = 1, V0 = 2, Mf = 3, F0 = 4, G0 = 5, X0 = 6, q0 = 7, ng = 0, bA = 1, TA = 2, Yo = 0, AA = 1, RA = 2, CA = 3, VE = 4, DA = 5, wA = 6, UA = 7, SE = "attached", NA = "detached", C_ = 300, Fl = 301, Wu = 302, Iv = 303, Vv = 304, fp = 306, Fv = 1e3, Cr = 1001, Gv = 1002, Ca = 1003, FE = 1004, J2 = 1004, Zd = 1005, $2 = 1005, na = 1006, Dv = 1007, eC = 1007, Xo = 1008, tC = 1008, Dr = 1009, GE = 1010, XE = 1011, ep = 1012, D_ = 1013, Gl = 1014, Ds = 1015, hp = 1016, w_ = 1017, U_ = 1018, tp = 1020, qE = 35902, YE = 1021, WE = 1022, Va = 1023, np = 1026, ip = 1027, N_ = 1028, ig = 1029, jE = 1030, O_ = 1031, nC = 1032, L_ = 1033, wv = 33776, Uv = 33777, Nv = 33778, Ov = 33779, Y0 = 35840, W0 = 35841, j0 = 35842, Z0 = 35843, K0 = 36196, Q0 = 37492, k0 = 37496, J0 = 37808, $0 = 37809, e_ = 37810, t_ = 37811, n_ = 37812, i_ = 37813, a_ = 37814, s_ = 37815, r_ = 37816, o_ = 37817, l_ = 37818, u_ = 37819, c_ = 37820, f_ = 37821, Lv = 36492, h_ = 36494, d_ = 36495, ZE = 36283, p_ = 36284, m_ = 36285, v_ = 36286, OA = 2200, LA = 2201, zA = 2202, Xv = 2300, g_ = 2301, N0 = 2302, gf = 2400, yf = 2401, qv = 2402, z_ = 2500, KE = 2501, iC = 0, aC = 1, sC = 2, BA = 3200, PA = 3201, rC = 3202, oC = 3203, Ku = 0, HA = 1, Bl = "", Ia = "srgb", ju = "srgb-linear", Yv = "linear", Fn = "srgb", lC = 0, pf = 7680, uC = 7681, cC = 7682, fC = 7683, hC = 34055, dC = 34056, pC = 5386, mC = 512, vC = 513, gC = 514, yC = 515, _C = 516, SC = 517, xC = 518, xE = 519, IA = 512, VA = 513, FA = 514, QE = 515, GA = 516, XA = 517, qA = 518, YA = 519, Wv = 35044, EC = 35048, MC = 35040, bC = 35045, TC = 35049, AC = 35041, RC = 35046, CC = 35050, DC = 35042, wC = "100", EE = "300 es", Ks = 2e3, ap = 2001, UC = {
  COMPUTE: "compute",
  RENDER: "render"
}, NC = {
  PERSPECTIVE: "perspective",
  LINEAR: "linear",
  FLAT: "flat"
}, OC = {
  NORMAL: "normal",
  CENTROID: "centroid",
  SAMPLE: "sample",
  FIRST: "first",
  EITHER: "either"
};
let Zo = class {
  /**
   * Adds the given event listener to the given event type.
   *
   * @param {string} type - The type of event to listen to.
   * @param {Function} listener - The function that gets called when the event is fired.
   */
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const i = this._listeners;
    i[e] === void 0 && (i[e] = []), i[e].indexOf(t) === -1 && i[e].push(t);
  }
  /**
   * Returns `true` if the given event listener has been added to the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to check.
   * @return {boolean} Whether the given event listener has been added to the given event type.
   */
  hasEventListener(e, t) {
    const i = this._listeners;
    return i === void 0 ? !1 : i[e] !== void 0 && i[e].indexOf(t) !== -1;
  }
  /**
   * Removes the given event listener from the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to remove.
   */
  removeEventListener(e, t) {
    const i = this._listeners;
    if (i === void 0) return;
    const s = i[e];
    if (s !== void 0) {
      const u = s.indexOf(t);
      u !== -1 && s.splice(u, 1);
    }
  }
  /**
   * Dispatches an event object.
   *
   * @param {Object} event - The event that gets fired.
   */
  dispatchEvent(e) {
    const t = this._listeners;
    if (t === void 0) return;
    const i = t[e.type];
    if (i !== void 0) {
      e.target = this;
      const s = i.slice(0);
      for (let u = 0, f = s.length; u < f; u++)
        s[u].call(this, e);
      e.target = null;
    }
  }
};
const Ba = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let kb = 1234567;
const xf = Math.PI / 180, sp = 180 / Math.PI;
function Qs() {
  const r = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, i = Math.random() * 4294967295 | 0;
  return (Ba[r & 255] + Ba[r >> 8 & 255] + Ba[r >> 16 & 255] + Ba[r >> 24 & 255] + "-" + Ba[e & 255] + Ba[e >> 8 & 255] + "-" + Ba[e >> 16 & 15 | 64] + Ba[e >> 24 & 255] + "-" + Ba[t & 63 | 128] + Ba[t >> 8 & 255] + "-" + Ba[t >> 16 & 255] + Ba[t >> 24 & 255] + Ba[i & 255] + Ba[i >> 8 & 255] + Ba[i >> 16 & 255] + Ba[i >> 24 & 255]).toLowerCase();
}
function Xt(r, e, t) {
  return Math.max(e, Math.min(t, r));
}
function kE(r, e) {
  return (r % e + e) % e;
}
function LC(r, e, t, i, s) {
  return i + (r - e) * (s - i) / (t - e);
}
function zC(r, e, t) {
  return r !== e ? (t - r) / (e - r) : 0;
}
function zv(r, e, t) {
  return (1 - t) * r + t * e;
}
function BC(r, e, t, i) {
  return zv(r, e, 1 - Math.exp(-t * i));
}
function PC(r, e = 1) {
  return e - Math.abs(kE(r, e * 2) - e);
}
function HC(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * (3 - 2 * r));
}
function IC(r, e, t) {
  return r <= e ? 0 : r >= t ? 1 : (r = (r - e) / (t - e), r * r * r * (r * (r * 6 - 15) + 10));
}
function VC(r, e) {
  return r + Math.floor(Math.random() * (e - r + 1));
}
function FC(r, e) {
  return r + Math.random() * (e - r);
}
function GC(r) {
  return r * (0.5 - Math.random());
}
function XC(r) {
  r !== void 0 && (kb = r);
  let e = kb += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function qC(r) {
  return r * xf;
}
function YC(r) {
  return r * sp;
}
function WC(r) {
  return (r & r - 1) === 0 && r !== 0;
}
function jC(r) {
  return Math.pow(2, Math.ceil(Math.log(r) / Math.LN2));
}
function ZC(r) {
  return Math.pow(2, Math.floor(Math.log(r) / Math.LN2));
}
function KC(r, e, t, i, s) {
  const u = Math.cos, f = Math.sin, h = u(t / 2), p = f(t / 2), v = u((e + i) / 2), _ = f((e + i) / 2), S = u((e - i) / 2), E = f((e - i) / 2), x = u((i - e) / 2), A = f((i - e) / 2);
  switch (s) {
    case "XYX":
      r.set(h * _, p * S, p * E, h * v);
      break;
    case "YZY":
      r.set(p * E, h * _, p * S, h * v);
      break;
    case "ZXZ":
      r.set(p * S, p * E, h * _, h * v);
      break;
    case "XZX":
      r.set(h * _, p * A, p * x, h * v);
      break;
    case "YXY":
      r.set(p * x, h * _, p * A, h * v);
      break;
    case "ZYZ":
      r.set(p * A, p * x, h * _, h * v);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + s);
  }
}
function us(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return r / 4294967295;
    case Uint16Array:
      return r / 65535;
    case Uint8Array:
      return r / 255;
    case Int32Array:
      return Math.max(r / 2147483647, -1);
    case Int16Array:
      return Math.max(r / 32767, -1);
    case Int8Array:
      return Math.max(r / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function rn(r, e) {
  switch (e.constructor) {
    case Float32Array:
      return r;
    case Uint32Array:
      return Math.round(r * 4294967295);
    case Uint16Array:
      return Math.round(r * 65535);
    case Uint8Array:
      return Math.round(r * 255);
    case Int32Array:
      return Math.round(r * 2147483647);
    case Int16Array:
      return Math.round(r * 32767);
    case Int8Array:
      return Math.round(r * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const QC = {
  DEG2RAD: xf,
  RAD2DEG: sp,
  /**
   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
   * (universally unique identifier).
   *
   * @static
   * @method
   * @return {string} The UUID.
   */
  generateUUID: Qs,
  /**
   * Clamps the given value between min and max.
   *
   * @static
   * @method
   * @param {number} value - The value to clamp.
   * @param {number} min - The min value.
   * @param {number} max - The max value.
   * @return {number} The clamped value.
   */
  clamp: Xt,
  /**
   * Computes the Euclidean modulo of the given parameters that
   * is `( ( n % m ) + m ) % m`.
   *
   * @static
   * @method
   * @param {number} n - The first parameter.
   * @param {number} m - The second parameter.
   * @return {number} The Euclidean modulo.
   */
  euclideanModulo: kE,
  /**
   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`
   * for the given value.
   *
   * @static
   * @method
   * @param {number} x - The value to be mapped.
   * @param {number} a1 - Minimum value for range A.
   * @param {number} a2 - Maximum value for range A.
   * @param {number} b1 - Minimum value for range B.
   * @param {number} b2 - Maximum value for range B.
   * @return {number} The mapped value.
   */
  mapLinear: LC,
  /**
   * Returns the percentage in the closed interval `[0, 1]` of the given value
   * between the start and end point.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} value - A value between start and end.
   * @return {number} The interpolation factor.
   */
  inverseLerp: zC,
  /**
   * Returns a value linearly interpolated from two known points based on the given interval -
   * `t = 0` will return `x` and `t = 1` will return `y`.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {number} The interpolated value.
   */
  lerp: zv,
  /**
   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta
   * time to maintain frame rate independent movement. For details, see
   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.
   *
   * @static
   * @method
   * @param {number} x - The current point.
   * @param {number} y - The target point.
   * @param {number} lambda - A higher lambda value will make the movement more sudden,
   * and a lower value will make the movement more gradual.
   * @param {number} dt - Delta time in seconds.
   * @return {number} The interpolated value.
   */
  damp: BC,
  /**
   * Returns a value that alternates between `0` and the given `length` parameter.
   *
   * @static
   * @method
   * @param {number} x - The value to pingpong.
   * @param {number} [length=1] - The positive value the function will pingpong to.
   * @return {number} The alternated value.
   */
  pingpong: PC,
  /**
   * Returns a value in the range `[0,1]` that represents the percentage that `x` has
   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to
   * the `min` and `max`.
   *
   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smoothstep: HC,
  /**
   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}
   * that has zero 1st and 2nd order derivatives at x=0 and x=1.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smootherstep: IC,
  /**
   * Returns a random integer from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random integer.
   */
  randInt: VC,
  /**
   * Returns a random float from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random float.
   */
  randFloat: FC,
  /**
   * Returns a random integer from `<-range/2, range/2>` interval.
   *
   * @static
   * @method
   * @param {number} range - Defines the value range.
   * @return {number} A random float.
   */
  randFloatSpread: GC,
  /**
   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.
   *
   * @static
   * @method
   * @param {number} [s] - The integer seed.
   * @return {number} A random float.
   */
  seededRandom: XC,
  /**
   * Converts degrees to radians.
   *
   * @static
   * @method
   * @param {number} degrees - A value in degrees.
   * @return {number} The converted value in radians.
   */
  degToRad: qC,
  /**
   * Converts radians to degrees.
   *
   * @static
   * @method
   * @param {number} radians - A value in radians.
   * @return {number} The converted value in degrees.
   */
  radToDeg: YC,
  /**
   * Returns `true` if the given number is a power of two.
   *
   * @static
   * @method
   * @param {number} value - The value to check.
   * @return {boolean} Whether the given number is a power of two or not.
   */
  isPowerOfTwo: WC,
  /**
   * Returns the smallest power of two that is greater than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The smallest power of two that is greater than or equal to the given number.
   */
  ceilPowerOfTwo: jC,
  /**
   * Returns the largest power of two that is less than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The largest power of two that is less than or equal to the given number.
   */
  floorPowerOfTwo: ZC,
  /**
   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}
   * defined by the given angles and order.
   *
   * Rotations are applied to the axes in the order specified by order:
   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.
   *
   * @static
   * @method
   * @param {Quaternion} q - The quaternion to set.
   * @param {number} a - The rotation applied to the first axis, in radians.
   * @param {number} b - The rotation applied to the second axis, in radians.
   * @param {number} c - The rotation applied to the third axis, in radians.
   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.
   */
  setQuaternionFromProperEuler: KC,
  /**
   * Normalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The float value in the range `[0,1]` to normalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The normalize value.
   */
  normalize: rn,
  /**
   * Denormalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The value to denormalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The denormalize (float) value in the range `[0,1]`.
   */
  denormalize: us
};
class ze {
  /**
   * Constructs a new 2D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   */
  constructor(e = 0, t = 0) {
    ze.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  /**
   * Alias for {@link Vector2#x}.
   *
   * @type {number}
   */
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  /**
   * Alias for {@link Vector2#y}.
   *
   * @type {number}
   */
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @return {Vector2} A reference to this vector.
   */
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector2} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @param {number} value - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector2} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector2} v - The vector to copy.
   * @return {Vector2} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector2} v - The vector to add.
   * @return {Vector2} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector2} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector2} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector2} A reference to this vector.
   */
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector2} v - The vector to subtract.
   * @return {Vector2} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector2} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector2} v - The vector to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector2} v - The vector to divide.
   * @return {Vector2} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector2} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * Multiplies this vector (with an implicit 1 as the 3rd component) by
   * the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {Vector2} A reference to this vector.
   */
  applyMatrix3(e) {
    const t = this.x, i = this.y, s = e.elements;
    return this.x = s[0] * t + s[3] * i + s[6], this.y = s[1] * t + s[4] * i + s[7], this;
  }
  /**
   * If this vector's x or y value is greater than the given vector's x or y
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  /**
   * If this vector's x or y value is less than the given vector's x or y
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  /**
   * If this vector's x or y value is greater than the max vector's x or y
   * value, it is replaced by the corresponding value.
   * If this vector's x or y value is less than the min vector's x or y value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector2} min - The minimum x and y values.
   * @param {Vector2} max - The maximum x and y values in the desired range.
   * @return {Vector2} A reference to this vector.
   */
  clamp(e, t) {
    return this.x = Xt(this.x, e.x, t.x), this.y = Xt(this.y, e.y, t.y), this;
  }
  /**
   * If this vector's x or y values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x or y values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampScalar(e, t) {
    return this.x = Xt(this.x, e, t), this.y = Xt(this.y, e, t), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Xt(i, e, t));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector2} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x and y = -y.
   *
   * @return {Vector2} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the cross product with.
   * @return {number} The result of the cross product.
   */
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Computes the angle in radians of this vector with respect to the positive x-axis.
   *
   * @return {number} The angle in radians.
   */
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector2} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const i = this.dot(e) / t;
    return Math.acos(Xt(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector2} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(e) {
    const t = this.x - e.x, i = this.y - e.y;
    return t * t + i * i;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector2} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector2} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector2} v1 - The first vector.
   * @param {Vector2} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector2} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]` and y
   * value to be `array[ offset + 1 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector2} A reference to this vector.
   */
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector2} A reference to this vector.
   */
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  /**
   * Rotates this vector around the given center by the given angle.
   *
   * @param {Vector2} center - The point around which to rotate.
   * @param {number} angle - The angle to rotate, in radians.
   * @return {Vector2} A reference to this vector.
   */
  rotateAround(e, t) {
    const i = Math.cos(t), s = Math.sin(t), u = this.x - e.x, f = this.y - e.y;
    return this.x = u * i - f * s + e.x, this.y = u * s + f * i + e.y, this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class Fa {
  /**
   * Constructs a new quaternion.
   *
   * @param {number} [x=0] - The x value of this quaternion.
   * @param {number} [y=0] - The y value of this quaternion.
   * @param {number} [z=0] - The z value of this quaternion.
   * @param {number} [w=1] - The w value of this quaternion.
   */
  constructor(e = 0, t = 0, i = 0, s = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = i, this._w = s;
  }
  /**
   * Interpolates between two quaternions via SLERP. This implementation assumes the
   * quaternion data are managed  in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @param {number} t - The interpolation factor in the range `[0,1]`.
   * @see {@link Quaternion#slerp}
   */
  static slerpFlat(e, t, i, s, u, f, h) {
    let p = i[s + 0], v = i[s + 1], _ = i[s + 2], S = i[s + 3];
    const E = u[f + 0], x = u[f + 1], A = u[f + 2], C = u[f + 3];
    if (h === 0) {
      e[t + 0] = p, e[t + 1] = v, e[t + 2] = _, e[t + 3] = S;
      return;
    }
    if (h === 1) {
      e[t + 0] = E, e[t + 1] = x, e[t + 2] = A, e[t + 3] = C;
      return;
    }
    if (S !== C || p !== E || v !== x || _ !== A) {
      let R = 1 - h;
      const M = p * E + v * x + _ * A + S * C, w = M >= 0 ? 1 : -1, N = 1 - M * M;
      if (N > Number.EPSILON) {
        const I = Math.sqrt(N), P = Math.atan2(I, M * w);
        R = Math.sin(R * P) / I, h = Math.sin(h * P) / I;
      }
      const U = h * w;
      if (p = p * R + E * U, v = v * R + x * U, _ = _ * R + A * U, S = S * R + C * U, R === 1 - h) {
        const I = 1 / Math.sqrt(p * p + v * v + _ * _ + S * S);
        p *= I, v *= I, _ *= I, S *= I;
      }
    }
    e[t] = p, e[t + 1] = v, e[t + 2] = _, e[t + 3] = S;
  }
  /**
   * Multiplies two quaternions. This implementation assumes the quaternion data are managed
   * in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @return {Array<number>} The destination array.
   * @see {@link Quaternion#multiplyQuaternions}.
   */
  static multiplyQuaternionsFlat(e, t, i, s, u, f) {
    const h = i[s], p = i[s + 1], v = i[s + 2], _ = i[s + 3], S = u[f], E = u[f + 1], x = u[f + 2], A = u[f + 3];
    return e[t] = h * A + _ * S + p * x - v * E, e[t + 1] = p * A + _ * E + v * S - h * x, e[t + 2] = v * A + _ * x + h * E - p * S, e[t + 3] = _ * A - h * S - p * E - v * x, e;
  }
  /**
   * The x value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  /**
   * The y value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  /**
   * The z value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  /**
   * The w value of this quaternion.
   *
   * @type {number}
   * @default 1
   */
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  /**
   * Sets the quaternion components.
   *
   * @param {number} x - The x value of this quaternion.
   * @param {number} y - The y value of this quaternion.
   * @param {number} z - The z value of this quaternion.
   * @param {number} w - The w value of this quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  set(e, t, i, s) {
    return this._x = e, this._y = t, this._z = i, this._w = s, this._onChangeCallback(), this;
  }
  /**
   * Returns a new quaternion with copied values from this instance.
   *
   * @return {Quaternion} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  /**
   * Copies the values of the given quaternion to this instance.
   *
   * @param {Quaternion} quaternion - The quaternion to copy.
   * @return {Quaternion} A reference to this quaternion.
   */
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the rotation specified by the given
   * Euler angles.
   *
   * @param {Euler} euler - The Euler angles.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromEuler(e, t = !0) {
    const i = e._x, s = e._y, u = e._z, f = e._order, h = Math.cos, p = Math.sin, v = h(i / 2), _ = h(s / 2), S = h(u / 2), E = p(i / 2), x = p(s / 2), A = p(u / 2);
    switch (f) {
      case "XYZ":
        this._x = E * _ * S + v * x * A, this._y = v * x * S - E * _ * A, this._z = v * _ * A + E * x * S, this._w = v * _ * S - E * x * A;
        break;
      case "YXZ":
        this._x = E * _ * S + v * x * A, this._y = v * x * S - E * _ * A, this._z = v * _ * A - E * x * S, this._w = v * _ * S + E * x * A;
        break;
      case "ZXY":
        this._x = E * _ * S - v * x * A, this._y = v * x * S + E * _ * A, this._z = v * _ * A + E * x * S, this._w = v * _ * S - E * x * A;
        break;
      case "ZYX":
        this._x = E * _ * S - v * x * A, this._y = v * x * S + E * _ * A, this._z = v * _ * A - E * x * S, this._w = v * _ * S + E * x * A;
        break;
      case "YZX":
        this._x = E * _ * S + v * x * A, this._y = v * x * S + E * _ * A, this._z = v * _ * A - E * x * S, this._w = v * _ * S - E * x * A;
        break;
      case "XZY":
        this._x = E * _ * S - v * x * A, this._y = v * x * S - E * _ * A, this._z = v * _ * A + E * x * S, this._w = v * _ * S + E * x * A;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + f);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given axis and angle.
   *
   * @param {Vector3} axis - The normalized axis.
   * @param {number} angle - The angle in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromAxisAngle(e, t) {
    const i = t / 2, s = Math.sin(i);
    return this._x = e.x * s, this._y = e.y * s, this._z = e.z * s, this._w = Math.cos(i), this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromRotationMatrix(e) {
    const t = e.elements, i = t[0], s = t[4], u = t[8], f = t[1], h = t[5], p = t[9], v = t[2], _ = t[6], S = t[10], E = i + h + S;
    if (E > 0) {
      const x = 0.5 / Math.sqrt(E + 1);
      this._w = 0.25 / x, this._x = (_ - p) * x, this._y = (u - v) * x, this._z = (f - s) * x;
    } else if (i > h && i > S) {
      const x = 2 * Math.sqrt(1 + i - h - S);
      this._w = (_ - p) / x, this._x = 0.25 * x, this._y = (s + f) / x, this._z = (u + v) / x;
    } else if (h > S) {
      const x = 2 * Math.sqrt(1 + h - i - S);
      this._w = (u - v) / x, this._x = (s + f) / x, this._y = 0.25 * x, this._z = (p + _) / x;
    } else {
      const x = 2 * Math.sqrt(1 + S - i - h);
      this._w = (f - s) / x, this._x = (u + v) / x, this._y = (p + _) / x, this._z = 0.25 * x;
    }
    return this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion to the rotation required to rotate the direction vector
   * `vFrom` to the direction vector `vTo`.
   *
   * @param {Vector3} vFrom - The first (normalized) direction vector.
   * @param {Vector3} vTo - The second (normalized) direction vector.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromUnitVectors(e, t) {
    let i = e.dot(t) + 1;
    return i < 1e-8 ? (i = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = i) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = i)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = i), this.normalize();
  }
  /**
   * Returns the angle between this quaternion and the given one in radians.
   *
   * @param {Quaternion} q - The quaternion to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    return 2 * Math.acos(Math.abs(Xt(this.dot(e), -1, 1)));
  }
  /**
   * Rotates this quaternion by a given angular step to the given quaternion.
   * The method ensures that the final quaternion will not overshoot `q`.
   *
   * @param {Quaternion} q - The target quaternion.
   * @param {number} step - The angular step in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  rotateTowards(e, t) {
    const i = this.angleTo(e);
    if (i === 0) return this;
    const s = Math.min(1, t / i);
    return this.slerp(e, s), this;
  }
  /**
   * Sets this quaternion to the identity quaternion; that is, to the
   * quaternion that represents "no rotation".
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  identity() {
    return this.set(0, 0, 0, 1);
  }
  /**
   * Inverts this quaternion via {@link Quaternion#conjugate}. The
   * quaternion is assumed to have unit length.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  invert() {
    return this.conjugate();
  }
  /**
   * Returns the rotational conjugate of this quaternion. The conjugate of a
   * quaternion represents the same rotation in the opposite direction about
   * the rotational axis.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  /**
   * Calculates the dot product of this quaternion and the given one.
   *
   * @param {Quaternion} v - The quaternion to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  /**
   * Computes the squared Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector. This can be useful if you are comparing the
   * lengths of two quaternions, as this is a slightly more efficient calculation than
   * {@link Quaternion#length}.
   *
   * @return {number} The squared Euclidean length.
   */
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  /**
   * Computes the Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector.
   *
   * @return {number} The Euclidean length.
   */
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  /**
   * Normalizes this quaternion - that is, calculated the quaternion that performs
   * the same rotation as this one, but has a length equal to `1`.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  /**
   * Multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  /**
   * Pre-multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  /**
   * Multiplies the given quaternions and stores the result in this instance.
   *
   * @param {Quaternion} a - The first quaternion.
   * @param {Quaternion} b - The second quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiplyQuaternions(e, t) {
    const i = e._x, s = e._y, u = e._z, f = e._w, h = t._x, p = t._y, v = t._z, _ = t._w;
    return this._x = i * _ + f * h + s * v - u * p, this._y = s * _ + f * p + u * h - i * v, this._z = u * _ + f * v + i * p - s * h, this._w = f * _ - i * h - s * p - u * v, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between quaternions.
   *
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerp(e, t) {
    if (t === 0) return this;
    if (t === 1) return this.copy(e);
    const i = this._x, s = this._y, u = this._z, f = this._w;
    let h = f * e._w + i * e._x + s * e._y + u * e._z;
    if (h < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, h = -h) : this.copy(e), h >= 1)
      return this._w = f, this._x = i, this._y = s, this._z = u, this;
    const p = 1 - h * h;
    if (p <= Number.EPSILON) {
      const x = 1 - t;
      return this._w = x * f + t * this._w, this._x = x * i + t * this._x, this._y = x * s + t * this._y, this._z = x * u + t * this._z, this.normalize(), this;
    }
    const v = Math.sqrt(p), _ = Math.atan2(v, h), S = Math.sin((1 - t) * _) / v, E = Math.sin(t * _) / v;
    return this._w = f * S + this._w * E, this._x = i * S + this._x * E, this._y = s * S + this._y * E, this._z = u * S + this._z * E, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between the given quaternions
   * and stores the result in this quaternion.
   *
   * @param {Quaternion} qa - The source quaternion.
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerpQuaternions(e, t, i) {
    return this.copy(e).slerp(t, i);
  }
  /**
   * Sets this quaternion to a uniformly random, normalized quaternion.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  random() {
    const e = 2 * Math.PI * Math.random(), t = 2 * Math.PI * Math.random(), i = Math.random(), s = Math.sqrt(1 - i), u = Math.sqrt(i);
    return this.set(
      s * Math.sin(e),
      s * Math.cos(e),
      u * Math.sin(t),
      u * Math.cos(t)
    );
  }
  /**
   * Returns `true` if this quaternion is equal with the given one.
   *
   * @param {Quaternion} quaternion - The quaternion to test for equality.
   * @return {boolean} Whether this quaternion is equal with the given one.
   */
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  /**
   * Sets this quaternion's components from the given array.
   *
   * @param {Array<number>} array - An array holding the quaternion component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this quaternion to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The quaternion components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  /**
   * Sets the components of this quaternion from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
   * @param {number} index - The index into the attribute.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the
   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
   *
   * @return {Array<number>} The serialized quaternion.
   */
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class j {
  /**
   * Constructs a new 3D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   */
  constructor(e = 0, t = 0, i = 0) {
    j.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = i;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @return {Vector3} A reference to this vector.
   */
  set(e, t, i) {
    return i === void 0 && (i = this.z), this.x = e, this.y = t, this.z = i, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector3} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setZ(e) {
    return this.z = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @param {number} value - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector3} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3} v - The vector to copy.
   * @return {Vector3} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector3} v - The vector to add.
   * @return {Vector3} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector3} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector3|Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector3} A reference to this vector.
   */
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector3} v - The vector to subtract.
   * @return {Vector3} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector3} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector3} v - The vector to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  /**
   * Multiplies the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  /**
   * Applies the given Euler rotation to this vector.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Vector3} A reference to this vector.
   */
  applyEuler(e) {
    return this.applyQuaternion(Jb.setFromEuler(e));
  }
  /**
   * Applies a rotation specified by an axis and an angle to this vector.
   *
   * @param {Vector3} axis - A normalized vector representing the rotation axis.
   * @param {number} angle - The angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  applyAxisAngle(e, t) {
    return this.applyQuaternion(Jb.setFromAxisAngle(e, t));
  }
  /**
   * Multiplies this vector with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix3(e) {
    const t = this.x, i = this.y, s = this.z, u = e.elements;
    return this.x = u[0] * t + u[3] * i + u[6] * s, this.y = u[1] * t + u[4] * i + u[7] * s, this.z = u[2] * t + u[5] * i + u[8] * s, this;
  }
  /**
   * Multiplies this vector by the given normal matrix and normalizes
   * the result.
   *
   * @param {Matrix3} m - The normal matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  /**
   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
   * divides by perspective.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix4(e) {
    const t = this.x, i = this.y, s = this.z, u = e.elements, f = 1 / (u[3] * t + u[7] * i + u[11] * s + u[15]);
    return this.x = (u[0] * t + u[4] * i + u[8] * s + u[12]) * f, this.y = (u[1] * t + u[5] * i + u[9] * s + u[13]) * f, this.z = (u[2] * t + u[6] * i + u[10] * s + u[14]) * f, this;
  }
  /**
   * Applies the given Quaternion to this vector.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Vector3} A reference to this vector.
   */
  applyQuaternion(e) {
    const t = this.x, i = this.y, s = this.z, u = e.x, f = e.y, h = e.z, p = e.w, v = 2 * (f * s - h * i), _ = 2 * (h * t - u * s), S = 2 * (u * i - f * t);
    return this.x = t + p * v + f * S - h * _, this.y = i + p * _ + h * v - u * S, this.z = s + p * S + u * _ - f * v, this;
  }
  /**
   * Projects this vector from world space into the camera's normalized
   * device coordinate (NDC) space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  /**
   * Unprojects this vector from the camera's normalized device coordinate (NDC)
   * space into world space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  /**
   * Transforms the direction of this vector by a matrix (the upper left 3 x 3
   * subset of the given 4x4 matrix and then normalizes the result.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Vector3} A reference to this vector.
   */
  transformDirection(e) {
    const t = this.x, i = this.y, s = this.z, u = e.elements;
    return this.x = u[0] * t + u[4] * i + u[8] * s, this.y = u[1] * t + u[5] * i + u[9] * s, this.z = u[2] * t + u[6] * i + u[10] * s, this.normalize();
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector3} v - The vector to divide.
   * @return {Vector3} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector3} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * If this vector's x, y or z value is greater than the given vector's x, y or z
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  /**
   * If this vector's x, y or z value is less than the given vector's x, y or z
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  /**
   * If this vector's x, y or z value is greater than the max vector's x, y or z
   * value, it is replaced by the corresponding value.
   * If this vector's x, y or z value is less than the min vector's x, y or z value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector3} min - The minimum x, y and z values.
   * @param {Vector3} max - The maximum x, y and z values in the desired range.
   * @return {Vector3} A reference to this vector.
   */
  clamp(e, t) {
    return this.x = Xt(this.x, e.x, t.x), this.y = Xt(this.y, e.y, t.y), this.z = Xt(this.z, e.z, t.z), this;
  }
  /**
   * If this vector's x, y or z values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y or z values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampScalar(e, t) {
    return this.x = Xt(this.x, e, t), this.y = Xt(this.y, e, t), this.z = Xt(this.z, e, t), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Xt(i, e, t));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector3} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
   *
   * @return {Vector3} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector3} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector3} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector3} v1 - The first vector.
   * @param {Vector3} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the cross product with.
   * @return {Vector3} The result of the cross product.
   */
  cross(e) {
    return this.crossVectors(this, e);
  }
  /**
   * Calculates the cross product of the given vectors and stores the result
   * in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  crossVectors(e, t) {
    const i = e.x, s = e.y, u = e.z, f = t.x, h = t.y, p = t.z;
    return this.x = s * p - u * h, this.y = u * f - i * p, this.z = i * h - s * f, this;
  }
  /**
   * Projects this vector onto the given one.
   *
   * @param {Vector3} v - The vector to project to.
   * @return {Vector3} A reference to this vector.
   */
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0) return this.set(0, 0, 0);
    const i = e.dot(this) / t;
    return this.copy(e).multiplyScalar(i);
  }
  /**
   * Projects this vector onto a plane by subtracting this
   * vector projected onto the plane's normal from this vector.
   *
   * @param {Vector3} planeNormal - The plane normal.
   * @return {Vector3} A reference to this vector.
   */
  projectOnPlane(e) {
    return ox.copy(this).projectOnVector(e), this.sub(ox);
  }
  /**
   * Reflects this vector off a plane orthogonal to the given normal vector.
   *
   * @param {Vector3} normal - The (normalized) normal vector.
   * @return {Vector3} A reference to this vector.
   */
  reflect(e) {
    return this.sub(ox.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector3} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0) return Math.PI / 2;
    const i = this.dot(e) / t;
    return Math.acos(Xt(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector3} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(e) {
    const t = this.x - e.x, i = this.y - e.y, s = this.z - e.z;
    return t * t + i * i + s * s;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {Spherical} s - The spherical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The phi angle in radians.
   * @param {number} theta - The theta angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  setFromSphericalCoords(e, t, i) {
    const s = Math.sin(t) * e;
    return this.x = s * Math.sin(i), this.y = Math.cos(t) * e, this.z = s * Math.cos(i), this;
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {Cylindrical} c - The cylindrical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle in radians.
   * @param {number} y - The y value.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindricalCoords(e, t, i) {
    return this.x = e * Math.sin(t), this.y = i, this.z = e * Math.cos(t), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  /**
   * Sets the vector components to the scale elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), i = this.setFromMatrixColumn(e, 1).length(), s = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = i, this.z = s, this;
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  /**
   * Sets the vector components from the given Euler angles.
   *
   * @param {Euler} e - The Euler angles to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  /**
   * Sets the vector components from the RGB components of the
   * given color.
   *
   * @param {Color} c - The color to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector3} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
   * and z value to be `array[ offset + 2 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector3} A reference to this vector.
   */
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector3} A reference to this vector.
   */
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  /**
   * Sets this vector to a uniformly random point on a unit sphere.
   *
   * @return {Vector3} A reference to this vector.
   */
  randomDirection() {
    const e = Math.random() * Math.PI * 2, t = Math.random() * 2 - 1, i = Math.sqrt(1 - t * t);
    return this.x = i * Math.cos(e), this.y = t, this.z = i * Math.sin(e), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const ox = /* @__PURE__ */ new j(), Jb = /* @__PURE__ */ new Fa();
class en {
  /**
   * Constructs a new 3x3 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   */
  constructor(e, t, i, s, u, f, h, p, v) {
    en.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, i, s, u, f, h, p, v);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @return {Matrix3} A reference to this matrix.
   */
  set(e, t, i, s, u, f, h, p, v) {
    const _ = this.elements;
    return _[0] = e, _[1] = s, _[2] = h, _[3] = t, _[4] = u, _[5] = p, _[6] = i, _[7] = f, _[8] = v, this;
  }
  /**
   * Sets this matrix to the 3x3 identity matrix.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix3} m - The matrix to copy.
   * @return {Matrix3} A reference to this matrix.
   */
  copy(e) {
    const t = this.elements, i = e.elements;
    return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix3} A reference to this matrix.
   */
  extractBasis(e, t, i) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
  }
  /**
   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  /**
   * Post-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  /**
   * Pre-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  /**
   * Multiples the given 3x3 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix3} a - The first matrix.
   * @param {Matrix3} b - The second matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyMatrices(e, t) {
    const i = e.elements, s = t.elements, u = this.elements, f = i[0], h = i[3], p = i[6], v = i[1], _ = i[4], S = i[7], E = i[2], x = i[5], A = i[8], C = s[0], R = s[3], M = s[6], w = s[1], N = s[4], U = s[7], I = s[2], P = s[5], X = s[8];
    return u[0] = f * C + h * w + p * I, u[3] = f * R + h * N + p * P, u[6] = f * M + h * U + p * X, u[1] = v * C + _ * w + S * I, u[4] = v * R + _ * N + S * P, u[7] = v * M + _ * U + S * X, u[2] = E * C + x * w + A * I, u[5] = E * R + x * N + A * P, u[8] = E * M + x * U + A * X, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const e = this.elements, t = e[0], i = e[1], s = e[2], u = e[3], f = e[4], h = e[5], p = e[6], v = e[7], _ = e[8];
    return t * f * _ - t * h * v - i * u * _ + i * h * p + s * u * v - s * f * p;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  invert() {
    const e = this.elements, t = e[0], i = e[1], s = e[2], u = e[3], f = e[4], h = e[5], p = e[6], v = e[7], _ = e[8], S = _ * f - h * v, E = h * p - _ * u, x = v * u - f * p, A = t * S + i * E + s * x;
    if (A === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const C = 1 / A;
    return e[0] = S * C, e[1] = (s * v - _ * i) * C, e[2] = (h * i - s * f) * C, e[3] = E * C, e[4] = (_ * t - s * p) * C, e[5] = (s * u - h * t) * C, e[6] = x * C, e[7] = (i * p - v * t) * C, e[8] = (f * t - i * u) * C, this;
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  /**
   * Computes the normal matrix which is the inverse transpose of the upper
   * left 3x3 portion of the given 4x4 matrix.
   *
   * @param {Matrix4} matrix4 - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  /**
   * Transposes this matrix into the supplied array, and returns itself unchanged.
   *
   * @param {Array<number>} r - An array to store the transposed matrix elements.
   * @return {Matrix3} A reference to this matrix.
   */
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  /**
   * Sets the UV transform matrix from offset, repeat, rotation, and center.
   *
   * @param {number} tx - Offset x.
   * @param {number} ty - Offset y.
   * @param {number} sx - Repeat x.
   * @param {number} sy - Repeat y.
   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
   * @param {number} cx - Center x of rotation.
   * @param {number} cy - Center y of rotation
   * @return {Matrix3} A reference to this matrix.
   */
  setUvTransform(e, t, i, s, u, f, h) {
    const p = Math.cos(u), v = Math.sin(u);
    return this.set(
      i * p,
      i * v,
      -i * (p * f + v * h) + f + e,
      -s * v,
      s * p,
      -s * (-v * f + p * h) + h + t,
      0,
      0,
      1
    ), this;
  }
  /**
   * Scales this matrix with the given scalar values.
   *
   * @param {number} sx - The amount to scale in the X axis.
   * @param {number} sy - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  scale(e, t) {
    return this.premultiply(lx.makeScale(e, t)), this;
  }
  /**
   * Rotates this matrix by the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  rotate(e) {
    return this.premultiply(lx.makeRotation(-e)), this;
  }
  /**
   * Translates this matrix by the given scalar values.
   *
   * @param {number} tx - The amount to translate in the X axis.
   * @param {number} ty - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  translate(e, t) {
    return this.premultiply(lx.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  /**
   * Sets this matrix as a 2D translation transform.
   *
   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D rotational transformation.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  makeRotation(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      -i,
      0,
      i,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D scale transform.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix3} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(e) {
    const t = this.elements, i = e.elements;
    for (let s = 0; s < 9; s++)
      if (t[s] !== i[s]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix3} A reference to this matrix.
   */
  fromArray(e, t = 0) {
    for (let i = 0; i < 9; i++)
      this.elements[i] = e[i + t];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(e = [], t = 0) {
    const i = this.elements;
    return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix3} A clone of this instance.
   */
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const lx = /* @__PURE__ */ new en();
function WA(r) {
  for (let e = r.length - 1; e >= 0; --e)
    if (r[e] >= 65535) return !0;
  return !1;
}
const kC = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function Kd(r, e) {
  return new kC[r](e);
}
function jv(r) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", r);
}
function jA() {
  const r = jv("canvas");
  return r.style.display = "block", r;
}
const $b = {};
function Jd(r) {
  r in $b || ($b[r] = !0, console.warn(r));
}
function JC(r, e, t) {
  return new Promise(function(i, s) {
    function u() {
      switch (r.clientWaitSync(e, r.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case r.WAIT_FAILED:
          s();
          break;
        case r.TIMEOUT_EXPIRED:
          setTimeout(u, t);
          break;
        default:
          i();
      }
    }
    setTimeout(u, t);
  });
}
const e1 = /* @__PURE__ */ new en().set(
  0.4123908,
  0.3575843,
  0.1804808,
  0.212639,
  0.7151687,
  0.0721923,
  0.0193308,
  0.1191948,
  0.9505322
), t1 = /* @__PURE__ */ new en().set(
  3.2409699,
  -1.5373832,
  -0.4986108,
  -0.9692436,
  1.8759675,
  0.0415551,
  0.0556301,
  -0.203977,
  1.0569715
);
function $C() {
  const r = {
    enabled: !0,
    workingColorSpace: ju,
    /**
     * Implementations of supported color spaces.
     *
     * Required:
     *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
     *	- whitePoint: reference white [ x y ]
     *	- transfer: transfer function (pre-defined)
     *	- toXYZ: Matrix3 RGB to XYZ transform
     *	- fromXYZ: Matrix3 XYZ to RGB transform
     *	- luminanceCoefficients: RGB luminance coefficients
     *
     * Optional:
     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
     *
     * Reference:
     * - https://www.russellcottrell.com/photo/matrixCalculator.htm
     */
    spaces: {},
    convert: function(s, u, f) {
      return this.enabled === !1 || u === f || !u || !f || (this.spaces[u].transfer === Fn && (s.r = Il(s.r), s.g = Il(s.g), s.b = Il(s.b)), this.spaces[u].primaries !== this.spaces[f].primaries && (s.applyMatrix3(this.spaces[u].toXYZ), s.applyMatrix3(this.spaces[f].fromXYZ)), this.spaces[f].transfer === Fn && (s.r = $d(s.r), s.g = $d(s.g), s.b = $d(s.b))), s;
    },
    workingToColorSpace: function(s, u) {
      return this.convert(s, this.workingColorSpace, u);
    },
    colorSpaceToWorking: function(s, u) {
      return this.convert(s, u, this.workingColorSpace);
    },
    getPrimaries: function(s) {
      return this.spaces[s].primaries;
    },
    getTransfer: function(s) {
      return s === Bl ? Yv : this.spaces[s].transfer;
    },
    getLuminanceCoefficients: function(s, u = this.workingColorSpace) {
      return s.fromArray(this.spaces[u].luminanceCoefficients);
    },
    define: function(s) {
      Object.assign(this.spaces, s);
    },
    // Internal APIs
    _getMatrix: function(s, u, f) {
      return s.copy(this.spaces[u].toXYZ).multiply(this.spaces[f].fromXYZ);
    },
    _getDrawingBufferColorSpace: function(s) {
      return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace;
    },
    _getUnpackColorSpace: function(s = this.workingColorSpace) {
      return this.spaces[s].workingColorSpaceConfig.unpackColorSpace;
    },
    // Deprecated
    fromWorkingColorSpace: function(s, u) {
      return Jd("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."), r.workingToColorSpace(s, u);
    },
    toWorkingColorSpace: function(s, u) {
      return Jd("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."), r.colorSpaceToWorking(s, u);
    }
  }, e = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06], t = [0.2126, 0.7152, 0.0722], i = [0.3127, 0.329];
  return r.define({
    [ju]: {
      primaries: e,
      whitePoint: i,
      transfer: Yv,
      toXYZ: e1,
      fromXYZ: t1,
      luminanceCoefficients: t,
      workingColorSpaceConfig: { unpackColorSpace: Ia },
      outputColorSpaceConfig: { drawingBufferColorSpace: Ia }
    },
    [Ia]: {
      primaries: e,
      whitePoint: i,
      transfer: Fn,
      toXYZ: e1,
      fromXYZ: t1,
      luminanceCoefficients: t,
      outputColorSpaceConfig: { drawingBufferColorSpace: Ia }
    }
  }), r;
}
const An = /* @__PURE__ */ $C();
function Il(r) {
  return r < 0.04045 ? r * 0.0773993808 : Math.pow(r * 0.9478672986 + 0.0521327014, 2.4);
}
function $d(r) {
  return r < 31308e-7 ? r * 12.92 : 1.055 * Math.pow(r, 0.41666) - 0.055;
}
let bd;
class ZA {
  /**
   * Returns a data URI containing a representation of the given image.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
   * @param {string} [type='image/png'] - Indicates the image format.
   * @return {string} The data URI.
   */
  static getDataURL(e, t = "image/png") {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let i;
    if (e instanceof HTMLCanvasElement)
      i = e;
    else {
      bd === void 0 && (bd = jv("canvas")), bd.width = e.width, bd.height = e.height;
      const s = bd.getContext("2d");
      e instanceof ImageData ? s.putImageData(e, 0, 0) : s.drawImage(e, 0, 0, e.width, e.height), i = bd;
    }
    return i.toDataURL(t);
  }
  /**
   * Converts the given sRGB image data to linear color space.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
   * @return {HTMLCanvasElement|Object} The converted image.
   */
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = jv("canvas");
      t.width = e.width, t.height = e.height;
      const i = t.getContext("2d");
      i.drawImage(e, 0, 0, e.width, e.height);
      const s = i.getImageData(0, 0, e.width, e.height), u = s.data;
      for (let f = 0; f < u.length; f++)
        u[f] = Il(u[f] / 255) * 255;
      return i.putImageData(s, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let i = 0; i < t.length; i++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[i] = Math.floor(Il(t[i] / 255) * 255) : t[i] = Il(t[i]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let eD = 0;
class qu {
  /**
   * Constructs a new video texture.
   *
   * @param {any} [data=null] - The data definition of a texture.
   */
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: eD++ }), this.uuid = Qs(), this.data = e, this.dataReady = !0, this.version = 0;
  }
  /**
   * Returns the dimensions of the source into the given target vector.
   *
   * @param {(Vector2|Vector3)} target - The target object the result is written into.
   * @return {(Vector2|Vector3)} The dimensions of the source.
   */
  getSize(e) {
    const t = this.data;
    return t instanceof HTMLVideoElement ? e.set(t.videoWidth, t.videoHeight, 0) : t instanceof VideoFrame ? e.set(t.displayHeight, t.displayWidth, 0) : t !== null ? e.set(t.width, t.height, t.depth || 0) : e.set(0, 0, 0), e;
  }
  /**
   * When the property is set to `true`, the engine allocates the memory
   * for the texture (if necessary) and triggers the actual texture upload
   * to the GPU next time the source is used.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Serializes the source into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized source.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const i = {
      uuid: this.uuid,
      url: ""
    }, s = this.data;
    if (s !== null) {
      let u;
      if (Array.isArray(s)) {
        u = [];
        for (let f = 0, h = s.length; f < h; f++)
          s[f].isDataTexture ? u.push(ux(s[f].image)) : u.push(ux(s[f]));
      } else
        u = ux(s);
      i.url = u;
    }
    return t || (e.images[this.uuid] = i), i;
  }
}
function ux(r) {
  return typeof HTMLImageElement < "u" && r instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && r instanceof ImageBitmap ? ZA.getDataURL(r) : r.data ? {
    data: Array.from(r.data),
    width: r.width,
    height: r.height,
    type: r.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let tD = 0;
const cx = /* @__PURE__ */ new j();
class Ai extends Zo {
  /**
   * Constructs a new texture.
   *
   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e = Ai.DEFAULT_IMAGE, t = Ai.DEFAULT_MAPPING, i = Cr, s = Cr, u = na, f = Xo, h = Va, p = Dr, v = Ai.DEFAULT_ANISOTROPY, _ = Bl) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: tD++ }), this.uuid = Qs(), this.name = "", this.source = new qu(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = i, this.wrapT = s, this.magFilter = u, this.minFilter = f, this.anisotropy = v, this.format = h, this.internalFormat = null, this.type = p, this.offset = new ze(0, 0), this.repeat = new ze(1, 1), this.center = new ze(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new en(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = _, this.userData = {}, this.updateRanges = [], this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = !1, this.isArrayTexture = !!(e && e.depth && e.depth > 1), this.pmremVersion = 0;
  }
  /**
   * The width of the texture in pixels.
   */
  get width() {
    return this.source.getSize(cx).x;
  }
  /**
   * The height of the texture in pixels.
   */
  get height() {
    return this.source.getSize(cx).y;
  }
  /**
   * The depth of the texture in pixels.
   */
  get depth() {
    return this.source.getSize(cx).z;
  }
  /**
   * The image object holding the texture data.
   *
   * @type {?Object}
   */
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  /**
   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
   */
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  /**
   * Adds a range of data in the data texture to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Returns a new texture with copied values from this instance.
   *
   * @return {Texture} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given texture to this instance.
   *
   * @param {Texture} source - The texture to copy.
   * @return {Texture} A reference to this instance.
   */
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.renderTarget = e.renderTarget, this.isRenderTargetTexture = e.isRenderTargetTexture, this.isArrayTexture = e.isArrayTexture, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  /**
   * Sets this texture's properties based on `values`.
   * @param {Object} values - A container with texture parameters.
   */
  setValues(e) {
    for (const t in e) {
      const i = e[t];
      if (i === void 0) {
        console.warn(`THREE.Texture.setValues(): parameter '${t}' has value of undefined.`);
        continue;
      }
      const s = this[t];
      if (s === void 0) {
        console.warn(`THREE.Texture.setValues(): property '${t}' does not exist.`);
        continue;
      }
      s && i && s.isVector2 && i.isVector2 || s && i && s.isVector3 && i.isVector3 || s && i && s.isMatrix3 && i.isMatrix3 ? s.copy(i) : this[t] = i;
    }
  }
  /**
   * Serializes the texture into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized texture.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const i = {
      metadata: {
        version: 4.7,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (i.userData = this.userData), t || (e.textures[this.uuid] = i), i;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Transforms the given uv vector with the textures uv transformation matrix.
   *
   * @param {Vector2} uv - The uv vector.
   * @return {Vector2} The transformed uv vector.
   */
  transformUv(e) {
    if (this.mapping !== C_) return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case Fv:
          e.x = e.x - Math.floor(e.x);
          break;
        case Cr:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Gv:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case Fv:
          e.y = e.y - Math.floor(e.y);
          break;
        case Cr:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Gv:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  /**
   * Setting this property to `true` indicates the engine the texture
   * must be updated in the next render. This triggers a texture upload
   * to the GPU and ensures correct texture parameter configuration.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  /**
   * Setting this property to `true` indicates the engine the PMREM
   * must be regenerated.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
Ai.DEFAULT_IMAGE = null;
Ai.DEFAULT_MAPPING = C_;
Ai.DEFAULT_ANISOTROPY = 1;
class Un {
  /**
   * Constructs a new 4D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   * @param {number} [w=1] - The w value of this vector.
   */
  constructor(e = 0, t = 0, i = 0, s = 1) {
    Un.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = i, this.w = s;
  }
  /**
   * Alias for {@link Vector4#z}.
   *
   * @type {number}
   */
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  /**
   * Alias for {@link Vector4#w}.
   *
   * @type {number}
   */
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @param {number} w - The value of the w component.
   * @return {Vector4} A reference to this vector.
   */
  set(e, t, i, s) {
    return this.x = e, this.y = t, this.z = i, this.w = s, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector4} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setZ(e) {
    return this.z = e, this;
  }
  /**
   * Sets the vector's w component to the given value
   *
   * @param {number} w - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setW(e) {
    return this.w = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @param {number} value - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector4} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3|Vector4} v - The vector to copy.
   * @return {Vector4} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector4} v - The vector to add.
   * @return {Vector4} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector4} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector4} A reference to this vector.
   */
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector4} v - The vector to subtract.
   * @return {Vector4} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector4} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector4} v - The vector to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  /**
   * Multiplies this vector with the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  applyMatrix4(e) {
    const t = this.x, i = this.y, s = this.z, u = this.w, f = e.elements;
    return this.x = f[0] * t + f[4] * i + f[8] * s + f[12] * u, this.y = f[1] * t + f[5] * i + f[9] * s + f[13] * u, this.z = f[2] * t + f[6] * i + f[10] * s + f[14] * u, this.w = f[3] * t + f[7] * i + f[11] * s + f[15] * u, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector4} v - The vector to divide.
   * @return {Vector4} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this.w /= e.w, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector4} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * Sets the x, y and z components of this
   * vector to the quaternion's axis and w to the angle.
   *
   * @param {Quaternion} q - The Quaternion to set.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  /**
   * Sets the x, y and z components of this
   * vector to the axis of rotation and w to the angle.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromRotationMatrix(e) {
    let t, i, s, u;
    const p = e.elements, v = p[0], _ = p[4], S = p[8], E = p[1], x = p[5], A = p[9], C = p[2], R = p[6], M = p[10];
    if (Math.abs(_ - E) < 0.01 && Math.abs(S - C) < 0.01 && Math.abs(A - R) < 0.01) {
      if (Math.abs(_ + E) < 0.1 && Math.abs(S + C) < 0.1 && Math.abs(A + R) < 0.1 && Math.abs(v + x + M - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const N = (v + 1) / 2, U = (x + 1) / 2, I = (M + 1) / 2, P = (_ + E) / 4, X = (S + C) / 4, Y = (A + R) / 4;
      return N > U && N > I ? N < 0.01 ? (i = 0, s = 0.707106781, u = 0.707106781) : (i = Math.sqrt(N), s = P / i, u = X / i) : U > I ? U < 0.01 ? (i = 0.707106781, s = 0, u = 0.707106781) : (s = Math.sqrt(U), i = P / s, u = Y / s) : I < 0.01 ? (i = 0.707106781, s = 0.707106781, u = 0) : (u = Math.sqrt(I), i = X / u, s = Y / u), this.set(i, s, u, t), this;
    }
    let w = Math.sqrt((R - A) * (R - A) + (S - C) * (S - C) + (E - _) * (E - _));
    return Math.abs(w) < 1e-3 && (w = 1), this.x = (R - A) / w, this.y = (S - C) / w, this.z = (E - _) / w, this.w = Math.acos((v + x + M - 1) / 2), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this.w = t[15], this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  /**
   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
   * value, it is replaced by the corresponding value.
   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector4} min - The minimum x, y and z values.
   * @param {Vector4} max - The maximum x, y and z values in the desired range.
   * @return {Vector4} A reference to this vector.
   */
  clamp(e, t) {
    return this.x = Xt(this.x, e.x, t.x), this.y = Xt(this.y, e.y, t.y), this.z = Xt(this.z, e.z, t.z), this.w = Xt(this.w, e.w, t.w), this;
  }
  /**
   * If this vector's x, y, z or w values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y, z or w values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampScalar(e, t) {
    return this.x = Xt(this.x, e, t), this.y = Xt(this.y, e, t), this.z = Xt(this.z, e, t), this.w = Xt(this.w, e, t), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampLength(e, t) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Xt(i, e, t));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector4} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
   *
   * @return {Vector4} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector4} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector4} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector4} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector4} v1 - The first vector.
   * @param {Vector4} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerpVectors(e, t, i) {
    return this.x = e.x + (t.x - e.x) * i, this.y = e.y + (t.y - e.y) * i, this.z = e.z + (t.z - e.z) * i, this.w = e.w + (t.w - e.w) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector4} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector4} A reference to this vector.
   */
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector4} A reference to this vector.
   */
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class JE extends Zo {
  /**
   * Render target options.
   *
   * @typedef {Object} RenderTarget~Options
   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
   * @property {number} [magFilter=LinearFilter] - The mag filter.
   * @property {number} [minFilter=LinearFilter] - The min filter.
   * @property {number} [format=RGBAFormat] - The texture format.
   * @property {number} [type=UnsignedByteType] - The texture type.
   * @property {?string} [internalFormat=null] - The texture's internal format.
   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [anisotropy=1] - The texture's anisotropy value.
   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
   * @property {number} [samples=0] - The MSAA samples count.
   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
   * @property {number} [depth=1] - The texture depth.
   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
   */
  /**
   * Constructs a new render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = 1, i = {}) {
    super(), i = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: na,
      depthBuffer: !0,
      stencilBuffer: !1,
      resolveDepthBuffer: !0,
      resolveStencilBuffer: !0,
      depthTexture: null,
      samples: 0,
      count: 1,
      depth: 1,
      multiview: !1
    }, i), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = i.depth, this.scissor = new Un(0, 0, e, t), this.scissorTest = !1, this.viewport = new Un(0, 0, e, t);
    const s = { width: e, height: t, depth: i.depth }, u = new Ai(s);
    this.textures = [];
    const f = i.count;
    for (let h = 0; h < f; h++)
      this.textures[h] = u.clone(), this.textures[h].isRenderTargetTexture = !0, this.textures[h].renderTarget = this;
    this._setTextureOptions(i), this.depthBuffer = i.depthBuffer, this.stencilBuffer = i.stencilBuffer, this.resolveDepthBuffer = i.resolveDepthBuffer, this.resolveStencilBuffer = i.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = i.depthTexture, this.samples = i.samples, this.multiview = i.multiview;
  }
  _setTextureOptions(e = {}) {
    const t = {
      minFilter: na,
      generateMipmaps: !1,
      flipY: !1,
      internalFormat: null
    };
    e.mapping !== void 0 && (t.mapping = e.mapping), e.wrapS !== void 0 && (t.wrapS = e.wrapS), e.wrapT !== void 0 && (t.wrapT = e.wrapT), e.wrapR !== void 0 && (t.wrapR = e.wrapR), e.magFilter !== void 0 && (t.magFilter = e.magFilter), e.minFilter !== void 0 && (t.minFilter = e.minFilter), e.format !== void 0 && (t.format = e.format), e.type !== void 0 && (t.type = e.type), e.anisotropy !== void 0 && (t.anisotropy = e.anisotropy), e.colorSpace !== void 0 && (t.colorSpace = e.colorSpace), e.flipY !== void 0 && (t.flipY = e.flipY), e.generateMipmaps !== void 0 && (t.generateMipmaps = e.generateMipmaps), e.internalFormat !== void 0 && (t.internalFormat = e.internalFormat);
    for (let i = 0; i < this.textures.length; i++)
      this.textures[i].setValues(t);
  }
  /**
   * The texture representing the default color attachment.
   *
   * @type {Texture}
   */
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  set depthTexture(e) {
    this._depthTexture !== null && (this._depthTexture.renderTarget = null), e !== null && (e.renderTarget = this), this._depthTexture = e;
  }
  /**
   * Instead of saving the depth in a renderbuffer, a texture
   * can be used instead which is useful for further processing
   * e.g. in context of post-processing.
   *
   * @type {?DepthTexture}
   * @default null
   */
  get depthTexture() {
    return this._depthTexture;
  }
  /**
   * Sets the size of this render target.
   *
   * @param {number} width - The width.
   * @param {number} height - The height.
   * @param {number} [depth=1] - The depth.
   */
  setSize(e, t, i = 1) {
    if (this.width !== e || this.height !== t || this.depth !== i) {
      this.width = e, this.height = t, this.depth = i;
      for (let s = 0, u = this.textures.length; s < u; s++)
        this.textures[s].image.width = e, this.textures[s].image.height = t, this.textures[s].image.depth = i, this.textures[s].isArrayTexture = this.textures[s].image.depth > 1;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  /**
   * Returns a new render target with copied values from this instance.
   *
   * @return {RenderTarget} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the settings of the given render target. This is a structural copy so
   * no resources are shared between render targets after the copy. That includes
   * all MRT textures and the depth texture.
   *
   * @param {RenderTarget} source - The render target to copy.
   * @return {RenderTarget} A reference to this instance.
   */
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
    for (let t = 0, i = e.textures.length; t < i; t++) {
      this.textures[t] = e.textures[t].clone(), this.textures[t].isRenderTargetTexture = !0, this.textures[t].renderTarget = this;
      const s = Object.assign({}, e.textures[t].image);
      this.textures[t].source = new qu(s);
    }
    return this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.resolveDepthBuffer = e.resolveDepthBuffer, this.resolveStencilBuffer = e.resolveStencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires RenderTarget#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class jo extends JE {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = 1, i = {}) {
    super(e, t, i), this.isWebGLRenderTarget = !0;
  }
}
class B_ extends Ai {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e = null, t = 1, i = 1, s = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: i, depth: s }, this.magFilter = Ca, this.minFilter = Ca, this.wrapR = Cr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire data texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class nD extends jo {
  /**
   * Constructs a new array render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = 1, i = 1, s = {}) {
    super(e, t, s), this.isWebGLArrayRenderTarget = !0, this.depth = i, this.texture = new B_(null, e, t, i), this._setTextureOptions(s), this.texture.isRenderTargetTexture = !0;
  }
}
class P_ extends Ai {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e = null, t = 1, i = 1, s = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: i, depth: s }, this.magFilter = Ca, this.minFilter = Ca, this.wrapR = Cr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class iD extends jo {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = 1, i = 1, s = {}) {
    super(e, t, s), this.isWebGL3DRenderTarget = !0, this.depth = i, this.texture = new P_(null, e, t, i), this._setTextureOptions(s), this.texture.isRenderTargetTexture = !0;
  }
}
class Ga {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(e = new j(1 / 0, 1 / 0, 1 / 0), t = new j(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector3} min - The lower boundary of the box.
   * @param {Vector3} max - The upper boundary of the box.
   * @return {Box3} A reference to this bounding box.
   */
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<number>} array - An array holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t += 3)
      this.expandByPoint(to.fromArray(e, t));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, i = e.count; t < i; t++)
      this.expandByPoint(to.fromBufferAttribute(e, t));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
   * @return {Box3} A reference to this bounding box.
   */
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector3} center - The center of the box.
   * @param {Vector3} size - The x, y and z dimensions of the box.
   * @return {Box3} A reference to this bounding box.
   */
  setFromCenterAndSize(e, t) {
    const i = to.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  /**
   * Computes the world-axis-aligned bounding box for the given 3D object
   * (including its children), accounting for the object's, and children's,
   * world transforms. The function may result in a larger box than strictly necessary.
   *
   * @param {Object3D} object - The 3D object to compute the bounding box for.
   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
   * world-axis-aligned bounding box at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box3} box - The box to copy.
   * @return {Box3} A reference to this bounding box.
   */
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 3D.
   *
   * @return {Box3} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The size.
   */
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector3} point - The point that should be included by the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions. The depth of this box will be
   * expanded by the z component of the vector in both directions.
   *
   * @param {Vector3} vector - The vector that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  /**
   * Expands the boundaries of this box to include the given 3D object and
   * its children, accounting for the object's, and children's, world
   * transforms. The function may result in a larger box than strictly
   * necessary (unless the precise parameter is set to true).
   *
   * @param {Object3D} object - The 3D object that should expand the bounding box.
   * @param {boolean} precise - If set to `true`, the method expands the bounding box
   * as little as necessary at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const i = e.geometry;
    if (i !== void 0) {
      const u = i.getAttribute("position");
      if (t === !0 && u !== void 0 && e.isInstancedMesh !== !0)
        for (let f = 0, h = u.count; f < h; f++)
          e.isMesh === !0 ? e.getVertexPosition(f, to) : to.fromBufferAttribute(u, f), to.applyMatrix4(e.matrixWorld), this.expandByPoint(to);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), Ny.copy(e.boundingBox)) : (i.boundingBox === null && i.computeBoundingBox(), Ny.copy(i.boundingBox)), Ny.applyMatrix4(e.matrixWorld), this.union(Ny);
    }
    const s = e.children;
    for (let u = 0, f = s.length; u < f; u++)
      this.expandByObject(s[u], t);
    return this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y && e.z >= this.min.z && e.z <= this.max.z;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  /**
   * Returns a point as a proportion of this box's width, height and depth.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A point as a proportion of this box's width, height and depth.
   */
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y && e.max.z >= this.min.z && e.min.z <= this.max.z;
  }
  /**
   * Returns `true` if the given bounding sphere intersects with this bounding box.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
   */
  intersectsSphere(e) {
    return this.clampPoint(e.center, to), to.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  /**
   * Returns `true` if the given plane intersects with this bounding box.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether the given plane intersects with this bounding box.
   */
  intersectsPlane(e) {
    let t, i;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, i = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, i = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, i += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, i += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, i += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, i += e.normal.z * this.min.z), t <= -e.constant && i >= -e.constant;
  }
  /**
   * Returns `true` if the given triangle intersects with this bounding box.
   *
   * @param {Triangle} triangle - The triangle to test.
   * @return {boolean} Whether the given triangle intersects with this bounding box.
   */
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(hv), Oy.subVectors(this.max, hv), Td.subVectors(e.a, hv), Ad.subVectors(e.b, hv), Rd.subVectors(e.c, hv), Lu.subVectors(Ad, Td), zu.subVectors(Rd, Ad), kc.subVectors(Td, Rd);
    let t = [
      0,
      -Lu.z,
      Lu.y,
      0,
      -zu.z,
      zu.y,
      0,
      -kc.z,
      kc.y,
      Lu.z,
      0,
      -Lu.x,
      zu.z,
      0,
      -zu.x,
      kc.z,
      0,
      -kc.x,
      -Lu.y,
      Lu.x,
      0,
      -zu.y,
      zu.x,
      0,
      -kc.y,
      kc.x,
      0
    ];
    return !fx(t, Td, Ad, Rd, Oy) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !fx(t, Td, Ad, Rd, Oy)) ? !1 : (Ly.crossVectors(Lu, zu), t = [Ly.x, Ly.y, Ly.z], fx(t, Td, Ad, Rd, Oy));
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector3} point - The point to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(e) {
    return this.clampPoint(e, to).distanceTo(e);
  }
  /**
   * Returns a bounding sphere that encloses this bounding box.
   *
   * @param {Sphere} target - The target sphere that is used to store the method's result.
   * @return {Sphere} The bounding sphere that encloses this bounding box.
   */
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(to).length() * 0.5), e;
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box3} box - The bounding box to intersect with.
   * @return {Box3} A reference to this bounding box.
   */
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box3} box - The bounding box that will be unioned with this instance.
   * @return {Box3} A reference to this bounding box.
   */
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  /**
   * Transforms this bounding box by the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Box3} A reference to this bounding box.
   */
  applyMatrix4(e) {
    return this.isEmpty() ? this : (Dl[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), Dl[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), Dl[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), Dl[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), Dl[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), Dl[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), Dl[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), Dl[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(Dl), this);
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 3D space.
   *
   * @param {Vector3} offset - The offset that should be used to translate the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box3} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      min: this.min.toArray(),
      max: this.max.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @param {Object} json - The serialized json to set the box from.
   * @return {Box3} A reference to this bounding box.
   */
  fromJSON(e) {
    return this.min.fromArray(e.min), this.max.fromArray(e.max), this;
  }
}
const Dl = [
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j()
], to = /* @__PURE__ */ new j(), Ny = /* @__PURE__ */ new Ga(), Td = /* @__PURE__ */ new j(), Ad = /* @__PURE__ */ new j(), Rd = /* @__PURE__ */ new j(), Lu = /* @__PURE__ */ new j(), zu = /* @__PURE__ */ new j(), kc = /* @__PURE__ */ new j(), hv = /* @__PURE__ */ new j(), Oy = /* @__PURE__ */ new j(), Ly = /* @__PURE__ */ new j(), Jc = /* @__PURE__ */ new j();
function fx(r, e, t, i, s) {
  for (let u = 0, f = r.length - 3; u <= f; u += 3) {
    Jc.fromArray(r, u);
    const h = s.x * Math.abs(Jc.x) + s.y * Math.abs(Jc.y) + s.z * Math.abs(Jc.z), p = e.dot(Jc), v = t.dot(Jc), _ = i.dot(Jc);
    if (Math.max(-Math.max(p, v, _), Math.min(p, v, _)) > h)
      return !1;
  }
  return !0;
}
const aD = /* @__PURE__ */ new Ga(), dv = /* @__PURE__ */ new j(), hx = /* @__PURE__ */ new j();
class Da {
  /**
   * Constructs a new sphere.
   *
   * @param {Vector3} [center=(0,0,0)] - The center of the sphere
   * @param {number} [radius=-1] - The radius of the sphere.
   */
  constructor(e = new j(), t = -1) {
    this.isSphere = !0, this.center = e, this.radius = t;
  }
  /**
   * Sets the sphere's components by copying the given values.
   *
   * @param {Vector3} center - The center.
   * @param {number} radius - The radius.
   * @return {Sphere} A reference to this sphere.
   */
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  /**
   * Computes the minimum bounding sphere for list of points.
   * If the optional center point is given, it is used as the sphere's
   * center. Otherwise, the center of the axis-aligned bounding box
   * encompassing the points is calculated.
   *
   * @param {Array<Vector3>} points - A list of points in 3D space.
   * @param {Vector3} [optionalCenter] - The center of the sphere.
   * @return {Sphere} A reference to this sphere.
   */
  setFromPoints(e, t) {
    const i = this.center;
    t !== void 0 ? i.copy(t) : aD.setFromPoints(e).getCenter(i);
    let s = 0;
    for (let u = 0, f = e.length; u < f; u++)
      s = Math.max(s, i.distanceToSquared(e[u]));
    return this.radius = Math.sqrt(s), this;
  }
  /**
   * Copies the values of the given sphere to this instance.
   *
   * @param {Sphere} sphere - The sphere to copy.
   * @return {Sphere} A reference to this sphere.
   */
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  /**
   * Returns `true` if the sphere is empty (the radius set to a negative number).
   *
   * Spheres with a radius of `0` contain only their center point and are not
   * considered to be empty.
   *
   * @return {boolean} Whether this sphere is empty or not.
   */
  isEmpty() {
    return this.radius < 0;
  }
  /**
   * Makes this sphere empty which means in encloses a zero space in 3D.
   *
   * @return {Sphere} A reference to this sphere.
   */
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  /**
   * Returns `true` if this sphere contains the given point inclusive of
   * the surface of the sphere.
   *
   * @param {Vector3} point - The point to check.
   * @return {boolean} Whether this sphere contains the given point or not.
   */
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  /**
   * Returns the closest distance from the boundary of the sphere to the
   * given point. If the sphere contains the point, the distance will
   * be negative.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The distance to the point.
   */
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  /**
   * Returns `true` if this sphere intersects with the given one.
   *
   * @param {Sphere} sphere - The sphere to test.
   * @return {boolean} Whether this sphere intersects with the given one or not.
   */
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  /**
   * Returns `true` if this sphere intersects with the given box.
   *
   * @param {Box3} box - The box to test.
   * @return {boolean} Whether this sphere intersects with the given box or not.
   */
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  /**
   * Returns `true` if this sphere intersects with the given plane.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether this sphere intersects with the given plane or not.
   */
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  /**
   * Clamps a point within the sphere. If the point is outside the sphere, it
   * will clamp it to the closest point on the edge of the sphere. Points
   * already inside the sphere will not be affected.
   *
   * @param {Vector3} point - The plane to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(e, t) {
    const i = this.center.distanceToSquared(e);
    return t.copy(e), i > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  /**
   * Returns a bounding box that encloses this sphere.
   *
   * @param {Box3} target - The target box that is used to store the method's result.
   * @return {Box3} The bounding box that encloses this sphere.
   */
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  /**
   * Transforms this sphere with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Sphere} A reference to this sphere.
   */
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  /**
   * Translates the sphere's center by the given offset.
   *
   * @param {Vector3} offset - The offset.
   * @return {Sphere} A reference to this sphere.
   */
  translate(e) {
    return this.center.add(e), this;
  }
  /**
   * Expands the boundaries of this sphere to include the given point.
   *
   * @param {Vector3} point - The point to include.
   * @return {Sphere} A reference to this sphere.
   */
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    dv.subVectors(e, this.center);
    const t = dv.lengthSq();
    if (t > this.radius * this.radius) {
      const i = Math.sqrt(t), s = (i - this.radius) * 0.5;
      this.center.addScaledVector(dv, s / i), this.radius += s;
    }
    return this;
  }
  /**
   * Expands this sphere to enclose both the original sphere and the given sphere.
   *
   * @param {Sphere} sphere - The sphere to include.
   * @return {Sphere} A reference to this sphere.
   */
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (hx.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(dv.copy(e.center).add(hx)), this.expandByPoint(dv.copy(e.center).sub(hx))), this);
  }
  /**
   * Returns `true` if this sphere is equal with the given one.
   *
   * @param {Sphere} sphere - The sphere to test for equality.
   * @return {boolean} Whether this bounding sphere is equal with the given one.
   */
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  /**
   * Returns a new sphere with copied values from this instance.
   *
   * @return {Sphere} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      radius: this.radius,
      center: this.center.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @param {Object} json - The serialized json to set the sphere from.
   * @return {Box3} A reference to this bounding sphere.
   */
  fromJSON(e) {
    return this.radius = e.radius, this.center.fromArray(e.center), this;
  }
}
const wl = /* @__PURE__ */ new j(), dx = /* @__PURE__ */ new j(), zy = /* @__PURE__ */ new j(), Bu = /* @__PURE__ */ new j(), px = /* @__PURE__ */ new j(), By = /* @__PURE__ */ new j(), mx = /* @__PURE__ */ new j();
class Rf {
  /**
   * Constructs a new ray.
   *
   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
   */
  constructor(e = new j(), t = new j(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  /**
   * Sets the ray's components by copying the given values.
   *
   * @param {Vector3} origin - The origin.
   * @param {Vector3} direction - The direction.
   * @return {Ray} A reference to this ray.
   */
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  /**
   * Copies the values of the given ray to this instance.
   *
   * @param {Ray} ray - The ray to copy.
   * @return {Ray} A reference to this ray.
   */
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  /**
   * Returns a vector that is located at a given distance along this ray.
   *
   * @param {number} t - The distance along the ray to retrieve a position for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A position on the ray.
   */
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  /**
   * Adjusts the direction of the ray to point at the given vector in world space.
   *
   * @param {Vector3} v - The target position.
   * @return {Ray} A reference to this ray.
   */
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  /**
   * Shift the origin of this ray along its direction by the given distance.
   *
   * @param {number} t - The distance along the ray to interpolate.
   * @return {Ray} A reference to this ray.
   */
  recast(e) {
    return this.origin.copy(this.at(e, wl)), this;
  }
  /**
   * Returns the point along this ray that is closest to the given point.
   *
   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on this ray.
   */
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const i = t.dot(this.direction);
    return i < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, i);
  }
  /**
   * Returns the distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The distance.
   */
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  /**
   * Returns the squared distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The squared distance.
   */
  distanceSqToPoint(e) {
    const t = wl.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (wl.copy(this.origin).addScaledVector(this.direction, t), wl.distanceToSquared(e));
  }
  /**
   * Returns the squared distance between this ray and the given line segment.
   *
   * @param {Vector3} v0 - The start point of the line segment.
   * @param {Vector3} v1 - The end point of the line segment.
   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
   * @return {number} The squared distance.
   */
  distanceSqToSegment(e, t, i, s) {
    dx.copy(e).add(t).multiplyScalar(0.5), zy.copy(t).sub(e).normalize(), Bu.copy(this.origin).sub(dx);
    const u = e.distanceTo(t) * 0.5, f = -this.direction.dot(zy), h = Bu.dot(this.direction), p = -Bu.dot(zy), v = Bu.lengthSq(), _ = Math.abs(1 - f * f);
    let S, E, x, A;
    if (_ > 0)
      if (S = f * p - h, E = f * h - p, A = u * _, S >= 0)
        if (E >= -A)
          if (E <= A) {
            const C = 1 / _;
            S *= C, E *= C, x = S * (S + f * E + 2 * h) + E * (f * S + E + 2 * p) + v;
          } else
            E = u, S = Math.max(0, -(f * E + h)), x = -S * S + E * (E + 2 * p) + v;
        else
          E = -u, S = Math.max(0, -(f * E + h)), x = -S * S + E * (E + 2 * p) + v;
      else
        E <= -A ? (S = Math.max(0, -(-f * u + h)), E = S > 0 ? -u : Math.min(Math.max(-u, -p), u), x = -S * S + E * (E + 2 * p) + v) : E <= A ? (S = 0, E = Math.min(Math.max(-u, -p), u), x = E * (E + 2 * p) + v) : (S = Math.max(0, -(f * u + h)), E = S > 0 ? u : Math.min(Math.max(-u, -p), u), x = -S * S + E * (E + 2 * p) + v);
    else
      E = f > 0 ? -u : u, S = Math.max(0, -(f * E + h)), x = -S * S + E * (E + 2 * p) + v;
    return i && i.copy(this.origin).addScaledVector(this.direction, S), s && s.copy(dx).addScaledVector(zy, E), x;
  }
  /**
   * Intersects this ray with the given sphere, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectSphere(e, t) {
    wl.subVectors(e.center, this.origin);
    const i = wl.dot(this.direction), s = wl.dot(wl) - i * i, u = e.radius * e.radius;
    if (s > u) return null;
    const f = Math.sqrt(u - s), h = i - f, p = i + f;
    return p < 0 ? null : h < 0 ? this.at(p, t) : this.at(h, t);
  }
  /**
   * Returns `true` if this ray intersects with the given sphere.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @return {boolean} Whether this ray intersects with the given sphere or not.
   */
  intersectsSphere(e) {
    return e.radius < 0 ? !1 : this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  /**
   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
   * does not intersect with the plane.
   *
   * @param {Plane} plane - The plane to compute the distance to.
   * @return {?number} Whether this ray intersects with the given sphere or not.
   */
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const i = -(this.origin.dot(e.normal) + e.constant) / t;
    return i >= 0 ? i : null;
  }
  /**
   * Intersects this ray with the given plane, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Plane} plane - The plane to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectPlane(e, t) {
    const i = this.distanceToPlane(e);
    return i === null ? null : this.at(i, t);
  }
  /**
   * Returns `true` if this ray intersects with the given plane.
   *
   * @param {Plane} plane - The plane to intersect.
   * @return {boolean} Whether this ray intersects with the given plane or not.
   */
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  /**
   * Intersects this ray with the given bounding box, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Box3} box - The box to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectBox(e, t) {
    let i, s, u, f, h, p;
    const v = 1 / this.direction.x, _ = 1 / this.direction.y, S = 1 / this.direction.z, E = this.origin;
    return v >= 0 ? (i = (e.min.x - E.x) * v, s = (e.max.x - E.x) * v) : (i = (e.max.x - E.x) * v, s = (e.min.x - E.x) * v), _ >= 0 ? (u = (e.min.y - E.y) * _, f = (e.max.y - E.y) * _) : (u = (e.max.y - E.y) * _, f = (e.min.y - E.y) * _), i > f || u > s || ((u > i || isNaN(i)) && (i = u), (f < s || isNaN(s)) && (s = f), S >= 0 ? (h = (e.min.z - E.z) * S, p = (e.max.z - E.z) * S) : (h = (e.max.z - E.z) * S, p = (e.min.z - E.z) * S), i > p || h > s) || ((h > i || i !== i) && (i = h), (p < s || s !== s) && (s = p), s < 0) ? null : this.at(i >= 0 ? i : s, t);
  }
  /**
   * Returns `true` if this ray intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this ray intersects with the given box or not.
   */
  intersectsBox(e) {
    return this.intersectBox(e, wl) !== null;
  }
  /**
   * Intersects this ray with the given triangle, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Vector3} a - The first vertex of the triangle.
   * @param {Vector3} b - The second vertex of the triangle.
   * @param {Vector3} c - The third vertex of the triangle.
   * @param {boolean} backfaceCulling - Whether to use backface culling or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectTriangle(e, t, i, s, u) {
    px.subVectors(t, e), By.subVectors(i, e), mx.crossVectors(px, By);
    let f = this.direction.dot(mx), h;
    if (f > 0) {
      if (s) return null;
      h = 1;
    } else if (f < 0)
      h = -1, f = -f;
    else
      return null;
    Bu.subVectors(this.origin, e);
    const p = h * this.direction.dot(By.crossVectors(Bu, By));
    if (p < 0)
      return null;
    const v = h * this.direction.dot(px.cross(Bu));
    if (v < 0 || p + v > f)
      return null;
    const _ = -h * Bu.dot(mx);
    return _ < 0 ? null : this.at(_ / f, u);
  }
  /**
   * Transforms this ray with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix4 - The transformation matrix.
   * @return {Ray} A reference to this ray.
   */
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  /**
   * Returns `true` if this ray is equal with the given one.
   *
   * @param {Ray} ray - The ray to test for equality.
   * @return {boolean} Whether this ray is equal with the given one.
   */
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  /**
   * Returns a new ray with copied values from this instance.
   *
   * @return {Ray} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class qt {
  /**
   * Constructs a new 4x4 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   */
  constructor(e, t, i, s, u, f, h, p, v, _, S, E, x, A, C, R) {
    qt.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, i, s, u, f, h, p, v, _, S, E, x, A, C, R);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   * @return {Matrix4} A reference to this matrix.
   */
  set(e, t, i, s, u, f, h, p, v, _, S, E, x, A, C, R) {
    const M = this.elements;
    return M[0] = e, M[4] = t, M[8] = i, M[12] = s, M[1] = u, M[5] = f, M[9] = h, M[13] = p, M[2] = v, M[6] = _, M[10] = S, M[14] = E, M[3] = x, M[7] = A, M[11] = C, M[15] = R, this;
  }
  /**
   * Sets this matrix to the 4x4 identity matrix.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix4} A clone of this instance.
   */
  clone() {
    return new qt().fromArray(this.elements);
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix4} m - The matrix to copy.
   * @return {Matrix4} A reference to this matrix.
   */
  copy(e) {
    const t = this.elements, i = e.elements;
    return t[0] = i[0], t[1] = i[1], t[2] = i[2], t[3] = i[3], t[4] = i[4], t[5] = i[5], t[6] = i[6], t[7] = i[7], t[8] = i[8], t[9] = i[9], t[10] = i[10], t[11] = i[11], t[12] = i[12], t[13] = i[13], t[14] = i[14], t[15] = i[15], this;
  }
  /**
   * Copies the translation component of the given matrix
   * into this matrix's translation component.
   *
   * @param {Matrix4} m - The matrix to copy the translation component.
   * @return {Matrix4} A reference to this matrix.
   */
  copyPosition(e) {
    const t = this.elements, i = e.elements;
    return t[12] = i[12], t[13] = i[13], t[14] = i[14], this;
  }
  /**
   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  extractBasis(e, t, i) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
  }
  /**
   * Sets the given basis vectors to this matrix.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeBasis(e, t, i) {
    return this.set(
      e.x,
      t.x,
      i.x,
      0,
      e.y,
      t.y,
      i.y,
      0,
      e.z,
      t.z,
      i.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the rotation component of the given matrix
   * into this matrix's rotation component.
   *
   * Note: This method does not support reflection matrices.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  extractRotation(e) {
    const t = this.elements, i = e.elements, s = 1 / Cd.setFromMatrixColumn(e, 0).length(), u = 1 / Cd.setFromMatrixColumn(e, 1).length(), f = 1 / Cd.setFromMatrixColumn(e, 2).length();
    return t[0] = i[0] * s, t[1] = i[1] * s, t[2] = i[2] * s, t[3] = 0, t[4] = i[4] * u, t[5] = i[5] * u, t[6] = i[6] * u, t[7] = 0, t[8] = i[8] * f, t[9] = i[9] * f, t[10] = i[10] * f, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  /**
   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
   * the rotation specified by the given Euler angles. The rest of
   * the matrix is set to the identity. Depending on the {@link Euler#order},
   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
   * for a complete list.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromEuler(e) {
    const t = this.elements, i = e.x, s = e.y, u = e.z, f = Math.cos(i), h = Math.sin(i), p = Math.cos(s), v = Math.sin(s), _ = Math.cos(u), S = Math.sin(u);
    if (e.order === "XYZ") {
      const E = f * _, x = f * S, A = h * _, C = h * S;
      t[0] = p * _, t[4] = -p * S, t[8] = v, t[1] = x + A * v, t[5] = E - C * v, t[9] = -h * p, t[2] = C - E * v, t[6] = A + x * v, t[10] = f * p;
    } else if (e.order === "YXZ") {
      const E = p * _, x = p * S, A = v * _, C = v * S;
      t[0] = E + C * h, t[4] = A * h - x, t[8] = f * v, t[1] = f * S, t[5] = f * _, t[9] = -h, t[2] = x * h - A, t[6] = C + E * h, t[10] = f * p;
    } else if (e.order === "ZXY") {
      const E = p * _, x = p * S, A = v * _, C = v * S;
      t[0] = E - C * h, t[4] = -f * S, t[8] = A + x * h, t[1] = x + A * h, t[5] = f * _, t[9] = C - E * h, t[2] = -f * v, t[6] = h, t[10] = f * p;
    } else if (e.order === "ZYX") {
      const E = f * _, x = f * S, A = h * _, C = h * S;
      t[0] = p * _, t[4] = A * v - x, t[8] = E * v + C, t[1] = p * S, t[5] = C * v + E, t[9] = x * v - A, t[2] = -v, t[6] = h * p, t[10] = f * p;
    } else if (e.order === "YZX") {
      const E = f * p, x = f * v, A = h * p, C = h * v;
      t[0] = p * _, t[4] = C - E * S, t[8] = A * S + x, t[1] = S, t[5] = f * _, t[9] = -h * _, t[2] = -v * _, t[6] = x * S + A, t[10] = E - C * S;
    } else if (e.order === "XZY") {
      const E = f * p, x = f * v, A = h * p, C = h * v;
      t[0] = p * _, t[4] = -S, t[8] = v * _, t[1] = E * S + C, t[5] = f * _, t[9] = x * S - A, t[2] = A * S - x, t[6] = h * _, t[10] = C * S + E;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  /**
   * Sets the rotation component of this matrix to the rotation specified by
   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
   * The rest of the matrix is set to the identity.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromQuaternion(e) {
    return this.compose(sD, e, rD);
  }
  /**
   * Sets the rotation component of the transformation matrix, looking from `eye` towards
   * `target`, and oriented by the up-direction.
   *
   * @param {Vector3} eye - The eye vector.
   * @param {Vector3} target - The target vector.
   * @param {Vector3} up - The up vector.
   * @return {Matrix4} A reference to this matrix.
   */
  lookAt(e, t, i) {
    const s = this.elements;
    return js.subVectors(e, t), js.lengthSq() === 0 && (js.z = 1), js.normalize(), Pu.crossVectors(i, js), Pu.lengthSq() === 0 && (Math.abs(i.z) === 1 ? js.x += 1e-4 : js.z += 1e-4, js.normalize(), Pu.crossVectors(i, js)), Pu.normalize(), Py.crossVectors(js, Pu), s[0] = Pu.x, s[4] = Py.x, s[8] = js.x, s[1] = Pu.y, s[5] = Py.y, s[9] = js.y, s[2] = Pu.z, s[6] = Py.z, s[10] = js.z, this;
  }
  /**
   * Post-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  /**
   * Pre-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  /**
   * Multiples the given 4x4 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix4} a - The first matrix.
   * @param {Matrix4} b - The second matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyMatrices(e, t) {
    const i = e.elements, s = t.elements, u = this.elements, f = i[0], h = i[4], p = i[8], v = i[12], _ = i[1], S = i[5], E = i[9], x = i[13], A = i[2], C = i[6], R = i[10], M = i[14], w = i[3], N = i[7], U = i[11], I = i[15], P = s[0], X = s[4], Y = s[8], z = s[12], L = s[1], W = s[5], me = s[9], Q = s[13], oe = s[2], Se = s[6], B = s[10], K = s[14], q = s[3], se = s[7], le = s[11], Te = s[15];
    return u[0] = f * P + h * L + p * oe + v * q, u[4] = f * X + h * W + p * Se + v * se, u[8] = f * Y + h * me + p * B + v * le, u[12] = f * z + h * Q + p * K + v * Te, u[1] = _ * P + S * L + E * oe + x * q, u[5] = _ * X + S * W + E * Se + x * se, u[9] = _ * Y + S * me + E * B + x * le, u[13] = _ * z + S * Q + E * K + x * Te, u[2] = A * P + C * L + R * oe + M * q, u[6] = A * X + C * W + R * Se + M * se, u[10] = A * Y + C * me + R * B + M * le, u[14] = A * z + C * Q + R * K + M * Te, u[3] = w * P + N * L + U * oe + I * q, u[7] = w * X + N * W + U * Se + I * se, u[11] = w * Y + N * me + U * B + I * le, u[15] = w * z + N * Q + U * K + I * Te, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const e = this.elements, t = e[0], i = e[4], s = e[8], u = e[12], f = e[1], h = e[5], p = e[9], v = e[13], _ = e[2], S = e[6], E = e[10], x = e[14], A = e[3], C = e[7], R = e[11], M = e[15];
    return A * (+u * p * S - s * v * S - u * h * E + i * v * E + s * h * x - i * p * x) + C * (+t * p * x - t * v * E + u * f * E - s * f * x + s * v * _ - u * p * _) + R * (+t * v * S - t * h * x - u * f * S + i * f * x + u * h * _ - i * v * _) + M * (-s * h * _ - t * p * S + t * h * E + s * f * S - i * f * E + i * p * _);
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  /**
   * Sets the position component for this matrix from the given vector,
   * without affecting the rest of the matrix.
   *
   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
   * @param {number} y - The y component of the vector.
   * @param {number} z - The z component of the vector.
   * @return {Matrix4} A reference to this matrix.
   */
  setPosition(e, t, i) {
    const s = this.elements;
    return e.isVector3 ? (s[12] = e.x, s[13] = e.y, s[14] = e.z) : (s[12] = e, s[13] = t, s[14] = i), this;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  invert() {
    const e = this.elements, t = e[0], i = e[1], s = e[2], u = e[3], f = e[4], h = e[5], p = e[6], v = e[7], _ = e[8], S = e[9], E = e[10], x = e[11], A = e[12], C = e[13], R = e[14], M = e[15], w = S * R * v - C * E * v + C * p * x - h * R * x - S * p * M + h * E * M, N = A * E * v - _ * R * v - A * p * x + f * R * x + _ * p * M - f * E * M, U = _ * C * v - A * S * v + A * h * x - f * C * x - _ * h * M + f * S * M, I = A * S * p - _ * C * p - A * h * E + f * C * E + _ * h * R - f * S * R, P = t * w + i * N + s * U + u * I;
    if (P === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const X = 1 / P;
    return e[0] = w * X, e[1] = (C * E * u - S * R * u - C * s * x + i * R * x + S * s * M - i * E * M) * X, e[2] = (h * R * u - C * p * u + C * s * v - i * R * v - h * s * M + i * p * M) * X, e[3] = (S * p * u - h * E * u - S * s * v + i * E * v + h * s * x - i * p * x) * X, e[4] = N * X, e[5] = (_ * R * u - A * E * u + A * s * x - t * R * x - _ * s * M + t * E * M) * X, e[6] = (A * p * u - f * R * u - A * s * v + t * R * v + f * s * M - t * p * M) * X, e[7] = (f * E * u - _ * p * u + _ * s * v - t * E * v - f * s * x + t * p * x) * X, e[8] = U * X, e[9] = (A * S * u - _ * C * u - A * i * x + t * C * x + _ * i * M - t * S * M) * X, e[10] = (f * C * u - A * h * u + A * i * v - t * C * v - f * i * M + t * h * M) * X, e[11] = (_ * h * u - f * S * u - _ * i * v + t * S * v + f * i * x - t * h * x) * X, e[12] = I * X, e[13] = (_ * C * s - A * S * s + A * i * E - t * C * E - _ * i * R + t * S * R) * X, e[14] = (A * h * s - f * C * s - A * i * p + t * C * p + f * i * R - t * h * R) * X, e[15] = (f * S * s - _ * h * s + _ * i * p - t * S * p - f * i * E + t * h * E) * X, this;
  }
  /**
   * Multiplies the columns of this matrix by the given vector.
   *
   * @param {Vector3} v - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  scale(e) {
    const t = this.elements, i = e.x, s = e.y, u = e.z;
    return t[0] *= i, t[4] *= s, t[8] *= u, t[1] *= i, t[5] *= s, t[9] *= u, t[2] *= i, t[6] *= s, t[10] *= u, t[3] *= i, t[7] *= s, t[11] *= u, this;
  }
  /**
   * Gets the maximum scale value of the three axes.
   *
   * @return {number} The maximum scale.
   */
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], s = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, i, s));
  }
  /**
   * Sets this matrix as a translation transform from the given vector.
   *
   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @param {number} z - The amount to translate in the z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeTranslation(e, t, i) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      i,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the X axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationX(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -i,
      0,
      0,
      i,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Y axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationY(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      0,
      i,
      0,
      0,
      1,
      0,
      0,
      -i,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Z axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationZ(e) {
    const t = Math.cos(e), i = Math.sin(e);
    return this.set(
      t,
      -i,
      0,
      0,
      i,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the given axis by
   * the given angle.
   *
   * This is a somewhat controversial but mathematically sound alternative to
   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
   *
   * @param {Vector3} axis - The normalized rotation axis.
   * @param {number} angle - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationAxis(e, t) {
    const i = Math.cos(t), s = Math.sin(t), u = 1 - i, f = e.x, h = e.y, p = e.z, v = u * f, _ = u * h;
    return this.set(
      v * f + i,
      v * h - s * p,
      v * p + s * h,
      0,
      v * h + s * p,
      _ * h + i,
      _ * p - s * f,
      0,
      v * p - s * h,
      _ * p + s * f,
      u * p * p + i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a scale transformation.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @param {number} z - The amount to scale in the Z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeScale(e, t, i) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a shear transformation.
   *
   * @param {number} xy - The amount to shear X by Y.
   * @param {number} xz - The amount to shear X by Z.
   * @param {number} yx - The amount to shear Y by X.
   * @param {number} yz - The amount to shear Y by Z.
   * @param {number} zx - The amount to shear Z by X.
   * @param {number} zy - The amount to shear Z by Y.
   * @return {Matrix4} A reference to this matrix.
   */
  makeShear(e, t, i, s, u, f) {
    return this.set(
      1,
      i,
      u,
      0,
      e,
      1,
      f,
      0,
      t,
      s,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix to the transformation composed of the given position,
   * rotation (Quaternion) and scale.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  compose(e, t, i) {
    const s = this.elements, u = t._x, f = t._y, h = t._z, p = t._w, v = u + u, _ = f + f, S = h + h, E = u * v, x = u * _, A = u * S, C = f * _, R = f * S, M = h * S, w = p * v, N = p * _, U = p * S, I = i.x, P = i.y, X = i.z;
    return s[0] = (1 - (C + M)) * I, s[1] = (x + U) * I, s[2] = (A - N) * I, s[3] = 0, s[4] = (x - U) * P, s[5] = (1 - (E + M)) * P, s[6] = (R + w) * P, s[7] = 0, s[8] = (A + N) * X, s[9] = (R - w) * X, s[10] = (1 - (E + C)) * X, s[11] = 0, s[12] = e.x, s[13] = e.y, s[14] = e.z, s[15] = 1, this;
  }
  /**
   * Decomposes this matrix into its position, rotation and scale components
   * and provides the result in the given objects.
   *
   * Note: Not all matrices are decomposable in this way. For example, if an
   * object has a non-uniformly scaled parent, then the object's world matrix
   * may not be decomposable, and this method may not be appropriate.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  decompose(e, t, i) {
    const s = this.elements;
    let u = Cd.set(s[0], s[1], s[2]).length();
    const f = Cd.set(s[4], s[5], s[6]).length(), h = Cd.set(s[8], s[9], s[10]).length();
    this.determinant() < 0 && (u = -u), e.x = s[12], e.y = s[13], e.z = s[14], no.copy(this);
    const v = 1 / u, _ = 1 / f, S = 1 / h;
    return no.elements[0] *= v, no.elements[1] *= v, no.elements[2] *= v, no.elements[4] *= _, no.elements[5] *= _, no.elements[6] *= _, no.elements[8] *= S, no.elements[9] *= S, no.elements[10] *= S, t.setFromRotationMatrix(no), i.x = u, i.y = f, i.z = h, this;
  }
  /**
  	 * Creates a perspective projection matrix. This is used internally by
  	 * {@link PerspectiveCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makePerspective(e, t, i, s, u, f, h = Ks, p = !1) {
    const v = this.elements, _ = 2 * u / (t - e), S = 2 * u / (i - s), E = (t + e) / (t - e), x = (i + s) / (i - s);
    let A, C;
    if (p)
      A = u / (f - u), C = f * u / (f - u);
    else if (h === Ks)
      A = -(f + u) / (f - u), C = -2 * f * u / (f - u);
    else if (h === ap)
      A = -f / (f - u), C = -f * u / (f - u);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + h);
    return v[0] = _, v[4] = 0, v[8] = E, v[12] = 0, v[1] = 0, v[5] = S, v[9] = x, v[13] = 0, v[2] = 0, v[6] = 0, v[10] = A, v[14] = C, v[3] = 0, v[7] = 0, v[11] = -1, v[15] = 0, this;
  }
  /**
  	 * Creates a orthographic projection matrix. This is used internally by
  	 * {@link OrthographicCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makeOrthographic(e, t, i, s, u, f, h = Ks, p = !1) {
    const v = this.elements, _ = 2 / (t - e), S = 2 / (i - s), E = -(t + e) / (t - e), x = -(i + s) / (i - s);
    let A, C;
    if (p)
      A = 1 / (f - u), C = f / (f - u);
    else if (h === Ks)
      A = -2 / (f - u), C = -(f + u) / (f - u);
    else if (h === ap)
      A = -1 / (f - u), C = -u / (f - u);
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + h);
    return v[0] = _, v[4] = 0, v[8] = 0, v[12] = E, v[1] = 0, v[5] = S, v[9] = 0, v[13] = x, v[2] = 0, v[6] = 0, v[10] = A, v[14] = C, v[3] = 0, v[7] = 0, v[11] = 0, v[15] = 1, this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix4} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(e) {
    const t = this.elements, i = e.elements;
    for (let s = 0; s < 16; s++)
      if (t[s] !== i[s]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix4} A reference to this matrix.
   */
  fromArray(e, t = 0) {
    for (let i = 0; i < 16; i++)
      this.elements[i] = e[i + t];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(e = [], t = 0) {
    const i = this.elements;
    return e[t] = i[0], e[t + 1] = i[1], e[t + 2] = i[2], e[t + 3] = i[3], e[t + 4] = i[4], e[t + 5] = i[5], e[t + 6] = i[6], e[t + 7] = i[7], e[t + 8] = i[8], e[t + 9] = i[9], e[t + 10] = i[10], e[t + 11] = i[11], e[t + 12] = i[12], e[t + 13] = i[13], e[t + 14] = i[14], e[t + 15] = i[15], e;
  }
}
const Cd = /* @__PURE__ */ new j(), no = /* @__PURE__ */ new qt(), sD = /* @__PURE__ */ new j(0, 0, 0), rD = /* @__PURE__ */ new j(1, 1, 1), Pu = /* @__PURE__ */ new j(), Py = /* @__PURE__ */ new j(), js = /* @__PURE__ */ new j(), n1 = /* @__PURE__ */ new qt(), i1 = /* @__PURE__ */ new Fa();
class ks {
  /**
   * Constructs a new euler instance.
   *
   * @param {number} [x=0] - The angle of the x axis in radians.
   * @param {number} [y=0] - The angle of the y axis in radians.
   * @param {number} [z=0] - The angle of the z axis in radians.
   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
   */
  constructor(e = 0, t = 0, i = 0, s = ks.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = i, this._order = s;
  }
  /**
   * The angle of the x axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  /**
   * The angle of the y axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  /**
   * The angle of the z axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  /**
   * A string representing the order that the rotations are applied.
   *
   * @type {string}
   * @default 'XYZ'
   */
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  /**
   * Sets the Euler components.
   *
   * @param {number} x - The angle of the x axis in radians.
   * @param {number} y - The angle of the y axis in radians.
   * @param {number} z - The angle of the z axis in radians.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  set(e, t, i, s = this._order) {
    return this._x = e, this._y = t, this._z = i, this._order = s, this._onChangeCallback(), this;
  }
  /**
   * Returns a new Euler instance with copied values from this instance.
   *
   * @return {Euler} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  /**
   * Copies the values of the given Euler instance to this instance.
   *
   * @param {Euler} euler - The Euler instance to copy.
   * @return {Euler} A reference to this Euler instance.
   */
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a pure rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromRotationMatrix(e, t = this._order, i = !0) {
    const s = e.elements, u = s[0], f = s[4], h = s[8], p = s[1], v = s[5], _ = s[9], S = s[2], E = s[6], x = s[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(Xt(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._x = Math.atan2(-_, x), this._z = Math.atan2(-f, u)) : (this._x = Math.atan2(E, v), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-Xt(_, -1, 1)), Math.abs(_) < 0.9999999 ? (this._y = Math.atan2(h, x), this._z = Math.atan2(p, v)) : (this._y = Math.atan2(-S, u), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(Xt(E, -1, 1)), Math.abs(E) < 0.9999999 ? (this._y = Math.atan2(-S, x), this._z = Math.atan2(-f, v)) : (this._y = 0, this._z = Math.atan2(p, u));
        break;
      case "ZYX":
        this._y = Math.asin(-Xt(S, -1, 1)), Math.abs(S) < 0.9999999 ? (this._x = Math.atan2(E, x), this._z = Math.atan2(p, u)) : (this._x = 0, this._z = Math.atan2(-f, v));
        break;
      case "YZX":
        this._z = Math.asin(Xt(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._x = Math.atan2(-_, v), this._y = Math.atan2(-S, u)) : (this._x = 0, this._y = Math.atan2(h, x));
        break;
      case "XZY":
        this._z = Math.asin(-Xt(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._x = Math.atan2(E, v), this._y = Math.atan2(h, u)) : (this._x = Math.atan2(-_, x), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, i === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a normalized quaternion.
   *
   * @param {Quaternion} q - A normalized Quaternion.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromQuaternion(e, t, i) {
    return n1.makeRotationFromQuaternion(e), this.setFromRotationMatrix(n1, t, i);
  }
  /**
   * Sets the angles of this Euler instance from the given vector.
   *
   * @param {Vector3} v - The vector.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  /**
   * Resets the euler angle with a new order by creating a quaternion from this
   * euler angle and then setting this euler angle with the quaternion and the
   * new order.
   *
   * Warning: This discards revolution information.
   *
   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  reorder(e) {
    return i1.setFromEuler(this), this.setFromQuaternion(i1, e);
  }
  /**
   * Returns `true` if this Euler instance is equal with the given one.
   *
   * @param {Euler} euler - The Euler instance to test for equality.
   * @return {boolean} Whether this Euler instance is equal with the given one.
   */
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  /**
   * Sets this Euler instance's components to values from the given array. The first three
   * entries of the array are assign to the x,y and z components. An optional fourth entry
   * defines the Euler order.
   *
   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
   * @return {Euler} A reference to this Euler instance.
   */
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this Euler instance to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number,number,number,string>} The Euler components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
ks.DEFAULT_ORDER = "XYZ";
class rp {
  /**
   * Constructs a new layers instance, with membership
   * initially set to layer `0`.
   */
  constructor() {
    this.mask = 1;
  }
  /**
   * Sets membership to the given layer, and remove membership all other layers.
   *
   * @param {number} layer - The layer to set.
   */
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  /**
   * Adds membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  /**
   * Adds membership to all layers.
   */
  enableAll() {
    this.mask = -1;
  }
  /**
   * Toggles the membership of the given layer.
   *
   * @param {number} layer - The layer to toggle.
   */
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  /**
   * Removes membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  /**
   * Removes the membership from all layers.
   */
  disableAll() {
    this.mask = 0;
  }
  /**
   * Returns `true` if this and the given layers object have at least one
   * layer in common.
   *
   * @param {Layers} layers - The layers to test.
   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
   */
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  /**
   * Returns `true` if the given layer is enabled.
   *
   * @param {number} layer - The layer to test.
   * @return {boolean } Whether the given layer is enabled or not.
   */
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let oD = 0;
const a1 = /* @__PURE__ */ new j(), Dd = /* @__PURE__ */ new Fa(), Ul = /* @__PURE__ */ new qt(), Hy = /* @__PURE__ */ new j(), pv = /* @__PURE__ */ new j(), lD = /* @__PURE__ */ new j(), uD = /* @__PURE__ */ new Fa(), s1 = /* @__PURE__ */ new j(1, 0, 0), r1 = /* @__PURE__ */ new j(0, 1, 0), o1 = /* @__PURE__ */ new j(0, 0, 1), l1 = { type: "added" }, cD = { type: "removed" }, wd = { type: "childadded", child: null }, vx = { type: "childremoved", child: null };
class Nn extends Zo {
  /**
   * Constructs a new 3D object.
   */
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: oD++ }), this.uuid = Qs(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Nn.DEFAULT_UP.clone();
    const e = new j(), t = new ks(), i = new Fa(), s = new j(1, 1, 1);
    function u() {
      i.setFromEuler(t, !1);
    }
    function f() {
      t.setFromQuaternion(i, void 0, !1);
    }
    t._onChange(u), i._onChange(f), Object.defineProperties(this, {
      /**
       * Represents the object's local position.
       *
       * @name Object3D#position
       * @type {Vector3}
       * @default (0,0,0)
       */
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      /**
       * Represents the object's local rotation as Euler angles, in radians.
       *
       * @name Object3D#rotation
       * @type {Euler}
       * @default (0,0,0)
       */
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      /**
       * Represents the object's local rotation as Quaternions.
       *
       * @name Object3D#quaternion
       * @type {Quaternion}
       */
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      /**
       * Represents the object's local scale.
       *
       * @name Object3D#scale
       * @type {Vector3}
       * @default (1,1,1)
       */
      scale: {
        configurable: !0,
        enumerable: !0,
        value: s
      },
      /**
       * Represents the object's model-view matrix.
       *
       * @name Object3D#modelViewMatrix
       * @type {Matrix4}
       */
      modelViewMatrix: {
        value: new qt()
      },
      /**
       * Represents the object's normal matrix.
       *
       * @name Object3D#normalMatrix
       * @type {Matrix3}
       */
      normalMatrix: {
        value: new en()
      }
    }), this.matrix = new qt(), this.matrixWorld = new qt(), this.matrixAutoUpdate = Nn.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Nn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new rp(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.customDepthMaterial = void 0, this.customDistanceMaterial = void 0, this.userData = {};
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeShadow() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onAfterShadow() {
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onAfterRender() {
  }
  /**
   * Applies the given transformation matrix to the object and updates the object's position,
   * rotation and scale.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   */
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  /**
   * Applies a rotation represented by given the quaternion to the 3D object.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Object3D} A reference to this instance.
   */
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  /**
   * Sets the given rotation represented as an axis/angle couple to the 3D object.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   */
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  /**
   * Sets the given rotation represented as Euler angles to the 3D object.
   *
   * @param {Euler} euler - The Euler angles.
   */
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  /**
   * Sets the given rotation represented as rotation matrix to the 3D object.
   *
   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
   * a pure rotation matrix (i.e, unscaled).
   */
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  /**
   * Sets the given rotation represented as a Quaternion to the 3D object.
   *
   * @param {Quaternion} q - The Quaternion
   */
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  /**
   * Rotates the 3D object along an axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnAxis(e, t) {
    return Dd.setFromAxisAngle(e, t), this.quaternion.multiply(Dd), this;
  }
  /**
   * Rotates the 3D object along an axis in world space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnWorldAxis(e, t) {
    return Dd.setFromAxisAngle(e, t), this.quaternion.premultiply(Dd), this;
  }
  /**
   * Rotates the 3D object around its X axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateX(e) {
    return this.rotateOnAxis(s1, e);
  }
  /**
   * Rotates the 3D object around its Y axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateY(e) {
    return this.rotateOnAxis(r1, e);
  }
  /**
   * Rotates the 3D object around its Z axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateZ(e) {
    return this.rotateOnAxis(o1, e);
  }
  /**
   * Translate the 3D object by a distance along the given axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateOnAxis(e, t) {
    return a1.copy(e).applyQuaternion(this.quaternion), this.position.add(a1.multiplyScalar(t)), this;
  }
  /**
   * Translate the 3D object by a distance along its X-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateX(e) {
    return this.translateOnAxis(s1, e);
  }
  /**
   * Translate the 3D object by a distance along its Y-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateY(e) {
    return this.translateOnAxis(r1, e);
  }
  /**
   * Translate the 3D object by a distance along its Z-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateZ(e) {
    return this.translateOnAxis(o1, e);
  }
  /**
   * Converts the given vector from this 3D object's local space to world space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  /**
   * Converts the given vector from this 3D object's word space to local space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(Ul.copy(this.matrixWorld).invert());
  }
  /**
   * Rotates the object to face a point in world space.
   *
   * This method does not support objects having non-uniformly-scaled parent(s).
   *
   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
   * @param {number} [y] - The y coordinate in world space.
   * @param {number} [z] - The z coordinate in world space.
   */
  lookAt(e, t, i) {
    e.isVector3 ? Hy.copy(e) : Hy.set(e, t, i);
    const s = this.parent;
    this.updateWorldMatrix(!0, !1), pv.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Ul.lookAt(pv, Hy, this.up) : Ul.lookAt(Hy, pv, this.up), this.quaternion.setFromRotationMatrix(Ul), s && (Ul.extractRotation(s.matrixWorld), Dd.setFromRotationMatrix(Ul), this.quaternion.premultiply(Dd.invert()));
  }
  /**
   * Adds the given 3D object as a child to this 3D object. An arbitrary number of
   * objects may be added. Any current parent on an object passed in here will be
   * removed, since an object can have at most one parent.
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to add.
   * @return {Object3D} A reference to this instance.
   */
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent(l1), wd.child = e, this.dispatchEvent(wd), wd.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  /**
   * Removes the given 3D object as child from this 3D object.
   * An arbitrary number of objects may be removed.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @param {Object3D} object - The 3D object to remove.
   * @return {Object3D} A reference to this instance.
   */
  remove(e) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++)
        this.remove(arguments[i]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(cD), vx.child = e, this.dispatchEvent(vx), vx.child = null), this;
  }
  /**
   * Removes this 3D object from its current parent.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  /**
   * Removes all child objects.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  clear() {
    return this.remove(...this.children);
  }
  /**
   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to attach.
   * @return {Object3D} A reference to this instance.
   */
  attach(e) {
    return this.updateWorldMatrix(!0, !1), Ul.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Ul.multiply(e.parent.matrixWorld)), e.applyMatrix4(Ul), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(!1, !0), e.dispatchEvent(l1), wd.child = e, this.dispatchEvent(wd), wd.child = null, this;
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching ID.
   *
   * @param {number} id - The id.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching name.
   *
   * @param {string} name - The name.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByProperty(e, t) {
    if (this[e] === t) return this;
    for (let i = 0, s = this.children.length; i < s; i++) {
      const f = this.children[i].getObjectByProperty(e, t);
      if (f !== void 0)
        return f;
    }
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns all 3D objects with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @param {Array<Object3D>} result - The method stores the result in this array.
   * @return {Array<Object3D>} The found 3D objects.
   */
  getObjectsByProperty(e, t, i = []) {
    this[e] === t && i.push(this);
    const s = this.children;
    for (let u = 0, f = s.length; u < f; u++)
      s[u].getObjectsByProperty(e, t, i);
    return i;
  }
  /**
   * Returns a vector representing the position of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's position in world space.
   */
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  /**
   * Returns a Quaternion representing the position of the 3D object in world space.
   *
   * @param {Quaternion} target - The target Quaternion the result is stored to.
   * @return {Quaternion} The 3D object's rotation in world space.
   */
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(pv, e, lD), e;
  }
  /**
   * Returns a vector representing the scale of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's scale in world space.
   */
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(pv, uD, e), e;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  /**
   * Abstract method to get intersections between a casted ray and this
   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
   * implement this method in order to use raycasting.
   *
   * @abstract
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - An array holding the result of the method.
   */
  raycast() {
  }
  /**
   * Executes the callback on this 3D object and all descendants.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverse(e) {
    e(this);
    const t = this.children;
    for (let i = 0, s = t.length; i < s; i++)
      t[i].traverse(e);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
   * Descendants of invisible 3D objects are not traversed.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseVisible(e) {
    if (this.visible === !1) return;
    e(this);
    const t = this.children;
    for (let i = 0, s = t.length; i < s; i++)
      t[i].traverseVisible(e);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  /**
   * Updates the transformation matrix in local space by computing it from the current
   * position, rotation and scale values.
   */
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  /**
   * Updates the transformation matrix in world space of this 3D objects and its descendants.
   *
   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
   * local space. The computation of the local and world matrix can be controlled with the
   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
   *
   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
   */
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let i = 0, s = t.length; i < s; i++)
      t[i].updateMatrixWorld(e);
  }
  /**
   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
   * update of ancestor and descendant nodes.
   *
   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
   */
  updateWorldMatrix(e, t) {
    const i = this.parent;
    if (e === !0 && i !== null && i.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), t === !0) {
      const s = this.children;
      for (let u = 0, f = s.length; u < f; u++)
        s[u].updateWorldMatrix(!1, !0);
    }
  }
  /**
   * Serializes the 3D object into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized 3D object.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", i = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, i.metadata = {
      version: 4.7,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const s = {};
    s.uuid = this.uuid, s.type = this.type, this.name !== "" && (s.name = this.name), this.castShadow === !0 && (s.castShadow = !0), this.receiveShadow === !0 && (s.receiveShadow = !0), this.visible === !1 && (s.visible = !1), this.frustumCulled === !1 && (s.frustumCulled = !1), this.renderOrder !== 0 && (s.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (s.userData = this.userData), s.layers = this.layers.mask, s.matrix = this.matrix.toArray(), s.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (s.matrixAutoUpdate = !1), this.isInstancedMesh && (s.type = "InstancedMesh", s.count = this.count, s.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (s.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (s.type = "BatchedMesh", s.perObjectFrustumCulled = this.perObjectFrustumCulled, s.sortObjects = this.sortObjects, s.drawRanges = this._drawRanges, s.reservedRanges = this._reservedRanges, s.geometryInfo = this._geometryInfo.map((h) => ({
      ...h,
      boundingBox: h.boundingBox ? h.boundingBox.toJSON() : void 0,
      boundingSphere: h.boundingSphere ? h.boundingSphere.toJSON() : void 0
    })), s.instanceInfo = this._instanceInfo.map((h) => ({ ...h })), s.availableInstanceIds = this._availableInstanceIds.slice(), s.availableGeometryIds = this._availableGeometryIds.slice(), s.nextIndexStart = this._nextIndexStart, s.nextVertexStart = this._nextVertexStart, s.geometryCount = this._geometryCount, s.maxInstanceCount = this._maxInstanceCount, s.maxVertexCount = this._maxVertexCount, s.maxIndexCount = this._maxIndexCount, s.geometryInitialized = this._geometryInitialized, s.matricesTexture = this._matricesTexture.toJSON(e), s.indirectTexture = this._indirectTexture.toJSON(e), this._colorsTexture !== null && (s.colorsTexture = this._colorsTexture.toJSON(e)), this.boundingSphere !== null && (s.boundingSphere = this.boundingSphere.toJSON()), this.boundingBox !== null && (s.boundingBox = this.boundingBox.toJSON()));
    function u(h, p) {
      return h[p.uuid] === void 0 && (h[p.uuid] = p.toJSON(e)), p.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? s.background = this.background.toJSON() : this.background.isTexture && (s.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (s.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      s.geometry = u(e.geometries, this.geometry);
      const h = this.geometry.parameters;
      if (h !== void 0 && h.shapes !== void 0) {
        const p = h.shapes;
        if (Array.isArray(p))
          for (let v = 0, _ = p.length; v < _; v++) {
            const S = p[v];
            u(e.shapes, S);
          }
        else
          u(e.shapes, p);
      }
    }
    if (this.isSkinnedMesh && (s.bindMode = this.bindMode, s.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (u(e.skeletons, this.skeleton), s.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const h = [];
        for (let p = 0, v = this.material.length; p < v; p++)
          h.push(u(e.materials, this.material[p]));
        s.material = h;
      } else
        s.material = u(e.materials, this.material);
    if (this.children.length > 0) {
      s.children = [];
      for (let h = 0; h < this.children.length; h++)
        s.children.push(this.children[h].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      s.animations = [];
      for (let h = 0; h < this.animations.length; h++) {
        const p = this.animations[h];
        s.animations.push(u(e.animations, p));
      }
    }
    if (t) {
      const h = f(e.geometries), p = f(e.materials), v = f(e.textures), _ = f(e.images), S = f(e.shapes), E = f(e.skeletons), x = f(e.animations), A = f(e.nodes);
      h.length > 0 && (i.geometries = h), p.length > 0 && (i.materials = p), v.length > 0 && (i.textures = v), _.length > 0 && (i.images = _), S.length > 0 && (i.shapes = S), E.length > 0 && (i.skeletons = E), x.length > 0 && (i.animations = x), A.length > 0 && (i.nodes = A);
    }
    return i.object = s, i;
    function f(h) {
      const p = [];
      for (const v in h) {
        const _ = h[v];
        delete _.metadata, p.push(_);
      }
      return p;
    }
  }
  /**
   * Returns a new 3D object with copied values from this instance.
   *
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
   * @return {Object3D} A clone of this instance.
   */
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  /**
   * Copies the values of the given 3D object to this instance.
   *
   * @param {Object3D} source - The 3D object to copy.
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
   * @return {Object3D} A reference to this instance.
   */
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let i = 0; i < e.children.length; i++) {
        const s = e.children[i];
        this.add(s.clone());
      }
    return this;
  }
}
Nn.DEFAULT_UP = /* @__PURE__ */ new j(0, 1, 0);
Nn.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Nn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const io = /* @__PURE__ */ new j(), Nl = /* @__PURE__ */ new j(), gx = /* @__PURE__ */ new j(), Ol = /* @__PURE__ */ new j(), Ud = /* @__PURE__ */ new j(), Nd = /* @__PURE__ */ new j(), u1 = /* @__PURE__ */ new j(), yx = /* @__PURE__ */ new j(), _x = /* @__PURE__ */ new j(), Sx = /* @__PURE__ */ new j(), xx = /* @__PURE__ */ new Un(), Ex = /* @__PURE__ */ new Un(), Mx = /* @__PURE__ */ new Un();
class Cs {
  /**
   * Constructs a new triangle.
   *
   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
   */
  constructor(e = new j(), t = new j(), i = new j()) {
    this.a = e, this.b = t, this.c = i;
  }
  /**
   * Computes the normal vector of a triangle.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  static getNormal(e, t, i, s) {
    s.subVectors(i, t), io.subVectors(e, t), s.cross(io);
    const u = s.lengthSq();
    return u > 0 ? s.multiplyScalar(1 / Math.sqrt(u)) : s.set(0, 0, 0);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  static getBarycoord(e, t, i, s, u) {
    io.subVectors(s, t), Nl.subVectors(i, t), gx.subVectors(e, t);
    const f = io.dot(io), h = io.dot(Nl), p = io.dot(gx), v = Nl.dot(Nl), _ = Nl.dot(gx), S = f * v - h * h;
    if (S === 0)
      return u.set(0, 0, 0), null;
    const E = 1 / S, x = (v * p - h * _) * E, A = (f * _ - h * p) * E;
    return u.set(1 - x - A, A, x);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  static containsPoint(e, t, i, s) {
    return this.getBarycoord(e, t, i, s, Ol) === null ? !1 : Ol.x >= 0 && Ol.y >= 0 && Ol.x + Ol.y <= 1;
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} p1 - The first corner of the triangle.
   * @param {Vector3} p2 - The second corner of the triangle.
   * @param {Vector3} p3 - The third corner of the triangle.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  static getInterpolation(e, t, i, s, u, f, h, p) {
    return this.getBarycoord(e, t, i, s, Ol) === null ? (p.x = 0, p.y = 0, "z" in p && (p.z = 0), "w" in p && (p.w = 0), null) : (p.setScalar(0), p.addScaledVector(u, Ol.x), p.addScaledVector(f, Ol.y), p.addScaledVector(h, Ol.z), p);
  }
  /**
   * Computes the value barycentrically interpolated for the given attribute and indices.
   *
   * @param {BufferAttribute} attr - The attribute to interpolate.
   * @param {number} i1 - Index of first vertex.
   * @param {number} i2 - Index of second vertex.
   * @param {number} i3 - Index of third vertex.
   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The interpolated attribute value.
   */
  static getInterpolatedAttribute(e, t, i, s, u, f) {
    return xx.setScalar(0), Ex.setScalar(0), Mx.setScalar(0), xx.fromBufferAttribute(e, t), Ex.fromBufferAttribute(e, i), Mx.fromBufferAttribute(e, s), f.setScalar(0), f.addScaledVector(xx, u.x), f.addScaledVector(Ex, u.y), f.addScaledVector(Mx, u.z), f;
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  static isFrontFacing(e, t, i, s) {
    return io.subVectors(i, t), Nl.subVectors(e, t), io.cross(Nl).dot(s) < 0;
  }
  /**
   * Sets the triangle's vertices by copying the given values.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  set(e, t, i) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(i), this;
  }
  /**
   * Sets the triangle's vertices by copying the given array values.
   *
   * @param {Array<Vector3>} points - An array with 3D points.
   * @param {number} i0 - The array index representing the first corner of the triangle.
   * @param {number} i1 - The array index representing the second corner of the triangle.
   * @param {number} i2 - The array index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromPointsAndIndices(e, t, i, s) {
    return this.a.copy(e[t]), this.b.copy(e[i]), this.c.copy(e[s]), this;
  }
  /**
   * Sets the triangle's vertices by copying the given attribute values.
   *
   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
   * @param {number} i0 - The attribute index representing the first corner of the triangle.
   * @param {number} i1 - The attribute index representing the second corner of the triangle.
   * @param {number} i2 - The attribute index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromAttributeAndIndices(e, t, i, s) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, i), this.c.fromBufferAttribute(e, s), this;
  }
  /**
   * Returns a new triangle with copied values from this instance.
   *
   * @return {Triangle} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given triangle to this instance.
   *
   * @param {Triangle} triangle - The triangle to copy.
   * @return {Triangle} A reference to this triangle.
   */
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  /**
   * Computes the area of the triangle.
   *
   * @return {number} The triangle's area.
   */
  getArea() {
    return io.subVectors(this.c, this.b), Nl.subVectors(this.a, this.b), io.cross(Nl).length() * 0.5;
  }
  /**
   * Computes the midpoint of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's midpoint.
   */
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  /**
   * Computes the normal of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  getNormal(e) {
    return Cs.getNormal(this.a, this.b, this.c, e);
  }
  /**
   * Computes a plane the triangle lies within.
   *
   * @param {Plane} target - The target vector that is used to store the method's result.
   * @return {Plane} The plane the triangle lies within.
   */
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  getBarycoord(e, t) {
    return Cs.getBarycoord(e, this.a, this.b, this.c, t);
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  getInterpolation(e, t, i, s, u) {
    return Cs.getInterpolation(e, this.a, this.b, this.c, t, i, s, u);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  containsPoint(e) {
    return Cs.containsPoint(e, this.a, this.b, this.c);
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  isFrontFacing(e) {
    return Cs.isFrontFacing(this.a, this.b, this.c, e);
  }
  /**
   * Returns `true` if this triangle intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this triangle intersects with the given box or not.
   */
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  /**
   * Returns the closest point on the triangle to the given point.
   *
   * @param {Vector3} p - The point to compute the closest point for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the triangle.
   */
  closestPointToPoint(e, t) {
    const i = this.a, s = this.b, u = this.c;
    let f, h;
    Ud.subVectors(s, i), Nd.subVectors(u, i), yx.subVectors(e, i);
    const p = Ud.dot(yx), v = Nd.dot(yx);
    if (p <= 0 && v <= 0)
      return t.copy(i);
    _x.subVectors(e, s);
    const _ = Ud.dot(_x), S = Nd.dot(_x);
    if (_ >= 0 && S <= _)
      return t.copy(s);
    const E = p * S - _ * v;
    if (E <= 0 && p >= 0 && _ <= 0)
      return f = p / (p - _), t.copy(i).addScaledVector(Ud, f);
    Sx.subVectors(e, u);
    const x = Ud.dot(Sx), A = Nd.dot(Sx);
    if (A >= 0 && x <= A)
      return t.copy(u);
    const C = x * v - p * A;
    if (C <= 0 && v >= 0 && A <= 0)
      return h = v / (v - A), t.copy(i).addScaledVector(Nd, h);
    const R = _ * A - x * S;
    if (R <= 0 && S - _ >= 0 && x - A >= 0)
      return u1.subVectors(u, s), h = (S - _) / (S - _ + (x - A)), t.copy(s).addScaledVector(u1, h);
    const M = 1 / (R + C + E);
    return f = C * M, h = E * M, t.copy(i).addScaledVector(Ud, f).addScaledVector(Nd, h);
  }
  /**
   * Returns `true` if this triangle is equal with the given one.
   *
   * @param {Triangle} triangle - The triangle to test for equality.
   * @return {boolean} Whether this triangle is equal with the given one.
   */
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const KA = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Hu = { h: 0, s: 0, l: 0 }, Iy = { h: 0, s: 0, l: 0 };
function bx(r, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? r + (e - r) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? r + (e - r) * 6 * (2 / 3 - t) : r;
}
class Et {
  /**
   * Constructs a new color.
   *
   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
   * and that method is used throughout the rest of the documentation.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   */
  constructor(e, t, i) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, i);
  }
  /**
   * Sets the colors's components from the given values.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   * @return {Color} A reference to this color.
   */
  set(e, t, i) {
    if (t === void 0 && i === void 0) {
      const s = e;
      s && s.isColor ? this.copy(s) : typeof s == "number" ? this.setHex(s) : typeof s == "string" && this.setStyle(s);
    } else
      this.setRGB(e, t, i);
    return this;
  }
  /**
   * Sets the colors's components to the given scalar value.
   *
   * @param {number} scalar - The scalar value.
   * @return {Color} A reference to this color.
   */
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  /**
   * Sets this color from a hexadecimal value.
   *
   * @param {number} hex - The hexadecimal value.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHex(e, t = Ia) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, An.colorSpaceToWorking(this, t), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} r - Red channel value between `0.0` and `1.0`.
   * @param {number} g - Green channel value between `0.0` and `1.0`.
   * @param {number} b - Blue channel value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setRGB(e, t, i, s = An.workingColorSpace) {
    return this.r = e, this.g = t, this.b = i, An.colorSpaceToWorking(this, s), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHSL(e, t, i, s = An.workingColorSpace) {
    if (e = kE(e, 1), t = Xt(t, 0, 1), i = Xt(i, 0, 1), t === 0)
      this.r = this.g = this.b = i;
    else {
      const u = i <= 0.5 ? i * (1 + t) : i + t - i * t, f = 2 * i - u;
      this.r = bx(f, u, e + 1 / 3), this.g = bx(f, u, e), this.b = bx(f, u, e - 1 / 3);
    }
    return An.colorSpaceToWorking(this, s), this;
  }
  /**
   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
   * all 140 color names are supported).
   *
   * @param {string} style - Color as a CSS-style string.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setStyle(e, t = Ia) {
    function i(u) {
      u !== void 0 && parseFloat(u) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let s;
    if (s = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let u;
      const f = s[1], h = s[2];
      switch (f) {
        case "rgb":
        case "rgba":
          if (u = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))
            return i(u[4]), this.setRGB(
              Math.min(255, parseInt(u[1], 10)) / 255,
              Math.min(255, parseInt(u[2], 10)) / 255,
              Math.min(255, parseInt(u[3], 10)) / 255,
              t
            );
          if (u = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))
            return i(u[4]), this.setRGB(
              Math.min(100, parseInt(u[1], 10)) / 100,
              Math.min(100, parseInt(u[2], 10)) / 100,
              Math.min(100, parseInt(u[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (u = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(h))
            return i(u[4]), this.setHSL(
              parseFloat(u[1]) / 360,
              parseFloat(u[2]) / 100,
              parseFloat(u[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (s = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const u = s[1], f = u.length;
      if (f === 3)
        return this.setRGB(
          parseInt(u.charAt(0), 16) / 15,
          parseInt(u.charAt(1), 16) / 15,
          parseInt(u.charAt(2), 16) / 15,
          t
        );
      if (f === 6)
        return this.setHex(parseInt(u, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  /**
   * Sets this color from a color name. Faster than {@link Color#setStyle} if
   * you don't need the other CSS-style formats.
   *
   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
   * ```js
   * Color.NAMES.aliceblue // returns 0xF0F8FF
   * ```
   *
   * @param {string} style - The color name.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setColorName(e, t = Ia) {
    const i = KA[e.toLowerCase()];
    return i !== void 0 ? this.setHex(i, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  /**
   * Returns a new color with copied values from this instance.
   *
   * @return {Color} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  /**
   * Copies the values of the given color to this instance.
   *
   * @param {Color} color - The color to copy.
   * @return {Color} A reference to this color.
   */
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copySRGBToLinear(e) {
    return this.r = Il(e.r), this.g = Il(e.g), this.b = Il(e.b), this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copyLinearToSRGB(e) {
    return this.r = $d(e.r), this.g = $d(e.g), this.b = $d(e.b), this;
  }
  /**
   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  /**
   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  /**
   * Returns the hexadecimal value of this color.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {number} The hexadecimal value.
   */
  getHex(e = Ia) {
    return An.workingToColorSpace(Pa.copy(this), e), Math.round(Xt(Pa.r * 255, 0, 255)) * 65536 + Math.round(Xt(Pa.g * 255, 0, 255)) * 256 + Math.round(Xt(Pa.b * 255, 0, 255));
  }
  /**
   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The hexadecimal value as a string.
   */
  getHexString(e = Ia) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  /**
   * Converts the colors RGB values into the HSL format and stores them into the
   * given target object.
   *
   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {{h:number,s:number,l:number}} The HSL representation of this color.
   */
  getHSL(e, t = An.workingColorSpace) {
    An.workingToColorSpace(Pa.copy(this), t);
    const i = Pa.r, s = Pa.g, u = Pa.b, f = Math.max(i, s, u), h = Math.min(i, s, u);
    let p, v;
    const _ = (h + f) / 2;
    if (h === f)
      p = 0, v = 0;
    else {
      const S = f - h;
      switch (v = _ <= 0.5 ? S / (f + h) : S / (2 - f - h), f) {
        case i:
          p = (s - u) / S + (s < u ? 6 : 0);
          break;
        case s:
          p = (u - i) / S + 2;
          break;
        case u:
          p = (i - s) / S + 4;
          break;
      }
      p /= 6;
    }
    return e.h = p, e.s = v, e.l = _, e;
  }
  /**
   * Returns the RGB values of this color and stores them into the given target object.
   *
   * @param {Color} target - The target color that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} The RGB representation of this color.
   */
  getRGB(e, t = An.workingColorSpace) {
    return An.workingToColorSpace(Pa.copy(this), t), e.r = Pa.r, e.g = Pa.g, e.b = Pa.b, e;
  }
  /**
   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The CSS representation of this color.
   */
  getStyle(e = Ia) {
    An.workingToColorSpace(Pa.copy(this), e);
    const t = Pa.r, i = Pa.g, s = Pa.b;
    return e !== Ia ? `color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${s.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(i * 255)},${Math.round(s * 255)})`;
  }
  /**
   * Adds the given HSL values to this color's values.
   * Internally, this converts the color's RGB values to HSL, adds HSL
   * and then converts the color back to RGB.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @return {Color} A reference to this color.
   */
  offsetHSL(e, t, i) {
    return this.getHSL(Hu), this.setHSL(Hu.h + e, Hu.s + t, Hu.l + i);
  }
  /**
   * Adds the RGB values of the given color to the RGB values of this color.
   *
   * @param {Color} color - The color to add.
   * @return {Color} A reference to this color.
   */
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  /**
   * Adds the RGB values of the given colors and stores the result in this instance.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @return {Color} A reference to this color.
   */
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  /**
   * Adds the given scalar value to the RGB values of this color.
   *
   * @param {number} s - The scalar to add.
   * @return {Color} A reference to this color.
   */
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  /**
   * Subtracts the RGB values of the given color from the RGB values of this color.
   *
   * @param {Color} color - The color to subtract.
   * @return {Color} A reference to this color.
   */
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  /**
   * Multiplies the RGB values of the given color with the RGB values of this color.
   *
   * @param {Color} color - The color to multiply.
   * @return {Color} A reference to this color.
   */
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  /**
   * Multiplies the given scalar value with the RGB values of this color.
   *
   * @param {number} s - The scalar to multiply.
   * @return {Color} A reference to this color.
   */
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  /**
   * Linearly interpolates this color's RGB values toward the RGB values of the
   * given color. The alpha argument can be thought of as the ratio between
   * the two colors, where `0.0` is this color and `1.0` is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  /**
   * Linearly interpolates between the given colors and stores the result in this instance.
   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
   * is the first and `1.0` is the second color.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpColors(e, t, i) {
    return this.r = e.r + (t.r - e.r) * i, this.g = e.g + (t.g - e.g) * i, this.b = e.b + (t.b - e.b) * i, this;
  }
  /**
   * Linearly interpolates this color's HSL values toward the HSL values of the
   * given color. It differs from {@link Color#lerp} by not interpolating straight
   * from one color to the other, but instead going through all the hues in between
   * those two colors. The alpha argument can be thought of as the ratio between
   * the two colors, where 0.0 is this color and 1.0 is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpHSL(e, t) {
    this.getHSL(Hu), e.getHSL(Iy);
    const i = zv(Hu.h, Iy.h, t), s = zv(Hu.s, Iy.s, t), u = zv(Hu.l, Iy.l, t);
    return this.setHSL(i, s, u), this;
  }
  /**
   * Sets the color's RGB components from the given 3D vector.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Color} A reference to this color.
   */
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  /**
   * Transforms this color with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix.
   * @return {Color} A reference to this color.
   */
  applyMatrix3(e) {
    const t = this.r, i = this.g, s = this.b, u = e.elements;
    return this.r = u[0] * t + u[3] * i + u[6] * s, this.g = u[1] * t + u[4] * i + u[7] * s, this.b = u[2] * t + u[5] * i + u[8] * s, this;
  }
  /**
   * Returns `true` if this color is equal with the given one.
   *
   * @param {Color} c - The color to test for equality.
   * @return {boolean} Whether this bounding color is equal with the given one.
   */
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  /**
   * Sets this color's RGB components from the given array.
   *
   * @param {Array<number>} array - An array holding the RGB values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Color} A reference to this color.
   */
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  /**
   * Writes the RGB components of this color to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the color components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The color components.
   */
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  /**
   * Sets the components of this color from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding color data.
   * @param {number} index - The index into the attribute.
   * @return {Color} A reference to this color.
   */
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the color
   * as a hexadecimal value.
   *
   * @return {number} The hexadecimal value.
   */
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const Pa = /* @__PURE__ */ new Et();
Et.NAMES = KA;
let fD = 0;
class Xa extends Zo {
  /**
   * Constructs a new material.
   */
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: fD++ }), this.uuid = Qs(), this.name = "", this.type = "Material", this.blending = Sf, this.side = Vl, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = B0, this.blendDst = P0, this.blendEquation = Gu, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new Et(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Mf, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = xE, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = pf, this.stencilZFail = pf, this.stencilZPass = pf, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.allowOverride = !0, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  /**
   * Sets the alpha value to be used when running an alpha test. The material
   * will not be rendered if the opacity is lower than this value.
   *
   * @type {number}
   * @readonly
   * @default 0
   */
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  /**
   * An optional callback that is executed immediately before the material is used to render a 3D object.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Object3D} object - The 3D object.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * An optional callback that is executed immediately before the shader
   * program is compiled. This function is called with the shader source code
   * as a parameter. Useful for the modification of built-in materials.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}. The
   * recommended approach when customizing materials is to use `WebGPURenderer` with the new
   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
   *
   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
   * @param {WebGLRenderer} renderer - A reference to the renderer.
   */
  onBeforeCompile() {
  }
  /**
   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
   * shader or recompile the shader for this material as needed.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @return {string} The custom program cache key.
   */
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  /**
   * This method can be used to set default values from parameter objects.
   * It is a generic implementation so it can be used with different types
   * of materials.
   *
   * @param {Object} [values] - The material values to set.
   */
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const i = e[t];
        if (i === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const s = this[t];
        if (s === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        s && s.isColor ? s.set(i) : s && s.isVector3 && i && i.isVector3 ? s.copy(i) : this[t] = i;
      }
  }
  /**
   * Serializes the material into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized material.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const i = {
      metadata: {
        version: 4.7,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.color && this.color.isColor && (i.color = this.color.getHex()), this.roughness !== void 0 && (i.roughness = this.roughness), this.metalness !== void 0 && (i.metalness = this.metalness), this.sheen !== void 0 && (i.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (i.shininess = this.shininess), this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (i.dispersion = this.dispersion), this.iridescence !== void 0 && (i.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (i.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (i.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(e).uuid, i.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(e).uuid, i.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(e).uuid, i.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(e).uuid, i.normalMapType = this.normalMapType, i.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(e).uuid, i.displacementScale = this.displacementScale, i.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (i.combine = this.combine)), this.envMapRotation !== void 0 && (i.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (i.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (i.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (i.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (i.size = this.size), this.shadowSide !== null && (i.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation), this.blending !== Sf && (i.blending = this.blending), this.side !== Vl && (i.side = this.side), this.vertexColors === !0 && (i.vertexColors = !0), this.opacity < 1 && (i.opacity = this.opacity), this.transparent === !0 && (i.transparent = !0), this.blendSrc !== B0 && (i.blendSrc = this.blendSrc), this.blendDst !== P0 && (i.blendDst = this.blendDst), this.blendEquation !== Gu && (i.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha), this.depthFunc !== Mf && (i.depthFunc = this.depthFunc), this.depthTest === !1 && (i.depthTest = this.depthTest), this.depthWrite === !1 && (i.depthWrite = this.depthWrite), this.colorWrite === !1 && (i.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== xE && (i.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (i.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== pf && (i.stencilFail = this.stencilFail), this.stencilZFail !== pf && (i.stencilZFail = this.stencilZFail), this.stencilZPass !== pf && (i.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (i.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation), this.polygonOffset === !0 && (i.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth), this.dashSize !== void 0 && (i.dashSize = this.dashSize), this.gapSize !== void 0 && (i.gapSize = this.gapSize), this.scale !== void 0 && (i.scale = this.scale), this.dithering === !0 && (i.dithering = !0), this.alphaTest > 0 && (i.alphaTest = this.alphaTest), this.alphaHash === !0 && (i.alphaHash = !0), this.alphaToCoverage === !0 && (i.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (i.premultipliedAlpha = !0), this.forceSinglePass === !0 && (i.forceSinglePass = !0), this.wireframe === !0 && (i.wireframe = !0), this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (i.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (i.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (i.flatShading = !0), this.visible === !1 && (i.visible = !1), this.toneMapped === !1 && (i.toneMapped = !1), this.fog === !1 && (i.fog = !1), Object.keys(this.userData).length > 0 && (i.userData = this.userData);
    function s(u) {
      const f = [];
      for (const h in u) {
        const p = u[h];
        delete p.metadata, f.push(p);
      }
      return f;
    }
    if (t) {
      const u = s(e.textures), f = s(e.images);
      u.length > 0 && (i.textures = u), f.length > 0 && (i.images = f);
    }
    return i;
  }
  /**
   * Returns a new material with copied values from this instance.
   *
   * @return {Material} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given material to this instance.
   *
   * @param {Material} source - The material to copy.
   * @return {Material} A reference to this instance.
   */
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let i = null;
    if (t !== null) {
      const s = t.length;
      i = new Array(s);
      for (let u = 0; u !== s; ++u)
        i[u] = t[u].clone();
    }
    return this.clippingPlanes = i, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Material#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Setting this property to `true` indicates the engine the material
   * needs to be recompiled.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
class Qu extends Xa {
  /**
   * Constructs a new mesh basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Et(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new ks(), this.combine = ng, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const Pl = /* @__PURE__ */ hD();
function hD() {
  const r = new ArrayBuffer(4), e = new Float32Array(r), t = new Uint32Array(r), i = new Uint32Array(512), s = new Uint32Array(512);
  for (let p = 0; p < 256; ++p) {
    const v = p - 127;
    v < -27 ? (i[p] = 0, i[p | 256] = 32768, s[p] = 24, s[p | 256] = 24) : v < -14 ? (i[p] = 1024 >> -v - 14, i[p | 256] = 1024 >> -v - 14 | 32768, s[p] = -v - 1, s[p | 256] = -v - 1) : v <= 15 ? (i[p] = v + 15 << 10, i[p | 256] = v + 15 << 10 | 32768, s[p] = 13, s[p | 256] = 13) : v < 128 ? (i[p] = 31744, i[p | 256] = 64512, s[p] = 24, s[p | 256] = 24) : (i[p] = 31744, i[p | 256] = 64512, s[p] = 13, s[p | 256] = 13);
  }
  const u = new Uint32Array(2048), f = new Uint32Array(64), h = new Uint32Array(64);
  for (let p = 1; p < 1024; ++p) {
    let v = p << 13, _ = 0;
    for (; (v & 8388608) === 0; )
      v <<= 1, _ -= 8388608;
    v &= -8388609, _ += 947912704, u[p] = v | _;
  }
  for (let p = 1024; p < 2048; ++p)
    u[p] = 939524096 + (p - 1024 << 13);
  for (let p = 1; p < 31; ++p)
    f[p] = p << 23;
  f[31] = 1199570944, f[32] = 2147483648;
  for (let p = 33; p < 63; ++p)
    f[p] = 2147483648 + (p - 32 << 23);
  f[63] = 3347054592;
  for (let p = 1; p < 64; ++p)
    p !== 32 && (h[p] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: i,
    shiftTable: s,
    mantissaTable: u,
    exponentTable: f,
    offsetTable: h
  };
}
function As(r) {
  Math.abs(r) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), r = Xt(r, -65504, 65504), Pl.floatView[0] = r;
  const e = Pl.uint32View[0], t = e >> 23 & 511;
  return Pl.baseTable[t] + ((e & 8388607) >> Pl.shiftTable[t]);
}
function bv(r) {
  const e = r >> 10;
  return Pl.uint32View[0] = Pl.mantissaTable[Pl.offsetTable[e] + (r & 1023)] + Pl.exponentTable[e], Pl.floatView[0];
}
class dD {
  /**
   * Returns a half precision floating point value (FP16) from the given single
   * precision floating point value (FP32).
   *
   * @param {number} val - A single precision floating point value.
   * @return {number} The FP16 value.
   */
  static toHalfFloat(e) {
    return As(e);
  }
  /**
   * Returns a single precision floating point value (FP32) from the given half
   * precision floating point value (FP16).
   *
   * @param {number} val - A half precision floating point value.
   * @return {number} The FP32 value.
   */
  static fromHalfFloat(e) {
    return bv(e);
  }
}
const Gi = /* @__PURE__ */ new j(), Vy = /* @__PURE__ */ new ze();
let pD = 0;
class jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, Object.defineProperty(this, "id", { value: pD++ }), this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = i, this.usage = Wv, this.updateRanges = [], this.gpuType = Ds, this.version = 0;
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute
   * array data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the usage of this buffer attribute.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {BufferAttribute} A reference to this buffer attribute.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given buffer attribute to this instance.
   *
   * @param {BufferAttribute} source - The buffer attribute to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  /**
   * Copies a vector from the given buffer attribute to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this buffer attribute.
   * @param {BufferAttribute} attribute - The buffer attribute to copy from.
   * @param {number} index2 - The source index into the given buffer attribute.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyAt(e, t, i) {
    e *= this.itemSize, i *= t.itemSize;
    for (let s = 0, u = this.itemSize; s < u; s++)
      this.array[e + s] = t.array[i + s];
    return this;
  }
  /**
   * Copies the given array data into this buffer attribute.
   *
   * @param {(TypedArray|Array)} array - The array to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyArray(e) {
    return this.array.set(e), this;
  }
  /**
   * Applies the given 3x3 matrix to the given attribute. Works with
   * item size `2` and `3`.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, i = this.count; t < i; t++)
        Vy.fromBufferAttribute(this, t), Vy.applyMatrix3(e), this.setXY(t, Vy.x, Vy.y);
    else if (this.itemSize === 3)
      for (let t = 0, i = this.count; t < i; t++)
        Gi.fromBufferAttribute(this, t), Gi.applyMatrix3(e), this.setXYZ(t, Gi.x, Gi.y, Gi.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix4(e) {
    for (let t = 0, i = this.count; t < i; t++)
      Gi.fromBufferAttribute(this, t), Gi.applyMatrix4(e), this.setXYZ(t, Gi.x, Gi.y, Gi.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(e) {
    for (let t = 0, i = this.count; t < i; t++)
      Gi.fromBufferAttribute(this, t), Gi.applyNormalMatrix(e), this.setXYZ(t, Gi.x, Gi.y, Gi.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  transformDirection(e) {
    for (let t = 0, i = this.count; t < i; t++)
      Gi.fromBufferAttribute(this, t), Gi.transformDirection(e), this.setXYZ(t, Gi.x, Gi.y, Gi.z);
    return this;
  }
  /**
   * Sets the given array data in the buffer attribute.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this buffer attribute's array.
   * @return {BufferAttribute} A reference to this instance.
   */
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(e, t) {
    let i = this.array[e * this.itemSize + t];
    return this.normalized && (i = us(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setComponent(e, t, i) {
    return this.normalized && (i = rn(i, this.array)), this.array[e * this.itemSize + t] = i, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXY(e, t, i) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZ(e, t, i, s) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = s, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZW(e, t, i, s, u) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array), u = rn(u, this.array)), this.array[e + 0] = t, this.array[e + 1] = i, this.array[e + 2] = s, this.array[e + 3] = u, this;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the attribute array data to the GPU. Can be used to perform clean-up operations after
   * the upload when attribute data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {BufferAttribute} A reference to this instance.
   */
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * @return {BufferAttribute} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Wv && (e.usage = this.usage), e;
  }
}
class mD extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Int8Array(e), t, i);
  }
}
class vD extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Uint8Array(e), t, i);
  }
}
class gD extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Uint8ClampedArray(e), t, i);
  }
}
class yD extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Int16Array(e), t, i);
  }
}
class $E extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Uint16Array(e), t, i);
  }
}
class _D extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Int32Array(e), t, i);
  }
}
class eM extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Uint32Array(e), t, i);
  }
}
class SD extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Uint16Array(e), t, i), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = bv(this.array[e * this.itemSize]);
    return this.normalized && (t = us(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize] = As(t), this;
  }
  getY(e) {
    let t = bv(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = us(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 1] = As(t), this;
  }
  getZ(e) {
    let t = bv(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = us(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 2] = As(t), this;
  }
  getW(e) {
    let t = bv(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = us(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.array[e * this.itemSize + 3] = As(t), this;
  }
  setXY(e, t, i) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array)), this.array[e + 0] = As(t), this.array[e + 1] = As(i), this;
  }
  setXYZ(e, t, i, s) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array)), this.array[e + 0] = As(t), this.array[e + 1] = As(i), this.array[e + 2] = As(s), this;
  }
  setXYZW(e, t, i, s, u) {
    return e *= this.itemSize, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array), u = rn(u, this.array)), this.array[e + 0] = As(t), this.array[e + 1] = As(i), this.array[e + 2] = As(s), this.array[e + 3] = As(u), this;
  }
}
class At extends jn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i) {
    super(new Float32Array(e), t, i);
  }
}
let xD = 0;
const Rr = /* @__PURE__ */ new qt(), Tx = /* @__PURE__ */ new Nn(), Od = /* @__PURE__ */ new j(), Zs = /* @__PURE__ */ new Ga(), mv = /* @__PURE__ */ new Ga(), pa = /* @__PURE__ */ new j();
class on extends Zo {
  /**
   * Constructs a new geometry.
   */
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: xD++ }), this.uuid = Qs(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  /**
   * Returns the index of this geometry.
   *
   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
   */
  getIndex() {
    return this.index;
  }
  /**
   * Sets the given index to this geometry.
   *
   * @param {Array<number>|BufferAttribute} index - The index to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (WA(e) ? eM : $E)(e, 1) : this.index = e, this;
  }
  /**
   * Sets the given indirect attribute to this geometry.
   *
   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndirect(e) {
    return this.indirect = e, this;
  }
  /**
   * Returns the indirect attribute of this geometry.
   *
   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
   */
  getIndirect() {
    return this.indirect;
  }
  /**
   * Returns the buffer attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
   * Returns `undefined` if not attribute has been found.
   */
  getAttribute(e) {
    return this.attributes[e];
  }
  /**
   * Sets the given attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  /**
   * Deletes the attribute for the given name.
   *
   * @param {string} name - The attribute name to delete.
   * @return {BufferGeometry} A reference to this instance.
   */
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  /**
   * Returns `true` if this geometry has an attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {boolean} Whether this geometry has an attribute for the given name or not.
   */
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  /**
   * Adds a group to this geometry.
   *
   * @param {number} start - The first element in this draw call. That is the first
   * vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - Specifies how many vertices (or indices) are part of this group.
   * @param {number} [materialIndex=0] - The material array index to use.
   */
  addGroup(e, t, i = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: i
    });
  }
  /**
   * Clears all groups.
   */
  clearGroups() {
    this.groups = [];
  }
  /**
   * Sets the draw range for this geometry.
   *
   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
   * For indexed BufferGeometry, `count` is the number of indices to render.
   */
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  /**
   * Applies the given 4x4 transformation matrix to the geometry.
   *
   * @param {Matrix4} matrix - The matrix to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const i = this.attributes.normal;
    if (i !== void 0) {
      const u = new en().getNormalMatrix(e);
      i.applyNormalMatrix(u), i.needsUpdate = !0;
    }
    const s = this.attributes.tangent;
    return s !== void 0 && (s.transformDirection(e), s.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  /**
   * Applies the rotation represented by the Quaternion to the geometry.
   *
   * @param {Quaternion} q - The Quaternion to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyQuaternion(e) {
    return Rr.makeRotationFromQuaternion(e), this.applyMatrix4(Rr), this;
  }
  /**
   * Rotates the geometry about the X axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateX(e) {
    return Rr.makeRotationX(e), this.applyMatrix4(Rr), this;
  }
  /**
   * Rotates the geometry about the Y axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateY(e) {
    return Rr.makeRotationY(e), this.applyMatrix4(Rr), this;
  }
  /**
   * Rotates the geometry about the Z axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateZ(e) {
    return Rr.makeRotationZ(e), this.applyMatrix4(Rr), this;
  }
  /**
   * Translates the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#position} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x offset.
   * @param {number} y - The y offset.
   * @param {number} z - The z offset.
   * @return {BufferGeometry} A reference to this instance.
   */
  translate(e, t, i) {
    return Rr.makeTranslation(e, t, i), this.applyMatrix4(Rr), this;
  }
  /**
   * Scales the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#scale} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x scale.
   * @param {number} y - The y scale.
   * @param {number} z - The z scale.
   * @return {BufferGeometry} A reference to this instance.
   */
  scale(e, t, i) {
    return Rr.makeScale(e, t, i), this.applyMatrix4(Rr), this;
  }
  /**
   * Rotates the geometry to face a point in 3D space. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
   * real-time mesh rotation.
   *
   * @param {Vector3} vector - The target point.
   * @return {BufferGeometry} A reference to this instance.
   */
  lookAt(e) {
    return Tx.lookAt(e), Tx.updateMatrix(), this.applyMatrix4(Tx.matrix), this;
  }
  /**
   * Center the geometry based on its bounding box.
   *
   * @return {BufferGeometry} A reference to this instance.
   */
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Od).negate(), this.translate(Od.x, Od.y, Od.z), this;
  }
  /**
   * Defines a geometry by creating a `position` attribute based on the given array of points. The array
   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
   * set to `0`.
   *
   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
   * data from the array. The length of the array must match the vertex count.
   *
   * @param {Array<Vector2>|Array<Vector3>} points - The points.
   * @return {BufferGeometry} A reference to this instance.
   */
  setFromPoints(e) {
    const t = this.getAttribute("position");
    if (t === void 0) {
      const i = [];
      for (let s = 0, u = e.length; s < u; s++) {
        const f = e[s];
        i.push(f.x, f.y, f.z || 0);
      }
      this.setAttribute("position", new At(i, 3));
    } else {
      const i = Math.min(e.length, t.count);
      for (let s = 0; s < i; s++) {
        const u = e[s];
        t.setXYZ(s, u.x, u.y, u.z || 0);
      }
      e.length > t.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), t.needsUpdate = !0;
    }
    return this;
  }
  /**
   * Computes the bounding box of the geometry, and updates the `boundingBox` member.
   * The bounding box is not computed by the engine; it must be computed by your app.
   * You may need to recompute the bounding box if the geometry vertices are modified.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ga());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new j(-1 / 0, -1 / 0, -1 / 0),
        new j(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let i = 0, s = t.length; i < s; i++) {
          const u = t[i];
          Zs.setFromBufferAttribute(u), this.morphTargetsRelative ? (pa.addVectors(this.boundingBox.min, Zs.min), this.boundingBox.expandByPoint(pa), pa.addVectors(this.boundingBox.max, Zs.max), this.boundingBox.expandByPoint(pa)) : (this.boundingBox.expandByPoint(Zs.min), this.boundingBox.expandByPoint(Zs.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  /**
   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if the geometry vertices are modified.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Da());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new j(), 1 / 0);
      return;
    }
    if (e) {
      const i = this.boundingSphere.center;
      if (Zs.setFromBufferAttribute(e), t)
        for (let u = 0, f = t.length; u < f; u++) {
          const h = t[u];
          mv.setFromBufferAttribute(h), this.morphTargetsRelative ? (pa.addVectors(Zs.min, mv.min), Zs.expandByPoint(pa), pa.addVectors(Zs.max, mv.max), Zs.expandByPoint(pa)) : (Zs.expandByPoint(mv.min), Zs.expandByPoint(mv.max));
        }
      Zs.getCenter(i);
      let s = 0;
      for (let u = 0, f = e.count; u < f; u++)
        pa.fromBufferAttribute(e, u), s = Math.max(s, i.distanceToSquared(pa));
      if (t)
        for (let u = 0, f = t.length; u < f; u++) {
          const h = t[u], p = this.morphTargetsRelative;
          for (let v = 0, _ = h.count; v < _; v++)
            pa.fromBufferAttribute(h, v), p && (Od.fromBufferAttribute(e, v), pa.add(Od)), s = Math.max(s, i.distanceToSquared(pa));
        }
      this.boundingSphere.radius = Math.sqrt(s), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  /**
   * Calculates and adds a tangent attribute to this geometry.
   *
   * The computation is only supported for indexed geometries and if position, normal, and uv attributes
   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
   */
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const i = t.position, s = t.normal, u = t.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new jn(new Float32Array(4 * i.count), 4));
    const f = this.getAttribute("tangent"), h = [], p = [];
    for (let Y = 0; Y < i.count; Y++)
      h[Y] = new j(), p[Y] = new j();
    const v = new j(), _ = new j(), S = new j(), E = new ze(), x = new ze(), A = new ze(), C = new j(), R = new j();
    function M(Y, z, L) {
      v.fromBufferAttribute(i, Y), _.fromBufferAttribute(i, z), S.fromBufferAttribute(i, L), E.fromBufferAttribute(u, Y), x.fromBufferAttribute(u, z), A.fromBufferAttribute(u, L), _.sub(v), S.sub(v), x.sub(E), A.sub(E);
      const W = 1 / (x.x * A.y - A.x * x.y);
      isFinite(W) && (C.copy(_).multiplyScalar(A.y).addScaledVector(S, -x.y).multiplyScalar(W), R.copy(S).multiplyScalar(x.x).addScaledVector(_, -A.x).multiplyScalar(W), h[Y].add(C), h[z].add(C), h[L].add(C), p[Y].add(R), p[z].add(R), p[L].add(R));
    }
    let w = this.groups;
    w.length === 0 && (w = [{
      start: 0,
      count: e.count
    }]);
    for (let Y = 0, z = w.length; Y < z; ++Y) {
      const L = w[Y], W = L.start, me = L.count;
      for (let Q = W, oe = W + me; Q < oe; Q += 3)
        M(
          e.getX(Q + 0),
          e.getX(Q + 1),
          e.getX(Q + 2)
        );
    }
    const N = new j(), U = new j(), I = new j(), P = new j();
    function X(Y) {
      I.fromBufferAttribute(s, Y), P.copy(I);
      const z = h[Y];
      N.copy(z), N.sub(I.multiplyScalar(I.dot(z))).normalize(), U.crossVectors(P, z);
      const W = U.dot(p[Y]) < 0 ? -1 : 1;
      f.setXYZW(Y, N.x, N.y, N.z, W);
    }
    for (let Y = 0, z = w.length; Y < z; ++Y) {
      const L = w[Y], W = L.start, me = L.count;
      for (let Q = W, oe = W + me; Q < oe; Q += 3)
        X(e.getX(Q + 0)), X(e.getX(Q + 1)), X(e.getX(Q + 2));
    }
  }
  /**
   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
   * each vertex normal to be the average of the face normals of the faces that share that vertex.
   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
   * to be the same as the face normal.
   */
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let i = this.getAttribute("normal");
      if (i === void 0)
        i = new jn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", i);
      else
        for (let E = 0, x = i.count; E < x; E++)
          i.setXYZ(E, 0, 0, 0);
      const s = new j(), u = new j(), f = new j(), h = new j(), p = new j(), v = new j(), _ = new j(), S = new j();
      if (e)
        for (let E = 0, x = e.count; E < x; E += 3) {
          const A = e.getX(E + 0), C = e.getX(E + 1), R = e.getX(E + 2);
          s.fromBufferAttribute(t, A), u.fromBufferAttribute(t, C), f.fromBufferAttribute(t, R), _.subVectors(f, u), S.subVectors(s, u), _.cross(S), h.fromBufferAttribute(i, A), p.fromBufferAttribute(i, C), v.fromBufferAttribute(i, R), h.add(_), p.add(_), v.add(_), i.setXYZ(A, h.x, h.y, h.z), i.setXYZ(C, p.x, p.y, p.z), i.setXYZ(R, v.x, v.y, v.z);
        }
      else
        for (let E = 0, x = t.count; E < x; E += 3)
          s.fromBufferAttribute(t, E + 0), u.fromBufferAttribute(t, E + 1), f.fromBufferAttribute(t, E + 2), _.subVectors(f, u), S.subVectors(s, u), _.cross(S), i.setXYZ(E + 0, _.x, _.y, _.z), i.setXYZ(E + 1, _.x, _.y, _.z), i.setXYZ(E + 2, _.x, _.y, _.z);
      this.normalizeNormals(), i.needsUpdate = !0;
    }
  }
  /**
   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
   * correct lighting on the geometry surfaces.
   */
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, i = e.count; t < i; t++)
      pa.fromBufferAttribute(e, t), pa.normalize(), e.setXYZ(t, pa.x, pa.y, pa.z);
  }
  /**
   * Return a new non-index version of this indexed geometry. If the geometry
   * is already non-indexed, the method is a NOOP.
   *
   * @return {BufferGeometry} The non-indexed version of this indexed geometry.
   */
  toNonIndexed() {
    function e(h, p) {
      const v = h.array, _ = h.itemSize, S = h.normalized, E = new v.constructor(p.length * _);
      let x = 0, A = 0;
      for (let C = 0, R = p.length; C < R; C++) {
        h.isInterleavedBufferAttribute ? x = p[C] * h.data.stride + h.offset : x = p[C] * _;
        for (let M = 0; M < _; M++)
          E[A++] = v[x++];
      }
      return new jn(E, _, S);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new on(), i = this.index.array, s = this.attributes;
    for (const h in s) {
      const p = s[h], v = e(p, i);
      t.setAttribute(h, v);
    }
    const u = this.morphAttributes;
    for (const h in u) {
      const p = [], v = u[h];
      for (let _ = 0, S = v.length; _ < S; _++) {
        const E = v[_], x = e(E, i);
        p.push(x);
      }
      t.morphAttributes[h] = p;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const f = this.groups;
    for (let h = 0, p = f.length; h < p; h++) {
      const v = f[h];
      t.addGroup(v.start, v.count, v.materialIndex);
    }
    return t;
  }
  /**
   * Serializes the geometry into JSON.
   *
   * @return {Object} A JSON object representing the serialized geometry.
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const p = this.parameters;
      for (const v in p)
        p[v] !== void 0 && (e[v] = p[v]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const i = this.attributes;
    for (const p in i) {
      const v = i[p];
      e.data.attributes[p] = v.toJSON(e.data);
    }
    const s = {};
    let u = !1;
    for (const p in this.morphAttributes) {
      const v = this.morphAttributes[p], _ = [];
      for (let S = 0, E = v.length; S < E; S++) {
        const x = v[S];
        _.push(x.toJSON(e.data));
      }
      _.length > 0 && (s[p] = _, u = !0);
    }
    u && (e.data.morphAttributes = s, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const f = this.groups;
    f.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(f)));
    const h = this.boundingSphere;
    return h !== null && (e.data.boundingSphere = h.toJSON()), e;
  }
  /**
   * Returns a new geometry with copied values from this instance.
   *
   * @return {BufferGeometry} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given geometry to this instance.
   *
   * @param {BufferGeometry} source - The geometry to copy.
   * @return {BufferGeometry} A reference to this instance.
   */
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const i = e.index;
    i !== null && this.setIndex(i.clone());
    const s = e.attributes;
    for (const v in s) {
      const _ = s[v];
      this.setAttribute(v, _.clone(t));
    }
    const u = e.morphAttributes;
    for (const v in u) {
      const _ = [], S = u[v];
      for (let E = 0, x = S.length; E < x; E++)
        _.push(S[E].clone(t));
      this.morphAttributes[v] = _;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const f = e.groups;
    for (let v = 0, _ = f.length; v < _; v++) {
      const S = f[v];
      this.addGroup(S.start, S.count, S.materialIndex);
    }
    const h = e.boundingBox;
    h !== null && (this.boundingBox = h.clone());
    const p = e.boundingSphere;
    return p !== null && (this.boundingSphere = p.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires BufferGeometry#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const c1 = /* @__PURE__ */ new qt(), $c = /* @__PURE__ */ new Rf(), Fy = /* @__PURE__ */ new Da(), f1 = /* @__PURE__ */ new j(), Gy = /* @__PURE__ */ new j(), Xy = /* @__PURE__ */ new j(), qy = /* @__PURE__ */ new j(), Ax = /* @__PURE__ */ new j(), Yy = /* @__PURE__ */ new j(), h1 = /* @__PURE__ */ new j(), Wy = /* @__PURE__ */ new j();
class Xi extends Nn {
  /**
   * Constructs a new mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e = new on(), t = new Qu()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.count = 1, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const s = t[i[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let u = 0, f = s.length; u < f; u++) {
          const h = s[u].name || String(u);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = u;
        }
      }
    }
  }
  /**
   * Returns the local-space position of the vertex at the given index, taking into
   * account the current animation state of both morph targets and skinning.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * @return {Vector3} The vertex position in local space.
   */
  getVertexPosition(e, t) {
    const i = this.geometry, s = i.attributes.position, u = i.morphAttributes.position, f = i.morphTargetsRelative;
    t.fromBufferAttribute(s, e);
    const h = this.morphTargetInfluences;
    if (u && h) {
      Yy.set(0, 0, 0);
      for (let p = 0, v = u.length; p < v; p++) {
        const _ = h[p], S = u[p];
        _ !== 0 && (Ax.fromBufferAttribute(S, e), f ? Yy.addScaledVector(Ax, _) : Yy.addScaledVector(Ax.sub(t), _));
      }
      t.add(Yy);
    }
    return t;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, t) {
    const i = this.geometry, s = this.material, u = this.matrixWorld;
    s !== void 0 && (i.boundingSphere === null && i.computeBoundingSphere(), Fy.copy(i.boundingSphere), Fy.applyMatrix4(u), $c.copy(e.ray).recast(e.near), !(Fy.containsPoint($c.origin) === !1 && ($c.intersectSphere(Fy, f1) === null || $c.origin.distanceToSquared(f1) > (e.far - e.near) ** 2)) && (c1.copy(u).invert(), $c.copy(e.ray).applyMatrix4(c1), !(i.boundingBox !== null && $c.intersectsBox(i.boundingBox) === !1) && this._computeIntersections(e, t, $c)));
  }
  _computeIntersections(e, t, i) {
    let s;
    const u = this.geometry, f = this.material, h = u.index, p = u.attributes.position, v = u.attributes.uv, _ = u.attributes.uv1, S = u.attributes.normal, E = u.groups, x = u.drawRange;
    if (h !== null)
      if (Array.isArray(f))
        for (let A = 0, C = E.length; A < C; A++) {
          const R = E[A], M = f[R.materialIndex], w = Math.max(R.start, x.start), N = Math.min(h.count, Math.min(R.start + R.count, x.start + x.count));
          for (let U = w, I = N; U < I; U += 3) {
            const P = h.getX(U), X = h.getX(U + 1), Y = h.getX(U + 2);
            s = jy(this, M, e, i, v, _, S, P, X, Y), s && (s.faceIndex = Math.floor(U / 3), s.face.materialIndex = R.materialIndex, t.push(s));
          }
        }
      else {
        const A = Math.max(0, x.start), C = Math.min(h.count, x.start + x.count);
        for (let R = A, M = C; R < M; R += 3) {
          const w = h.getX(R), N = h.getX(R + 1), U = h.getX(R + 2);
          s = jy(this, f, e, i, v, _, S, w, N, U), s && (s.faceIndex = Math.floor(R / 3), t.push(s));
        }
      }
    else if (p !== void 0)
      if (Array.isArray(f))
        for (let A = 0, C = E.length; A < C; A++) {
          const R = E[A], M = f[R.materialIndex], w = Math.max(R.start, x.start), N = Math.min(p.count, Math.min(R.start + R.count, x.start + x.count));
          for (let U = w, I = N; U < I; U += 3) {
            const P = U, X = U + 1, Y = U + 2;
            s = jy(this, M, e, i, v, _, S, P, X, Y), s && (s.faceIndex = Math.floor(U / 3), s.face.materialIndex = R.materialIndex, t.push(s));
          }
        }
      else {
        const A = Math.max(0, x.start), C = Math.min(p.count, x.start + x.count);
        for (let R = A, M = C; R < M; R += 3) {
          const w = R, N = R + 1, U = R + 2;
          s = jy(this, f, e, i, v, _, S, w, N, U), s && (s.faceIndex = Math.floor(R / 3), t.push(s));
        }
      }
  }
}
function ED(r, e, t, i, s, u, f, h) {
  let p;
  if (e.side === cs ? p = i.intersectTriangle(f, u, s, !0, h) : p = i.intersectTriangle(s, u, f, e.side === Vl, h), p === null) return null;
  Wy.copy(h), Wy.applyMatrix4(r.matrixWorld);
  const v = t.ray.origin.distanceTo(Wy);
  return v < t.near || v > t.far ? null : {
    distance: v,
    point: Wy.clone(),
    object: r
  };
}
function jy(r, e, t, i, s, u, f, h, p, v) {
  r.getVertexPosition(h, Gy), r.getVertexPosition(p, Xy), r.getVertexPosition(v, qy);
  const _ = ED(r, e, t, i, Gy, Xy, qy, h1);
  if (_) {
    const S = new j();
    Cs.getBarycoord(h1, Gy, Xy, qy, S), s && (_.uv = Cs.getInterpolatedAttribute(s, h, p, v, S, new ze())), u && (_.uv1 = Cs.getInterpolatedAttribute(u, h, p, v, S, new ze())), f && (_.normal = Cs.getInterpolatedAttribute(f, h, p, v, S, new j()), _.normal.dot(i.direction) > 0 && _.normal.multiplyScalar(-1));
    const E = {
      a: h,
      b: p,
      c: v,
      normal: new j(),
      materialIndex: 0
    };
    Cs.getNormal(Gy, Xy, qy, E.normal), _.face = E, _.barycoord = S;
  }
  return _;
}
class Cf extends on {
  /**
   * Constructs a new box geometry.
   *
   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
   */
  constructor(e = 1, t = 1, i = 1, s = 1, u = 1, f = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: i,
      widthSegments: s,
      heightSegments: u,
      depthSegments: f
    };
    const h = this;
    s = Math.floor(s), u = Math.floor(u), f = Math.floor(f);
    const p = [], v = [], _ = [], S = [];
    let E = 0, x = 0;
    A("z", "y", "x", -1, -1, i, t, e, f, u, 0), A("z", "y", "x", 1, -1, i, t, -e, f, u, 1), A("x", "z", "y", 1, 1, e, i, t, s, f, 2), A("x", "z", "y", 1, -1, e, i, -t, s, f, 3), A("x", "y", "z", 1, -1, e, t, i, s, u, 4), A("x", "y", "z", -1, -1, e, t, -i, s, u, 5), this.setIndex(p), this.setAttribute("position", new At(v, 3)), this.setAttribute("normal", new At(_, 3)), this.setAttribute("uv", new At(S, 2));
    function A(C, R, M, w, N, U, I, P, X, Y, z) {
      const L = U / X, W = I / Y, me = U / 2, Q = I / 2, oe = P / 2, Se = X + 1, B = Y + 1;
      let K = 0, q = 0;
      const se = new j();
      for (let le = 0; le < B; le++) {
        const Te = le * W - Q;
        for (let we = 0; we < Se; we++) {
          const gt = we * L - me;
          se[C] = gt * w, se[R] = Te * N, se[M] = oe, v.push(se.x, se.y, se.z), se[C] = 0, se[R] = 0, se[M] = P > 0 ? 1 : -1, _.push(se.x, se.y, se.z), S.push(we / X), S.push(1 - le / Y), K += 1;
        }
      }
      for (let le = 0; le < Y; le++)
        for (let Te = 0; Te < X; Te++) {
          const we = E + Te + Se * le, gt = E + Te + Se * (le + 1), $e = E + (Te + 1) + Se * (le + 1), _e = E + (Te + 1) + Se * le;
          p.push(we, gt, _e), p.push(gt, $e, _e), q += 6;
        }
      h.addGroup(x, q, z), x += q, E += K;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {BoxGeometry} A new instance.
   */
  static fromJSON(e) {
    return new Cf(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function op(r) {
  const e = {};
  for (const t in r) {
    e[t] = {};
    for (const i in r[t]) {
      const s = r[t][i];
      s && (s.isColor || s.isMatrix3 || s.isMatrix4 || s.isVector2 || s.isVector3 || s.isVector4 || s.isTexture || s.isQuaternion) ? s.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][i] = null) : e[t][i] = s.clone() : Array.isArray(s) ? e[t][i] = s.slice() : e[t][i] = s;
    }
  }
  return e;
}
function ls(r) {
  const e = {};
  for (let t = 0; t < r.length; t++) {
    const i = op(r[t]);
    for (const s in i)
      e[s] = i[s];
  }
  return e;
}
function MD(r) {
  const e = [];
  for (let t = 0; t < r.length; t++)
    e.push(r[t].clone());
  return e;
}
function QA(r) {
  const e = r.getRenderTarget();
  return e === null ? r.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : An.workingColorSpace;
}
const kA = { clone: op, merge: ls };
var bD = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, TD = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class oo extends Xa {
  /**
   * Constructs a new shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = bD, this.fragmentShader = TD, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = op(e.uniforms), this.uniformsGroups = MD(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const s in this.uniforms) {
      const f = this.uniforms[s].value;
      f && f.isTexture ? t.uniforms[s] = {
        type: "t",
        value: f.toJSON(e).uuid
      } : f && f.isColor ? t.uniforms[s] = {
        type: "c",
        value: f.getHex()
      } : f && f.isVector2 ? t.uniforms[s] = {
        type: "v2",
        value: f.toArray()
      } : f && f.isVector3 ? t.uniforms[s] = {
        type: "v3",
        value: f.toArray()
      } : f && f.isVector4 ? t.uniforms[s] = {
        type: "v4",
        value: f.toArray()
      } : f && f.isMatrix3 ? t.uniforms[s] = {
        type: "m3",
        value: f.toArray()
      } : f && f.isMatrix4 ? t.uniforms[s] = {
        type: "m4",
        value: f.toArray()
      } : t.uniforms[s] = {
        value: f
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const i = {};
    for (const s in this.extensions)
      this.extensions[s] === !0 && (i[s] = !0);
    return Object.keys(i).length > 0 && (t.extensions = i), t;
  }
}
class H_ extends Nn {
  /**
   * Constructs a new camera.
   */
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new qt(), this.projectionMatrix = new qt(), this.projectionMatrixInverse = new qt(), this.coordinateSystem = Ks, this._reversedDepth = !1;
  }
  /**
   * The flag that indicates whether the camera uses a reversed depth buffer.
   *
   * @type {boolean}
   * @default false
   */
  get reversedDepth() {
    return this._reversedDepth;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * This method is overwritten since cameras have a different forward vector compared to other
   * 3D objects. A camera looks down its local, negative z-axis by default.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Iu = /* @__PURE__ */ new j(), d1 = /* @__PURE__ */ new ze(), p1 = /* @__PURE__ */ new ze();
class Ui extends H_ {
  /**
   * Constructs a new perspective camera.
   *
   * @param {number} [fov=50] - The vertical field of view.
   * @param {number} [aspect=1] - The aspect ratio.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(e = 50, t = 1, i = 0.1, s = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = i, this.far = s, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = sp * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Returns the focal length from the current {@link PerspectiveCamera#fov} and
   * {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The computed focal length.
   */
  getFocalLength() {
    const e = Math.tan(xf * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  /**
   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
   *
   * @return {number} The effective FOV.
   */
  getEffectiveFOV() {
    return sp * 2 * Math.atan(
      Math.tan(xf * 0.5 * this.fov) / this.zoom
    );
  }
  /**
   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  /**
   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
   */
  getViewBounds(e, t, i) {
    Iu.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), t.set(Iu.x, Iu.y).multiplyScalar(-e / Iu.z), Iu.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), i.set(Iu.x, Iu.y).multiplyScalar(-e / Iu.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
   * @returns {Vector2} The view size.
   */
  getViewSize(e, t) {
    return this.getViewBounds(e, d1, p1), t.subVectors(p1, d1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *```
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *```
   * then for each monitor you would call it like this:
   *```js
   * const w = 1920;
   * const h = 1080;
   * const fullWidth = w * 3;
   * const fullHeight = h * 2;
   *
   * // --A--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   * // --B--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   * // --C--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   * // --D--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   * // --E--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   * // --F--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   * ```
   *
   * Note there is no reason monitors have to be the same size or in a grid.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   */
  setViewOffset(e, t, i, s, u, f) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = s, this.view.width = u, this.view.height = f, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(xf * 0.5 * this.fov) / this.zoom, i = 2 * t, s = this.aspect * i, u = -0.5 * s;
    const f = this.view;
    if (this.view !== null && this.view.enabled) {
      const p = f.fullWidth, v = f.fullHeight;
      u += f.offsetX * s / p, t -= f.offsetY * i / v, s *= f.width / p, i *= f.height / v;
    }
    const h = this.filmOffset;
    h !== 0 && (u += e * h / this.getFilmWidth()), this.projectionMatrix.makePerspective(u, u + s, t, t - i, e, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Ld = -90, zd = 1;
class JA extends Nn {
  /**
   * Constructs a new cube camera.
   *
   * @param {number} near - The camera's near plane.
   * @param {number} far - The camera's far plane.
   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
   */
  constructor(e, t, i) {
    super(), this.type = "CubeCamera", this.renderTarget = i, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const s = new Ui(Ld, zd, e, t);
    s.layers = this.layers, this.add(s);
    const u = new Ui(Ld, zd, e, t);
    u.layers = this.layers, this.add(u);
    const f = new Ui(Ld, zd, e, t);
    f.layers = this.layers, this.add(f);
    const h = new Ui(Ld, zd, e, t);
    h.layers = this.layers, this.add(h);
    const p = new Ui(Ld, zd, e, t);
    p.layers = this.layers, this.add(p);
    const v = new Ui(Ld, zd, e, t);
    v.layers = this.layers, this.add(v);
  }
  /**
   * Must be called when the coordinate system of the cube camera is changed.
   */
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [i, s, u, f, h, p] = t;
    for (const v of t) this.remove(v);
    if (e === Ks)
      i.up.set(0, 1, 0), i.lookAt(1, 0, 0), s.up.set(0, 1, 0), s.lookAt(-1, 0, 0), u.up.set(0, 0, -1), u.lookAt(0, 1, 0), f.up.set(0, 0, 1), f.lookAt(0, -1, 0), h.up.set(0, 1, 0), h.lookAt(0, 0, 1), p.up.set(0, 1, 0), p.lookAt(0, 0, -1);
    else if (e === ap)
      i.up.set(0, -1, 0), i.lookAt(-1, 0, 0), s.up.set(0, -1, 0), s.lookAt(1, 0, 0), u.up.set(0, 0, 1), u.lookAt(0, 1, 0), f.up.set(0, 0, -1), f.lookAt(0, -1, 0), h.up.set(0, -1, 0), h.lookAt(0, 0, 1), p.up.set(0, -1, 0), p.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const v of t)
      this.add(v), v.updateMatrixWorld();
  }
  /**
   * Calling this method will render the given scene with the given renderer
   * into the cube render target of the camera.
   *
   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
   * @param {Scene} scene - The scene to render.
   */
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: i, activeMipmapLevel: s } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [u, f, h, p, v, _] = this.children, S = e.getRenderTarget(), E = e.getActiveCubeFace(), x = e.getActiveMipmapLevel(), A = e.xr.enabled;
    e.xr.enabled = !1;
    const C = i.texture.generateMipmaps;
    i.texture.generateMipmaps = !1, e.setRenderTarget(i, 0, s), e.render(t, u), e.setRenderTarget(i, 1, s), e.render(t, f), e.setRenderTarget(i, 2, s), e.render(t, h), e.setRenderTarget(i, 3, s), e.render(t, p), e.setRenderTarget(i, 4, s), e.render(t, v), i.texture.generateMipmaps = C, e.setRenderTarget(i, 5, s), e.render(t, _), e.setRenderTarget(S, E, x), e.xr.enabled = A, i.texture.needsPMREMUpdate = !0;
  }
}
class ag extends Ai {
  /**
   * Constructs a new cube texture.
   *
   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space value.
   */
  constructor(e = [], t = Fl, i, s, u, f, h, p, v, _) {
    super(e, t, i, s, u, f, h, p, v, _), this.isCubeTexture = !0, this.flipY = !1;
  }
  /**
   * Alias for {@link CubeTexture#image}.
   *
   * @type {Array<Image>}
   */
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class $A extends jo {
  /**
   * Constructs a new cube render target.
   *
   * @param {number} [size=1] - The size of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const i = { width: e, height: e, depth: 1 }, s = [i, i, i, i, i, i];
    this.texture = new ag(s), this._setTextureOptions(t), this.texture.isRenderTargetTexture = !0;
  }
  /**
   * Converts the given equirectangular texture to a cube map.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Texture} texture - The equirectangular texture.
   * @return {WebGLCubeRenderTarget} A reference to this cube render target.
   */
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const i = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, s = new Cf(5, 5, 5), u = new oo({
      name: "CubemapFromEquirect",
      uniforms: op(i.uniforms),
      vertexShader: i.vertexShader,
      fragmentShader: i.fragmentShader,
      side: cs,
      blending: Hl
    });
    u.uniforms.tEquirect.value = t;
    const f = new Xi(s, u), h = t.minFilter;
    return t.minFilter === Xo && (t.minFilter = na), new JA(1, 10, this).update(e, f), t.minFilter = h, f.geometry.dispose(), f.material.dispose(), this;
  }
  /**
   * Clears this cube render target.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   */
  clear(e, t = !0, i = !0, s = !0) {
    const u = e.getRenderTarget();
    for (let f = 0; f < 6; f++)
      e.setRenderTarget(this, f), e.clear(t, i, s);
    e.setRenderTarget(u);
  }
}
class Qd extends Nn {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const AD = { type: "move" };
class O0 {
  /**
   * Constructs a new XR controller.
   */
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  /**
   * Returns a group representing the hand space of the XR controller.
   *
   * @return {Group} A group representing the hand space of the XR controller.
   */
  getHandSpace() {
    return this._hand === null && (this._hand = new Qd(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  /**
   * Returns a group representing the target ray space of the XR controller.
   *
   * @return {Group} A group representing the target ray space of the XR controller.
   */
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new Qd(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new j(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new j()), this._targetRay;
  }
  /**
   * Returns a group representing the grip space of the XR controller.
   *
   * @return {Group} A group representing the grip space of the XR controller.
   */
  getGripSpace() {
    return this._grip === null && (this._grip = new Qd(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new j(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new j()), this._grip;
  }
  /**
   * Dispatches the given event to the groups representing
   * the different coordinate spaces of the XR controller.
   *
   * @param {Object} event - The event to dispatch.
   * @return {WebXRController} A reference to this instance.
   */
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  /**
   * Connects the controller with the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const i of e.hand.values())
          this._getHandJoint(t, i);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  /**
   * Disconnects the controller from the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  /**
   * Updates the controller with the given input source, XR frame and reference space.
   * This updates the transformations of the groups that represent the different
   * coordinate systems of the controller.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @param {XRFrame} frame - The XR frame.
   * @param {XRReferenceSpace} referenceSpace - The reference space.
   * @return {WebXRController} A reference to this instance.
   */
  update(e, t, i) {
    let s = null, u = null, f = null;
    const h = this._targetRay, p = this._grip, v = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (v && e.hand) {
        f = !0;
        for (const C of e.hand.values()) {
          const R = t.getJointPose(C, i), M = this._getHandJoint(v, C);
          R !== null && (M.matrix.fromArray(R.transform.matrix), M.matrix.decompose(M.position, M.rotation, M.scale), M.matrixWorldNeedsUpdate = !0, M.jointRadius = R.radius), M.visible = R !== null;
        }
        const _ = v.joints["index-finger-tip"], S = v.joints["thumb-tip"], E = _.position.distanceTo(S.position), x = 0.02, A = 5e-3;
        v.inputState.pinching && E > x + A ? (v.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !v.inputState.pinching && E <= x - A && (v.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        p !== null && e.gripSpace && (u = t.getPose(e.gripSpace, i), u !== null && (p.matrix.fromArray(u.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.matrixWorldNeedsUpdate = !0, u.linearVelocity ? (p.hasLinearVelocity = !0, p.linearVelocity.copy(u.linearVelocity)) : p.hasLinearVelocity = !1, u.angularVelocity ? (p.hasAngularVelocity = !0, p.angularVelocity.copy(u.angularVelocity)) : p.hasAngularVelocity = !1));
      h !== null && (s = t.getPose(e.targetRaySpace, i), s === null && u !== null && (s = u), s !== null && (h.matrix.fromArray(s.transform.matrix), h.matrix.decompose(h.position, h.rotation, h.scale), h.matrixWorldNeedsUpdate = !0, s.linearVelocity ? (h.hasLinearVelocity = !0, h.linearVelocity.copy(s.linearVelocity)) : h.hasLinearVelocity = !1, s.angularVelocity ? (h.hasAngularVelocity = !0, h.angularVelocity.copy(s.angularVelocity)) : h.hasAngularVelocity = !1, this.dispatchEvent(AD)));
    }
    return h !== null && (h.visible = s !== null), p !== null && (p.visible = u !== null), v !== null && (v.visible = f !== null), this;
  }
  /**
   * Returns a group representing the hand joint for the given input joint.
   *
   * @private
   * @param {Group} hand - The group representing the hand space.
   * @param {XRJointSpace} inputjoint - The hand joint data.
   * @return {Group} A group representing the hand joint for the given input joint.
   */
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const i = new Qd();
      i.matrixAutoUpdate = !1, i.visible = !1, e.joints[t.jointName] = i, e.add(i);
    }
    return e.joints[t.jointName];
  }
}
class I_ {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.
   */
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new Et(e), this.density = t;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {FogExp2} A clone of this instance.
   */
  clone() {
    return new I_(this.color, this.density);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class V_ {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [near=1] - The minimum distance to start applying fog.
   * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.
   */
  constructor(e, t = 1, i = 1e3) {
    this.isFog = !0, this.name = "", this.color = new Et(e), this.near = t, this.far = i;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {Fog} A clone of this instance.
   */
  clone() {
    return new V_(this.color, this.near, this.far);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class tM extends Nn {
  /**
   * Constructs a new scene.
   */
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new ks(), this.environmentIntensity = 1, this.environmentRotation = new ks(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity), t.object.environmentRotation = this.environmentRotation.toArray(), t;
  }
}
class F_ {
  /**
   * Constructs a new interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   */
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Wv, this.updateRanges = [], this.version = 0, this.uuid = Qs();
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute array
   * data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the usage of this interleaved buffer.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {InterleavedBuffer} A reference to this interleaved buffer.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given interleaved buffer to this instance.
   *
   * @param {InterleavedBuffer} source - The interleaved buffer to copy.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  /**
   * Copies a vector from the given interleaved buffer to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this interleaved buffer.
   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.
   * @param {number} index2 - The source index into the given interleaved buffer.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copyAt(e, t, i) {
    e *= this.stride, i *= t.stride;
    for (let s = 0, u = this.stride; s < u; s++)
      this.array[e + s] = t.array[i + s];
    return this;
  }
  /**
   * Sets the given array data in the interleaved buffer.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this interleaved buffer's array.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  /**
   * Returns a new interleaved buffer with copied values from this instance.
   *
   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.
   * @return {InterleavedBuffer} A clone of this instance.
   */
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Qs()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), i = new this.constructor(t, this.stride);
    return i.setUsage(this.usage), i;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the array data to the GPU. Can be used to perform clean-up operations after
   * the upload when data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  /**
   * Serializes the interleaved buffer into JSON.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized interleaved buffer.
   */
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Qs()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const os = /* @__PURE__ */ new j();
class bf {
  /**
   * Constructs a new interleaved buffer attribute.
   *
   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.
   * @param {number} itemSize - The item size.
   * @param {number} offset - The attribute offset into the buffer.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i, s = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = i, this.normalized = s;
  }
  /**
   * The item count of this buffer attribute.
   *
   * @type {number}
   * @readonly
   */
  get count() {
    return this.data.count;
  }
  /**
   * The array holding the interleaved buffer attribute data.
   *
   * @type {TypedArray}
   */
  get array() {
    return this.data.array;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyMatrix4(e) {
    for (let t = 0, i = this.data.count; t < i; t++)
      os.fromBufferAttribute(this, t), os.applyMatrix4(e), this.setXYZ(t, os.x, os.y, os.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(e) {
    for (let t = 0, i = this.count; t < i; t++)
      os.fromBufferAttribute(this, t), os.applyNormalMatrix(e), this.setXYZ(t, os.x, os.y, os.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  transformDirection(e) {
    for (let t = 0, i = this.count; t < i; t++)
      os.fromBufferAttribute(this, t), os.transformDirection(e), this.setXYZ(t, os.x, os.y, os.z);
    return this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(e, t) {
    let i = this.array[e * this.data.stride + this.offset + t];
    return this.normalized && (i = us(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setComponent(e, t, i) {
    return this.normalized && (i = rn(i, this.array)), this.data.array[e * this.data.stride + this.offset + t] = i, this;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setX(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setY(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setZ(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setW(e, t) {
    return this.normalized && (t = rn(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = us(t, this.array)), t;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXY(e, t, i) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), i = rn(i, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZ(e, t, i, s) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = s, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZW(e, t, i, s, u) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = rn(t, this.array), i = rn(i, this.array), s = rn(s, this.array), u = rn(u, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = i, this.data.array[e + 2] = s, this.data.array[e + 3] = u, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.
   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.
   */
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let i = 0; i < this.count; i++) {
        const s = i * this.data.stride + this.offset;
        for (let u = 0; u < this.itemSize; u++)
          t.push(this.data.array[s + u]);
      }
      return new jn(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new bf(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let i = 0; i < this.count; i++) {
        const s = i * this.data.stride + this.offset;
        for (let u = 0; u < this.itemSize; u++)
          t.push(this.data.array[s + u]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class nM extends Xa {
  /**
   * Constructs a new sprite material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new Et(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let Bd;
const vv = /* @__PURE__ */ new j(), Pd = /* @__PURE__ */ new j(), Hd = /* @__PURE__ */ new j(), Id = /* @__PURE__ */ new ze(), gv = /* @__PURE__ */ new ze(), eR = /* @__PURE__ */ new qt(), Zy = /* @__PURE__ */ new j(), yv = /* @__PURE__ */ new j(), Ky = /* @__PURE__ */ new j(), m1 = /* @__PURE__ */ new ze(), Rx = /* @__PURE__ */ new ze(), v1 = /* @__PURE__ */ new ze();
class tR extends Nn {
  /**
   * Constructs a new sprite.
   *
   * @param {SpriteMaterial} [material] - The sprite material.
   */
  constructor(e = new nM()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", Bd === void 0) {
      Bd = new on();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), i = new F_(t, 5);
      Bd.setIndex([0, 1, 2, 0, 2, 3]), Bd.setAttribute("position", new bf(i, 3, 0, !1)), Bd.setAttribute("uv", new bf(i, 2, 3, !1));
    }
    this.geometry = Bd, this.material = e, this.center = new ze(0.5, 0.5), this.count = 1;
  }
  /**
   * Computes intersection points between a casted ray and this sprite.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Pd.setFromMatrixScale(this.matrixWorld), eR.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Hd.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Pd.multiplyScalar(-Hd.z);
    const i = this.material.rotation;
    let s, u;
    i !== 0 && (u = Math.cos(i), s = Math.sin(i));
    const f = this.center;
    Qy(Zy.set(-0.5, -0.5, 0), Hd, f, Pd, s, u), Qy(yv.set(0.5, -0.5, 0), Hd, f, Pd, s, u), Qy(Ky.set(0.5, 0.5, 0), Hd, f, Pd, s, u), m1.set(0, 0), Rx.set(1, 0), v1.set(1, 1);
    let h = e.ray.intersectTriangle(Zy, yv, Ky, !1, vv);
    if (h === null && (Qy(yv.set(-0.5, 0.5, 0), Hd, f, Pd, s, u), Rx.set(0, 1), h = e.ray.intersectTriangle(Zy, Ky, yv, !1, vv), h === null))
      return;
    const p = e.ray.origin.distanceTo(vv);
    p < e.near || p > e.far || t.push({
      distance: p,
      point: vv.clone(),
      uv: Cs.getInterpolation(vv, Zy, yv, Ky, m1, Rx, v1, new ze()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function Qy(r, e, t, i, s, u) {
  Id.subVectors(r, t).addScalar(0.5).multiply(i), s !== void 0 ? (gv.x = u * Id.x - s * Id.y, gv.y = s * Id.x + u * Id.y) : gv.copy(Id), r.copy(e), r.x += gv.x, r.y += gv.y, r.applyMatrix4(eR);
}
const ky = /* @__PURE__ */ new j(), g1 = /* @__PURE__ */ new j();
class nR extends Nn {
  /**
   * Constructs a new LOD.
   */
  constructor() {
    super(), this.isLOD = !0, this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      /**
       * This array holds the LOD levels.
       *
       * @name LOD#levels
       * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}
       */
      levels: {
        enumerable: !0,
        value: []
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let i = 0, s = t.length; i < s; i++) {
      const u = t[i];
      this.addLevel(u.object.clone(), u.distance, u.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  /**
   * Adds a mesh that will display at a certain distance and greater. Typically
   * the further away the distance, the lower the detail on the mesh.
   *
   * @param {Object3D} object - The 3D object to display at this level.
   * @param {number} [distance=0] - The distance at which to display this level of detail.
   * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.
   * @return {LOD} A reference to this instance.
   */
  addLevel(e, t = 0, i = 0) {
    t = Math.abs(t);
    const s = this.levels;
    let u;
    for (u = 0; u < s.length && !(t < s[u].distance); u++)
      ;
    return s.splice(u, 0, { distance: t, hysteresis: i, object: e }), this.add(e), this;
  }
  /**
   * Removes an existing level, based on the distance from the camera.
   * Returns `true` when the level has been removed. Otherwise `false`.
   *
   * @param {number} distance - Distance of the level to remove.
   * @return {boolean} Whether the level has been removed or not.
   */
  removeLevel(e) {
    const t = this.levels;
    for (let i = 0; i < t.length; i++)
      if (t[i].distance === e) {
        const s = t.splice(i, 1);
        return this.remove(s[0].object), !0;
      }
    return !1;
  }
  /**
   * Returns the currently active LOD level index.
   *
   * @return {number} The current active LOD level index.
   */
  getCurrentLevel() {
    return this._currentLevel;
  }
  /**
   * Returns a reference to the first 3D object that is greater than
   * the given distance.
   *
   * @param {number} distance - The LOD distance.
   * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.
   */
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let i, s;
      for (i = 1, s = t.length; i < s; i++) {
        let u = t[i].distance;
        if (t[i].object.visible && (u -= u * t[i].hysteresis), e < u)
          break;
      }
      return t[i - 1].object;
    }
    return null;
  }
  /**
   * Computes intersection points between a casted ray and this LOD.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, t) {
    if (this.levels.length > 0) {
      ky.setFromMatrixPosition(this.matrixWorld);
      const s = e.ray.origin.distanceTo(ky);
      this.getObjectForDistance(s).raycast(e, t);
    }
  }
  /**
   * Updates the LOD by computing which LOD level should be visible according
   * to the current distance of the given camera.
   *
   * @param {Camera} camera - The camera the scene is rendered with.
   */
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      ky.setFromMatrixPosition(e.matrixWorld), g1.setFromMatrixPosition(this.matrixWorld);
      const i = ky.distanceTo(g1) / e.zoom;
      t[0].object.visible = !0;
      let s, u;
      for (s = 1, u = t.length; s < u; s++) {
        let f = t[s].distance;
        if (t[s].object.visible && (f -= f * t[s].hysteresis), i >= f)
          t[s - 1].object.visible = !1, t[s].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = s - 1; s < u; s++)
        t[s].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const i = this.levels;
    for (let s = 0, u = i.length; s < u; s++) {
      const f = i[s];
      t.object.levels.push({
        object: f.object.uuid,
        distance: f.distance,
        hysteresis: f.hysteresis
      });
    }
    return t;
  }
}
const y1 = /* @__PURE__ */ new j(), _1 = /* @__PURE__ */ new Un(), S1 = /* @__PURE__ */ new Un(), RD = /* @__PURE__ */ new j(), x1 = /* @__PURE__ */ new qt(), Jy = /* @__PURE__ */ new j(), Cx = /* @__PURE__ */ new Da(), E1 = /* @__PURE__ */ new qt(), Dx = /* @__PURE__ */ new Rf();
class iR extends Xi {
  /**
   * Constructs a new skinned mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = SE, this.bindMatrix = new qt(), this.bindMatrixInverse = new qt(), this.boundingBox = null, this.boundingSphere = null;
  }
  /**
   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect
   * the current animation state.
   */
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Ga()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let i = 0; i < t.count; i++)
      this.getVertexPosition(i, Jy), this.boundingBox.expandByPoint(Jy);
  }
  /**
   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.
   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting
   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed
   * per frame in order to reflect the current animation state.
   */
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new Da()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let i = 0; i < t.count; i++)
      this.getVertexPosition(i, Jy), this.boundingSphere.expandByPoint(Jy);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const i = this.material, s = this.matrixWorld;
    i !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Cx.copy(this.boundingSphere), Cx.applyMatrix4(s), e.ray.intersectsSphere(Cx) !== !1 && (E1.copy(s).invert(), Dx.copy(e.ray).applyMatrix4(E1), !(this.boundingBox !== null && Dx.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, Dx)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  /**
   * Binds the given skeleton to the skinned mesh.
   *
   * @param {Skeleton} skeleton - The skeleton to bind.
   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,
   * the skinned mesh's world matrix will be used instead.
   */
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  /**
   * This method sets the skinned mesh in the rest pose).
   */
  pose() {
    this.skeleton.pose();
  }
  /**
   * Normalizes the skin weights which are defined as a buffer attribute
   * in the skinned mesh's geometry.
   */
  normalizeSkinWeights() {
    const e = new Un(), t = this.geometry.attributes.skinWeight;
    for (let i = 0, s = t.count; i < s; i++) {
      e.fromBufferAttribute(t, i);
      const u = 1 / e.manhattanLength();
      u !== 1 / 0 ? e.multiplyScalar(u) : e.set(1, 0, 0, 0), t.setXYZW(i, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === SE ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === NA ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  /**
   * Applies the bone transform associated with the given index to the given
   * vertex position. Returns the updated vector.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * the skinned mesh's world matrix will be used instead.
   * @return {Vector3} The updated vertex position.
   */
  applyBoneTransform(e, t) {
    const i = this.skeleton, s = this.geometry;
    _1.fromBufferAttribute(s.attributes.skinIndex, e), S1.fromBufferAttribute(s.attributes.skinWeight, e), y1.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let u = 0; u < 4; u++) {
      const f = S1.getComponent(u);
      if (f !== 0) {
        const h = _1.getComponent(u);
        x1.multiplyMatrices(i.bones[h].matrixWorld, i.boneInverses[h]), t.addScaledVector(RD.copy(y1).applyMatrix4(x1), f);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
}
class iM extends Nn {
  /**
   * Constructs a new bone.
   */
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class Wo extends Ai {
  /**
   * Constructs a new data texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=NearestFilter] - The mag filter value.
   * @param {number} [minFilter=NearestFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e = null, t = 1, i = 1, s, u, f, h, p, v = Ca, _ = Ca, S, E) {
    super(null, f, h, p, v, _, s, u, S, E), this.isDataTexture = !0, this.image = { data: e, width: t, height: i }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const M1 = /* @__PURE__ */ new qt(), CD = /* @__PURE__ */ new qt();
class G_ {
  /**
   * Constructs a new skeleton.
   *
   * @param {Array<Bone>} [bones] - An array of bones.
   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.
   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.
   */
  constructor(e = [], t = []) {
    this.uuid = Qs(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  /**
   * Initializes the skeleton. This method gets automatically called by the constructor
   * but depending on how the skeleton is created it might be necessary to call this method
   * manually.
   */
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let i = 0, s = this.bones.length; i < s; i++)
        this.boneInverses.push(new qt());
    }
  }
  /**
   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}
   * and fills it with new matrices.
   */
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = new qt();
      this.bones[e] && i.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(i);
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = this.bones[e];
      i && i.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const i = this.bones[e];
      i && (i.parent && i.parent.isBone ? (i.matrix.copy(i.parent.matrixWorld).invert(), i.matrix.multiply(i.matrixWorld)) : i.matrix.copy(i.matrixWorld), i.matrix.decompose(i.position, i.quaternion, i.scale));
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  update() {
    const e = this.bones, t = this.boneInverses, i = this.boneMatrices, s = this.boneTexture;
    for (let u = 0, f = e.length; u < f; u++) {
      const h = e[u] ? e[u].matrixWorld : CD;
      M1.multiplyMatrices(h, t[u]), M1.toArray(i, u * 16);
    }
    s !== null && (s.needsUpdate = !0);
  }
  /**
   * Returns a new skeleton with copied values from this instance.
   *
   * @return {Skeleton} A clone of this instance.
   */
  clone() {
    return new G_(this.bones, this.boneInverses);
  }
  /**
   * Computes a data texture for passing bone data to the vertex shader.
   *
   * @return {Skeleton} A reference of this instance.
   */
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const i = new Wo(t, e, e, Va, Ds);
    return i.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = i, this;
  }
  /**
   * Searches through the skeleton's bone array and returns the first with a
   * matching name.
   *
   * @param {string} name - The name of the bone.
   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.
   */
  getBoneByName(e) {
    for (let t = 0, i = this.bones.length; t < i; t++) {
      const s = this.bones[t];
      if (s.name === e)
        return s;
    }
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  /**
   * Setups the skeleton by the given JSON and bones.
   *
   * @param {Object} json - The skeleton as serialized JSON.
   * @param {Object<string, Bone>} bones - An array of bones.
   * @return {Skeleton} A reference of this instance.
   */
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let i = 0, s = e.bones.length; i < s; i++) {
      const u = e.bones[i];
      let f = t[u];
      f === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", u), f = new iM()), this.bones.push(f), this.boneInverses.push(new qt().fromArray(e.boneInverses[i]));
    }
    return this.init(), this;
  }
  /**
   * Serializes the skeleton into JSON.
   *
   * @return {Object} A JSON object representing the serialized skeleton.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, i = this.boneInverses;
    for (let s = 0, u = t.length; s < u; s++) {
      const f = t[s];
      e.bones.push(f.uuid);
      const h = i[s];
      e.boneInverses.push(h.toArray());
    }
    return e;
  }
}
class lp extends jn {
  /**
   * Constructs a new instanced buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.
   */
  constructor(e, t, i, s = 1) {
    super(e, t, i), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = s;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const Vd = /* @__PURE__ */ new qt(), b1 = /* @__PURE__ */ new qt(), $y = [], T1 = /* @__PURE__ */ new Ga(), DD = /* @__PURE__ */ new qt(), _v = /* @__PURE__ */ new Xi(), Sv = /* @__PURE__ */ new Da();
class aR extends Xi {
  /**
   * Constructs a new instanced mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   * @param {number} count - The number of instances.
   */
  constructor(e, t, i) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new lp(new Float32Array(i * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = i, this.boundingBox = null, this.boundingSphere = null;
    for (let s = 0; s < i; s++)
      this.setMatrixAt(s, DD);
  }
  /**
   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new Ga()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let i = 0; i < t; i++)
      this.getMatrixAt(i, Vd), T1.copy(e.boundingBox).applyMatrix4(Vd), this.boundingBox.union(T1);
  }
  /**
   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new Da()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let i = 0; i < t; i++)
      this.getMatrixAt(i, Vd), Sv.copy(e.boundingSphere).applyMatrix4(Vd), this.boundingSphere.union(Sv);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  /**
   * Gets the color of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The target object that is used to store the method's result.
   */
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  /**
   * Gets the local transformation matrix of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   */
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  /**
   * Gets the morph target weights of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object - The target object that is used to store the method's result.
   */
  getMorphAt(e, t) {
    const i = t.morphTargetInfluences, s = this.morphTexture.source.data.data, u = i.length + 1, f = e * u + 1;
    for (let h = 0; h < i.length; h++)
      i[h] = s[f + h];
  }
  raycast(e, t) {
    const i = this.matrixWorld, s = this.count;
    if (_v.geometry = this.geometry, _v.material = this.material, _v.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Sv.copy(this.boundingSphere), Sv.applyMatrix4(i), e.ray.intersectsSphere(Sv) !== !1))
      for (let u = 0; u < s; u++) {
        this.getMatrixAt(u, Vd), b1.multiplyMatrices(i, Vd), _v.matrixWorld = b1, _v.raycast(e, $y);
        for (let f = 0, h = $y.length; f < h; f++) {
          const p = $y[f];
          p.instanceId = u, p.object = this, t.push(p);
        }
        $y.length = 0;
      }
  }
  /**
   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The instance color.
   */
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new lp(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  /**
   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The local transformation.
   */
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  /**
   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights
   * of a single instance.
   */
  setMorphAt(e, t) {
    const i = t.morphTargetInfluences, s = i.length + 1;
    this.morphTexture === null && (this.morphTexture = new Wo(new Float32Array(s * this.count), s, this.count, N_, Ds));
    const u = this.morphTexture.source.data.data;
    let f = 0;
    for (let v = 0; v < i.length; v++)
      f += i[v];
    const h = this.geometry.morphTargetsRelative ? 1 : 1 - f, p = s * e;
    u[p] = h, u.set(i, p + 1);
  }
  updateMorphTargets() {
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null);
  }
}
const wx = /* @__PURE__ */ new j(), wD = /* @__PURE__ */ new j(), UD = /* @__PURE__ */ new en();
class zl {
  /**
   * Constructs a new plane.
   *
   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
   * @param {number} [constant=0] - The signed distance from the origin to the plane.
   */
  constructor(e = new j(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  /**
   * Sets the plane components by copying the given values.
   *
   * @param {Vector3} normal - The normal.
   * @param {number} constant - The constant.
   * @return {Plane} A reference to this plane.
   */
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  /**
   * Sets the plane components by defining `x`, `y`, `z` as the
   * plane normal and `w` as the constant.
   *
   * @param {number} x - The value for the normal's x component.
   * @param {number} y - The value for the normal's y component.
   * @param {number} z - The value for the normal's z component.
   * @param {number} w - The constant value.
   * @return {Plane} A reference to this plane.
   */
  setComponents(e, t, i, s) {
    return this.normal.set(e, t, i), this.constant = s, this;
  }
  /**
   * Sets the plane from the given normal and coplanar point (that is a point
   * that lies onto the plane).
   *
   * @param {Vector3} normal - The normal.
   * @param {Vector3} point - A coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  /**
   * Sets the plane from three coplanar points. The winding order is
   * assumed to be counter-clockwise, and determines the direction of
   * the plane normal.
   *
   * @param {Vector3} a - The first coplanar point.
   * @param {Vector3} b - The second coplanar point.
   * @param {Vector3} c - The third coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromCoplanarPoints(e, t, i) {
    const s = wx.subVectors(i, t).cross(wD.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(s, e), this;
  }
  /**
   * Copies the values of the given plane to this instance.
   *
   * @param {Plane} plane - The plane to copy.
   * @return {Plane} A reference to this plane.
   */
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  /**
   * Normalizes the plane normal and adjusts the constant accordingly.
   *
   * @return {Plane} A reference to this plane.
   */
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  /**
   * Negates both the plane normal and the constant.
   *
   * @return {Plane} A reference to this plane.
   */
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  /**
   * Returns the signed distance from the given point to this plane.
   *
   * @param {Vector3} point - The point to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  /**
   * Returns the signed distance from the given sphere to this plane.
   *
   * @param {Sphere} sphere - The sphere to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  /**
   * Projects a the given point onto the plane.
   *
   * @param {Vector3} point - The point to project.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The projected point on the plane.
   */
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  /**
   * Returns the intersection point of the passed line and the plane. Returns
   * `null` if the line does not intersect. Returns the line's starting point if
   * the line is coplanar with the plane.
   *
   * @param {Line3} line - The line to compute the intersection for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectLine(e, t) {
    const i = e.delta(wx), s = this.normal.dot(i);
    if (s === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const u = -(e.start.dot(this.normal) + this.constant) / s;
    return u < 0 || u > 1 ? null : t.copy(e.start).addScaledVector(i, u);
  }
  /**
   * Returns `true` if the given line segment intersects with (passes through) the plane.
   *
   * @param {Line3} line - The line to test.
   * @return {boolean} Whether the given line segment intersects with the plane or not.
   */
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), i = this.distanceToPoint(e.end);
    return t < 0 && i > 0 || i < 0 && t > 0;
  }
  /**
   * Returns `true` if the given bounding box intersects with the plane.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with the plane or not.
   */
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  /**
   * Returns `true` if the given bounding sphere intersects with the plane.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
   */
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  /**
   * Returns a coplanar vector to the plane, by calculating the
   * projection of the normal at the origin onto the plane.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The coplanar point.
   */
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  /**
   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
   *
   * The optional normal matrix can be pre-computed like so:
   * ```js
   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
   * ```
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
   * @return {Plane} A reference to this plane.
   */
  applyMatrix4(e, t) {
    const i = t || UD.getNormalMatrix(e), s = this.coplanarPoint(wx).applyMatrix4(e), u = this.normal.applyMatrix3(i).normalize();
    return this.constant = -s.dot(u), this;
  }
  /**
   * Translates the plane by the distance defined by the given offset vector.
   * Note that this only affects the plane constant and will not affect the normal vector.
   *
   * @param {Vector3} offset - The offset vector.
   * @return {Plane} A reference to this plane.
   */
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  /**
   * Returns `true` if this plane is equal with the given one.
   *
   * @param {Plane} plane - The plane to test for equality.
   * @return {boolean} Whether this plane is equal with the given one.
   */
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  /**
   * Returns a new plane with copied values from this instance.
   *
   * @return {Plane} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const ef = /* @__PURE__ */ new Da(), ND = /* @__PURE__ */ new ze(0.5, 0.5), e0 = /* @__PURE__ */ new j();
class dp {
  /**
   * Constructs a new frustum.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   */
  constructor(e = new zl(), t = new zl(), i = new zl(), s = new zl(), u = new zl(), f = new zl()) {
    this.planes = [e, t, i, s, u, f];
  }
  /**
   * Sets the frustum planes by copying the given planes.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   * @return {Frustum} A reference to this frustum.
   */
  set(e, t, i, s, u, f) {
    const h = this.planes;
    return h[0].copy(e), h[1].copy(t), h[2].copy(i), h[3].copy(s), h[4].copy(u), h[5].copy(f), this;
  }
  /**
   * Copies the values of the given frustum to this instance.
   *
   * @param {Frustum} frustum - The frustum to copy.
   * @return {Frustum} A reference to this frustum.
   */
  copy(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++)
      t[i].copy(e.planes[i]);
    return this;
  }
  /**
   * Sets the frustum planes from the given projection matrix.
   *
   * @param {Matrix4} m - The projection matrix.
   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
   * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
   * @return {Frustum} A reference to this frustum.
   */
  setFromProjectionMatrix(e, t = Ks, i = !1) {
    const s = this.planes, u = e.elements, f = u[0], h = u[1], p = u[2], v = u[3], _ = u[4], S = u[5], E = u[6], x = u[7], A = u[8], C = u[9], R = u[10], M = u[11], w = u[12], N = u[13], U = u[14], I = u[15];
    if (s[0].setComponents(v - f, x - _, M - A, I - w).normalize(), s[1].setComponents(v + f, x + _, M + A, I + w).normalize(), s[2].setComponents(v + h, x + S, M + C, I + N).normalize(), s[3].setComponents(v - h, x - S, M - C, I - N).normalize(), i)
      s[4].setComponents(p, E, R, U).normalize(), s[5].setComponents(v - p, x - E, M - R, I - U).normalize();
    else if (s[4].setComponents(v - p, x - E, M - R, I - U).normalize(), t === Ks)
      s[5].setComponents(v + p, x + E, M + R, I + U).normalize();
    else if (t === ap)
      s[5].setComponents(p, E, R, U).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
   *
   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
   *
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
   */
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), ef.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), ef.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(ef);
  }
  /**
   * Returns `true` if the given sprite is intersecting this frustum.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @return {boolean} Whether the sprite is intersecting this frustum or not.
   */
  intersectsSprite(e) {
    ef.center.set(0, 0, 0);
    const t = ND.distanceTo(e.center);
    return ef.radius = 0.7071067811865476 + t, ef.applyMatrix4(e.matrixWorld), this.intersectsSphere(ef);
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting this frustum.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
   */
  intersectsSphere(e) {
    const t = this.planes, i = e.center, s = -e.radius;
    for (let u = 0; u < 6; u++)
      if (t[u].distanceToPoint(i) < s)
        return !1;
    return !0;
  }
  /**
   * Returns `true` if the given bounding box is intersecting this frustum.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box is intersecting this frustum or not.
   */
  intersectsBox(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++) {
      const s = t[i];
      if (e0.x = s.normal.x > 0 ? e.max.x : e.min.x, e0.y = s.normal.y > 0 ? e.max.y : e.min.y, e0.z = s.normal.z > 0 ? e.max.z : e.min.z, s.distanceToPoint(e0) < 0)
        return !1;
    }
    return !0;
  }
  /**
   * Returns `true` if the given point lies within the frustum.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the point lies within this frustum or not.
   */
  containsPoint(e) {
    const t = this.planes;
    for (let i = 0; i < 6; i++)
      if (t[i].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  /**
   * Returns a new frustum with copied values from this instance.
   *
   * @return {Frustum} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const Vo = /* @__PURE__ */ new qt(), Fo = /* @__PURE__ */ new dp();
class X_ {
  /**
   * Constructs a new frustum array.
   *
   */
  constructor() {
    this.coordinateSystem = Ks;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Object3D} object - The 3D object to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the 3D object is visible in any camera.
   */
  intersectsObject(e, t) {
    if (!t.isArrayCamera || t.cameras.length === 0)
      return !1;
    for (let i = 0; i < t.cameras.length; i++) {
      const s = t.cameras[i];
      if (Vo.multiplyMatrices(
        s.projectionMatrix,
        s.matrixWorldInverse
      ), Fo.setFromProjectionMatrix(
        Vo,
        s.coordinateSystem,
        s.reversedDepth
      ), Fo.intersectsObject(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given sprite is intersecting any frustum
   * from the camera array.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sprite is visible in any camera.
   */
  intersectsSprite(e, t) {
    if (!t || !t.cameras || t.cameras.length === 0)
      return !1;
    for (let i = 0; i < t.cameras.length; i++) {
      const s = t.cameras[i];
      if (Vo.multiplyMatrices(
        s.projectionMatrix,
        s.matrixWorldInverse
      ), Fo.setFromProjectionMatrix(
        Vo,
        s.coordinateSystem,
        s.reversedDepth
      ), Fo.intersectsSprite(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sphere is visible in any camera.
   */
  intersectsSphere(e, t) {
    if (!t || !t.cameras || t.cameras.length === 0)
      return !1;
    for (let i = 0; i < t.cameras.length; i++) {
      const s = t.cameras[i];
      if (Vo.multiplyMatrices(
        s.projectionMatrix,
        s.matrixWorldInverse
      ), Fo.setFromProjectionMatrix(
        Vo,
        s.coordinateSystem,
        s.reversedDepth
      ), Fo.intersectsSphere(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding box is intersecting any frustum
   * from the camera array.
   *
   * @param {Box3} box - The bounding box to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the box is visible in any camera.
   */
  intersectsBox(e, t) {
    if (!t || !t.cameras || t.cameras.length === 0)
      return !1;
    for (let i = 0; i < t.cameras.length; i++) {
      const s = t.cameras[i];
      if (Vo.multiplyMatrices(
        s.projectionMatrix,
        s.matrixWorldInverse
      ), Fo.setFromProjectionMatrix(
        Vo,
        s.coordinateSystem,
        s.reversedDepth
      ), Fo.intersectsBox(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given point lies within any frustum
   * from the camera array.
   *
   * @param {Vector3} point - The point to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the point is visible in any camera.
   */
  containsPoint(e, t) {
    if (!t || !t.cameras || t.cameras.length === 0)
      return !1;
    for (let i = 0; i < t.cameras.length; i++) {
      const s = t.cameras[i];
      if (Vo.multiplyMatrices(
        s.projectionMatrix,
        s.matrixWorldInverse
      ), Fo.setFromProjectionMatrix(
        Vo,
        s.coordinateSystem,
        s.reversedDepth
      ), Fo.containsPoint(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns a new frustum array with copied values from this instance.
   *
   * @return {FrustumArray} A clone of this instance.
   */
  clone() {
    return new X_();
  }
}
function Ux(r, e) {
  return r - e;
}
function OD(r, e) {
  return r.z - e.z;
}
function LD(r, e) {
  return e.z - r.z;
}
class zD {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(e, t, i, s) {
    const u = this.pool, f = this.list;
    this.index >= u.length && u.push({
      start: -1,
      count: -1,
      z: -1,
      index: -1
    });
    const h = u[this.index];
    f.push(h), this.index++, h.start = e, h.count = t, h.z = i, h.index = s;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const Ts = /* @__PURE__ */ new qt(), BD = /* @__PURE__ */ new Et(1, 1, 1), A1 = /* @__PURE__ */ new dp(), PD = /* @__PURE__ */ new X_(), t0 = /* @__PURE__ */ new Ga(), tf = /* @__PURE__ */ new Da(), xv = /* @__PURE__ */ new j(), R1 = /* @__PURE__ */ new j(), HD = /* @__PURE__ */ new j(), Nx = /* @__PURE__ */ new zD(), Ha = /* @__PURE__ */ new Xi(), n0 = [];
function ID(r, e, t = 0) {
  const i = e.itemSize;
  if (r.isInterleavedBufferAttribute || r.array.constructor !== e.array.constructor) {
    const s = r.count;
    for (let u = 0; u < s; u++)
      for (let f = 0; f < i; f++)
        e.setComponent(u + t, f, r.getComponent(u, f));
  } else
    e.array.set(r.array, t * i);
  e.needsUpdate = !0;
}
function nf(r, e) {
  if (r.constructor !== e.constructor) {
    const t = Math.min(r.length, e.length);
    for (let i = 0; i < t; i++)
      e[i] = r[i];
  } else {
    const t = Math.min(r.length, e.length);
    e.set(new r.constructor(r.buffer, 0, t));
  }
}
class sR extends Xi {
  /**
   * Constructs a new batched mesh.
   *
   * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.
   * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e, t, i = t * 2, s) {
    super(new on(), s), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._instanceInfo = [], this._geometryInfo = [], this._availableInstanceIds = [], this._availableGeometryIds = [], this._nextIndexStart = 0, this._nextVertexStart = 0, this._geometryCount = 0, this._visibilityChanged = !0, this._geometryInitialized = !1, this._maxInstanceCount = e, this._maxVertexCount = t, this._maxIndexCount = i, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._multiDrawInstances = null, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture();
  }
  /**
   * The maximum number of individual instances that can be stored in the batch.
   *
   * @type {number}
   * @readonly
   */
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  /**
   * The instance count.
   *
   * @type {number}
   * @readonly
   */
  get instanceCount() {
    return this._instanceInfo.length - this._availableInstanceIds.length;
  }
  /**
   * The number of unused vertices.
   *
   * @type {number}
   * @readonly
   */
  get unusedVertexCount() {
    return this._maxVertexCount - this._nextVertexStart;
  }
  /**
   * The number of unused indices.
   *
   * @type {number}
   * @readonly
   */
  get unusedIndexCount() {
    return this._maxIndexCount - this._nextIndexStart;
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxInstanceCount * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4), i = new Wo(t, e, e, Va, Ds);
    this._matricesTexture = i;
  }
  _initIndirectTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const t = new Uint32Array(e * e), i = new Wo(t, e, e, ig, Gl);
    this._indirectTexture = i;
  }
  _initColorsTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const t = new Float32Array(e * e * 4).fill(1), i = new Wo(t, e, e, Va, Ds);
    i.colorSpace = An.workingColorSpace, this._colorsTexture = i;
  }
  _initializeGeometry(e) {
    const t = this.geometry, i = this._maxVertexCount, s = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const u in e.attributes) {
        const f = e.getAttribute(u), { array: h, itemSize: p, normalized: v } = f, _ = new h.constructor(i * p), S = new jn(_, p, v);
        t.setAttribute(u, S);
      }
      if (e.getIndex() !== null) {
        const u = i > 65535 ? new Uint32Array(s) : new Uint16Array(s);
        t.setIndex(new jn(u, 1));
      }
      this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry attributes
  _validateGeometry(e) {
    const t = this.geometry;
    if (!!e.getIndex() != !!t.getIndex())
      throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');
    for (const i in t.attributes) {
      if (!e.hasAttribute(i))
        throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);
      const s = e.getAttribute(i), u = t.getAttribute(i);
      if (s.itemSize !== u.itemSize || s.normalized !== u.normalized)
        throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  /**
   * Validates the instance defined by the given ID.
   *
   * @param {number} instanceId - The instance to validate.
   */
  validateInstanceId(e) {
    const t = this._instanceInfo;
    if (e < 0 || e >= t.length || t[e].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`);
  }
  /**
   * Validates the geometry defined by the given ID.
   *
   * @param {number} geometryId - The geometry to validate.
   */
  validateGeometryId(e) {
    const t = this._geometryInfo;
    if (e < 0 || e >= t.length || t[e].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`);
  }
  /**
   * Takes a sort a function that is run before render. The function takes a list of instances to
   * sort and a camera. The objects in the list include a "z" field to perform a depth-ordered sort with.
   *
   * @param {Function} func - The custom sort function.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setCustomSort(e) {
    return this.customSort = e, this;
  }
  /**
   * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.
   * Bounding boxes aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Ga());
    const e = this.boundingBox, t = this._instanceInfo;
    e.makeEmpty();
    for (let i = 0, s = t.length; i < s; i++) {
      if (t[i].active === !1) continue;
      const u = t[i].geometryIndex;
      this.getMatrixAt(i, Ts), this.getBoundingBoxAt(u, t0).applyMatrix4(Ts), e.union(t0);
    }
  }
  /**
   * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.
   * Bounding spheres aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new Da());
    const e = this.boundingSphere, t = this._instanceInfo;
    e.makeEmpty();
    for (let i = 0, s = t.length; i < s; i++) {
      if (t[i].active === !1) continue;
      const u = t[i].geometryIndex;
      this.getMatrixAt(i, Ts), this.getBoundingSphereAt(u, tf).applyMatrix4(Ts), e.union(tf);
    }
  }
  /**
   * Adds a new instance to the batch using the geometry of the given ID and returns
   * a new id referring to the new instance to be used by other functions.
   *
   * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.
   * @return {number} The instance ID.
   */
  addInstance(e) {
    if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0)
      throw new Error("THREE.BatchedMesh: Maximum item count reached.");
    const i = {
      visible: !0,
      active: !0,
      geometryIndex: e
    };
    let s = null;
    this._availableInstanceIds.length > 0 ? (this._availableInstanceIds.sort(Ux), s = this._availableInstanceIds.shift(), this._instanceInfo[s] = i) : (s = this._instanceInfo.length, this._instanceInfo.push(i));
    const u = this._matricesTexture;
    Ts.identity().toArray(u.image.data, s * 16), u.needsUpdate = !0;
    const f = this._colorsTexture;
    return f && (BD.toArray(f.image.data, s * 4), f.needsUpdate = !0), this._visibilityChanged = !0, s;
  }
  /**
   * Adds the given geometry to the batch and returns the associated
   * geometry id referring to it to be used in other functions.
   *
   * @param {BufferGeometry} geometry - The geometry to add.
   * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of
   * vertex buffer space to reserve for the added geometry. This is necessary if it is planned
   * to set a new geometry at this index at a later time that is larger than the original geometry.
   * Defaults to the length of the given geometry vertex buffer.
   * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index
   * buffer space to reserve for the added geometry. This is necessary if it is planned to set a
   * new geometry at this index at a later time that is larger than the original geometry. Defaults to
   * the length of the given geometry index buffer.
   * @return {number} The geometry ID.
   */
  addGeometry(e, t = -1, i = -1) {
    this._initializeGeometry(e), this._validateGeometry(e);
    const s = {
      // geometry information
      vertexStart: -1,
      vertexCount: -1,
      reservedVertexCount: -1,
      indexStart: -1,
      indexCount: -1,
      reservedIndexCount: -1,
      // draw range information
      start: -1,
      count: -1,
      // state
      boundingBox: null,
      boundingSphere: null,
      active: !0
    }, u = this._geometryInfo;
    s.vertexStart = this._nextVertexStart, s.reservedVertexCount = t === -1 ? e.getAttribute("position").count : t;
    const f = e.getIndex();
    if (f !== null && (s.indexStart = this._nextIndexStart, s.reservedIndexCount = i === -1 ? f.count : i), s.indexStart !== -1 && s.indexStart + s.reservedIndexCount > this._maxIndexCount || s.vertexStart + s.reservedVertexCount > this._maxVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    let p;
    return this._availableGeometryIds.length > 0 ? (this._availableGeometryIds.sort(Ux), p = this._availableGeometryIds.shift(), u[p] = s) : (p = this._geometryCount, this._geometryCount++, u.push(s)), this.setGeometryAt(p, e), this._nextIndexStart = s.indexStart + s.reservedIndexCount, this._nextVertexStart = s.vertexStart + s.reservedVertexCount, p;
  }
  /**
   * Replaces the geometry at the given ID with the provided geometry. Throws an error if there
   * is not enough space reserved for geometry. Calling this will change all instances that are
   * rendering that geometry.
   *
   * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.
   * @param {BufferGeometry} geometry - The new geometry.
   * @return {number} The geometry ID.
   */
  setGeometryAt(e, t) {
    if (e >= this._geometryCount)
      throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(t);
    const i = this.geometry, s = i.getIndex() !== null, u = i.getIndex(), f = t.getIndex(), h = this._geometryInfo[e];
    if (s && f.count > h.reservedIndexCount || t.attributes.position.count > h.reservedVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");
    const p = h.vertexStart, v = h.reservedVertexCount;
    h.vertexCount = t.getAttribute("position").count;
    for (const _ in i.attributes) {
      const S = t.getAttribute(_), E = i.getAttribute(_);
      ID(S, E, p);
      const x = S.itemSize;
      for (let A = S.count, C = v; A < C; A++) {
        const R = p + A;
        for (let M = 0; M < x; M++)
          E.setComponent(R, M, 0);
      }
      E.needsUpdate = !0, E.addUpdateRange(p * x, v * x);
    }
    if (s) {
      const _ = h.indexStart, S = h.reservedIndexCount;
      h.indexCount = t.getIndex().count;
      for (let E = 0; E < f.count; E++)
        u.setX(_ + E, p + f.getX(E));
      for (let E = f.count, x = S; E < x; E++)
        u.setX(_ + E, p);
      u.needsUpdate = !0, u.addUpdateRange(_, h.reservedIndexCount);
    }
    return h.start = s ? h.indexStart : h.vertexStart, h.count = s ? h.indexCount : h.vertexCount, h.boundingBox = null, t.boundingBox !== null && (h.boundingBox = t.boundingBox.clone()), h.boundingSphere = null, t.boundingSphere !== null && (h.boundingSphere = t.boundingSphere.clone()), this._visibilityChanged = !0, e;
  }
  /**
   * Deletes the geometry defined by the given ID from this batch. Any instances referencing
   * this geometry will also be removed as a side effect.
   *
   * @param {number} geometryId - The ID of the geometry to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteGeometry(e) {
    const t = this._geometryInfo;
    if (e >= t.length || t[e].active === !1)
      return this;
    const i = this._instanceInfo;
    for (let s = 0, u = i.length; s < u; s++)
      i[s].active && i[s].geometryIndex === e && this.deleteInstance(s);
    return t[e].active = !1, this._availableGeometryIds.push(e), this._visibilityChanged = !0, this;
  }
  /**
   * Deletes an existing instance from the batch using the given ID.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteInstance(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].active = !1, this._availableInstanceIds.push(e), this._visibilityChanged = !0, this;
  }
  /**
   * Repacks the sub geometries in [name] to remove any unused space remaining from
   * previously deleted geometry, freeing up space to add new geometry.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  optimize() {
    let e = 0, t = 0;
    const i = this._geometryInfo, s = i.map((f, h) => h).sort((f, h) => i[f].vertexStart - i[h].vertexStart), u = this.geometry;
    for (let f = 0, h = i.length; f < h; f++) {
      const p = s[f], v = i[p];
      if (v.active !== !1) {
        if (u.index !== null) {
          if (v.indexStart !== t) {
            const { indexStart: _, vertexStart: S, reservedIndexCount: E } = v, x = u.index, A = x.array, C = e - S;
            for (let R = _; R < _ + E; R++)
              A[R] = A[R] + C;
            x.array.copyWithin(t, _, _ + E), x.addUpdateRange(t, E), v.indexStart = t;
          }
          t += v.reservedIndexCount;
        }
        if (v.vertexStart !== e) {
          const { vertexStart: _, reservedVertexCount: S } = v, E = u.attributes;
          for (const x in E) {
            const A = E[x], { array: C, itemSize: R } = A;
            C.copyWithin(e * R, _ * R, (_ + S) * R), A.addUpdateRange(e * R, S * R);
          }
          v.vertexStart = e;
        }
        e += v.reservedVertexCount, v.start = u.index ? v.indexStart : v.vertexStart, this._nextIndexStart = u.index ? v.indexStart + v.reservedIndexCount : 0, this._nextVertexStart = v.vertexStart + v.reservedVertexCount;
      }
    }
    return this;
  }
  /**
   * Returns the bounding box for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding box for.
   * @param {Box3} target - The target object that is used to store the method's result.
   * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingBoxAt(e, t) {
    if (e >= this._geometryCount)
      return null;
    const i = this.geometry, s = this._geometryInfo[e];
    if (s.boundingBox === null) {
      const u = new Ga(), f = i.index, h = i.attributes.position;
      for (let p = s.start, v = s.start + s.count; p < v; p++) {
        let _ = p;
        f && (_ = f.getX(_)), u.expandByPoint(xv.fromBufferAttribute(h, _));
      }
      s.boundingBox = u;
    }
    return t.copy(s.boundingBox), t;
  }
  /**
   * Returns the bounding sphere for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.
   * @param {Sphere} target - The target object that is used to store the method's result.
   * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingSphereAt(e, t) {
    if (e >= this._geometryCount)
      return null;
    const i = this.geometry, s = this._geometryInfo[e];
    if (s.boundingSphere === null) {
      const u = new Da();
      this.getBoundingBoxAt(e, t0), t0.getCenter(u.center);
      const f = i.index, h = i.attributes.position;
      let p = 0;
      for (let v = s.start, _ = s.start + s.count; v < _; v++) {
        let S = v;
        f && (S = f.getX(S)), xv.fromBufferAttribute(h, S), p = Math.max(p, u.center.distanceToSquared(xv));
      }
      u.radius = Math.sqrt(p), s.boundingSphere = u;
    }
    return t.copy(s.boundingSphere), t;
  }
  /**
   * Sets the given local transformation matrix to the defined instance.
   * Negatively scaled matrices are not supported.
   *
   * @param {number} instanceId - The ID of an instance to set the matrix of.
   * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setMatrixAt(e, t) {
    this.validateInstanceId(e);
    const i = this._matricesTexture, s = this._matricesTexture.image.data;
    return t.toArray(s, e * 16), i.needsUpdate = !0, this;
  }
  /**
   * Returns the local transformation matrix of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the matrix of.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   * @return {Matrix4} The instance's local transformation matrix.
   */
  getMatrixAt(e, t) {
    return this.validateInstanceId(e), t.fromArray(this._matricesTexture.image.data, e * 16);
  }
  /**
   * Sets the given color to the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to set the color of.
   * @param {Color} color - The color to set the instance to.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setColorAt(e, t) {
    return this.validateInstanceId(e), this._colorsTexture === null && this._initColorsTexture(), t.toArray(this._colorsTexture.image.data, e * 4), this._colorsTexture.needsUpdate = !0, this;
  }
  /**
   * Returns the color of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the color of.
   * @param {Color} color - The target object that is used to store the method's result.
   * @return {Color} The instance's color.
   */
  getColorAt(e, t) {
    return this.validateInstanceId(e), t.fromArray(this._colorsTexture.image.data, e * 4);
  }
  /**
   * Sets the visibility of the instance.
   *
   * @param {number} instanceId - The id of the instance to set the visibility of.
   * @param {boolean} visible - Whether the instance is visible or not.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setVisibleAt(e, t) {
    return this.validateInstanceId(e), this._instanceInfo[e].visible === t ? this : (this._instanceInfo[e].visible = t, this._visibilityChanged = !0, this);
  }
  /**
   * Returns the visibility state of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the visibility state of.
   * @return {boolean} Whether the instance is visible or not.
   */
  getVisibleAt(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].visible;
  }
  /**
   * Sets the geometry ID of the instance at the given index.
   *
   * @param {number} instanceId - The ID of the instance to set the geometry ID of.
   * @param {number} geometryId - The geometry ID to be use by the instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setGeometryIdAt(e, t) {
    return this.validateInstanceId(e), this.validateGeometryId(t), this._instanceInfo[e].geometryIndex = t, this;
  }
  /**
   * Returns the geometry ID of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the geometry ID of.
   * @return {number} The instance's geometry ID.
   */
  getGeometryIdAt(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].geometryIndex;
  }
  /**
   * Get the range representing the subset of triangles related to the attached geometry,
   * indicating the starting offset and count, or `null` if invalid.
   *
   * @param {number} geometryId - The id of the geometry to get the range of.
   * @param {Object} [target] - The target object that is used to store the method's result.
   * @return {{
   * 	vertexStart:number,vertexCount:number,reservedVertexCount:number,
   * 	indexStart:number,indexCount:number,reservedIndexCount:number,
   * 	start:number,count:number
   * }} The result object with range data.
   */
  getGeometryRangeAt(e, t = {}) {
    this.validateGeometryId(e);
    const i = this._geometryInfo[e];
    return t.vertexStart = i.vertexStart, t.vertexCount = i.vertexCount, t.reservedVertexCount = i.reservedVertexCount, t.indexStart = i.indexStart, t.indexCount = i.indexCount, t.reservedIndexCount = i.reservedIndexCount, t.start = i.start, t.count = i.count, t;
  }
  /**
   * Resizes the necessary buffers to support the provided number of instances.
   * If the provided arguments shrink the number of instances but there are not enough
   * unused Ids at the end of the list then an error is thrown.
   *
   * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.
  */
  setInstanceCount(e) {
    const t = this._availableInstanceIds, i = this._instanceInfo;
    for (t.sort(Ux); t[t.length - 1] === i.length - 1; )
      i.pop(), t.pop();
    if (e < i.length)
      throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);
    const s = new Int32Array(e), u = new Int32Array(e);
    nf(this._multiDrawCounts, s), nf(this._multiDrawStarts, u), this._multiDrawCounts = s, this._multiDrawStarts = u, this._maxInstanceCount = e;
    const f = this._indirectTexture, h = this._matricesTexture, p = this._colorsTexture;
    f.dispose(), this._initIndirectTexture(), nf(f.image.data, this._indirectTexture.image.data), h.dispose(), this._initMatricesTexture(), nf(h.image.data, this._matricesTexture.image.data), p && (p.dispose(), this._initColorsTexture(), nf(p.image.data, this._colorsTexture.image.data));
  }
  /**
   * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.
   * If the provided arguments shrink the geometry buffers but there is not enough unused space at the
   * end of the geometry attributes then an error is thrown.
   *
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.
   * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.
  */
  setGeometrySize(e, t) {
    const i = [...this._geometryInfo].filter((h) => h.active);
    if (Math.max(...i.map((h) => h.vertexStart + h.reservedVertexCount)) > e)
      throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${t}. Cannot shrink further.`);
    if (this.geometry.index && Math.max(...i.map((p) => p.indexStart + p.reservedIndexCount)) > t)
      throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${t}. Cannot shrink further.`);
    const u = this.geometry;
    u.dispose(), this._maxVertexCount = e, this._maxIndexCount = t, this._geometryInitialized && (this._geometryInitialized = !1, this.geometry = new on(), this._initializeGeometry(u));
    const f = this.geometry;
    u.index && nf(u.index.array, f.index.array);
    for (const h in u.attributes)
      nf(u.attributes[h].array, f.attributes[h].array);
  }
  raycast(e, t) {
    const i = this._instanceInfo, s = this._geometryInfo, u = this.matrixWorld, f = this.geometry;
    Ha.material = this.material, Ha.geometry.index = f.index, Ha.geometry.attributes = f.attributes, Ha.geometry.boundingBox === null && (Ha.geometry.boundingBox = new Ga()), Ha.geometry.boundingSphere === null && (Ha.geometry.boundingSphere = new Da());
    for (let h = 0, p = i.length; h < p; h++) {
      if (!i[h].visible || !i[h].active)
        continue;
      const v = i[h].geometryIndex, _ = s[v];
      Ha.geometry.setDrawRange(_.start, _.count), this.getMatrixAt(h, Ha.matrixWorld).premultiply(u), this.getBoundingBoxAt(v, Ha.geometry.boundingBox), this.getBoundingSphereAt(v, Ha.geometry.boundingSphere), Ha.raycast(e, n0);
      for (let S = 0, E = n0.length; S < E; S++) {
        const x = n0[S];
        x.object = this, x.batchId = h, t.push(x);
      }
      n0.length = 0;
    }
    Ha.material = null, Ha.geometry.index = null, Ha.geometry.attributes = {}, Ha.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._geometryInfo = e._geometryInfo.map((t) => ({
      ...t,
      boundingBox: t.boundingBox !== null ? t.boundingBox.clone() : null,
      boundingSphere: t.boundingSphere !== null ? t.boundingSphere.clone() : null
    })), this._instanceInfo = e._instanceInfo.map((t) => ({ ...t })), this._availableInstanceIds = e._availableInstanceIds.slice(), this._availableGeometryIds = e._availableGeometryIds.slice(), this._nextIndexStart = e._nextIndexStart, this._nextVertexStart = e._nextVertexStart, this._geometryCount = e._geometryCount, this._maxInstanceCount = e._maxInstanceCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._indirectTexture = e._indirectTexture.clone(), this._indirectTexture.image.data = this._indirectTexture.image.data.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.data.slice(), this._colorsTexture !== null && (this._colorsTexture = e._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.data.slice()), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null);
  }
  onBeforeRender(e, t, i, s, u) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const f = s.getIndex(), h = f === null ? 1 : f.array.BYTES_PER_ELEMENT, p = this._instanceInfo, v = this._multiDrawStarts, _ = this._multiDrawCounts, S = this._geometryInfo, E = this.perObjectFrustumCulled, x = this._indirectTexture, A = x.image.data, C = i.isArrayCamera ? PD : A1;
    E && !i.isArrayCamera && (Ts.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse).multiply(this.matrixWorld), A1.setFromProjectionMatrix(
      Ts,
      i.coordinateSystem,
      i.reversedDepth
    ));
    let R = 0;
    if (this.sortObjects) {
      Ts.copy(this.matrixWorld).invert(), xv.setFromMatrixPosition(i.matrixWorld).applyMatrix4(Ts), R1.set(0, 0, -1).transformDirection(i.matrixWorld).transformDirection(Ts);
      for (let N = 0, U = p.length; N < U; N++)
        if (p[N].visible && p[N].active) {
          const I = p[N].geometryIndex;
          this.getMatrixAt(N, Ts), this.getBoundingSphereAt(I, tf).applyMatrix4(Ts);
          let P = !1;
          if (E && (P = !C.intersectsSphere(tf, i)), !P) {
            const X = S[I], Y = HD.subVectors(tf.center, xv).dot(R1);
            Nx.push(X.start, X.count, Y, N);
          }
        }
      const M = Nx.list, w = this.customSort;
      w === null ? M.sort(u.transparent ? LD : OD) : w.call(this, M, i);
      for (let N = 0, U = M.length; N < U; N++) {
        const I = M[N];
        v[R] = I.start * h, _[R] = I.count, A[R] = I.index, R++;
      }
      Nx.reset();
    } else
      for (let M = 0, w = p.length; M < w; M++)
        if (p[M].visible && p[M].active) {
          const N = p[M].geometryIndex;
          let U = !1;
          if (E && (this.getMatrixAt(M, Ts), this.getBoundingSphereAt(N, tf).applyMatrix4(Ts), U = !C.intersectsSphere(tf, i)), !U) {
            const I = S[N];
            v[R] = I.start * h, _[R] = I.count, A[R] = M, R++;
          }
        }
    x.needsUpdate = !0, this._multiDrawCount = R, this._visibilityChanged = !1;
  }
  onBeforeShadow(e, t, i, s, u, f) {
    this.onBeforeRender(e, null, s, u, f);
  }
}
class fs extends Xa {
  /**
   * Constructs a new line basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Et(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const y_ = /* @__PURE__ */ new j(), __ = /* @__PURE__ */ new j(), C1 = /* @__PURE__ */ new qt(), Ev = /* @__PURE__ */ new Rf(), i0 = /* @__PURE__ */ new Da(), Ox = /* @__PURE__ */ new j(), D1 = /* @__PURE__ */ new j();
class Zu extends Nn {
  /**
   * Constructs a new line.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e = new on(), t = new fs()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Computes an array of distance values which are necessary for rendering dashed lines.
   * For each vertex in the geometry, the method calculates the cumulative length from the
   * current point to the very beginning of the line.
   *
   * @return {Line} A reference to this line.
   */
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, i = [0];
      for (let s = 1, u = t.count; s < u; s++)
        y_.fromBufferAttribute(t, s - 1), __.fromBufferAttribute(t, s), i[s] = i[s - 1], i[s] += y_.distanceTo(__);
      e.setAttribute("lineDistance", new At(i, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, t) {
    const i = this.geometry, s = this.matrixWorld, u = e.params.Line.threshold, f = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), i0.copy(i.boundingSphere), i0.applyMatrix4(s), i0.radius += u, e.ray.intersectsSphere(i0) === !1) return;
    C1.copy(s).invert(), Ev.copy(e.ray).applyMatrix4(C1);
    const h = u / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = h * h, v = this.isLineSegments ? 2 : 1, _ = i.index, E = i.attributes.position;
    if (_ !== null) {
      const x = Math.max(0, f.start), A = Math.min(_.count, f.start + f.count);
      for (let C = x, R = A - 1; C < R; C += v) {
        const M = _.getX(C), w = _.getX(C + 1), N = a0(this, e, Ev, p, M, w, C);
        N && t.push(N);
      }
      if (this.isLineLoop) {
        const C = _.getX(A - 1), R = _.getX(x), M = a0(this, e, Ev, p, C, R, A - 1);
        M && t.push(M);
      }
    } else {
      const x = Math.max(0, f.start), A = Math.min(E.count, f.start + f.count);
      for (let C = x, R = A - 1; C < R; C += v) {
        const M = a0(this, e, Ev, p, C, C + 1, C);
        M && t.push(M);
      }
      if (this.isLineLoop) {
        const C = a0(this, e, Ev, p, A - 1, x, A - 1);
        C && t.push(C);
      }
    }
  }
  /**
   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const s = t[i[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let u = 0, f = s.length; u < f; u++) {
          const h = s[u].name || String(u);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = u;
        }
      }
    }
  }
}
function a0(r, e, t, i, s, u, f) {
  const h = r.geometry.attributes.position;
  if (y_.fromBufferAttribute(h, s), __.fromBufferAttribute(h, u), t.distanceSqToSegment(y_, __, Ox, D1) > i) return;
  Ox.applyMatrix4(r.matrixWorld);
  const v = e.ray.origin.distanceTo(Ox);
  if (!(v < e.near || v > e.far))
    return {
      distance: v,
      // What do we want? intersection point on the ray or on the segment??
      // point: raycaster.ray.at( distance ),
      point: D1.clone().applyMatrix4(r.matrixWorld),
      index: f,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: r
    };
}
const w1 = /* @__PURE__ */ new j(), U1 = /* @__PURE__ */ new j();
class Ko extends Zu {
  /**
   * Constructs a new line segments.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, i = [];
      for (let s = 0, u = t.count; s < u; s += 2)
        w1.fromBufferAttribute(t, s), U1.fromBufferAttribute(t, s + 1), i[s] = s === 0 ? 0 : i[s - 1], i[s + 1] = i[s] + w1.distanceTo(U1);
      e.setAttribute("lineDistance", new At(i, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class rR extends Zu {
  /**
   * Constructs a new line loop.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class aM extends Xa {
  /**
   * Constructs a new points material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new Et(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const N1 = /* @__PURE__ */ new qt(), ME = /* @__PURE__ */ new Rf(), s0 = /* @__PURE__ */ new Da(), r0 = /* @__PURE__ */ new j();
class oR extends Nn {
  /**
   * Constructs a new point cloud.
   *
   * @param {BufferGeometry} [geometry] - The points geometry.
   * @param {Material|Array<Material>} [material] - The points material.
   */
  constructor(e = new on(), t = new aM()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Computes intersection points between a casted ray and this point cloud.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, t) {
    const i = this.geometry, s = this.matrixWorld, u = e.params.Points.threshold, f = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), s0.copy(i.boundingSphere), s0.applyMatrix4(s), s0.radius += u, e.ray.intersectsSphere(s0) === !1) return;
    N1.copy(s).invert(), ME.copy(e.ray).applyMatrix4(N1);
    const h = u / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = h * h, v = i.index, S = i.attributes.position;
    if (v !== null) {
      const E = Math.max(0, f.start), x = Math.min(v.count, f.start + f.count);
      for (let A = E, C = x; A < C; A++) {
        const R = v.getX(A);
        r0.fromBufferAttribute(S, R), O1(r0, R, p, s, e, t, this);
      }
    } else {
      const E = Math.max(0, f.start), x = Math.min(S.count, f.start + f.count);
      for (let A = E, C = x; A < C; A++)
        r0.fromBufferAttribute(S, A), O1(r0, A, p, s, e, t, this);
    }
  }
  /**
   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, i = Object.keys(t);
    if (i.length > 0) {
      const s = t[i[0]];
      if (s !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let u = 0, f = s.length; u < f; u++) {
          const h = s[u].name || String(u);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[h] = u;
        }
      }
    }
  }
}
function O1(r, e, t, i, s, u, f) {
  const h = ME.distanceSqToPoint(r);
  if (h < t) {
    const p = new j();
    ME.closestPointToPoint(r, p), p.applyMatrix4(i);
    const v = s.ray.origin.distanceTo(p);
    if (v < s.near || v > s.far) return;
    u.push({
      distance: v,
      distanceToRay: Math.sqrt(h),
      point: p,
      index: e,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: f
    });
  }
}
class lR extends Ai {
  /**
   * Constructs a new video texture.
   *
   * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, t, i, s, u = na, f = na, h, p, v) {
    super(e, t, i, s, u, f, h, p, v), this.isVideoTexture = !0, this.generateMipmaps = !1, this._requestVideoFrameCallbackId = 0;
    const _ = this;
    function S() {
      _.needsUpdate = !0, _._requestVideoFrameCallbackId = e.requestVideoFrameCallback(S);
    }
    "requestVideoFrameCallback" in e && (this._requestVideoFrameCallbackId = e.requestVideoFrameCallback(S));
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  /**
   * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}
   * to `true` every time a new frame is available.
   *
   * Only relevant if `requestVideoFrameCallback` is not supported in the browser.
   */
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
  /**
   * @override
   */
  dispose() {
    this._requestVideoFrameCallbackId !== 0 && this.source.data.cancelVideoFrameCallback(this._requestVideoFrameCallbackId), super.dispose();
  }
}
class VD extends lR {
  /**
   * Constructs a new video frame texture.
   *
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, t, i, s, u, f, h, p) {
    super({}, e, t, i, s, u, f, h, p), this.isVideoFrameTexture = !0;
  }
  /**
   * This method overwritten with an empty implementation since
   * this type of texture is updated via `setFrame()`.
   */
  update() {
  }
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the current frame of the video. This will automatically update the texture
   * so the data can be used for rendering.
   *
   * @param {VideoFrame} frame - The video frame.
   */
  setFrame(e) {
    this.image = e, this.needsUpdate = !0;
  }
}
class FD extends Ai {
  /**
   * Constructs a new framebuffer texture.
   *
   * @param {number} [width] - The width of the texture.
   * @param {number} [height] - The height of the texture.
   */
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = Ca, this.minFilter = Ca, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class q_ extends Ai {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e, t, i, s, u, f, h, p, v, _, S, E) {
    super(null, f, h, p, v, _, s, u, S, E), this.isCompressedTexture = !0, this.image = { width: t, height: i }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class GD extends q_ {
  /**
   * Constructs a new compressed array texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} depth - The depth of the texture.
   * @param {number} [format=RGBAFormat] - The min filter value.
   * @param {number} [type=UnsignedByteType] - The min filter value.
   */
  constructor(e, t, i, s, u, f) {
    super(e, t, i, u, f), this.isCompressedArrayTexture = !0, this.image.depth = s, this.wrapR = Cr, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire compressed texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class XD extends q_ {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<CompressedTexture>} images - An array of compressed textures.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   */
  constructor(e, t, i) {
    super(void 0, e[0].width, e[0].height, t, i, Fl), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class qD extends Ai {
  /**
   * Constructs a new texture.
   *
   * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, t, i, s, u, f, h, p, v) {
    super(e, t, i, s, u, f, h, p, v), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class sM extends Ai {
  /**
   * Constructs a new depth texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [type=UnsignedIntType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {number} [format=DepthFormat] - The texture format.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e, t, i = Gl, s, u, f, h = Ca, p = Ca, v, _ = np, S = 1) {
    if (_ !== np && _ !== ip)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    const E = { width: e, height: t, depth: S };
    super(E, s, u, f, h, p, _, i, v), this.isDepthTexture = !0, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.source = new qu(Object.assign({}, e.image)), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
class Y_ extends on {
  /**
   * Constructs a new capsule geometry.
   *
   * @param {number} [radius=1] - Radius of the capsule.
   * @param {number} [height=1] - Height of the middle section.
   * @param {number} [capSegments=4] - Number of curve segments used to build each cap.
   * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.
   */
  constructor(e = 1, t = 1, i = 4, s = 8, u = 1) {
    super(), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      height: t,
      capSegments: i,
      radialSegments: s,
      heightSegments: u
    }, t = Math.max(0, t), i = Math.max(1, Math.floor(i)), s = Math.max(3, Math.floor(s)), u = Math.max(1, Math.floor(u));
    const f = [], h = [], p = [], v = [], _ = t / 2, S = Math.PI / 2 * e, E = t, x = 2 * S + E, A = i * 2 + u, C = s + 1, R = new j(), M = new j();
    for (let w = 0; w <= A; w++) {
      let N = 0, U = 0, I = 0, P = 0;
      if (w <= i) {
        const z = w / i, L = z * Math.PI / 2;
        U = -_ - e * Math.cos(L), I = e * Math.sin(L), P = -e * Math.cos(L), N = z * S;
      } else if (w <= i + u) {
        const z = (w - i) / u;
        U = -_ + z * t, I = e, P = 0, N = S + z * E;
      } else {
        const z = (w - i - u) / i, L = z * Math.PI / 2;
        U = _ + e * Math.sin(L), I = e * Math.cos(L), P = e * Math.sin(L), N = S + E + z * S;
      }
      const X = Math.max(0, Math.min(1, N / x));
      let Y = 0;
      w === 0 ? Y = 0.5 / s : w === A && (Y = -0.5 / s);
      for (let z = 0; z <= s; z++) {
        const L = z / s, W = L * Math.PI * 2, me = Math.sin(W), Q = Math.cos(W);
        M.x = -I * Q, M.y = U, M.z = I * me, h.push(M.x, M.y, M.z), R.set(
          -I * Q,
          P,
          I * me
        ), R.normalize(), p.push(R.x, R.y, R.z), v.push(L + Y, X);
      }
      if (w > 0) {
        const z = (w - 1) * C;
        for (let L = 0; L < s; L++) {
          const W = z + L, me = z + L + 1, Q = w * C + L, oe = w * C + L + 1;
          f.push(W, me, Q), f.push(me, oe, Q);
        }
      }
    }
    this.setIndex(f), this.setAttribute("position", new At(h, 3)), this.setAttribute("normal", new At(p, 3)), this.setAttribute("uv", new At(v, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CapsuleGeometry} A new instance.
   */
  static fromJSON(e) {
    return new Y_(e.radius, e.height, e.capSegments, e.radialSegments, e.heightSegments);
  }
}
class W_ extends on {
  /**
   * Constructs a new circle geometry.
   *
   * @param {number} [radius=1] - Radius of the circle.
   * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.
   * @param {number} [thetaStart=0] - Start angle for first segment in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,
   * of the circular sector in radians. The default value results in a complete circle.
   */
  constructor(e = 1, t = 32, i = 0, s = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: i,
      thetaLength: s
    }, t = Math.max(3, t);
    const u = [], f = [], h = [], p = [], v = new j(), _ = new ze();
    f.push(0, 0, 0), h.push(0, 0, 1), p.push(0.5, 0.5);
    for (let S = 0, E = 3; S <= t; S++, E += 3) {
      const x = i + S / t * s;
      v.x = e * Math.cos(x), v.y = e * Math.sin(x), f.push(v.x, v.y, v.z), h.push(0, 0, 1), _.x = (f[E] / e + 1) / 2, _.y = (f[E + 1] / e + 1) / 2, p.push(_.x, _.y);
    }
    for (let S = 1; S <= t; S++)
      u.push(S, S + 1, 0);
    this.setIndex(u), this.setAttribute("position", new At(f, 3)), this.setAttribute("normal", new At(h, 3)), this.setAttribute("uv", new At(p, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CircleGeometry} A new instance.
   */
  static fromJSON(e) {
    return new W_(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class sg extends on {
  /**
   * Constructs a new cylinder geometry.
   *
   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.
   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.
   * @param {number} [height=1] - Height of the cylinder.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.
   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cylinder.
   */
  constructor(e = 1, t = 1, i = 1, s = 32, u = 1, f = !1, h = 0, p = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: i,
      radialSegments: s,
      heightSegments: u,
      openEnded: f,
      thetaStart: h,
      thetaLength: p
    };
    const v = this;
    s = Math.floor(s), u = Math.floor(u);
    const _ = [], S = [], E = [], x = [];
    let A = 0;
    const C = [], R = i / 2;
    let M = 0;
    w(), f === !1 && (e > 0 && N(!0), t > 0 && N(!1)), this.setIndex(_), this.setAttribute("position", new At(S, 3)), this.setAttribute("normal", new At(E, 3)), this.setAttribute("uv", new At(x, 2));
    function w() {
      const U = new j(), I = new j();
      let P = 0;
      const X = (t - e) / i;
      for (let Y = 0; Y <= u; Y++) {
        const z = [], L = Y / u, W = L * (t - e) + e;
        for (let me = 0; me <= s; me++) {
          const Q = me / s, oe = Q * p + h, Se = Math.sin(oe), B = Math.cos(oe);
          I.x = W * Se, I.y = -L * i + R, I.z = W * B, S.push(I.x, I.y, I.z), U.set(Se, X, B).normalize(), E.push(U.x, U.y, U.z), x.push(Q, 1 - L), z.push(A++);
        }
        C.push(z);
      }
      for (let Y = 0; Y < s; Y++)
        for (let z = 0; z < u; z++) {
          const L = C[z][Y], W = C[z + 1][Y], me = C[z + 1][Y + 1], Q = C[z][Y + 1];
          (e > 0 || z !== 0) && (_.push(L, W, Q), P += 3), (t > 0 || z !== u - 1) && (_.push(W, me, Q), P += 3);
        }
      v.addGroup(M, P, 0), M += P;
    }
    function N(U) {
      const I = A, P = new ze(), X = new j();
      let Y = 0;
      const z = U === !0 ? e : t, L = U === !0 ? 1 : -1;
      for (let me = 1; me <= s; me++)
        S.push(0, R * L, 0), E.push(0, L, 0), x.push(0.5, 0.5), A++;
      const W = A;
      for (let me = 0; me <= s; me++) {
        const oe = me / s * p + h, Se = Math.cos(oe), B = Math.sin(oe);
        X.x = z * B, X.y = R * L, X.z = z * Se, S.push(X.x, X.y, X.z), E.push(0, L, 0), P.x = Se * 0.5 + 0.5, P.y = B * 0.5 * L + 0.5, x.push(P.x, P.y), A++;
      }
      for (let me = 0; me < s; me++) {
        const Q = I + me, oe = W + me;
        U === !0 ? _.push(oe, oe + 1, Q) : _.push(oe + 1, oe, Q), Y += 3;
      }
      v.addGroup(M, Y, U === !0 ? 1 : 2), M += Y;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CylinderGeometry} A new instance.
   */
  static fromJSON(e) {
    return new sg(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class rg extends sg {
  /**
   * Constructs a new cone geometry.
   *
   * @param {number} [radius=1] - Radius of the cone base.
   * @param {number} [height=1] - Height of the cone.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.
   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cone.
   */
  constructor(e = 1, t = 1, i = 32, s = 1, u = !1, f = 0, h = Math.PI * 2) {
    super(0, e, t, i, s, u, f, h), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: i,
      heightSegments: s,
      openEnded: u,
      thetaStart: f,
      thetaLength: h
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {ConeGeometry} A new instance.
   */
  static fromJSON(e) {
    return new rg(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class ku extends on {
  /**
   * Constructs a new polyhedron geometry.
   *
   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.
   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.
   * @param {number} [radius=1] - The radius of the shape.
   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.
   */
  constructor(e = [], t = [], i = 1, s = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: i,
      detail: s
    };
    const u = [], f = [];
    h(s), v(i), _(), this.setAttribute("position", new At(u, 3)), this.setAttribute("normal", new At(u.slice(), 3)), this.setAttribute("uv", new At(f, 2)), s === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function h(w) {
      const N = new j(), U = new j(), I = new j();
      for (let P = 0; P < t.length; P += 3)
        x(t[P + 0], N), x(t[P + 1], U), x(t[P + 2], I), p(N, U, I, w);
    }
    function p(w, N, U, I) {
      const P = I + 1, X = [];
      for (let Y = 0; Y <= P; Y++) {
        X[Y] = [];
        const z = w.clone().lerp(U, Y / P), L = N.clone().lerp(U, Y / P), W = P - Y;
        for (let me = 0; me <= W; me++)
          me === 0 && Y === P ? X[Y][me] = z : X[Y][me] = z.clone().lerp(L, me / W);
      }
      for (let Y = 0; Y < P; Y++)
        for (let z = 0; z < 2 * (P - Y) - 1; z++) {
          const L = Math.floor(z / 2);
          z % 2 === 0 ? (E(X[Y][L + 1]), E(X[Y + 1][L]), E(X[Y][L])) : (E(X[Y][L + 1]), E(X[Y + 1][L + 1]), E(X[Y + 1][L]));
        }
    }
    function v(w) {
      const N = new j();
      for (let U = 0; U < u.length; U += 3)
        N.x = u[U + 0], N.y = u[U + 1], N.z = u[U + 2], N.normalize().multiplyScalar(w), u[U + 0] = N.x, u[U + 1] = N.y, u[U + 2] = N.z;
    }
    function _() {
      const w = new j();
      for (let N = 0; N < u.length; N += 3) {
        w.x = u[N + 0], w.y = u[N + 1], w.z = u[N + 2];
        const U = R(w) / 2 / Math.PI + 0.5, I = M(w) / Math.PI + 0.5;
        f.push(U, 1 - I);
      }
      A(), S();
    }
    function S() {
      for (let w = 0; w < f.length; w += 6) {
        const N = f[w + 0], U = f[w + 2], I = f[w + 4], P = Math.max(N, U, I), X = Math.min(N, U, I);
        P > 0.9 && X < 0.1 && (N < 0.2 && (f[w + 0] += 1), U < 0.2 && (f[w + 2] += 1), I < 0.2 && (f[w + 4] += 1));
      }
    }
    function E(w) {
      u.push(w.x, w.y, w.z);
    }
    function x(w, N) {
      const U = w * 3;
      N.x = e[U + 0], N.y = e[U + 1], N.z = e[U + 2];
    }
    function A() {
      const w = new j(), N = new j(), U = new j(), I = new j(), P = new ze(), X = new ze(), Y = new ze();
      for (let z = 0, L = 0; z < u.length; z += 9, L += 6) {
        w.set(u[z + 0], u[z + 1], u[z + 2]), N.set(u[z + 3], u[z + 4], u[z + 5]), U.set(u[z + 6], u[z + 7], u[z + 8]), P.set(f[L + 0], f[L + 1]), X.set(f[L + 2], f[L + 3]), Y.set(f[L + 4], f[L + 5]), I.copy(w).add(N).add(U).divideScalar(3);
        const W = R(I);
        C(P, L + 0, w, W), C(X, L + 2, N, W), C(Y, L + 4, U, W);
      }
    }
    function C(w, N, U, I) {
      I < 0 && w.x === 1 && (f[N] = w.x - 1), U.x === 0 && U.z === 0 && (f[N] = I / 2 / Math.PI + 0.5);
    }
    function R(w) {
      return Math.atan2(w.z, -w.x);
    }
    function M(w) {
      return Math.atan2(-w.y, Math.sqrt(w.x * w.x + w.z * w.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PolyhedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new ku(e.vertices, e.indices, e.radius, e.details);
  }
}
class j_ extends ku {
  /**
   * Constructs a new dodecahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the dodecahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.
   */
  constructor(e = 1, t = 0) {
    const i = (1 + Math.sqrt(5)) / 2, s = 1 / i, u = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -s,
      -i,
      0,
      -s,
      i,
      0,
      s,
      -i,
      0,
      s,
      i,
      // (±1/φ, ±φ, 0)
      -s,
      -i,
      0,
      -s,
      i,
      0,
      s,
      -i,
      0,
      s,
      i,
      0,
      // (±φ, 0, ±1/φ)
      -i,
      0,
      -s,
      i,
      0,
      -s,
      -i,
      0,
      s,
      i,
      0,
      s
    ], f = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(u, f, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {DodecahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new j_(e.radius, e.detail);
  }
}
const o0 = /* @__PURE__ */ new j(), l0 = /* @__PURE__ */ new j(), Lx = /* @__PURE__ */ new j(), u0 = /* @__PURE__ */ new Cs();
class uR extends on {
  /**
   * Constructs a new edges geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)
   * between the face normals of the adjoining faces exceeds this value.
   */
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const s = Math.pow(10, 4), u = Math.cos(xf * t), f = e.getIndex(), h = e.getAttribute("position"), p = f ? f.count : h.count, v = [0, 0, 0], _ = ["a", "b", "c"], S = new Array(3), E = {}, x = [];
      for (let A = 0; A < p; A += 3) {
        f ? (v[0] = f.getX(A), v[1] = f.getX(A + 1), v[2] = f.getX(A + 2)) : (v[0] = A, v[1] = A + 1, v[2] = A + 2);
        const { a: C, b: R, c: M } = u0;
        if (C.fromBufferAttribute(h, v[0]), R.fromBufferAttribute(h, v[1]), M.fromBufferAttribute(h, v[2]), u0.getNormal(Lx), S[0] = `${Math.round(C.x * s)},${Math.round(C.y * s)},${Math.round(C.z * s)}`, S[1] = `${Math.round(R.x * s)},${Math.round(R.y * s)},${Math.round(R.z * s)}`, S[2] = `${Math.round(M.x * s)},${Math.round(M.y * s)},${Math.round(M.z * s)}`, !(S[0] === S[1] || S[1] === S[2] || S[2] === S[0]))
          for (let w = 0; w < 3; w++) {
            const N = (w + 1) % 3, U = S[w], I = S[N], P = u0[_[w]], X = u0[_[N]], Y = `${U}_${I}`, z = `${I}_${U}`;
            z in E && E[z] ? (Lx.dot(E[z].normal) <= u && (x.push(P.x, P.y, P.z), x.push(X.x, X.y, X.z)), E[z] = null) : Y in E || (E[Y] = {
              index0: v[w],
              index1: v[N],
              normal: Lx.clone()
            });
          }
      }
      for (const A in E)
        if (E[A]) {
          const { index0: C, index1: R } = E[A];
          o0.fromBufferAttribute(h, C), l0.fromBufferAttribute(h, R), x.push(o0.x, o0.y, o0.z), x.push(l0.x, l0.y, l0.z);
        }
      this.setAttribute("position", new At(x, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class lo {
  /**
   * Constructs a new curve.
   */
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200, this.needsUpdate = !1, this.cacheArcLengths = null;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor.
   *
   * @abstract
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length
   * of the curve which equidistant samples.
   *
   * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPointAt(e, t) {
    const i = this.getUtoTmapping(e);
    return this.getPoint(i, t);
  }
  /**
   * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing
   * the curve shape.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getPoints(e = 5) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPoint(i / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  /**
   * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing
   * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire
   * curve.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getSpacedPoints(e = 5) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPointAt(i / e));
    return t;
  }
  /**
   * Returns the total arc length of the curve.
   *
   * @return {number} The length of the curve.
   */
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  /**
   * Returns an array of cumulative segment lengths of the curve.
   *
   * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.
   * @return {Array<number>} An array holding the cumulative segment lengths.
   */
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let i, s = this.getPoint(0), u = 0;
    t.push(0);
    for (let f = 1; f <= e; f++)
      i = this.getPoint(f / e), u += i.distanceTo(s), t.push(u), s = i;
    return this.cacheArcLengths = t, t;
  }
  /**
   * Update the cumulative segment distance cache. The method must be called
   * every time curve parameters are changed. If an updated curve is part of a
   * composed curve like {@link CurvePath}, this method must be called on the
   * composed curve, too.
   */
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  /**
   * Given an interpolation factor in the range `[0,1]`, this method returns an updated
   * interpolation factor in the same range that can be ued to sample equidistant points
   * from a curve.
   *
   * @param {number} u - The interpolation factor.
   * @param {?number} distance - An optional distance on the curve.
   * @return {number} The updated interpolation factor.
   */
  getUtoTmapping(e, t = null) {
    const i = this.getLengths();
    let s = 0;
    const u = i.length;
    let f;
    t ? f = t : f = e * i[u - 1];
    let h = 0, p = u - 1, v;
    for (; h <= p; )
      if (s = Math.floor(h + (p - h) / 2), v = i[s] - f, v < 0)
        h = s + 1;
      else if (v > 0)
        p = s - 1;
      else {
        p = s;
        break;
      }
    if (s = p, i[s] === f)
      return s / (u - 1);
    const _ = i[s], E = i[s + 1] - _, x = (f - _) / E;
    return (s + x) / (u - 1);
  }
  /**
   * Returns a unit vector tangent for the given interpolation factor.
   * If the derived curve does not implement its tangent derivation,
   * two points a small delta apart will be used to find its gradient
   * which seems to give a reasonable approximation.
   *
   * @param {number} t - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   */
  getTangent(e, t) {
    let s = e - 1e-4, u = e + 1e-4;
    s < 0 && (s = 0), u > 1 && (u = 1);
    const f = this.getPoint(s), h = this.getPoint(u), p = t || (f.isVector2 ? new ze() : new j());
    return p.copy(h).sub(f).normalize(), p;
  }
  /**
   * Same as {@link Curve#getTangent} but with equidistant samples.
   *
   * @param {number} u - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   * @see {@link Curve#getPointAt}
   */
  getTangentAt(e, t) {
    const i = this.getUtoTmapping(e);
    return this.getTangent(i, t);
  }
  /**
   * Generates the Frenet Frames. Requires a curve definition in 3D space. Used
   * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.
   *
   * @param {number} segments - The number of segments.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.
   */
  computeFrenetFrames(e, t = !1) {
    const i = new j(), s = [], u = [], f = [], h = new j(), p = new qt();
    for (let x = 0; x <= e; x++) {
      const A = x / e;
      s[x] = this.getTangentAt(A, new j());
    }
    u[0] = new j(), f[0] = new j();
    let v = Number.MAX_VALUE;
    const _ = Math.abs(s[0].x), S = Math.abs(s[0].y), E = Math.abs(s[0].z);
    _ <= v && (v = _, i.set(1, 0, 0)), S <= v && (v = S, i.set(0, 1, 0)), E <= v && i.set(0, 0, 1), h.crossVectors(s[0], i).normalize(), u[0].crossVectors(s[0], h), f[0].crossVectors(s[0], u[0]);
    for (let x = 1; x <= e; x++) {
      if (u[x] = u[x - 1].clone(), f[x] = f[x - 1].clone(), h.crossVectors(s[x - 1], s[x]), h.length() > Number.EPSILON) {
        h.normalize();
        const A = Math.acos(Xt(s[x - 1].dot(s[x]), -1, 1));
        u[x].applyMatrix4(p.makeRotationAxis(h, A));
      }
      f[x].crossVectors(s[x], u[x]);
    }
    if (t === !0) {
      let x = Math.acos(Xt(u[0].dot(u[e]), -1, 1));
      x /= e, s[0].dot(h.crossVectors(u[0], u[e])) > 0 && (x = -x);
      for (let A = 1; A <= e; A++)
        u[A].applyMatrix4(p.makeRotationAxis(s[A], x * A)), f[A].crossVectors(s[A], u[A]);
    }
    return {
      tangents: s,
      normals: u,
      binormals: f
    };
  }
  /**
   * Returns a new curve with copied values from this instance.
   *
   * @return {Curve} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given curve to this instance.
   *
   * @param {Curve} source - The curve to copy.
   * @return {Curve} A reference to this curve.
   */
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  /**
   * Serializes the curve into JSON.
   *
   * @return {Object} A JSON object representing the serialized curve.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  /**
   * Deserializes the curve from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized curve.
   * @return {Curve} A reference to this curve.
   */
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class Z_ extends lo {
  /**
   * Constructs a new ellipse curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   */
  constructor(e = 0, t = 0, i = 1, s = 1, u = 0, f = Math.PI * 2, h = !1, p = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = i, this.yRadius = s, this.aStartAngle = u, this.aEndAngle = f, this.aClockwise = h, this.aRotation = p;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, t = new ze()) {
    const i = t, s = Math.PI * 2;
    let u = this.aEndAngle - this.aStartAngle;
    const f = Math.abs(u) < Number.EPSILON;
    for (; u < 0; ) u += s;
    for (; u > s; ) u -= s;
    u < Number.EPSILON && (f ? u = 0 : u = s), this.aClockwise === !0 && !f && (u === s ? u = -s : u = u - s);
    const h = this.aStartAngle + e * u;
    let p = this.aX + this.xRadius * Math.cos(h), v = this.aY + this.yRadius * Math.sin(h);
    if (this.aRotation !== 0) {
      const _ = Math.cos(this.aRotation), S = Math.sin(this.aRotation), E = p - this.aX, x = v - this.aY;
      p = E * _ - x * S + this.aX, v = E * S + x * _ + this.aY;
    }
    return i.set(p, v);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class cR extends Z_ {
  /**
   * Constructs a new arc curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   */
  constructor(e, t, i, s, u, f) {
    super(e, t, i, i, s, u, f), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function rM() {
  let r = 0, e = 0, t = 0, i = 0;
  function s(u, f, h, p) {
    r = u, e = h, t = -3 * u + 3 * f - 2 * h - p, i = 2 * u - 2 * f + h + p;
  }
  return {
    initCatmullRom: function(u, f, h, p, v) {
      s(f, h, v * (h - u), v * (p - f));
    },
    initNonuniformCatmullRom: function(u, f, h, p, v, _, S) {
      let E = (f - u) / v - (h - u) / (v + _) + (h - f) / _, x = (h - f) / _ - (p - f) / (_ + S) + (p - h) / S;
      E *= _, x *= _, s(f, h, E, x);
    },
    calc: function(u) {
      const f = u * u, h = f * u;
      return r + e * u + t * f + i * h;
    }
  };
}
const c0 = /* @__PURE__ */ new j(), zx = /* @__PURE__ */ new rM(), Bx = /* @__PURE__ */ new rM(), Px = /* @__PURE__ */ new rM();
class fR extends lo {
  /**
   * Constructs a new Catmull-Rom curve.
   *
   * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.
   * @param {number} [tension=0.5] - Tension of the curve.
   */
  constructor(e = [], t = !1, i = "centripetal", s = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = i, this.tension = s;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, t = new j()) {
    const i = t, s = this.points, u = s.length, f = (u - (this.closed ? 0 : 1)) * e;
    let h = Math.floor(f), p = f - h;
    this.closed ? h += h > 0 ? 0 : (Math.floor(Math.abs(h) / u) + 1) * u : p === 0 && h === u - 1 && (h = u - 2, p = 1);
    let v, _;
    this.closed || h > 0 ? v = s[(h - 1) % u] : (c0.subVectors(s[0], s[1]).add(s[0]), v = c0);
    const S = s[h % u], E = s[(h + 1) % u];
    if (this.closed || h + 2 < u ? _ = s[(h + 2) % u] : (c0.subVectors(s[u - 1], s[u - 2]).add(s[u - 1]), _ = c0), this.curveType === "centripetal" || this.curveType === "chordal") {
      const x = this.curveType === "chordal" ? 0.5 : 0.25;
      let A = Math.pow(v.distanceToSquared(S), x), C = Math.pow(S.distanceToSquared(E), x), R = Math.pow(E.distanceToSquared(_), x);
      C < 1e-4 && (C = 1), A < 1e-4 && (A = C), R < 1e-4 && (R = C), zx.initNonuniformCatmullRom(v.x, S.x, E.x, _.x, A, C, R), Bx.initNonuniformCatmullRom(v.y, S.y, E.y, _.y, A, C, R), Px.initNonuniformCatmullRom(v.z, S.z, E.z, _.z, A, C, R);
    } else this.curveType === "catmullrom" && (zx.initCatmullRom(v.x, S.x, E.x, _.x, this.tension), Bx.initCatmullRom(v.y, S.y, E.y, _.y, this.tension), Px.initCatmullRom(v.z, S.z, E.z, _.z, this.tension));
    return i.set(
      zx.calc(p),
      Bx.calc(p),
      Px.calc(p)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const s = e.points[t];
      this.points.push(s.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, i = this.points.length; t < i; t++) {
      const s = this.points[t];
      e.points.push(s.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const s = e.points[t];
      this.points.push(new j().fromArray(s));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function L1(r, e, t, i, s) {
  const u = (i - e) * 0.5, f = (s - t) * 0.5, h = r * r, p = r * h;
  return (2 * t - 2 * i + u + f) * p + (-3 * t + 3 * i - 2 * u - f) * h + u * r + t;
}
function YD(r, e) {
  const t = 1 - r;
  return t * t * e;
}
function WD(r, e) {
  return 2 * (1 - r) * r * e;
}
function jD(r, e) {
  return r * r * e;
}
function Bv(r, e, t, i) {
  return YD(r, e) + WD(r, t) + jD(r, i);
}
function ZD(r, e) {
  const t = 1 - r;
  return t * t * t * e;
}
function KD(r, e) {
  const t = 1 - r;
  return 3 * t * t * r * e;
}
function QD(r, e) {
  return 3 * (1 - r) * r * r * e;
}
function kD(r, e) {
  return r * r * r * e;
}
function Pv(r, e, t, i, s) {
  return ZD(r, e) + KD(r, t) + QD(r, i) + kD(r, s);
}
class oM extends lo {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The first control point.
   * @param {Vector2} [v2] - The second control point.
   * @param {Vector2} [v3] - The end point.
   */
  constructor(e = new ze(), t = new ze(), i = new ze(), s = new ze()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = i, this.v3 = s;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, t = new ze()) {
    const i = t, s = this.v0, u = this.v1, f = this.v2, h = this.v3;
    return i.set(
      Pv(e, s.x, u.x, f.x, h.x),
      Pv(e, s.y, u.y, f.y, h.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class hR extends lo {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The first control point.
   * @param {Vector3} [v2] - The second control point.
   * @param {Vector3} [v3] - The end point.
   */
  constructor(e = new j(), t = new j(), i = new j(), s = new j()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = i, this.v3 = s;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, t = new j()) {
    const i = t, s = this.v0, u = this.v1, f = this.v2, h = this.v3;
    return i.set(
      Pv(e, s.x, u.x, f.x, h.x),
      Pv(e, s.y, u.y, f.y, h.y),
      Pv(e, s.z, u.z, f.z, h.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class lM extends lo {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector2} [v1] - The start point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(e = new ze(), t = new ze()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the line.
   */
  getPoint(e, t = new ze()) {
    const i = t;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new ze()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class dR extends lo {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector3} [v1] - The start point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(e = new j(), t = new j()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the line.
   */
  getPoint(e, t = new j()) {
    const i = t;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new j()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class uM extends lo {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The control point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(e = new ze(), t = new ze(), i = new ze()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, t = new ze()) {
    const i = t, s = this.v0, u = this.v1, f = this.v2;
    return i.set(
      Bv(e, s.x, u.x, f.x),
      Bv(e, s.y, u.y, f.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class cM extends lo {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The control point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(e = new j(), t = new j(), i = new j()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, t = new j()) {
    const i = t, s = this.v0, u = this.v1, f = this.v2;
    return i.set(
      Bv(e, s.x, u.x, f.x),
      Bv(e, s.y, u.y, f.y),
      Bv(e, s.z, u.z, f.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class fM extends lo {
  /**
   * Constructs a new 2D spline curve.
   *
   * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.
   */
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, t = new ze()) {
    const i = t, s = this.points, u = (s.length - 1) * e, f = Math.floor(u), h = u - f, p = s[f === 0 ? f : f - 1], v = s[f], _ = s[f > s.length - 2 ? s.length - 1 : f + 1], S = s[f > s.length - 3 ? s.length - 1 : f + 2];
    return i.set(
      L1(h, p.x, v.x, _.x, S.x),
      L1(h, p.y, v.y, _.y, S.y)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const s = e.points[t];
      this.points.push(s.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, i = this.points.length; t < i; t++) {
      const s = this.points[t];
      e.points.push(s.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, i = e.points.length; t < i; t++) {
      const s = e.points[t];
      this.points.push(new ze().fromArray(s));
    }
    return this;
  }
}
var S_ = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: cR,
  CatmullRomCurve3: fR,
  CubicBezierCurve: oM,
  CubicBezierCurve3: hR,
  EllipseCurve: Z_,
  LineCurve: lM,
  LineCurve3: dR,
  QuadraticBezierCurve: uM,
  QuadraticBezierCurve3: cM,
  SplineCurve: fM
});
class pR extends lo {
  /**
   * Constructs a new curve path.
   */
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  /**
   * Adds a curve to this curve path.
   *
   * @param {Curve} curve - The curve to add.
   */
  add(e) {
    this.curves.push(e);
  }
  /**
   * Adds a line curve to close the path.
   *
   * @return {CurvePath} A reference to this curve path.
   */
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const i = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new S_[i](t, e));
    }
    return this;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definitions)
   * for the given interpolation factor.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint(e, t) {
    const i = e * this.getLength(), s = this.getCurveLengths();
    let u = 0;
    for (; u < s.length; ) {
      if (s[u] >= i) {
        const f = s[u] - i, h = this.curves[u], p = h.getLength(), v = p === 0 ? 0 : 1 - f / p;
        return h.getPointAt(v, t);
      }
      u++;
    }
    return null;
  }
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  /**
   * Returns list of cumulative curve lengths of the defined curves.
   *
   * @return {Array<number>} The curve lengths.
   */
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let i = 0, s = this.curves.length; i < s; i++)
      t += this.curves[i].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let i = 0; i <= e; i++)
      t.push(this.getPoint(i / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let i;
    for (let s = 0, u = this.curves; s < u.length; s++) {
      const f = u[s], h = f.isEllipseCurve ? e * 2 : f.isLineCurve || f.isLineCurve3 ? 1 : f.isSplineCurve ? e * f.points.length : e, p = f.getPoints(h);
      for (let v = 0; v < p.length; v++) {
        const _ = p[v];
        i && i.equals(_) || (t.push(_), i = _);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, i = e.curves.length; t < i; t++) {
      const s = e.curves[t];
      this.curves.push(s.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, i = this.curves.length; t < i; t++) {
      const s = this.curves[t];
      e.curves.push(s.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, i = e.curves.length; t < i; t++) {
      const s = e.curves[t];
      this.curves.push(new S_[s.type]().fromJSON(s));
    }
    return this;
  }
}
class x_ extends pR {
  /**
   * Constructs a new path.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the path.
   */
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new ze(), e && this.setFromPoints(e);
  }
  /**
   * Creates a path from the given list of points. The points are added
   * to the path as instances of {@link LineCurve}.
   *
   * @param {Array<Vector2>} points - An array of 2D points.
   * @return {Path} A reference to this path.
   */
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, i = e.length; t < i; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  /**
   * Moves {@link Path#currentPoint} to the given point.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {Path} A reference to this path.
   */
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  lineTo(e, t) {
    const i = new lM(this.currentPoint.clone(), new ze(e, t));
    return this.curves.push(i), this.currentPoint.set(e, t), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  quadraticCurveTo(e, t, i, s) {
    const u = new uM(
      this.currentPoint.clone(),
      new ze(e, t),
      new ze(i, s)
    );
    return this.curves.push(u), this.currentPoint.set(i, s), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  bezierCurveTo(e, t, i, s, u, f) {
    const h = new oM(
      this.currentPoint.clone(),
      new ze(e, t),
      new ze(i, s),
      new ze(u, f)
    );
    return this.curves.push(h), this.currentPoint.set(u, f), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {Path} A reference to this path.
   */
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), i = new fM(t);
    return this.curves.push(i), this.currentPoint.copy(e[e.length - 1]), this;
  }
  /**
   * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point.
   *
   * @param {number} [aX=0] - The x coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} [aY=0] - The y coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} [aRadius=1] - The radius of the arc.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  arc(e, t, i, s, u, f) {
    const h = this.currentPoint.x, p = this.currentPoint.y;
    return this.absarc(
      e + h,
      t + p,
      i,
      s,
      u,
      f
    ), this;
  }
  /**
   * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} [aX=0] - The x coordinate of the center of the arc.
   * @param {number} [aY=0] - The y coordinate of the center of the arc.
   * @param {number} [aRadius=1] - The radius of the arc.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  absarc(e, t, i, s, u, f) {
    return this.absellipse(e, t, i, i, s, u, f), this;
  }
  /**
   * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point
   *
   * @param {number} [aX=0] - The x coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} [aY=0] - The y coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x axis.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y axis.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  ellipse(e, t, i, s, u, f, h, p) {
    const v = this.currentPoint.x, _ = this.currentPoint.y;
    return this.absellipse(e + v, t + _, i, s, u, f, h, p), this;
  }
  /**
   * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} [aX=0] - The x coordinate of the absolute center of the ellipse.
   * @param {number} [aY=0] - The y coordinate of the absolute center of the ellipse.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x axis.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y axis.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  absellipse(e, t, i, s, u, f, h, p) {
    const v = new Z_(e, t, i, s, u, f, h, p);
    if (this.curves.length > 0) {
      const S = v.getPoint(0);
      S.equals(this.currentPoint) || this.lineTo(S.x, S.y);
    }
    this.curves.push(v);
    const _ = v.getPoint(1);
    return this.currentPoint.copy(_), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Ef extends x_ {
  /**
   * Constructs a new shape.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.
   */
  constructor(e) {
    super(e), this.uuid = Qs(), this.type = "Shape", this.holes = [];
  }
  /**
   * Returns an array representing each contour of the holes
   * as a list of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {Array<Array<Vector2>>} The holes as a series of 2D points.
   */
  getPointsHoles(e) {
    const t = [];
    for (let i = 0, s = this.holes.length; i < s; i++)
      t[i] = this.holes[i].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  /**
   * Returns an object that holds contour data for the shape and its holes as
   * arrays of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.
   */
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, i = e.holes.length; t < i; t++) {
      const s = e.holes[t];
      this.holes.push(s.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, i = this.holes.length; t < i; t++) {
      const s = this.holes[t];
      e.holes.push(s.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, i = e.holes.length; t < i; t++) {
      const s = e.holes[t];
      this.holes.push(new x_().fromJSON(s));
    }
    return this;
  }
}
function JD(r, e, t = 2) {
  const i = e && e.length, s = i ? e[0] * t : r.length;
  let u = mR(r, 0, s, t, !0);
  const f = [];
  if (!u || u.next === u.prev) return f;
  let h, p, v;
  if (i && (u = i3(r, e, u, t)), r.length > 80 * t) {
    h = 1 / 0, p = 1 / 0;
    let _ = -1 / 0, S = -1 / 0;
    for (let E = t; E < s; E += t) {
      const x = r[E], A = r[E + 1];
      x < h && (h = x), A < p && (p = A), x > _ && (_ = x), A > S && (S = A);
    }
    v = Math.max(_ - h, S - p), v = v !== 0 ? 32767 / v : 0;
  }
  return Zv(u, f, t, h, p, v, 0), f;
}
function mR(r, e, t, i, s) {
  let u;
  if (s === p3(r, e, t, i) > 0)
    for (let f = e; f < t; f += i) u = z1(f / i | 0, r[f], r[f + 1], u);
  else
    for (let f = t - i; f >= e; f -= i) u = z1(f / i | 0, r[f], r[f + 1], u);
  return u && up(u, u.next) && (Qv(u), u = u.next), u;
}
function Tf(r, e) {
  if (!r) return r;
  e || (e = r);
  let t = r, i;
  do
    if (i = !1, !t.steiner && (up(t, t.next) || mi(t.prev, t, t.next) === 0)) {
      if (Qv(t), t = e = t.prev, t === t.next) break;
      i = !0;
    } else
      t = t.next;
  while (i || t !== e);
  return e;
}
function Zv(r, e, t, i, s, u, f) {
  if (!r) return;
  !f && u && l3(r, i, s, u);
  let h = r;
  for (; r.prev !== r.next; ) {
    const p = r.prev, v = r.next;
    if (u ? e3(r, i, s, u) : $D(r)) {
      e.push(p.i, r.i, v.i), Qv(r), r = v.next, h = v.next;
      continue;
    }
    if (r = v, r === h) {
      f ? f === 1 ? (r = t3(Tf(r), e), Zv(r, e, t, i, s, u, 2)) : f === 2 && n3(r, e, t, i, s, u) : Zv(Tf(r), e, t, i, s, u, 1);
      break;
    }
  }
}
function $D(r) {
  const e = r.prev, t = r, i = r.next;
  if (mi(e, t, i) >= 0) return !1;
  const s = e.x, u = t.x, f = i.x, h = e.y, p = t.y, v = i.y, _ = Math.min(s, u, f), S = Math.min(h, p, v), E = Math.max(s, u, f), x = Math.max(h, p, v);
  let A = i.next;
  for (; A !== e; ) {
    if (A.x >= _ && A.x <= E && A.y >= S && A.y <= x && Tv(s, h, u, p, f, v, A.x, A.y) && mi(A.prev, A, A.next) >= 0) return !1;
    A = A.next;
  }
  return !0;
}
function e3(r, e, t, i) {
  const s = r.prev, u = r, f = r.next;
  if (mi(s, u, f) >= 0) return !1;
  const h = s.x, p = u.x, v = f.x, _ = s.y, S = u.y, E = f.y, x = Math.min(h, p, v), A = Math.min(_, S, E), C = Math.max(h, p, v), R = Math.max(_, S, E), M = bE(x, A, e, t, i), w = bE(C, R, e, t, i);
  let N = r.prevZ, U = r.nextZ;
  for (; N && N.z >= M && U && U.z <= w; ) {
    if (N.x >= x && N.x <= C && N.y >= A && N.y <= R && N !== s && N !== f && Tv(h, _, p, S, v, E, N.x, N.y) && mi(N.prev, N, N.next) >= 0 || (N = N.prevZ, U.x >= x && U.x <= C && U.y >= A && U.y <= R && U !== s && U !== f && Tv(h, _, p, S, v, E, U.x, U.y) && mi(U.prev, U, U.next) >= 0)) return !1;
    U = U.nextZ;
  }
  for (; N && N.z >= M; ) {
    if (N.x >= x && N.x <= C && N.y >= A && N.y <= R && N !== s && N !== f && Tv(h, _, p, S, v, E, N.x, N.y) && mi(N.prev, N, N.next) >= 0) return !1;
    N = N.prevZ;
  }
  for (; U && U.z <= w; ) {
    if (U.x >= x && U.x <= C && U.y >= A && U.y <= R && U !== s && U !== f && Tv(h, _, p, S, v, E, U.x, U.y) && mi(U.prev, U, U.next) >= 0) return !1;
    U = U.nextZ;
  }
  return !0;
}
function t3(r, e) {
  let t = r;
  do {
    const i = t.prev, s = t.next.next;
    !up(i, s) && gR(i, t, t.next, s) && Kv(i, s) && Kv(s, i) && (e.push(i.i, t.i, s.i), Qv(t), Qv(t.next), t = r = s), t = t.next;
  } while (t !== r);
  return Tf(t);
}
function n3(r, e, t, i, s, u) {
  let f = r;
  do {
    let h = f.next.next;
    for (; h !== f.prev; ) {
      if (f.i !== h.i && f3(f, h)) {
        let p = yR(f, h);
        f = Tf(f, f.next), p = Tf(p, p.next), Zv(f, e, t, i, s, u, 0), Zv(p, e, t, i, s, u, 0);
        return;
      }
      h = h.next;
    }
    f = f.next;
  } while (f !== r);
}
function i3(r, e, t, i) {
  const s = [];
  for (let u = 0, f = e.length; u < f; u++) {
    const h = e[u] * i, p = u < f - 1 ? e[u + 1] * i : r.length, v = mR(r, h, p, i, !1);
    v === v.next && (v.steiner = !0), s.push(c3(v));
  }
  s.sort(a3);
  for (let u = 0; u < s.length; u++)
    t = s3(s[u], t);
  return t;
}
function a3(r, e) {
  let t = r.x - e.x;
  if (t === 0 && (t = r.y - e.y, t === 0)) {
    const i = (r.next.y - r.y) / (r.next.x - r.x), s = (e.next.y - e.y) / (e.next.x - e.x);
    t = i - s;
  }
  return t;
}
function s3(r, e) {
  const t = r3(r, e);
  if (!t)
    return e;
  const i = yR(t, r);
  return Tf(i, i.next), Tf(t, t.next);
}
function r3(r, e) {
  let t = e;
  const i = r.x, s = r.y;
  let u = -1 / 0, f;
  if (up(r, t)) return t;
  do {
    if (up(r, t.next)) return t.next;
    if (s <= t.y && s >= t.next.y && t.next.y !== t.y) {
      const S = t.x + (s - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (S <= i && S > u && (u = S, f = t.x < t.next.x ? t : t.next, S === i))
        return f;
    }
    t = t.next;
  } while (t !== e);
  if (!f) return null;
  const h = f, p = f.x, v = f.y;
  let _ = 1 / 0;
  t = f;
  do {
    if (i >= t.x && t.x >= p && i !== t.x && vR(s < v ? i : u, s, p, v, s < v ? u : i, s, t.x, t.y)) {
      const S = Math.abs(s - t.y) / (i - t.x);
      Kv(t, r) && (S < _ || S === _ && (t.x > f.x || t.x === f.x && o3(f, t))) && (f = t, _ = S);
    }
    t = t.next;
  } while (t !== h);
  return f;
}
function o3(r, e) {
  return mi(r.prev, r, e.prev) < 0 && mi(e.next, r, r.next) < 0;
}
function l3(r, e, t, i) {
  let s = r;
  do
    s.z === 0 && (s.z = bE(s.x, s.y, e, t, i)), s.prevZ = s.prev, s.nextZ = s.next, s = s.next;
  while (s !== r);
  s.prevZ.nextZ = null, s.prevZ = null, u3(s);
}
function u3(r) {
  let e, t = 1;
  do {
    let i = r, s;
    r = null;
    let u = null;
    for (e = 0; i; ) {
      e++;
      let f = i, h = 0;
      for (let v = 0; v < t && (h++, f = f.nextZ, !!f); v++)
        ;
      let p = t;
      for (; h > 0 || p > 0 && f; )
        h !== 0 && (p === 0 || !f || i.z <= f.z) ? (s = i, i = i.nextZ, h--) : (s = f, f = f.nextZ, p--), u ? u.nextZ = s : r = s, s.prevZ = u, u = s;
      i = f;
    }
    u.nextZ = null, t *= 2;
  } while (e > 1);
  return r;
}
function bE(r, e, t, i, s) {
  return r = (r - t) * s | 0, e = (e - i) * s | 0, r = (r | r << 8) & 16711935, r = (r | r << 4) & 252645135, r = (r | r << 2) & 858993459, r = (r | r << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, r | e << 1;
}
function c3(r) {
  let e = r, t = r;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== r);
  return t;
}
function vR(r, e, t, i, s, u, f, h) {
  return (s - f) * (e - h) >= (r - f) * (u - h) && (r - f) * (i - h) >= (t - f) * (e - h) && (t - f) * (u - h) >= (s - f) * (i - h);
}
function Tv(r, e, t, i, s, u, f, h) {
  return !(r === f && e === h) && vR(r, e, t, i, s, u, f, h);
}
function f3(r, e) {
  return r.next.i !== e.i && r.prev.i !== e.i && !h3(r, e) && // dones't intersect other edges
  (Kv(r, e) && Kv(e, r) && d3(r, e) && // locally visible
  (mi(r.prev, r, e.prev) || mi(r, e.prev, e)) || // does not create opposite-facing sectors
  up(r, e) && mi(r.prev, r, r.next) > 0 && mi(e.prev, e, e.next) > 0);
}
function mi(r, e, t) {
  return (e.y - r.y) * (t.x - e.x) - (e.x - r.x) * (t.y - e.y);
}
function up(r, e) {
  return r.x === e.x && r.y === e.y;
}
function gR(r, e, t, i) {
  const s = h0(mi(r, e, t)), u = h0(mi(r, e, i)), f = h0(mi(t, i, r)), h = h0(mi(t, i, e));
  return !!(s !== u && f !== h || s === 0 && f0(r, t, e) || u === 0 && f0(r, i, e) || f === 0 && f0(t, r, i) || h === 0 && f0(t, e, i));
}
function f0(r, e, t) {
  return e.x <= Math.max(r.x, t.x) && e.x >= Math.min(r.x, t.x) && e.y <= Math.max(r.y, t.y) && e.y >= Math.min(r.y, t.y);
}
function h0(r) {
  return r > 0 ? 1 : r < 0 ? -1 : 0;
}
function h3(r, e) {
  let t = r;
  do {
    if (t.i !== r.i && t.next.i !== r.i && t.i !== e.i && t.next.i !== e.i && gR(t, t.next, r, e)) return !0;
    t = t.next;
  } while (t !== r);
  return !1;
}
function Kv(r, e) {
  return mi(r.prev, r, r.next) < 0 ? mi(r, e, r.next) >= 0 && mi(r, r.prev, e) >= 0 : mi(r, e, r.prev) < 0 || mi(r, r.next, e) < 0;
}
function d3(r, e) {
  let t = r, i = !1;
  const s = (r.x + e.x) / 2, u = (r.y + e.y) / 2;
  do
    t.y > u != t.next.y > u && t.next.y !== t.y && s < (t.next.x - t.x) * (u - t.y) / (t.next.y - t.y) + t.x && (i = !i), t = t.next;
  while (t !== r);
  return i;
}
function yR(r, e) {
  const t = TE(r.i, r.x, r.y), i = TE(e.i, e.x, e.y), s = r.next, u = e.prev;
  return r.next = e, e.prev = r, t.next = s, s.prev = t, i.next = t, t.prev = i, u.next = i, i.prev = u, i;
}
function z1(r, e, t, i) {
  const s = TE(r, e, t);
  return i ? (s.next = i.next, s.prev = i, i.next.prev = s, i.next = s) : (s.prev = s, s.next = s), s;
}
function Qv(r) {
  r.next.prev = r.prev, r.prev.next = r.next, r.prevZ && (r.prevZ.nextZ = r.nextZ), r.nextZ && (r.nextZ.prevZ = r.prevZ);
}
function TE(r, e, t) {
  return {
    i: r,
    // vertex index in coordinates array
    x: e,
    y: t,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: !1
    // indicates whether this is a steiner point
  };
}
function p3(r, e, t, i) {
  let s = 0;
  for (let u = e, f = t - i; u < t; u += i)
    s += (r[f] - r[u]) * (r[u + 1] + r[f + 1]), f = u;
  return s;
}
class m3 {
  /**
   * Triangulates the given shape definition by returning an array of triangles.
   *
   * @param {Array<number>} data - An array with 2D points.
   * @param {Array<number>} holeIndices - An array with indices defining holes.
   * @param {number} [dim=2] - The number of coordinates per vertex in the input array.
   * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers
   * representing vertex indices.
   */
  static triangulate(e, t, i = 2) {
    return JD(e, t, i);
  }
}
class ro {
  /**
   * Calculate area of a ( 2D ) contour polygon.
   *
   * @param {Array<Vector2>} contour - An array of 2D points.
   * @return {number} The area.
   */
  static area(e) {
    const t = e.length;
    let i = 0;
    for (let s = t - 1, u = 0; u < t; s = u++)
      i += e[s].x * e[u].y - e[u].x * e[s].y;
    return i * 0.5;
  }
  /**
   * Returns `true` if the given contour uses a clockwise winding order.
   *
   * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.
   * @return {boolean} Whether the given contour uses a clockwise winding order or not.
   */
  static isClockWise(e) {
    return ro.area(e) < 0;
  }
  /**
   * Triangulates the given shape definition.
   *
   * @param {Array<Vector2>} contour - An array of 2D points defining the contour.
   * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.
   * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.
   */
  static triangulateShape(e, t) {
    const i = [], s = [], u = [];
    B1(e), P1(i, e);
    let f = e.length;
    t.forEach(B1);
    for (let p = 0; p < t.length; p++)
      s.push(f), f += t[p].length, P1(i, t[p]);
    const h = m3.triangulate(i, s);
    for (let p = 0; p < h.length; p += 3)
      u.push(h.slice(p, p + 3));
    return u;
  }
}
function B1(r) {
  const e = r.length;
  e > 2 && r[e - 1].equals(r[0]) && r.pop();
}
function P1(r, e) {
  for (let t = 0; t < e.length; t++)
    r.push(e[t].x), r.push(e[t].y);
}
class K_ extends on {
  /**
   * Constructs a new extrude geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {ExtrudeGeometry~Options} [options] - The extrude settings.
   */
  constructor(e = new Ef([new ze(0.5, 0.5), new ze(-0.5, 0.5), new ze(-0.5, -0.5), new ze(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const i = this, s = [], u = [];
    for (let h = 0, p = e.length; h < p; h++) {
      const v = e[h];
      f(v);
    }
    this.setAttribute("position", new At(s, 3)), this.setAttribute("uv", new At(u, 2)), this.computeVertexNormals();
    function f(h) {
      const p = [], v = t.curveSegments !== void 0 ? t.curveSegments : 12, _ = t.steps !== void 0 ? t.steps : 1, S = t.depth !== void 0 ? t.depth : 1;
      let E = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, x = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, A = t.bevelSize !== void 0 ? t.bevelSize : x - 0.1, C = t.bevelOffset !== void 0 ? t.bevelOffset : 0, R = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const M = t.extrudePath, w = t.UVGenerator !== void 0 ? t.UVGenerator : v3;
      let N, U = !1, I, P, X, Y;
      M && (N = M.getSpacedPoints(_), U = !0, E = !1, I = M.computeFrenetFrames(_, !1), P = new j(), X = new j(), Y = new j()), E || (R = 0, x = 0, A = 0, C = 0);
      const z = h.extractPoints(v);
      let L = z.shape;
      const W = z.holes;
      if (!ro.isClockWise(L)) {
        L = L.reverse();
        for (let Be = 0, Ce = W.length; Be < Ce; Be++) {
          const Ie = W[Be];
          ro.isClockWise(Ie) && (W[Be] = Ie.reverse());
        }
      }
      function Q(Be) {
        const Ie = 10000000000000001e-36;
        let De = Be[0];
        for (let et = 1; et <= Be.length; et++) {
          const Ve = et % Be.length, Qe = Be[Ve], ut = Qe.x - De.x, Bt = Qe.y - De.y, Z = ut * ut + Bt * Bt, H = Math.max(
            Math.abs(Qe.x),
            Math.abs(Qe.y),
            Math.abs(De.x),
            Math.abs(De.y)
          ), he = Ie * H * H;
          if (Z <= he) {
            Be.splice(Ve, 1), et--;
            continue;
          }
          De = Qe;
        }
      }
      Q(L), W.forEach(Q);
      const oe = W.length, Se = L;
      for (let Be = 0; Be < oe; Be++) {
        const Ce = W[Be];
        L = L.concat(Ce);
      }
      function B(Be, Ce, Ie) {
        return Ce || console.error("THREE.ExtrudeGeometry: vec does not exist"), Be.clone().addScaledVector(Ce, Ie);
      }
      const K = L.length;
      function q(Be, Ce, Ie) {
        let De, et, Ve;
        const Qe = Be.x - Ce.x, ut = Be.y - Ce.y, Bt = Ie.x - Be.x, Z = Ie.y - Be.y, H = Qe * Qe + ut * ut, he = Qe * Z - ut * Bt;
        if (Math.abs(he) > Number.EPSILON) {
          const be = Math.sqrt(H), He = Math.sqrt(Bt * Bt + Z * Z), Re = Ce.x - ut / be, bt = Ce.y + Qe / be, Xe = Ie.x - Z / He, ct = Ie.y + Bt / He, _t = ((Xe - Re) * Z - (ct - bt) * Bt) / (Qe * Z - ut * Bt);
          De = Re + Qe * _t - Be.x, et = bt + ut * _t - Be.y;
          const Ge = De * De + et * et;
          if (Ge <= 2)
            return new ze(De, et);
          Ve = Math.sqrt(Ge / 2);
        } else {
          let be = !1;
          Qe > Number.EPSILON ? Bt > Number.EPSILON && (be = !0) : Qe < -Number.EPSILON ? Bt < -Number.EPSILON && (be = !0) : Math.sign(ut) === Math.sign(Z) && (be = !0), be ? (De = -ut, et = Qe, Ve = Math.sqrt(H)) : (De = Qe, et = ut, Ve = Math.sqrt(H / 2));
        }
        return new ze(De / Ve, et / Ve);
      }
      const se = [];
      for (let Be = 0, Ce = Se.length, Ie = Ce - 1, De = Be + 1; Be < Ce; Be++, Ie++, De++)
        Ie === Ce && (Ie = 0), De === Ce && (De = 0), se[Be] = q(Se[Be], Se[Ie], Se[De]);
      const le = [];
      let Te, we = se.concat();
      for (let Be = 0, Ce = oe; Be < Ce; Be++) {
        const Ie = W[Be];
        Te = [];
        for (let De = 0, et = Ie.length, Ve = et - 1, Qe = De + 1; De < et; De++, Ve++, Qe++)
          Ve === et && (Ve = 0), Qe === et && (Qe = 0), Te[De] = q(Ie[De], Ie[Ve], Ie[Qe]);
        le.push(Te), we = we.concat(Te);
      }
      let gt;
      if (R === 0)
        gt = ro.triangulateShape(Se, W);
      else {
        const Be = [], Ce = [];
        for (let Ie = 0; Ie < R; Ie++) {
          const De = Ie / R, et = x * Math.cos(De * Math.PI / 2), Ve = A * Math.sin(De * Math.PI / 2) + C;
          for (let Qe = 0, ut = Se.length; Qe < ut; Qe++) {
            const Bt = B(Se[Qe], se[Qe], Ve);
            yt(Bt.x, Bt.y, -et), De === 0 && Be.push(Bt);
          }
          for (let Qe = 0, ut = oe; Qe < ut; Qe++) {
            const Bt = W[Qe];
            Te = le[Qe];
            const Z = [];
            for (let H = 0, he = Bt.length; H < he; H++) {
              const be = B(Bt[H], Te[H], Ve);
              yt(be.x, be.y, -et), De === 0 && Z.push(be);
            }
            De === 0 && Ce.push(Z);
          }
        }
        gt = ro.triangulateShape(Be, Ce);
      }
      const $e = gt.length, _e = A + C;
      for (let Be = 0; Be < K; Be++) {
        const Ce = E ? B(L[Be], we[Be], _e) : L[Be];
        U ? (X.copy(I.normals[0]).multiplyScalar(Ce.x), P.copy(I.binormals[0]).multiplyScalar(Ce.y), Y.copy(N[0]).add(X).add(P), yt(Y.x, Y.y, Y.z)) : yt(Ce.x, Ce.y, 0);
      }
      for (let Be = 1; Be <= _; Be++)
        for (let Ce = 0; Ce < K; Ce++) {
          const Ie = E ? B(L[Ce], we[Ce], _e) : L[Ce];
          U ? (X.copy(I.normals[Be]).multiplyScalar(Ie.x), P.copy(I.binormals[Be]).multiplyScalar(Ie.y), Y.copy(N[Be]).add(X).add(P), yt(Y.x, Y.y, Y.z)) : yt(Ie.x, Ie.y, S / _ * Be);
        }
      for (let Be = R - 1; Be >= 0; Be--) {
        const Ce = Be / R, Ie = x * Math.cos(Ce * Math.PI / 2), De = A * Math.sin(Ce * Math.PI / 2) + C;
        for (let et = 0, Ve = Se.length; et < Ve; et++) {
          const Qe = B(Se[et], se[et], De);
          yt(Qe.x, Qe.y, S + Ie);
        }
        for (let et = 0, Ve = W.length; et < Ve; et++) {
          const Qe = W[et];
          Te = le[et];
          for (let ut = 0, Bt = Qe.length; ut < Bt; ut++) {
            const Z = B(Qe[ut], Te[ut], De);
            U ? yt(Z.x, Z.y + N[_ - 1].y, N[_ - 1].x + Ie) : yt(Z.x, Z.y, S + Ie);
          }
        }
      }
      Je(), We();
      function Je() {
        const Be = s.length / 3;
        if (E) {
          let Ce = 0, Ie = K * Ce;
          for (let De = 0; De < $e; De++) {
            const et = gt[De];
            Ct(et[2] + Ie, et[1] + Ie, et[0] + Ie);
          }
          Ce = _ + R * 2, Ie = K * Ce;
          for (let De = 0; De < $e; De++) {
            const et = gt[De];
            Ct(et[0] + Ie, et[1] + Ie, et[2] + Ie);
          }
        } else {
          for (let Ce = 0; Ce < $e; Ce++) {
            const Ie = gt[Ce];
            Ct(Ie[2], Ie[1], Ie[0]);
          }
          for (let Ce = 0; Ce < $e; Ce++) {
            const Ie = gt[Ce];
            Ct(Ie[0] + K * _, Ie[1] + K * _, Ie[2] + K * _);
          }
        }
        i.addGroup(Be, s.length / 3 - Be, 0);
      }
      function We() {
        const Be = s.length / 3;
        let Ce = 0;
        Mt(Se, Ce), Ce += Se.length;
        for (let Ie = 0, De = W.length; Ie < De; Ie++) {
          const et = W[Ie];
          Mt(et, Ce), Ce += et.length;
        }
        i.addGroup(Be, s.length / 3 - Be, 1);
      }
      function Mt(Be, Ce) {
        let Ie = Be.length;
        for (; --Ie >= 0; ) {
          const De = Ie;
          let et = Ie - 1;
          et < 0 && (et = Be.length - 1);
          for (let Ve = 0, Qe = _ + R * 2; Ve < Qe; Ve++) {
            const ut = K * Ve, Bt = K * (Ve + 1), Z = Ce + De + ut, H = Ce + et + ut, he = Ce + et + Bt, be = Ce + De + Bt;
            _n(Z, H, he, be);
          }
        }
      }
      function yt(Be, Ce, Ie) {
        p.push(Be), p.push(Ce), p.push(Ie);
      }
      function Ct(Be, Ce, Ie) {
        Dt(Be), Dt(Ce), Dt(Ie);
        const De = s.length / 3, et = w.generateTopUV(i, s, De - 3, De - 2, De - 1);
        ee(et[0]), ee(et[1]), ee(et[2]);
      }
      function _n(Be, Ce, Ie, De) {
        Dt(Be), Dt(Ce), Dt(De), Dt(Ce), Dt(Ie), Dt(De);
        const et = s.length / 3, Ve = w.generateSideWallUV(i, s, et - 6, et - 3, et - 2, et - 1);
        ee(Ve[0]), ee(Ve[1]), ee(Ve[3]), ee(Ve[1]), ee(Ve[2]), ee(Ve[3]);
      }
      function Dt(Be) {
        s.push(p[Be * 3 + 0]), s.push(p[Be * 3 + 1]), s.push(p[Be * 3 + 2]);
      }
      function ee(Be) {
        u.push(Be.x), u.push(Be.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, i = this.parameters.options;
    return g3(t, i, e);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ExtrudeGeometry} A new instance.
   */
  static fromJSON(e, t) {
    const i = [];
    for (let u = 0, f = e.shapes.length; u < f; u++) {
      const h = t[e.shapes[u]];
      i.push(h);
    }
    const s = e.options.extrudePath;
    return s !== void 0 && (e.options.extrudePath = new S_[s.type]().fromJSON(s)), new K_(i, e.options);
  }
}
const v3 = {
  generateTopUV: function(r, e, t, i, s) {
    const u = e[t * 3], f = e[t * 3 + 1], h = e[i * 3], p = e[i * 3 + 1], v = e[s * 3], _ = e[s * 3 + 1];
    return [
      new ze(u, f),
      new ze(h, p),
      new ze(v, _)
    ];
  },
  generateSideWallUV: function(r, e, t, i, s, u) {
    const f = e[t * 3], h = e[t * 3 + 1], p = e[t * 3 + 2], v = e[i * 3], _ = e[i * 3 + 1], S = e[i * 3 + 2], E = e[s * 3], x = e[s * 3 + 1], A = e[s * 3 + 2], C = e[u * 3], R = e[u * 3 + 1], M = e[u * 3 + 2];
    return Math.abs(h - _) < Math.abs(f - v) ? [
      new ze(f, 1 - p),
      new ze(v, 1 - S),
      new ze(E, 1 - A),
      new ze(C, 1 - M)
    ] : [
      new ze(h, 1 - p),
      new ze(_, 1 - S),
      new ze(x, 1 - A),
      new ze(R, 1 - M)
    ];
  }
};
function g3(r, e, t) {
  if (t.shapes = [], Array.isArray(r))
    for (let i = 0, s = r.length; i < s; i++) {
      const u = r[i];
      t.shapes.push(u.uuid);
    }
  else
    t.shapes.push(r.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class Q_ extends ku {
  /**
   * Constructs a new icosahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the icosahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.
   */
  constructor(e = 1, t = 0) {
    const i = (1 + Math.sqrt(5)) / 2, s = [
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      0,
      0,
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      i,
      0,
      -1,
      i,
      0,
      1,
      -i,
      0,
      -1,
      -i,
      0,
      1
    ], u = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(s, u, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {IcosahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new Q_(e.radius, e.detail);
  }
}
class k_ extends on {
  /**
   * Constructs a new lathe geometry.
   *
   * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point
   * must be greater than zero.
   * @param {number} [segments=12] - The number of circumference segments to generate.
   * @param {number} [phiStart=0] - The starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a
   * closed lathe, less than 2PI is a portion.
   */
  constructor(e = [new ze(0, -0.5), new ze(0.5, 0), new ze(0, 0.5)], t = 12, i = 0, s = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: i,
      phiLength: s
    }, t = Math.floor(t), s = Xt(s, 0, Math.PI * 2);
    const u = [], f = [], h = [], p = [], v = [], _ = 1 / t, S = new j(), E = new ze(), x = new j(), A = new j(), C = new j();
    let R = 0, M = 0;
    for (let w = 0; w <= e.length - 1; w++)
      switch (w) {
        case 0:
          R = e[w + 1].x - e[w].x, M = e[w + 1].y - e[w].y, x.x = M * 1, x.y = -R, x.z = M * 0, C.copy(x), x.normalize(), p.push(x.x, x.y, x.z);
          break;
        case e.length - 1:
          p.push(C.x, C.y, C.z);
          break;
        default:
          R = e[w + 1].x - e[w].x, M = e[w + 1].y - e[w].y, x.x = M * 1, x.y = -R, x.z = M * 0, A.copy(x), x.x += C.x, x.y += C.y, x.z += C.z, x.normalize(), p.push(x.x, x.y, x.z), C.copy(A);
      }
    for (let w = 0; w <= t; w++) {
      const N = i + w * _ * s, U = Math.sin(N), I = Math.cos(N);
      for (let P = 0; P <= e.length - 1; P++) {
        S.x = e[P].x * U, S.y = e[P].y, S.z = e[P].x * I, f.push(S.x, S.y, S.z), E.x = w / t, E.y = P / (e.length - 1), h.push(E.x, E.y);
        const X = p[3 * P + 0] * U, Y = p[3 * P + 1], z = p[3 * P + 0] * I;
        v.push(X, Y, z);
      }
    }
    for (let w = 0; w < t; w++)
      for (let N = 0; N < e.length - 1; N++) {
        const U = N + w * e.length, I = U, P = U + e.length, X = U + e.length + 1, Y = U + 1;
        u.push(I, P, Y), u.push(X, Y, P);
      }
    this.setIndex(u), this.setAttribute("position", new At(f, 3)), this.setAttribute("uv", new At(h, 2)), this.setAttribute("normal", new At(v, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {LatheGeometry} A new instance.
   */
  static fromJSON(e) {
    return new k_(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class og extends ku {
  /**
   * Constructs a new octahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the octahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.
   */
  constructor(e = 1, t = 0) {
    const i = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], s = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(i, s, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {OctahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new og(e.radius, e.detail);
  }
}
class pp extends on {
  /**
   * Constructs a new plane geometry.
   *
   * @param {number} [width=1] - The width along the X axis.
   * @param {number} [height=1] - The height along the Y axis
   * @param {number} [widthSegments=1] - The number of segments along the X axis.
   * @param {number} [heightSegments=1] - The number of segments along the Y axis.
   */
  constructor(e = 1, t = 1, i = 1, s = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: i,
      heightSegments: s
    };
    const u = e / 2, f = t / 2, h = Math.floor(i), p = Math.floor(s), v = h + 1, _ = p + 1, S = e / h, E = t / p, x = [], A = [], C = [], R = [];
    for (let M = 0; M < _; M++) {
      const w = M * E - f;
      for (let N = 0; N < v; N++) {
        const U = N * S - u;
        A.push(U, -w, 0), C.push(0, 0, 1), R.push(N / h), R.push(1 - M / p);
      }
    }
    for (let M = 0; M < p; M++)
      for (let w = 0; w < h; w++) {
        const N = w + v * M, U = w + v * (M + 1), I = w + 1 + v * (M + 1), P = w + 1 + v * M;
        x.push(N, U, P), x.push(U, I, P);
      }
    this.setIndex(x), this.setAttribute("position", new At(A, 3)), this.setAttribute("normal", new At(C, 3)), this.setAttribute("uv", new At(R, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PlaneGeometry} A new instance.
   */
  static fromJSON(e) {
    return new pp(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
class J_ extends on {
  /**
   * Constructs a new ring geometry.
   *
   * @param {number} [innerRadius=0.5] - The inner radius of the ring.
   * @param {number} [outerRadius=1] - The outer radius of the ring.
   * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.
   * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.
   * @param {number} [thetaStart=0] - Starting angle in radians.
   * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.
   */
  constructor(e = 0.5, t = 1, i = 32, s = 1, u = 0, f = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: i,
      phiSegments: s,
      thetaStart: u,
      thetaLength: f
    }, i = Math.max(3, i), s = Math.max(1, s);
    const h = [], p = [], v = [], _ = [];
    let S = e;
    const E = (t - e) / s, x = new j(), A = new ze();
    for (let C = 0; C <= s; C++) {
      for (let R = 0; R <= i; R++) {
        const M = u + R / i * f;
        x.x = S * Math.cos(M), x.y = S * Math.sin(M), p.push(x.x, x.y, x.z), v.push(0, 0, 1), A.x = (x.x / t + 1) / 2, A.y = (x.y / t + 1) / 2, _.push(A.x, A.y);
      }
      S += E;
    }
    for (let C = 0; C < s; C++) {
      const R = C * (i + 1);
      for (let M = 0; M < i; M++) {
        const w = M + R, N = w, U = w + i + 1, I = w + i + 2, P = w + 1;
        h.push(N, U, P), h.push(U, I, P);
      }
    }
    this.setIndex(h), this.setAttribute("position", new At(p, 3)), this.setAttribute("normal", new At(v, 3)), this.setAttribute("uv", new At(_, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {RingGeometry} A new instance.
   */
  static fromJSON(e) {
    return new J_(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class $_ extends on {
  /**
   * Constructs a new shape geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {number} [curveSegments=12] - Number of segments per shape.
   */
  constructor(e = new Ef([new ze(0, 0.5), new ze(-0.5, -0.5), new ze(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const i = [], s = [], u = [], f = [];
    let h = 0, p = 0;
    if (Array.isArray(e) === !1)
      v(e);
    else
      for (let _ = 0; _ < e.length; _++)
        v(e[_]), this.addGroup(h, p, _), h += p, p = 0;
    this.setIndex(i), this.setAttribute("position", new At(s, 3)), this.setAttribute("normal", new At(u, 3)), this.setAttribute("uv", new At(f, 2));
    function v(_) {
      const S = s.length / 3, E = _.extractPoints(t);
      let x = E.shape;
      const A = E.holes;
      ro.isClockWise(x) === !1 && (x = x.reverse());
      for (let R = 0, M = A.length; R < M; R++) {
        const w = A[R];
        ro.isClockWise(w) === !0 && (A[R] = w.reverse());
      }
      const C = ro.triangulateShape(x, A);
      for (let R = 0, M = A.length; R < M; R++) {
        const w = A[R];
        x = x.concat(w);
      }
      for (let R = 0, M = x.length; R < M; R++) {
        const w = x[R];
        s.push(w.x, w.y, 0), u.push(0, 0, 1), f.push(w.x, w.y);
      }
      for (let R = 0, M = C.length; R < M; R++) {
        const w = C[R], N = w[0] + S, U = w[1] + S, I = w[2] + S;
        i.push(N, U, I), p += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return y3(t, e);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ShapeGeometry} A new instance.
   */
  static fromJSON(e, t) {
    const i = [];
    for (let s = 0, u = e.shapes.length; s < u; s++) {
      const f = t[e.shapes[s]];
      i.push(f);
    }
    return new $_(i, e.curveSegments);
  }
}
function y3(r, e) {
  if (e.shapes = [], Array.isArray(r))
    for (let t = 0, i = r.length; t < i; t++) {
      const s = r[t];
      e.shapes.push(s.uuid);
    }
  else
    e.shapes.push(r.uuid);
  return e;
}
class lg extends on {
  /**
   * Constructs a new sphere geometry.
   *
   * @param {number} [radius=1] - The sphere radius.
   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.
   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.
   * @param {number} [phiStart=0] - The horizontal starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.
   * @param {number} [thetaStart=0] - The vertical starting angle in radians.
   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.
   */
  constructor(e = 1, t = 32, i = 16, s = 0, u = Math.PI * 2, f = 0, h = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: i,
      phiStart: s,
      phiLength: u,
      thetaStart: f,
      thetaLength: h
    }, t = Math.max(3, Math.floor(t)), i = Math.max(2, Math.floor(i));
    const p = Math.min(f + h, Math.PI);
    let v = 0;
    const _ = [], S = new j(), E = new j(), x = [], A = [], C = [], R = [];
    for (let M = 0; M <= i; M++) {
      const w = [], N = M / i;
      let U = 0;
      M === 0 && f === 0 ? U = 0.5 / t : M === i && p === Math.PI && (U = -0.5 / t);
      for (let I = 0; I <= t; I++) {
        const P = I / t;
        S.x = -e * Math.cos(s + P * u) * Math.sin(f + N * h), S.y = e * Math.cos(f + N * h), S.z = e * Math.sin(s + P * u) * Math.sin(f + N * h), A.push(S.x, S.y, S.z), E.copy(S).normalize(), C.push(E.x, E.y, E.z), R.push(P + U, 1 - N), w.push(v++);
      }
      _.push(w);
    }
    for (let M = 0; M < i; M++)
      for (let w = 0; w < t; w++) {
        const N = _[M][w + 1], U = _[M][w], I = _[M + 1][w], P = _[M + 1][w + 1];
        (M !== 0 || f > 0) && x.push(N, U, P), (M !== i - 1 || p < Math.PI) && x.push(U, I, P);
      }
    this.setIndex(x), this.setAttribute("position", new At(A, 3)), this.setAttribute("normal", new At(C, 3)), this.setAttribute("uv", new At(R, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {SphereGeometry} A new instance.
   */
  static fromJSON(e) {
    return new lg(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class eS extends ku {
  /**
   * Constructs a new tetrahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the tetrahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.
   */
  constructor(e = 1, t = 0) {
    const i = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], s = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(i, s, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TetrahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new eS(e.radius, e.detail);
  }
}
class tS extends on {
  /**
   * Constructs a new torus geometry.
   *
   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.
   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.
   * @param {number} [radialSegments=12] - The number of radial segments.
   * @param {number} [tubularSegments=48] - The number of tubular segments.
   * @param {number} [arc=Math.PI*2] - Central angle in radians.
   */
  constructor(e = 1, t = 0.4, i = 12, s = 48, u = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: i,
      tubularSegments: s,
      arc: u
    }, i = Math.floor(i), s = Math.floor(s);
    const f = [], h = [], p = [], v = [], _ = new j(), S = new j(), E = new j();
    for (let x = 0; x <= i; x++)
      for (let A = 0; A <= s; A++) {
        const C = A / s * u, R = x / i * Math.PI * 2;
        S.x = (e + t * Math.cos(R)) * Math.cos(C), S.y = (e + t * Math.cos(R)) * Math.sin(C), S.z = t * Math.sin(R), h.push(S.x, S.y, S.z), _.x = e * Math.cos(C), _.y = e * Math.sin(C), E.subVectors(S, _).normalize(), p.push(E.x, E.y, E.z), v.push(A / s), v.push(x / i);
      }
    for (let x = 1; x <= i; x++)
      for (let A = 1; A <= s; A++) {
        const C = (s + 1) * x + A - 1, R = (s + 1) * (x - 1) + A - 1, M = (s + 1) * (x - 1) + A, w = (s + 1) * x + A;
        f.push(C, R, w), f.push(R, M, w);
      }
    this.setIndex(f), this.setAttribute("position", new At(h, 3)), this.setAttribute("normal", new At(p, 3)), this.setAttribute("uv", new At(v, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusGeometry} A new instance.
   */
  static fromJSON(e) {
    return new tS(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class nS extends on {
  /**
   * Constructs a new torus knot geometry.
   *
   * @param {number} [radius=1] - Radius of the torus knot.
   * @param {number} [tube=0.4] - Radius of the tube.
   * @param {number} [tubularSegments=64] - The number of tubular segments.
   * @param {number} [radialSegments=8] - The number of radial segments.
   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.
   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.
   */
  constructor(e = 1, t = 0.4, i = 64, s = 8, u = 2, f = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: i,
      radialSegments: s,
      p: u,
      q: f
    }, i = Math.floor(i), s = Math.floor(s);
    const h = [], p = [], v = [], _ = [], S = new j(), E = new j(), x = new j(), A = new j(), C = new j(), R = new j(), M = new j();
    for (let N = 0; N <= i; ++N) {
      const U = N / i * u * Math.PI * 2;
      w(U, u, f, e, x), w(U + 0.01, u, f, e, A), R.subVectors(A, x), M.addVectors(A, x), C.crossVectors(R, M), M.crossVectors(C, R), C.normalize(), M.normalize();
      for (let I = 0; I <= s; ++I) {
        const P = I / s * Math.PI * 2, X = -t * Math.cos(P), Y = t * Math.sin(P);
        S.x = x.x + (X * M.x + Y * C.x), S.y = x.y + (X * M.y + Y * C.y), S.z = x.z + (X * M.z + Y * C.z), p.push(S.x, S.y, S.z), E.subVectors(S, x).normalize(), v.push(E.x, E.y, E.z), _.push(N / i), _.push(I / s);
      }
    }
    for (let N = 1; N <= i; N++)
      for (let U = 1; U <= s; U++) {
        const I = (s + 1) * (N - 1) + (U - 1), P = (s + 1) * N + (U - 1), X = (s + 1) * N + U, Y = (s + 1) * (N - 1) + U;
        h.push(I, P, Y), h.push(P, X, Y);
      }
    this.setIndex(h), this.setAttribute("position", new At(p, 3)), this.setAttribute("normal", new At(v, 3)), this.setAttribute("uv", new At(_, 2));
    function w(N, U, I, P, X) {
      const Y = Math.cos(N), z = Math.sin(N), L = I / U * N, W = Math.cos(L);
      X.x = P * (2 + W) * 0.5 * Y, X.y = P * (2 + W) * z * 0.5, X.z = P * Math.sin(L) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusKnotGeometry} A new instance.
   */
  static fromJSON(e) {
    return new nS(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class iS extends on {
  /**
   * Constructs a new tube geometry.
   *
   * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.
   * @param {number} [tubularSegments=64] - The number of segments that make up the tube.
   * @param {number} [radius=1] -The radius of the tube.
   * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.
   * @param {boolean} [closed=false] - Whether the tube is closed or not.
   */
  constructor(e = new cM(new j(-1, -1, 0), new j(-1, 1, 0), new j(1, 1, 0)), t = 64, i = 1, s = 8, u = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: i,
      radialSegments: s,
      closed: u
    };
    const f = e.computeFrenetFrames(t, u);
    this.tangents = f.tangents, this.normals = f.normals, this.binormals = f.binormals;
    const h = new j(), p = new j(), v = new ze();
    let _ = new j();
    const S = [], E = [], x = [], A = [];
    C(), this.setIndex(A), this.setAttribute("position", new At(S, 3)), this.setAttribute("normal", new At(E, 3)), this.setAttribute("uv", new At(x, 2));
    function C() {
      for (let N = 0; N < t; N++)
        R(N);
      R(u === !1 ? t : 0), w(), M();
    }
    function R(N) {
      _ = e.getPointAt(N / t, _);
      const U = f.normals[N], I = f.binormals[N];
      for (let P = 0; P <= s; P++) {
        const X = P / s * Math.PI * 2, Y = Math.sin(X), z = -Math.cos(X);
        p.x = z * U.x + Y * I.x, p.y = z * U.y + Y * I.y, p.z = z * U.z + Y * I.z, p.normalize(), E.push(p.x, p.y, p.z), h.x = _.x + i * p.x, h.y = _.y + i * p.y, h.z = _.z + i * p.z, S.push(h.x, h.y, h.z);
      }
    }
    function M() {
      for (let N = 1; N <= t; N++)
        for (let U = 1; U <= s; U++) {
          const I = (s + 1) * (N - 1) + (U - 1), P = (s + 1) * N + (U - 1), X = (s + 1) * N + U, Y = (s + 1) * (N - 1) + U;
          A.push(I, P, Y), A.push(P, X, Y);
        }
    }
    function w() {
      for (let N = 0; N <= t; N++)
        for (let U = 0; U <= s; U++)
          v.x = N / t, v.y = U / s, x.push(v.x, v.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TubeGeometry} A new instance.
   */
  static fromJSON(e) {
    return new iS(
      new S_[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class _R extends on {
  /**
   * Constructs a new wireframe geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   */
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], i = /* @__PURE__ */ new Set(), s = new j(), u = new j();
      if (e.index !== null) {
        const f = e.attributes.position, h = e.index;
        let p = e.groups;
        p.length === 0 && (p = [{ start: 0, count: h.count, materialIndex: 0 }]);
        for (let v = 0, _ = p.length; v < _; ++v) {
          const S = p[v], E = S.start, x = S.count;
          for (let A = E, C = E + x; A < C; A += 3)
            for (let R = 0; R < 3; R++) {
              const M = h.getX(A + R), w = h.getX(A + (R + 1) % 3);
              s.fromBufferAttribute(f, M), u.fromBufferAttribute(f, w), H1(s, u, i) === !0 && (t.push(s.x, s.y, s.z), t.push(u.x, u.y, u.z));
            }
        }
      } else {
        const f = e.attributes.position;
        for (let h = 0, p = f.count / 3; h < p; h++)
          for (let v = 0; v < 3; v++) {
            const _ = 3 * h + v, S = 3 * h + (v + 1) % 3;
            s.fromBufferAttribute(f, _), u.fromBufferAttribute(f, S), H1(s, u, i) === !0 && (t.push(s.x, s.y, s.z), t.push(u.x, u.y, u.z));
          }
      }
      this.setAttribute("position", new At(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function H1(r, e, t) {
  const i = `${r.x},${r.y},${r.z}-${e.x},${e.y},${e.z}`, s = `${e.x},${e.y},${e.z}-${r.x},${r.y},${r.z}`;
  return t.has(i) === !0 || t.has(s) === !0 ? !1 : (t.add(i), t.add(s), !0);
}
var I1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: Cf,
  CapsuleGeometry: Y_,
  CircleGeometry: W_,
  ConeGeometry: rg,
  CylinderGeometry: sg,
  DodecahedronGeometry: j_,
  EdgesGeometry: uR,
  ExtrudeGeometry: K_,
  IcosahedronGeometry: Q_,
  LatheGeometry: k_,
  OctahedronGeometry: og,
  PlaneGeometry: pp,
  PolyhedronGeometry: ku,
  RingGeometry: J_,
  ShapeGeometry: $_,
  SphereGeometry: lg,
  TetrahedronGeometry: eS,
  TorusGeometry: tS,
  TorusKnotGeometry: nS,
  TubeGeometry: iS,
  WireframeGeometry: _R
});
class SR extends Xa {
  /**
   * Constructs a new shadow material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new Et(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class xR extends oo {
  /**
   * Constructs a new raw shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class hM extends Xa {
  /**
   * Constructs a new mesh standard material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.type = "MeshStandardMaterial", this.defines = { STANDARD: "" }, this.color = new Et(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Et(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new ks(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class ER extends hM {
  /**
   * Constructs a new mesh physical material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new ze(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return Xt(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new Et(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new Et(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new Et(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  /**
   * The anisotropy strength.
   *
   * @type {number}
   * @default 0
   */
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  /**
   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use
   * clear coat related properties to enable multilayer materials that have a
   * thin translucent layer over the base layer.
   *
   * @type {number}
   * @default 0
   */
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  /**
   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
   * the surface and the viewer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  /**
   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting
   * through a relatively clear volume. Any value zero or larger is valid, the typical range of
   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
   *
   * @type {number}
   * @default 0
   */
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(e) {
    this._dispersion > 0 != e > 0 && this.version++, this._dispersion = e;
  }
  /**
   * The intensity of the sheen layer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  /**
   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.
   *
   * Thin, transparent or semitransparent, plastic or glass materials remain
   * largely reflective even if they are fully transmissive. The transmission
   * property can be used to model these materials.
   *
   * When transmission is non-zero, `opacity` should be  set to `1`.
   *
   * @type {number}
   * @default 0
   */
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.dispersion = e.dispersion, this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class MR extends Xa {
  /**
   * Constructs a new mesh phong material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new Et(16777215), this.specular = new Et(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Et(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new ks(), this.combine = ng, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class bR extends Xa {
  /**
   * Constructs a new mesh toon material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new Et(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Et(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class TR extends Xa {
  /**
   * Constructs a new mesh normal material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class AR extends Xa {
  /**
   * Constructs a new mesh lambert material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Et(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Et(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new ks(), this.combine = ng, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class dM extends Xa {
  /**
   * Constructs a new mesh depth material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = BA, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class pM extends Xa {
  /**
   * Constructs a new mesh distance material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
class RR extends Xa {
  /**
   * Constructs a new mesh matcap material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new Et(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Ku, this.normalScale = new ze(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class CR extends fs {
  /**
   * Constructs a new line dashed material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function _f(r, e) {
  return !r || r.constructor === e ? r : typeof e.BYTES_PER_ELEMENT == "number" ? new e(r) : Array.prototype.slice.call(r);
}
function DR(r) {
  return ArrayBuffer.isView(r) && !(r instanceof DataView);
}
function wR(r) {
  function e(s, u) {
    return r[s] - r[u];
  }
  const t = r.length, i = new Array(t);
  for (let s = 0; s !== t; ++s) i[s] = s;
  return i.sort(e), i;
}
function AE(r, e, t) {
  const i = r.length, s = new r.constructor(i);
  for (let u = 0, f = 0; f !== i; ++u) {
    const h = t[u] * e;
    for (let p = 0; p !== e; ++p)
      s[f++] = r[h + p];
  }
  return s;
}
function mM(r, e, t, i) {
  let s = 1, u = r[0];
  for (; u !== void 0 && u[i] === void 0; )
    u = r[s++];
  if (u === void 0) return;
  let f = u[i];
  if (f !== void 0)
    if (Array.isArray(f))
      do
        f = u[i], f !== void 0 && (e.push(u.time), t.push(...f)), u = r[s++];
      while (u !== void 0);
    else if (f.toArray !== void 0)
      do
        f = u[i], f !== void 0 && (e.push(u.time), f.toArray(t, t.length)), u = r[s++];
      while (u !== void 0);
    else
      do
        f = u[i], f !== void 0 && (e.push(u.time), t.push(f)), u = r[s++];
      while (u !== void 0);
}
function _3(r, e, t, i, s = 30) {
  const u = r.clone();
  u.name = e;
  const f = [];
  for (let p = 0; p < u.tracks.length; ++p) {
    const v = u.tracks[p], _ = v.getValueSize(), S = [], E = [];
    for (let x = 0; x < v.times.length; ++x) {
      const A = v.times[x] * s;
      if (!(A < t || A >= i)) {
        S.push(v.times[x]);
        for (let C = 0; C < _; ++C)
          E.push(v.values[x * _ + C]);
      }
    }
    S.length !== 0 && (v.times = _f(S, v.times.constructor), v.values = _f(E, v.values.constructor), f.push(v));
  }
  u.tracks = f;
  let h = 1 / 0;
  for (let p = 0; p < u.tracks.length; ++p)
    h > u.tracks[p].times[0] && (h = u.tracks[p].times[0]);
  for (let p = 0; p < u.tracks.length; ++p)
    u.tracks[p].shift(-1 * h);
  return u.resetDuration(), u;
}
function S3(r, e = 0, t = r, i = 30) {
  i <= 0 && (i = 30);
  const s = t.tracks.length, u = e / i;
  for (let f = 0; f < s; ++f) {
    const h = t.tracks[f], p = h.ValueTypeName;
    if (p === "bool" || p === "string") continue;
    const v = r.tracks.find(function(M) {
      return M.name === h.name && M.ValueTypeName === p;
    });
    if (v === void 0) continue;
    let _ = 0;
    const S = h.getValueSize();
    h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (_ = S / 3);
    let E = 0;
    const x = v.getValueSize();
    v.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (E = x / 3);
    const A = h.times.length - 1;
    let C;
    if (u <= h.times[0]) {
      const M = _, w = S - _;
      C = h.values.slice(M, w);
    } else if (u >= h.times[A]) {
      const M = A * S + _, w = M + S - _;
      C = h.values.slice(M, w);
    } else {
      const M = h.createInterpolant(), w = _, N = S - _;
      M.evaluate(u), C = M.resultBuffer.slice(w, N);
    }
    p === "quaternion" && new Fa().fromArray(C).normalize().conjugate().toArray(C);
    const R = v.times.length;
    for (let M = 0; M < R; ++M) {
      const w = M * x + E;
      if (p === "quaternion")
        Fa.multiplyQuaternionsFlat(
          v.values,
          w,
          C,
          0,
          v.values,
          w
        );
      else {
        const N = x - E * 2;
        for (let U = 0; U < N; ++U)
          v.values[w + U] -= C[U];
      }
    }
  }
  return r.blendMode = KE, r;
}
class x3 {
  /**
   * Converts an array to a specific type
   *
   * @static
   * @param {TypedArray|Array} array - The array to convert.
   * @param {TypedArray.constructor} type - The constructor of a type array.
   * @return {TypedArray} The converted array
   */
  static convertArray(e, t) {
    return _f(e, t);
  }
  /**
   * Returns `true` if the given object is a typed array.
   *
   * @static
   * @param {any} object - The object to check.
   * @return {boolean} Whether the given object is a typed array.
   */
  static isTypedArray(e) {
    return DR(e);
  }
  /**
   * Returns an array by which times and values can be sorted.
   *
   * @static
   * @param {Array<number>} times - The keyframe time values.
   * @return {Array<number>} The array.
   */
  static getKeyframeOrder(e) {
    return wR(e);
  }
  /**
   * Sorts the given array by the previously computed order via `getKeyframeOrder()`.
   *
   * @static
   * @param {Array<number>} values - The values to sort.
   * @param {number} stride - The stride.
   * @param {Array<number>} order - The sort order.
   * @return {Array<number>} The sorted values.
   */
  static sortedArray(e, t, i) {
    return AE(e, t, i);
  }
  /**
   * Used for parsing AOS keyframe formats.
   *
   * @static
   * @param {Array<number>} jsonKeys - A list of JSON keyframes.
   * @param {Array<number>} times - This array will be filled with keyframe times by this method.
   * @param {Array<number>} values - This array will be filled with keyframe values by this method.
   * @param {string} valuePropertyName - The name of the property to use.
   */
  static flattenJSON(e, t, i, s) {
    mM(e, t, i, s);
  }
  /**
   * Creates a new clip, containing only the segment of the original clip between the given frames.
   *
   * @static
   * @param {AnimationClip} sourceClip - The values to sort.
   * @param {string} name - The name of the clip.
   * @param {number} startFrame - The start frame.
   * @param {number} endFrame - The end frame.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The new sub clip.
   */
  static subclip(e, t, i, s, u = 30) {
    return _3(e, t, i, s, u);
  }
  /**
   * Converts the keyframes of the given animation clip to an additive format.
   *
   * @static
   * @param {AnimationClip} targetClip - The clip to make additive.
   * @param {number} [referenceFrame=0] - The reference frame.
   * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The updated clip which is now additive.
   */
  static makeClipAdditive(e, t = 0, i = e, s = 30) {
    return S3(e, t, i, s);
  }
}
class ug {
  /**
   * Constructs a new interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, t, i, s) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = s !== void 0 ? s : new t.constructor(i), this.sampleValues = t, this.valueSize = i, this.settings = null, this.DefaultSettings_ = {};
  }
  /**
   * Evaluate the interpolant at position `t`.
   *
   * @param {number} t - The interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  evaluate(e) {
    const t = this.parameterPositions;
    let i = this._cachedIndex, s = t[i], u = t[i - 1];
    e: {
      t: {
        let f;
        n: {
          i: if (!(e < s)) {
            for (let h = i + 2; ; ) {
              if (s === void 0) {
                if (e < u) break i;
                return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
              }
              if (i === h) break;
              if (u = s, s = t[++i], e < s)
                break t;
            }
            f = t.length;
            break n;
          }
          if (!(e >= u)) {
            const h = t[1];
            e < h && (i = 2, u = h);
            for (let p = i - 2; ; ) {
              if (u === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (i === p) break;
              if (s = u, u = t[--i - 1], e >= u)
                break t;
            }
            f = i, i = 0;
            break n;
          }
          break e;
        }
        for (; i < f; ) {
          const h = i + f >>> 1;
          e < t[h] ? f = h : i = h + 1;
        }
        if (s = t[i], u = t[i - 1], u === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (s === void 0)
          return i = t.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
      }
      this._cachedIndex = i, this.intervalChanged_(i, u, s);
    }
    return this.interpolate_(i, u, e, s);
  }
  /**
   * Returns the interpolation settings.
   *
   * @return {Object} The interpolation settings.
   */
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @param {number} index - An index into the sample value buffer.
   * @return {TypedArray} The result buffer.
   */
  copySampleValue_(e) {
    const t = this.resultBuffer, i = this.sampleValues, s = this.valueSize, u = e * s;
    for (let f = 0; f !== s; ++f)
      t[f] = i[u + f];
    return t;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @abstract
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   * @param {number} t1 - The next interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  interpolate_() {
    throw new Error("call to abstract method");
  }
  /**
   * Optional method that is executed when the interval has changed.
   *
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   */
  intervalChanged_() {
  }
}
class UR extends ug {
  /**
   * Constructs a new cubic interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: gf,
      endingEnd: gf
    };
  }
  intervalChanged_(e, t, i) {
    const s = this.parameterPositions;
    let u = e - 2, f = e + 1, h = s[u], p = s[f];
    if (h === void 0)
      switch (this.getSettings_().endingStart) {
        case yf:
          u = e, h = 2 * t - i;
          break;
        case qv:
          u = s.length - 2, h = t + s[u] - s[u + 1];
          break;
        default:
          u = e, h = i;
      }
    if (p === void 0)
      switch (this.getSettings_().endingEnd) {
        case yf:
          f = e, p = 2 * i - t;
          break;
        case qv:
          f = 1, p = i + s[1] - s[0];
          break;
        default:
          f = e - 1, p = t;
      }
    const v = (i - t) * 0.5, _ = this.valueSize;
    this._weightPrev = v / (t - h), this._weightNext = v / (p - i), this._offsetPrev = u * _, this._offsetNext = f * _;
  }
  interpolate_(e, t, i, s) {
    const u = this.resultBuffer, f = this.sampleValues, h = this.valueSize, p = e * h, v = p - h, _ = this._offsetPrev, S = this._offsetNext, E = this._weightPrev, x = this._weightNext, A = (i - t) / (s - t), C = A * A, R = C * A, M = -E * R + 2 * E * C - E * A, w = (1 + E) * R + (-1.5 - 2 * E) * C + (-0.5 + E) * A + 1, N = (-1 - x) * R + (1.5 + x) * C + 0.5 * A, U = x * R - x * C;
    for (let I = 0; I !== h; ++I)
      u[I] = M * f[_ + I] + w * f[v + I] + N * f[p + I] + U * f[S + I];
    return u;
  }
}
class vM extends ug {
  /**
   * Constructs a new linear interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
  interpolate_(e, t, i, s) {
    const u = this.resultBuffer, f = this.sampleValues, h = this.valueSize, p = e * h, v = p - h, _ = (i - t) / (s - t), S = 1 - _;
    for (let E = 0; E !== h; ++E)
      u[E] = f[v + E] * S + f[p + E] * _;
    return u;
  }
}
class NR extends ug {
  /**
   * Constructs a new discrete interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class wr {
  /**
   * Constructs a new keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number|string|boolean>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, t, i, s) {
    if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = _f(t, this.TimeBufferType), this.values = _f(i, this.ValueBufferType), this.setInterpolation(s || this.DefaultInterpolation);
  }
  /**
   * Converts the keyframe track to JSON.
   *
   * @static
   * @param {KeyframeTrack} track - The keyframe track to serialize.
   * @return {Object} The serialized keyframe track as JSON.
   */
  static toJSON(e) {
    const t = e.constructor;
    let i;
    if (t.toJSON !== this.toJSON)
      i = t.toJSON(e);
    else {
      i = {
        name: e.name,
        times: _f(e.times, Array),
        values: _f(e.values, Array)
      };
      const s = e.getInterpolation();
      s !== e.DefaultInterpolation && (i.interpolation = s);
    }
    return i.type = e.ValueTypeName, i;
  }
  /**
   * Factory method for creating a new discrete interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {DiscreteInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodDiscrete(e) {
    return new NR(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Factory method for creating a new linear interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {LinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(e) {
    return new vM(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Factory method for creating a new smooth interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {CubicInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodSmooth(e) {
    return new UR(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Defines the interpolation factor method for this keyframe track.
   *
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  setInterpolation(e) {
    let t;
    switch (e) {
      case Xv:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case g_:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case N0:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(i);
      return console.warn("THREE.KeyframeTrack:", i), this;
    }
    return this.createInterpolant = t, this;
  }
  /**
   * Returns the current interpolation type.
   *
   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
   */
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Xv;
      case this.InterpolantFactoryMethodLinear:
        return g_;
      case this.InterpolantFactoryMethodSmooth:
        return N0;
    }
  }
  /**
   * Returns the value size.
   *
   * @return {number} The value size.
   */
  getValueSize() {
    return this.values.length / this.times.length;
  }
  /**
   * Moves all keyframes either forward or backward in time.
   *
   * @param {number} timeOffset - The offset to move the time values.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let i = 0, s = t.length; i !== s; ++i)
        t[i] += e;
    }
    return this;
  }
  /**
   * Scale all keyframe times by a factor (useful for frame - seconds conversions).
   *
   * @param {number} timeScale - The time scale.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let i = 0, s = t.length; i !== s; ++i)
        t[i] *= e;
    }
    return this;
  }
  /**
   * Removes keyframes before and after animation without changing any values within the defined time range.
   *
   * Note: The method does not shift around keys to the start of the track time, because for interpolated
   * keys this will change their values
   *
   * @param {number} startTime - The start time.
   * @param {number} endTime - The end time.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  trim(e, t) {
    const i = this.times, s = i.length;
    let u = 0, f = s - 1;
    for (; u !== s && i[u] < e; )
      ++u;
    for (; f !== -1 && i[f] > t; )
      --f;
    if (++f, u !== 0 || f !== s) {
      u >= f && (f = Math.max(f, 1), u = f - 1);
      const h = this.getValueSize();
      this.times = i.slice(u, f), this.values = this.values.slice(u * h, f * h);
    }
    return this;
  }
  /**
   * Performs minimal validation on the keyframe track. Returns `true` if the values
   * are valid.
   *
   * @return {boolean} Whether the keyframes are valid or not.
   */
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const i = this.times, s = this.values, u = i.length;
    u === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let f = null;
    for (let h = 0; h !== u; h++) {
      const p = i[h];
      if (typeof p == "number" && isNaN(p)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, h, p), e = !1;
        break;
      }
      if (f !== null && f > p) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, h, p, f), e = !1;
        break;
      }
      f = p;
    }
    if (s !== void 0 && DR(s))
      for (let h = 0, p = s.length; h !== p; ++h) {
        const v = s[h];
        if (isNaN(v)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, h, v), e = !1;
          break;
        }
      }
    return e;
  }
  /**
   * Optimizes this keyframe track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), i = this.getValueSize(), s = this.getInterpolation() === N0, u = e.length - 1;
    let f = 1;
    for (let h = 1; h < u; ++h) {
      let p = !1;
      const v = e[h], _ = e[h + 1];
      if (v !== _ && (h !== 1 || v !== e[0]))
        if (s)
          p = !0;
        else {
          const S = h * i, E = S - i, x = S + i;
          for (let A = 0; A !== i; ++A) {
            const C = t[S + A];
            if (C !== t[E + A] || C !== t[x + A]) {
              p = !0;
              break;
            }
          }
        }
      if (p) {
        if (h !== f) {
          e[f] = e[h];
          const S = h * i, E = f * i;
          for (let x = 0; x !== i; ++x)
            t[E + x] = t[S + x];
        }
        ++f;
      }
    }
    if (u > 0) {
      e[f] = e[u];
      for (let h = u * i, p = f * i, v = 0; v !== i; ++v)
        t[p + v] = t[h + v];
      ++f;
    }
    return f !== e.length ? (this.times = e.slice(0, f), this.values = t.slice(0, f * i)) : (this.times = e, this.values = t), this;
  }
  /**
   * Returns a new keyframe track with copied values from this instance.
   *
   * @return {KeyframeTrack} A clone of this instance.
   */
  clone() {
    const e = this.times.slice(), t = this.values.slice(), i = this.constructor, s = new i(this.name, e, t);
    return s.createInterpolant = this.createInterpolant, s;
  }
}
wr.prototype.ValueTypeName = "";
wr.prototype.TimeBufferType = Float32Array;
wr.prototype.ValueBufferType = Float32Array;
wr.prototype.DefaultInterpolation = g_;
class Df extends wr {
  /**
   * Constructs a new boolean keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<boolean>} values - A list of keyframe values.
   */
  constructor(e, t, i) {
    super(e, t, i);
  }
}
Df.prototype.ValueTypeName = "bool";
Df.prototype.ValueBufferType = Array;
Df.prototype.DefaultInterpolation = Xv;
Df.prototype.InterpolantFactoryMethodLinear = void 0;
Df.prototype.InterpolantFactoryMethodSmooth = void 0;
class gM extends wr {
  /**
   * Constructs a new color keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
}
gM.prototype.ValueTypeName = "color";
class kv extends wr {
  /**
   * Constructs a new number keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
}
kv.prototype.ValueTypeName = "number";
class OR extends ug {
  /**
   * Constructs a new SLERP interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
  interpolate_(e, t, i, s) {
    const u = this.resultBuffer, f = this.sampleValues, h = this.valueSize, p = (i - t) / (s - t);
    let v = e * h;
    for (let _ = v + h; v !== _; v += 4)
      Fa.slerpFlat(u, 0, f, v - h, f, v, p);
    return u;
  }
}
class cg extends wr {
  /**
   * Constructs a new Quaternion keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
  /**
   * Overwritten so the method returns Quaternion based interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {QuaternionLinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(e) {
    return new OR(this.times, this.values, this.getValueSize(), e);
  }
}
cg.prototype.ValueTypeName = "quaternion";
cg.prototype.InterpolantFactoryMethodSmooth = void 0;
class wf extends wr {
  /**
   * Constructs a new string keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<string>} values - A list of keyframe values.
   */
  constructor(e, t, i) {
    super(e, t, i);
  }
}
wf.prototype.ValueTypeName = "string";
wf.prototype.ValueBufferType = Array;
wf.prototype.DefaultInterpolation = Xv;
wf.prototype.InterpolantFactoryMethodLinear = void 0;
wf.prototype.InterpolantFactoryMethodSmooth = void 0;
class Jv extends wr {
  /**
   * Constructs a new vector keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, t, i, s) {
    super(e, t, i, s);
  }
}
Jv.prototype.ValueTypeName = "vector";
class $v {
  /**
   * Constructs a new animation clip.
   *
   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can
   * use the static interface of this class for creating clips. In most cases though, animation clips
   * will automatically be created by loaders when importing animated 3D assets.
   *
   * @param {string} [name=''] - The clip's name.
   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,
   * the duration will be calculated from the passed keyframes.
   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
   * is blended/combined when two or more animations are simultaneously played.
   */
  constructor(e = "", t = -1, i = [], s = z_) {
    this.name = e, this.tracks = i, this.duration = t, this.blendMode = s, this.uuid = Qs(), this.duration < 0 && this.resetDuration();
  }
  /**
   * Factory method for creating an animation clip from the given JSON.
   *
   * @static
   * @param {Object} json - The serialized animation clip.
   * @return {AnimationClip} The new animation clip.
   */
  static parse(e) {
    const t = [], i = e.tracks, s = 1 / (e.fps || 1);
    for (let f = 0, h = i.length; f !== h; ++f)
      t.push(M3(i[f]).scale(s));
    const u = new this(e.name, e.duration, t, e.blendMode);
    return u.uuid = e.uuid, u;
  }
  /**
   * Serializes the given animation clip into JSON.
   *
   * @static
   * @param {AnimationClip} clip - The animation clip to serialize.
   * @return {Object} The JSON object.
   */
  static toJSON(e) {
    const t = [], i = e.tracks, s = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let u = 0, f = i.length; u !== f; ++u)
      t.push(wr.toJSON(i[u]));
    return s;
  }
  /**
   * Returns a new animation clip from the passed morph targets array of a
   * geometry, taking a name and the number of frames per second.
   *
   * Note: The fps parameter is required, but the animation speed can be
   * overridden via {@link AnimationAction#setDuration}.
   *
   * @static
   * @param {string} name - The name of the animation clip.
   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {AnimationClip} The new animation clip.
   */
  static CreateFromMorphTargetSequence(e, t, i, s) {
    const u = t.length, f = [];
    for (let h = 0; h < u; h++) {
      let p = [], v = [];
      p.push(
        (h + u - 1) % u,
        h,
        (h + 1) % u
      ), v.push(0, 1, 0);
      const _ = wR(p);
      p = AE(p, 1, _), v = AE(v, 1, _), !s && p[0] === 0 && (p.push(u), v.push(v[0])), f.push(
        new kv(
          ".morphTargetInfluences[" + t[h].name + "]",
          p,
          v
        ).scale(1 / i)
      );
    }
    return new this(e, -1, f);
  }
  /**
   * Searches for an animation clip by name, taking as its first parameter
   * either an array of clips, or a mesh or geometry that contains an
   * array named "animations" property.
   *
   * @static
   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.
   * @param {string} name - The name to search for.
   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.
   */
  static findByName(e, t) {
    let i = e;
    if (!Array.isArray(e)) {
      const s = e;
      i = s.geometry && s.geometry.animations || s.animations;
    }
    for (let s = 0; s < i.length; s++)
      if (i[s].name === t)
        return i[s];
    return null;
  }
  /**
   * Returns an array of new AnimationClips created from the morph target
   * sequences of a geometry, trying to sort morph target names into
   * animation-group-based patterns like "Walk_001, Walk_002, Run_001, Run_002...".
   *
   * See {@link MD2Loader#parse} as an example for how the method should be used.
   *
   * @static
   * @param {Array<Object>} morphTargets - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {Array<AnimationClip>} An array of new animation clips.
   */
  static CreateClipsFromMorphTargetSequences(e, t, i) {
    const s = {}, u = /^([\w-]*?)([\d]+)$/;
    for (let h = 0, p = e.length; h < p; h++) {
      const v = e[h], _ = v.name.match(u);
      if (_ && _.length > 1) {
        const S = _[1];
        let E = s[S];
        E || (s[S] = E = []), E.push(v);
      }
    }
    const f = [];
    for (const h in s)
      f.push(this.CreateFromMorphTargetSequence(h, s[h], t, i));
    return f;
  }
  /**
   * Parses the `animation.hierarchy` format and returns a new animation clip.
   *
   * @static
   * @deprecated since r175.
   * @param {Object} animation - A serialized animation clip as JSON.
   * @param {Array<Bones>} bones - An array of bones.
   * @return {?AnimationClip} The new animation clip.
   */
  static parseAnimation(e, t) {
    if (console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"), !e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const i = function(S, E, x, A, C) {
      if (x.length !== 0) {
        const R = [], M = [];
        mM(x, R, M, A), R.length !== 0 && C.push(new S(E, R, M));
      }
    }, s = [], u = e.name || "default", f = e.fps || 30, h = e.blendMode;
    let p = e.length || -1;
    const v = e.hierarchy || [];
    for (let S = 0; S < v.length; S++) {
      const E = v[S].keys;
      if (!(!E || E.length === 0))
        if (E[0].morphTargets) {
          const x = {};
          let A;
          for (A = 0; A < E.length; A++)
            if (E[A].morphTargets)
              for (let C = 0; C < E[A].morphTargets.length; C++)
                x[E[A].morphTargets[C]] = -1;
          for (const C in x) {
            const R = [], M = [];
            for (let w = 0; w !== E[A].morphTargets.length; ++w) {
              const N = E[A];
              R.push(N.time), M.push(N.morphTarget === C ? 1 : 0);
            }
            s.push(new kv(".morphTargetInfluence[" + C + "]", R, M));
          }
          p = x.length * f;
        } else {
          const x = ".bones[" + t[S].name + "]";
          i(
            Jv,
            x + ".position",
            E,
            "pos",
            s
          ), i(
            cg,
            x + ".quaternion",
            E,
            "rot",
            s
          ), i(
            Jv,
            x + ".scale",
            E,
            "scl",
            s
          );
        }
    }
    return s.length === 0 ? null : new this(u, p, s, h);
  }
  /**
   * Sets the duration of this clip to the duration of its longest keyframe track.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let i = 0, s = e.length; i !== s; ++i) {
      const u = this.tracks[i];
      t = Math.max(t, u.times[u.times.length - 1]);
    }
    return this.duration = t, this;
  }
  /**
   * Trims all tracks to the clip's duration.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  /**
   * Performs minimal validation on each track in the clip. Returns `true` if all
   * tracks are valid.
   *
   * @return {boolean} Whether the clip's keyframes are valid or not.
   */
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  /**
   * Optimizes each track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  /**
   * Returns a new animation clip with copied values from this instance.
   *
   * @return {AnimationClip} A clone of this instance.
   */
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  /**
   * Serializes this animation clip into JSON.
   *
   * @return {Object} The JSON object.
   */
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function E3(r) {
  switch (r.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return kv;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Jv;
    case "color":
      return gM;
    case "quaternion":
      return cg;
    case "bool":
    case "boolean":
      return Df;
    case "string":
      return wf;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + r);
}
function M3(r) {
  if (r.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = E3(r.type);
  if (r.times === void 0) {
    const t = [], i = [];
    mM(r.keys, t, i, "value"), r.times = t, r.values = i;
  }
  return e.parse !== void 0 ? e.parse(r) : new e(r.name, r.times, r.values, r.interpolation);
}
const qo = {
  /**
   * Whether caching is enabled or not.
   *
   * @static
   * @type {boolean}
   * @default false
   */
  enabled: !1,
  /**
   * A dictionary that holds cached files.
   *
   * @static
   * @type {Object<string,Object>}
   */
  files: {},
  /**
   * Adds a cache entry with a key to reference the file. If this key already
   * holds a file, it is overwritten.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @param {Object} file -  The file to be cached.
   */
  add: function(r, e) {
    this.enabled !== !1 && (this.files[r] = e);
  },
  /**
   * Gets the cached value for the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.
   */
  get: function(r) {
    if (this.enabled !== !1)
      return this.files[r];
  },
  /**
   * Removes the cached file associated with the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   */
  remove: function(r) {
    delete this.files[r];
  },
  /**
   * Remove all values from the cache.
   *
   * @static
   */
  clear: function() {
    this.files = {};
  }
};
class yM {
  /**
   * Constructs a new loading manager.
   *
   * @param {Function} [onLoad] - Executes when all items have been loaded.
   * @param {Function} [onProgress] - Executes when single items have been loaded.
   * @param {Function} [onError] - Executes when an error occurs.
   */
  constructor(e, t, i) {
    const s = this;
    let u = !1, f = 0, h = 0, p;
    const v = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = i, this.abortController = new AbortController(), this.itemStart = function(_) {
      h++, u === !1 && s.onStart !== void 0 && s.onStart(_, f, h), u = !0;
    }, this.itemEnd = function(_) {
      f++, s.onProgress !== void 0 && s.onProgress(_, f, h), f === h && (u = !1, s.onLoad !== void 0 && s.onLoad());
    }, this.itemError = function(_) {
      s.onError !== void 0 && s.onError(_);
    }, this.resolveURL = function(_) {
      return p ? p(_) : _;
    }, this.setURLModifier = function(_) {
      return p = _, this;
    }, this.addHandler = function(_, S) {
      return v.push(_, S), this;
    }, this.removeHandler = function(_) {
      const S = v.indexOf(_);
      return S !== -1 && v.splice(S, 2), this;
    }, this.getHandler = function(_) {
      for (let S = 0, E = v.length; S < E; S += 2) {
        const x = v[S], A = v[S + 1];
        if (x.global && (x.lastIndex = 0), x.test(_))
          return A;
      }
      return null;
    }, this.abort = function() {
      return this.abortController.abort(), this.abortController = new AbortController(), this;
    };
  }
}
const LR = /* @__PURE__ */ new yM();
class ws {
  /**
   * Constructs a new loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    this.manager = e !== void 0 ? e : LR, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for loading assets from the backend.
   *
   * @abstract
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {Function} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   */
  load() {
  }
  /**
   * A async version of {@link Loader#load}.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @return {Promise} A Promise that resolves when the asset has been loaded.
   */
  loadAsync(e, t) {
    const i = this;
    return new Promise(function(s, u) {
      i.load(e, s, t, u);
    });
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for parsing the asset into three.js entities.
   *
   * @abstract
   * @param {any} data - The data to parse.
   */
  parse() {
  }
  /**
   * Sets the `crossOrigin` String to implement CORS for loading the URL
   * from a different domain that allows CORS.
   *
   * @param {string} crossOrigin - The `crossOrigin` value.
   * @return {Loader} A reference to this instance.
   */
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  /**
   * Whether the XMLHttpRequest uses credentials such as cookies, authorization
   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
   *
   * Note: This setting has no effect if you are loading files locally or from the same domain.
   *
   * @param {boolean} value - The `withCredentials` value.
   * @return {Loader} A reference to this instance.
   */
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  /**
   * Sets the base path for the asset.
   *
   * @param {string} path - The base path.
   * @return {Loader} A reference to this instance.
   */
  setPath(e) {
    return this.path = e, this;
  }
  /**
   * Sets the base path for dependent resources like textures.
   *
   * @param {string} resourcePath - The resource path.
   * @return {Loader} A reference to this instance.
   */
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  /**
   * Sets the given request header.
   *
   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
   * for configuring the HTTP request.
   * @return {Loader} A reference to this instance.
   */
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
  /**
   * This method can be implemented in loaders for aborting ongoing requests.
   *
   * @abstract
   * @return {Loader} A reference to this instance.
   */
  abort() {
    return this;
  }
}
ws.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const Ll = {};
class b3 extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class Xl extends ws {
  /**
   * Constructs a new file loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.mimeType = "", this.responseType = "", this._abortController = new AbortController();
  }
  /**
   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(any)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   * @return {any|undefined} The cached resource if available.
   */
  load(e, t, i, s) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const u = qo.get(`file:${e}`);
    if (u !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(u), this.manager.itemEnd(e);
      }, 0), u;
    if (Ll[e] !== void 0) {
      Ll[e].push({
        onLoad: t,
        onProgress: i,
        onError: s
      });
      return;
    }
    Ll[e] = [], Ll[e].push({
      onLoad: t,
      onProgress: i,
      onError: s
    });
    const f = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin",
      signal: typeof AbortSignal.any == "function" ? AbortSignal.any([this._abortController.signal, this.manager.abortController.signal]) : this._abortController.signal
    }), h = this.mimeType, p = this.responseType;
    fetch(f).then((v) => {
      if (v.status === 200 || v.status === 0) {
        if (v.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || v.body === void 0 || v.body.getReader === void 0)
          return v;
        const _ = Ll[e], S = v.body.getReader(), E = v.headers.get("X-File-Size") || v.headers.get("Content-Length"), x = E ? parseInt(E) : 0, A = x !== 0;
        let C = 0;
        const R = new ReadableStream({
          start(M) {
            w();
            function w() {
              S.read().then(({ done: N, value: U }) => {
                if (N)
                  M.close();
                else {
                  C += U.byteLength;
                  const I = new ProgressEvent("progress", { lengthComputable: A, loaded: C, total: x });
                  for (let P = 0, X = _.length; P < X; P++) {
                    const Y = _[P];
                    Y.onProgress && Y.onProgress(I);
                  }
                  M.enqueue(U), w();
                }
              }, (N) => {
                M.error(N);
              });
            }
          }
        });
        return new Response(R);
      } else
        throw new b3(`fetch for "${v.url}" responded with ${v.status}: ${v.statusText}`, v);
    }).then((v) => {
      switch (p) {
        case "arraybuffer":
          return v.arrayBuffer();
        case "blob":
          return v.blob();
        case "document":
          return v.text().then((_) => new DOMParser().parseFromString(_, h));
        case "json":
          return v.json();
        default:
          if (h === "")
            return v.text();
          {
            const S = /charset="?([^;"\s]*)"?/i.exec(h), E = S && S[1] ? S[1].toLowerCase() : void 0, x = new TextDecoder(E);
            return v.arrayBuffer().then((A) => x.decode(A));
          }
      }
    }).then((v) => {
      qo.add(`file:${e}`, v);
      const _ = Ll[e];
      delete Ll[e];
      for (let S = 0, E = _.length; S < E; S++) {
        const x = _[S];
        x.onLoad && x.onLoad(v);
      }
    }).catch((v) => {
      const _ = Ll[e];
      if (_ === void 0)
        throw this.manager.itemError(e), v;
      delete Ll[e];
      for (let S = 0, E = _.length; S < E; S++) {
        const x = _[S];
        x.onError && x.onError(v);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  /**
   * Sets the expected response type.
   *
   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.
   * @return {FileLoader} A reference to this file loader.
   */
  setResponseType(e) {
    return this.responseType = e, this;
  }
  /**
   * Sets the expected mime type of the loaded file.
   *
   * @param {string} value - The mime type.
   * @return {FileLoader} A reference to this file loader.
   */
  setMimeType(e) {
    return this.mimeType = e, this;
  }
  /**
   * Aborts ongoing fetch requests.
   *
   * @return {FileLoader} A reference to this instance.
   */
  abort() {
    return this._abortController.abort(), this._abortController = new AbortController(), this;
  }
}
class T3 extends ws {
  /**
   * Constructs a new animation loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded animations as an array
   * holding instances of {@link AnimationClip} to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, t, i, s) {
    const u = this, f = new Xl(this.manager);
    f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(e, function(h) {
      try {
        t(u.parse(JSON.parse(h)));
      } catch (p) {
        s ? s(p) : console.error(p), u.manager.itemError(e);
      }
    }, i, s);
  }
  /**
   * Parses the given JSON object and returns an array of animation clips.
   *
   * @param {Object} json - The serialized animation clips.
   * @return {Array<AnimationClip>} The parsed animation clips.
   */
  parse(e) {
    const t = [];
    for (let i = 0; i < e.length; i++) {
      const s = $v.parse(e[i]);
      t.push(s);
    }
    return t;
  }
}
class A3 extends ws {
  /**
   * Constructs a new compressed texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded compressed texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CompressedTexture} The compressed texture.
   */
  load(e, t, i, s) {
    const u = this, f = [], h = new q_(), p = new Xl(this.manager);
    p.setPath(this.path), p.setResponseType("arraybuffer"), p.setRequestHeader(this.requestHeader), p.setWithCredentials(u.withCredentials);
    let v = 0;
    function _(S) {
      p.load(e[S], function(E) {
        const x = u.parse(E, !0);
        f[S] = {
          width: x.width,
          height: x.height,
          format: x.format,
          mipmaps: x.mipmaps
        }, v += 1, v === 6 && (x.mipmapCount === 1 && (h.minFilter = na), h.image = f, h.format = x.format, h.needsUpdate = !0, t && t(h));
      }, i, s);
    }
    if (Array.isArray(e))
      for (let S = 0, E = e.length; S < E; ++S)
        _(S);
    else
      p.load(e, function(S) {
        const E = u.parse(S, !0);
        if (E.isCubemap) {
          const x = E.mipmaps.length / E.mipmapCount;
          for (let A = 0; A < x; A++) {
            f[A] = { mipmaps: [] };
            for (let C = 0; C < E.mipmapCount; C++)
              f[A].mipmaps.push(E.mipmaps[A * E.mipmapCount + C]), f[A].format = E.format, f[A].width = E.width, f[A].height = E.height;
          }
          h.image = f;
        } else
          h.image.width = E.width, h.image.height = E.height, h.mipmaps = E.mipmaps;
        E.mipmapCount === 1 && (h.minFilter = na), h.format = E.format, h.needsUpdate = !0, t && t(h);
      }, i, s);
    return h;
  }
}
const Fd = /* @__PURE__ */ new WeakMap();
class eg extends ws {
  /**
   * Constructs a new image loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded image
   * to the `onLoad()` callback. The method also returns a new `Image` object which can
   * directly be used for texture creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Image)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Image} The image.
   */
  load(e, t, i, s) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const u = this, f = qo.get(`image:${e}`);
    if (f !== void 0) {
      if (f.complete === !0)
        u.manager.itemStart(e), setTimeout(function() {
          t && t(f), u.manager.itemEnd(e);
        }, 0);
      else {
        let S = Fd.get(f);
        S === void 0 && (S = [], Fd.set(f, S)), S.push({ onLoad: t, onError: s });
      }
      return f;
    }
    const h = jv("img");
    function p() {
      _(), t && t(this);
      const S = Fd.get(this) || [];
      for (let E = 0; E < S.length; E++) {
        const x = S[E];
        x.onLoad && x.onLoad(this);
      }
      Fd.delete(this), u.manager.itemEnd(e);
    }
    function v(S) {
      _(), s && s(S), qo.remove(`image:${e}`);
      const E = Fd.get(this) || [];
      for (let x = 0; x < E.length; x++) {
        const A = E[x];
        A.onError && A.onError(S);
      }
      Fd.delete(this), u.manager.itemError(e), u.manager.itemEnd(e);
    }
    function _() {
      h.removeEventListener("load", p, !1), h.removeEventListener("error", v, !1);
    }
    return h.addEventListener("load", p, !1), h.addEventListener("error", v, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (h.crossOrigin = this.crossOrigin), qo.add(`image:${e}`, h), u.manager.itemStart(e), h.src = e, h;
  }
}
class R3 extends ws {
  /**
   * Constructs a new cube texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded cube texture
   * to the `onLoad()` callback. The method also returns a new cube texture object which can
   * directly be used for material creation. If you do it this way, the cube texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the
   * cube texture. The urls should be specified in the following order: pos-x,
   * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.
   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CubeTexture} The cube texture.
   */
  load(e, t, i, s) {
    const u = new ag();
    u.colorSpace = Ia;
    const f = new eg(this.manager);
    f.setCrossOrigin(this.crossOrigin), f.setPath(this.path);
    let h = 0;
    function p(v) {
      f.load(e[v], function(_) {
        u.images[v] = _, h++, h === 6 && (u.needsUpdate = !0, t && t(u));
      }, void 0, s);
    }
    for (let v = 0; v < e.length; ++v)
      p(v);
    return u;
  }
}
class C3 extends ws {
  /**
   * Constructs a new data texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded data texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {DataTexture} The data texture.
   */
  load(e, t, i, s) {
    const u = this, f = new Wo(), h = new Xl(this.manager);
    return h.setResponseType("arraybuffer"), h.setRequestHeader(this.requestHeader), h.setPath(this.path), h.setWithCredentials(u.withCredentials), h.load(e, function(p) {
      let v;
      try {
        v = u.parse(p);
      } catch (_) {
        if (s !== void 0)
          s(_);
        else {
          console.error(_);
          return;
        }
      }
      v.image !== void 0 ? f.image = v.image : v.data !== void 0 && (f.image.width = v.width, f.image.height = v.height, f.image.data = v.data), f.wrapS = v.wrapS !== void 0 ? v.wrapS : Cr, f.wrapT = v.wrapT !== void 0 ? v.wrapT : Cr, f.magFilter = v.magFilter !== void 0 ? v.magFilter : na, f.minFilter = v.minFilter !== void 0 ? v.minFilter : na, f.anisotropy = v.anisotropy !== void 0 ? v.anisotropy : 1, v.colorSpace !== void 0 && (f.colorSpace = v.colorSpace), v.flipY !== void 0 && (f.flipY = v.flipY), v.format !== void 0 && (f.format = v.format), v.type !== void 0 && (f.type = v.type), v.mipmaps !== void 0 && (f.mipmaps = v.mipmaps, f.minFilter = Xo), v.mipmapCount === 1 && (f.minFilter = na), v.generateMipmaps !== void 0 && (f.generateMipmaps = v.generateMipmaps), f.needsUpdate = !0, t && t(f, v);
    }, i, s), f;
  }
}
class D3 extends ws {
  /**
   * Constructs a new texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Texture} The texture.
   */
  load(e, t, i, s) {
    const u = new Ai(), f = new eg(this.manager);
    return f.setCrossOrigin(this.crossOrigin), f.setPath(this.path), f.load(e, function(h) {
      u.image = h, u.needsUpdate = !0, t !== void 0 && t(u);
    }, i, s), u;
  }
}
class Ju extends Nn {
  /**
   * Constructs a new light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new Et(e), this.intensity = t;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (t.object.target = this.target.uuid), t;
  }
}
class zR extends Ju {
  /**
   * Constructs a new hemisphere light.
   *
   * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.
   * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, t, i) {
    super(e, i), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Nn.DEFAULT_UP), this.updateMatrix(), this.groundColor = new Et(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const Hx = /* @__PURE__ */ new qt(), V1 = /* @__PURE__ */ new j(), F1 = /* @__PURE__ */ new j();
class _M {
  /**
   * Constructs a new light shadow.
   *
   * @param {Camera} camera - The light's view of the world.
   */
  constructor(e) {
    this.camera = e, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ze(512, 512), this.mapType = Dr, this.map = null, this.mapPass = null, this.matrix = new qt(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new dp(), this._frameExtents = new ze(1, 1), this._viewportCount = 1, this._viewports = [
      new Un(0, 0, 1, 1)
    ];
  }
  /**
   * Used internally by the renderer to get the number of viewports that need
   * to be rendered for this shadow.
   *
   * @return {number} The viewport count.
   */
  getViewportCount() {
    return this._viewportCount;
  }
  /**
   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.
   *
   * @return {Frustum} The shadow camera frustum.
   */
  getFrustum() {
    return this._frustum;
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   */
  updateMatrices(e) {
    const t = this.camera, i = this.matrix;
    V1.setFromMatrixPosition(e.matrixWorld), t.position.copy(V1), F1.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(F1), t.updateMatrixWorld(), Hx.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(Hx, t.coordinateSystem, t.reversedDepth), t.reversedDepth ? i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ) : i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), i.multiply(Hx);
  }
  /**
   * Returns a viewport definition for the given viewport index.
   *
   * @param {number} viewportIndex - The viewport index.
   * @return {Vector4} The viewport.
   */
  getViewport(e) {
    return this._viewports[e];
  }
  /**
   * Returns the frame extends.
   *
   * @return {Vector2} The frame extends.
   */
  getFrameExtents() {
    return this._frameExtents;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  /**
   * Copies the values of the given light shadow instance to this instance.
   *
   * @param {LightShadow} source - The light shadow to copy.
   * @return {LightShadow} A reference to this light shadow instance.
   */
  copy(e) {
    return this.camera = e.camera.clone(), this.intensity = e.intensity, this.bias = e.bias, this.radius = e.radius, this.autoUpdate = e.autoUpdate, this.needsUpdate = e.needsUpdate, this.normalBias = e.normalBias, this.blurSamples = e.blurSamples, this.mapSize.copy(e.mapSize), this;
  }
  /**
   * Returns a new light shadow instance with copied values from this instance.
   *
   * @return {LightShadow} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Serializes the light shadow into JSON.
   *
   * @return {Object} A JSON object representing the serialized light shadow.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {};
    return this.intensity !== 1 && (e.intensity = this.intensity), this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class w3 extends _M {
  /**
   * Constructs a new spot light shadow.
   */
  constructor() {
    super(new Ui(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1, this.aspect = 1;
  }
  updateMatrices(e) {
    const t = this.camera, i = sp * 2 * e.angle * this.focus, s = this.mapSize.width / this.mapSize.height * this.aspect, u = e.distance || t.far;
    (i !== t.fov || s !== t.aspect || u !== t.far) && (t.fov = i, t.aspect = s, t.far = u, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class BR extends Ju {
  /**
   * Constructs a new spot light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(e, t, i = 0, s = Math.PI / 3, u = 0, f = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Nn.DEFAULT_UP), this.updateMatrix(), this.target = new Nn(), this.distance = i, this.angle = s, this.penumbra = u, this.decay = f, this.map = null, this.shadow = new w3();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   *  Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const G1 = /* @__PURE__ */ new qt(), Mv = /* @__PURE__ */ new j(), Ix = /* @__PURE__ */ new j();
class U3 extends _M {
  /**
   * Constructs a new point light shadow.
   */
  constructor() {
    super(new Ui(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new ze(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Un(2, 1, 1, 1),
      // negative X
      new Un(0, 1, 1, 1),
      // positive Z
      new Un(3, 1, 1, 1),
      // negative Z
      new Un(1, 1, 1, 1),
      // positive Y
      new Un(3, 0, 1, 1),
      // negative Y
      new Un(1, 0, 1, 1)
    ], this._cubeDirections = [
      new j(1, 0, 0),
      new j(-1, 0, 0),
      new j(0, 0, 1),
      new j(0, 0, -1),
      new j(0, 1, 0),
      new j(0, -1, 0)
    ], this._cubeUps = [
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 0, 1),
      new j(0, 0, -1)
    ];
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   * @param {number} [viewportIndex=0] - The viewport index.
   */
  updateMatrices(e, t = 0) {
    const i = this.camera, s = this.matrix, u = e.distance || i.far;
    u !== i.far && (i.far = u, i.updateProjectionMatrix()), Mv.setFromMatrixPosition(e.matrixWorld), i.position.copy(Mv), Ix.copy(i.position), Ix.add(this._cubeDirections[t]), i.up.copy(this._cubeUps[t]), i.lookAt(Ix), i.updateMatrixWorld(), s.makeTranslation(-Mv.x, -Mv.y, -Mv.z), G1.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse), this._frustum.setFromProjectionMatrix(G1, i.coordinateSystem, i.reversedDepth);
  }
}
class PR extends Ju {
  /**
   * Constructs a new point light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(e, t, i = 0, s = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = i, this.decay = s, this.shadow = new U3();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class Yu extends H_ {
  /**
   * Constructs a new orthographic camera.
   *
   * @param {number} [left=-1] - The left plane of the camera's frustum.
   * @param {number} [right=1] - The right plane of the camera's frustum.
   * @param {number} [top=1] - The top plane of the camera's frustum.
   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(e = -1, t = 1, i = 1, s = -1, u = 0.1, f = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = i, this.bottom = s, this.near = u, this.far = f, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   * @see {@link PerspectiveCamera#setViewOffset}
   */
  setViewOffset(e, t, i, s, u, f) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = i, this.view.offsetY = s, this.view.width = u, this.view.height = f, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), i = (this.right + this.left) / 2, s = (this.top + this.bottom) / 2;
    let u = i - e, f = i + e, h = s + t, p = s - t;
    if (this.view !== null && this.view.enabled) {
      const v = (this.right - this.left) / this.view.fullWidth / this.zoom, _ = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      u += v * this.view.offsetX, f = u + v * this.view.width, h -= _ * this.view.offsetY, p = h - _ * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(u, f, h, p, this.near, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
class N3 extends _M {
  /**
   * Constructs a new directional light shadow.
   */
  constructor() {
    super(new Yu(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class HR extends Ju {
  /**
   * Constructs a new directional light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Nn.DEFAULT_UP), this.updateMatrix(), this.target = new Nn(), this.shadow = new N3();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class IR extends Ju {
  /**
   * Constructs a new ambient light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class VR extends Ju {
  /**
   * Constructs a new area light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   * @param {number} [width=10] - The width of the light.
   * @param {number} [height=10] - The height of the light.
   */
  constructor(e, t, i = 10, s = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = i, this.height = s;
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class FR {
  /**
   * Constructs a new spherical harmonics.
   */
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new j());
  }
  /**
   * Sets the given SH coefficients to this instance by copying
   * the values.
   *
   * @param {Array<Vector3>} coefficients - The SH coefficients.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  /**
   * Sets all SH coefficients to `0`.
   *
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  /**
   * Returns the radiance in the direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The radiance.
   */
  getAt(e, t) {
    const i = e.x, s = e.y, u = e.z, f = this.coefficients;
    return t.copy(f[0]).multiplyScalar(0.282095), t.addScaledVector(f[1], 0.488603 * s), t.addScaledVector(f[2], 0.488603 * u), t.addScaledVector(f[3], 0.488603 * i), t.addScaledVector(f[4], 1.092548 * (i * s)), t.addScaledVector(f[5], 1.092548 * (s * u)), t.addScaledVector(f[6], 0.315392 * (3 * u * u - 1)), t.addScaledVector(f[7], 1.092548 * (i * u)), t.addScaledVector(f[8], 0.546274 * (i * i - s * s)), t;
  }
  /**
   * Returns the irradiance (radiance convolved with cosine lobe) in the
   * direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The irradiance.
   */
  getIrradianceAt(e, t) {
    const i = e.x, s = e.y, u = e.z, f = this.coefficients;
    return t.copy(f[0]).multiplyScalar(0.886227), t.addScaledVector(f[1], 2 * 0.511664 * s), t.addScaledVector(f[2], 2 * 0.511664 * u), t.addScaledVector(f[3], 2 * 0.511664 * i), t.addScaledVector(f[4], 2 * 0.429043 * i * s), t.addScaledVector(f[5], 2 * 0.429043 * s * u), t.addScaledVector(f[6], 0.743125 * u * u - 0.247708), t.addScaledVector(f[7], 2 * 0.429043 * i * u), t.addScaledVector(f[8], 0.429043 * (i * i - s * s)), t;
  }
  /**
   * Adds the given SH to this instance.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  /**
   * A convenience method for performing {@link SphericalHarmonics3#add} and
   * {@link SphericalHarmonics3#scale} at once.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  addScaledSH(e, t) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].addScaledVector(e.coefficients[i], t);
    return this;
  }
  /**
   * Scales this SH by the given scale factor.
   *
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  /**
   * Linear interpolates between the given SH and this instance by the given
   * alpha factor.
   *
   * @param {SphericalHarmonics3} sh - The SH to interpolate with.
   * @param {number} alpha - The alpha factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  lerp(e, t) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].lerp(e.coefficients[i], t);
    return this;
  }
  /**
   * Returns `true` if this spherical harmonics is equal with the given one.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.
   * @return {boolean} Whether this spherical harmonics is equal with the given one.
   */
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  /**
   * Copies the values of the given spherical harmonics to this instance.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  copy(e) {
    return this.set(e.coefficients);
  }
  /**
   * Returns a new spherical harmonics with copied values from this instance.
   *
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the SH coefficients of this instance from the given array.
   *
   * @param {Array<number>} array - An array holding the SH coefficients.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  fromArray(e, t = 0) {
    const i = this.coefficients;
    for (let s = 0; s < 9; s++)
      i[s].fromArray(e, t + s * 3);
    return this;
  }
  /**
   * Returns an array with the SH coefficients, or copies them into the provided
   * array. The coefficients are represented as numbers.
   *
   * @param {Array<number>} [array=[]] - The target array.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {Array<number>} An array with flat SH coefficients.
   */
  toArray(e = [], t = 0) {
    const i = this.coefficients;
    for (let s = 0; s < 9; s++)
      i[s].toArray(e, t + s * 3);
    return e;
  }
  /**
   * Computes the SH basis for the given normal vector.
   *
   * @param {Vector3} normal - The normal.
   * @param {Array<number>} shBasis - The target array holding the SH basis.
   */
  static getBasisAt(e, t) {
    const i = e.x, s = e.y, u = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * s, t[2] = 0.488603 * u, t[3] = 0.488603 * i, t[4] = 1.092548 * i * s, t[5] = 1.092548 * s * u, t[6] = 0.315392 * (3 * u * u - 1), t[7] = 1.092548 * i * u, t[8] = 0.546274 * (i * i - s * s);
  }
}
class GR extends Ju {
  /**
   * Constructs a new light probe.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e = new FR(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  /**
   * Deserializes the light prove from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized light probe.
   * @return {LightProbe} A reference to this light probe.
   */
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class aS extends ws {
  /**
   * Constructs a new material loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.textures = {};
  }
  /**
   * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Material)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, t, i, s) {
    const u = this, f = new Xl(u.manager);
    f.setPath(u.path), f.setRequestHeader(u.requestHeader), f.setWithCredentials(u.withCredentials), f.load(e, function(h) {
      try {
        t(u.parse(JSON.parse(h)));
      } catch (p) {
        s ? s(p) : console.error(p), u.manager.itemError(e);
      }
    }, i, s);
  }
  /**
   * Parses the given JSON object and returns a material.
   *
   * @param {Object} json - The serialized material.
   * @return {Material} The parsed material.
   */
  parse(e) {
    const t = this.textures;
    function i(u) {
      return t[u] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", u), t[u];
    }
    const s = this.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (s.uuid = e.uuid), e.name !== void 0 && (s.name = e.name), e.color !== void 0 && s.color !== void 0 && s.color.setHex(e.color), e.roughness !== void 0 && (s.roughness = e.roughness), e.metalness !== void 0 && (s.metalness = e.metalness), e.sheen !== void 0 && (s.sheen = e.sheen), e.sheenColor !== void 0 && (s.sheenColor = new Et().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (s.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && s.emissive !== void 0 && s.emissive.setHex(e.emissive), e.specular !== void 0 && s.specular !== void 0 && s.specular.setHex(e.specular), e.specularIntensity !== void 0 && (s.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && s.specularColor !== void 0 && s.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (s.shininess = e.shininess), e.clearcoat !== void 0 && (s.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (s.clearcoatRoughness = e.clearcoatRoughness), e.dispersion !== void 0 && (s.dispersion = e.dispersion), e.iridescence !== void 0 && (s.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (s.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (s.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (s.transmission = e.transmission), e.thickness !== void 0 && (s.thickness = e.thickness), e.attenuationDistance !== void 0 && (s.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && s.attenuationColor !== void 0 && s.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (s.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (s.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (s.fog = e.fog), e.flatShading !== void 0 && (s.flatShading = e.flatShading), e.blending !== void 0 && (s.blending = e.blending), e.combine !== void 0 && (s.combine = e.combine), e.side !== void 0 && (s.side = e.side), e.shadowSide !== void 0 && (s.shadowSide = e.shadowSide), e.opacity !== void 0 && (s.opacity = e.opacity), e.transparent !== void 0 && (s.transparent = e.transparent), e.alphaTest !== void 0 && (s.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (s.alphaHash = e.alphaHash), e.depthFunc !== void 0 && (s.depthFunc = e.depthFunc), e.depthTest !== void 0 && (s.depthTest = e.depthTest), e.depthWrite !== void 0 && (s.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (s.colorWrite = e.colorWrite), e.blendSrc !== void 0 && (s.blendSrc = e.blendSrc), e.blendDst !== void 0 && (s.blendDst = e.blendDst), e.blendEquation !== void 0 && (s.blendEquation = e.blendEquation), e.blendSrcAlpha !== void 0 && (s.blendSrcAlpha = e.blendSrcAlpha), e.blendDstAlpha !== void 0 && (s.blendDstAlpha = e.blendDstAlpha), e.blendEquationAlpha !== void 0 && (s.blendEquationAlpha = e.blendEquationAlpha), e.blendColor !== void 0 && s.blendColor !== void 0 && s.blendColor.setHex(e.blendColor), e.blendAlpha !== void 0 && (s.blendAlpha = e.blendAlpha), e.stencilWriteMask !== void 0 && (s.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (s.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (s.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (s.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (s.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (s.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (s.stencilZPass = e.stencilZPass), e.stencilWrite !== void 0 && (s.stencilWrite = e.stencilWrite), e.wireframe !== void 0 && (s.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (s.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (s.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (s.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (s.rotation = e.rotation), e.linewidth !== void 0 && (s.linewidth = e.linewidth), e.dashSize !== void 0 && (s.dashSize = e.dashSize), e.gapSize !== void 0 && (s.gapSize = e.gapSize), e.scale !== void 0 && (s.scale = e.scale), e.polygonOffset !== void 0 && (s.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (s.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (s.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (s.dithering = e.dithering), e.alphaToCoverage !== void 0 && (s.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (s.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (s.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (s.visible = e.visible), e.toneMapped !== void 0 && (s.toneMapped = e.toneMapped), e.userData !== void 0 && (s.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? s.vertexColors = e.vertexColors > 0 : s.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const u in e.uniforms) {
        const f = e.uniforms[u];
        switch (s.uniforms[u] = {}, f.type) {
          case "t":
            s.uniforms[u].value = i(f.value);
            break;
          case "c":
            s.uniforms[u].value = new Et().setHex(f.value);
            break;
          case "v2":
            s.uniforms[u].value = new ze().fromArray(f.value);
            break;
          case "v3":
            s.uniforms[u].value = new j().fromArray(f.value);
            break;
          case "v4":
            s.uniforms[u].value = new Un().fromArray(f.value);
            break;
          case "m3":
            s.uniforms[u].value = new en().fromArray(f.value);
            break;
          case "m4":
            s.uniforms[u].value = new qt().fromArray(f.value);
            break;
          default:
            s.uniforms[u].value = f.value;
        }
      }
    if (e.defines !== void 0 && (s.defines = e.defines), e.vertexShader !== void 0 && (s.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (s.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (s.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const u in e.extensions)
        s.extensions[u] = e.extensions[u];
    if (e.lights !== void 0 && (s.lights = e.lights), e.clipping !== void 0 && (s.clipping = e.clipping), e.size !== void 0 && (s.size = e.size), e.sizeAttenuation !== void 0 && (s.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (s.map = i(e.map)), e.matcap !== void 0 && (s.matcap = i(e.matcap)), e.alphaMap !== void 0 && (s.alphaMap = i(e.alphaMap)), e.bumpMap !== void 0 && (s.bumpMap = i(e.bumpMap)), e.bumpScale !== void 0 && (s.bumpScale = e.bumpScale), e.normalMap !== void 0 && (s.normalMap = i(e.normalMap)), e.normalMapType !== void 0 && (s.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let u = e.normalScale;
      Array.isArray(u) === !1 && (u = [u, u]), s.normalScale = new ze().fromArray(u);
    }
    return e.displacementMap !== void 0 && (s.displacementMap = i(e.displacementMap)), e.displacementScale !== void 0 && (s.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (s.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (s.roughnessMap = i(e.roughnessMap)), e.metalnessMap !== void 0 && (s.metalnessMap = i(e.metalnessMap)), e.emissiveMap !== void 0 && (s.emissiveMap = i(e.emissiveMap)), e.emissiveIntensity !== void 0 && (s.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (s.specularMap = i(e.specularMap)), e.specularIntensityMap !== void 0 && (s.specularIntensityMap = i(e.specularIntensityMap)), e.specularColorMap !== void 0 && (s.specularColorMap = i(e.specularColorMap)), e.envMap !== void 0 && (s.envMap = i(e.envMap)), e.envMapRotation !== void 0 && s.envMapRotation.fromArray(e.envMapRotation), e.envMapIntensity !== void 0 && (s.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (s.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (s.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (s.lightMap = i(e.lightMap)), e.lightMapIntensity !== void 0 && (s.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (s.aoMap = i(e.aoMap)), e.aoMapIntensity !== void 0 && (s.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (s.gradientMap = i(e.gradientMap)), e.clearcoatMap !== void 0 && (s.clearcoatMap = i(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (s.clearcoatRoughnessMap = i(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (s.clearcoatNormalMap = i(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (s.clearcoatNormalScale = new ze().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (s.iridescenceMap = i(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (s.iridescenceThicknessMap = i(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (s.transmissionMap = i(e.transmissionMap)), e.thicknessMap !== void 0 && (s.thicknessMap = i(e.thicknessMap)), e.anisotropyMap !== void 0 && (s.anisotropyMap = i(e.anisotropyMap)), e.sheenColorMap !== void 0 && (s.sheenColorMap = i(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (s.sheenRoughnessMap = i(e.sheenRoughnessMap)), s;
  }
  /**
   * Textures are not embedded in the material JSON so they have
   * to be injected before the loading process starts.
   *
   * @param {Object} value - A dictionary holding textures for material properties.
   * @return {MaterialLoader} A reference to this material loader.
   */
  setTextures(e) {
    return this.textures = e, this;
  }
  /**
   * Creates a material for the given type.
   *
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  createMaterialFromType(e) {
    return aS.createMaterialFromType(e);
  }
  /**
   * Creates a material for the given type.
   *
   * @static
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: SR,
      SpriteMaterial: nM,
      RawShaderMaterial: xR,
      ShaderMaterial: oo,
      PointsMaterial: aM,
      MeshPhysicalMaterial: ER,
      MeshStandardMaterial: hM,
      MeshPhongMaterial: MR,
      MeshToonMaterial: bR,
      MeshNormalMaterial: TR,
      MeshLambertMaterial: AR,
      MeshDepthMaterial: dM,
      MeshDistanceMaterial: pM,
      MeshBasicMaterial: Qu,
      MeshMatcapMaterial: RR,
      LineDashedMaterial: CR,
      LineBasicMaterial: fs,
      Material: Xa
    };
    return new t[e]();
  }
}
class RE {
  /**
   * Extracts the base URL from the given URL.
   *
   * @param {string} url -The URL to extract the base URL from.
   * @return {string} The extracted base URL.
   */
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  /**
   * Resolves relative URLs against the given path. Absolute paths, data urls,
   * and blob URLs will be returned as is. Invalid URLs will return an empty
   * string.
   *
   * @param {string} url -The URL to resolve.
   * @param {string} path - The base path for relative URLs to be resolved against.
   * @return {string} The resolved URL.
   */
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class XR extends on {
  /**
   * Constructs a new instanced buffer geometry.
   */
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class qR extends ws {
  /**
   * Constructs a new geometry loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, t, i, s) {
    const u = this, f = new Xl(u.manager);
    f.setPath(u.path), f.setRequestHeader(u.requestHeader), f.setWithCredentials(u.withCredentials), f.load(e, function(h) {
      try {
        t(u.parse(JSON.parse(h)));
      } catch (p) {
        s ? s(p) : console.error(p), u.manager.itemError(e);
      }
    }, i, s);
  }
  /**
   * Parses the given JSON object and returns a geometry.
   *
   * @param {Object} json - The serialized geometry.
   * @return {BufferGeometry} The parsed geometry.
   */
  parse(e) {
    const t = {}, i = {};
    function s(x, A) {
      if (t[A] !== void 0) return t[A];
      const R = x.interleavedBuffers[A], M = u(x, R.buffer), w = Kd(R.type, M), N = new F_(w, R.stride);
      return N.uuid = R.uuid, t[A] = N, N;
    }
    function u(x, A) {
      if (i[A] !== void 0) return i[A];
      const R = x.arrayBuffers[A], M = new Uint32Array(R).buffer;
      return i[A] = M, M;
    }
    const f = e.isInstancedBufferGeometry ? new XR() : new on(), h = e.data.index;
    if (h !== void 0) {
      const x = Kd(h.type, h.array);
      f.setIndex(new jn(x, 1));
    }
    const p = e.data.attributes;
    for (const x in p) {
      const A = p[x];
      let C;
      if (A.isInterleavedBufferAttribute) {
        const R = s(e.data, A.data);
        C = new bf(R, A.itemSize, A.offset, A.normalized);
      } else {
        const R = Kd(A.type, A.array), M = A.isInstancedBufferAttribute ? lp : jn;
        C = new M(R, A.itemSize, A.normalized);
      }
      A.name !== void 0 && (C.name = A.name), A.usage !== void 0 && C.setUsage(A.usage), f.setAttribute(x, C);
    }
    const v = e.data.morphAttributes;
    if (v)
      for (const x in v) {
        const A = v[x], C = [];
        for (let R = 0, M = A.length; R < M; R++) {
          const w = A[R];
          let N;
          if (w.isInterleavedBufferAttribute) {
            const U = s(e.data, w.data);
            N = new bf(U, w.itemSize, w.offset, w.normalized);
          } else {
            const U = Kd(w.type, w.array);
            N = new jn(U, w.itemSize, w.normalized);
          }
          w.name !== void 0 && (N.name = w.name), C.push(N);
        }
        f.morphAttributes[x] = C;
      }
    e.data.morphTargetsRelative && (f.morphTargetsRelative = !0);
    const S = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (S !== void 0)
      for (let x = 0, A = S.length; x !== A; ++x) {
        const C = S[x];
        f.addGroup(C.start, C.count, C.materialIndex);
      }
    const E = e.data.boundingSphere;
    return E !== void 0 && (f.boundingSphere = new Da().fromJSON(E)), e.name && (f.name = e.name), e.userData && (f.userData = e.userData), f;
  }
}
class O3 extends ws {
  /**
   * Constructs a new object loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, t, i, s) {
    const u = this, f = this.path === "" ? RE.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || f;
    const h = new Xl(this.manager);
    h.setPath(this.path), h.setRequestHeader(this.requestHeader), h.setWithCredentials(this.withCredentials), h.load(e, function(p) {
      let v = null;
      try {
        v = JSON.parse(p);
      } catch (S) {
        s !== void 0 && s(S), console.error("THREE:ObjectLoader: Can't parse " + e + ".", S.message);
        return;
      }
      const _ = v.metadata;
      if (_ === void 0 || _.type === void 0 || _.type.toLowerCase() === "geometry") {
        s !== void 0 && s(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      u.parse(v, t);
    }, i, s);
  }
  /**
   * Async version of {@link ObjectLoader#load}.
   *
   * @async
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.
   */
  async loadAsync(e, t) {
    const i = this, s = this.path === "" ? RE.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || s;
    const u = new Xl(this.manager);
    u.setPath(this.path), u.setRequestHeader(this.requestHeader), u.setWithCredentials(this.withCredentials);
    const f = await u.loadAsync(e, t), h = JSON.parse(f), p = h.metadata;
    if (p === void 0 || p.type === void 0 || p.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await i.parseAsync(h);
  }
  /**
   * Parses the given JSON. This is used internally by {@link ObjectLoader#load}
   * but can also be used directly to parse a previously loaded JSON structure.
   *
   * @param {Object} json - The serialized 3D object.
   * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.
   * @return {Object3D} The parsed 3D object.
   */
  parse(e, t) {
    const i = this.parseAnimations(e.animations), s = this.parseShapes(e.shapes), u = this.parseGeometries(e.geometries, s), f = this.parseImages(e.images, function() {
      t !== void 0 && t(v);
    }), h = this.parseTextures(e.textures, f), p = this.parseMaterials(e.materials, h), v = this.parseObject(e.object, u, p, h, i), _ = this.parseSkeletons(e.skeletons, v);
    if (this.bindSkeletons(v, _), this.bindLightTargets(v), t !== void 0) {
      let S = !1;
      for (const E in f)
        if (f[E].data instanceof HTMLImageElement) {
          S = !0;
          break;
        }
      S === !1 && t(v);
    }
    return v;
  }
  /**
   * Async version of {@link ObjectLoader#parse}.
   *
   * @param {Object} json - The serialized 3D object.
   * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.
   */
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), s = this.parseGeometries(e.geometries, i), u = await this.parseImagesAsync(e.images), f = this.parseTextures(e.textures, u), h = this.parseMaterials(e.materials, f), p = this.parseObject(e.object, s, h, f, t), v = this.parseSkeletons(e.skeletons, p);
    return this.bindSkeletons(p, v), this.bindLightTargets(p), p;
  }
  // internals
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let i = 0, s = e.length; i < s; i++) {
        const u = new Ef().fromJSON(e[i]);
        t[u.uuid] = u;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const i = {}, s = {};
    if (t.traverse(function(u) {
      u.isBone && (s[u.uuid] = u);
    }), e !== void 0)
      for (let u = 0, f = e.length; u < f; u++) {
        const h = new G_().fromJSON(e[u], s);
        i[h.uuid] = h;
      }
    return i;
  }
  parseGeometries(e, t) {
    const i = {};
    if (e !== void 0) {
      const s = new qR();
      for (let u = 0, f = e.length; u < f; u++) {
        let h;
        const p = e[u];
        switch (p.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            h = s.parse(p);
            break;
          default:
            p.type in I1 ? h = I1[p.type].fromJSON(p, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${p.type}"`);
        }
        h.uuid = p.uuid, p.name !== void 0 && (h.name = p.name), p.userData !== void 0 && (h.userData = p.userData), i[p.uuid] = h;
      }
    }
    return i;
  }
  parseMaterials(e, t) {
    const i = {}, s = {};
    if (e !== void 0) {
      const u = new aS();
      u.setTextures(t);
      for (let f = 0, h = e.length; f < h; f++) {
        const p = e[f];
        i[p.uuid] === void 0 && (i[p.uuid] = u.parse(p)), s[p.uuid] = i[p.uuid];
      }
    }
    return s;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let i = 0; i < e.length; i++) {
        const s = e[i], u = $v.parse(s);
        t[u.uuid] = u;
      }
    return t;
  }
  parseImages(e, t) {
    const i = this, s = {};
    let u;
    function f(p) {
      return i.manager.itemStart(p), u.load(p, function() {
        i.manager.itemEnd(p);
      }, void 0, function() {
        i.manager.itemError(p), i.manager.itemEnd(p);
      });
    }
    function h(p) {
      if (typeof p == "string") {
        const v = p, _ = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(v) ? v : i.resourcePath + v;
        return f(_);
      } else
        return p.data ? {
          data: Kd(p.type, p.data),
          width: p.width,
          height: p.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const p = new yM(t);
      u = new eg(p), u.setCrossOrigin(this.crossOrigin);
      for (let v = 0, _ = e.length; v < _; v++) {
        const S = e[v], E = S.url;
        if (Array.isArray(E)) {
          const x = [];
          for (let A = 0, C = E.length; A < C; A++) {
            const R = E[A], M = h(R);
            M !== null && (M instanceof HTMLImageElement ? x.push(M) : x.push(new Wo(M.data, M.width, M.height)));
          }
          s[S.uuid] = new qu(x);
        } else {
          const x = h(S.url);
          s[S.uuid] = new qu(x);
        }
      }
    }
    return s;
  }
  async parseImagesAsync(e) {
    const t = this, i = {};
    let s;
    async function u(f) {
      if (typeof f == "string") {
        const h = f, p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : t.resourcePath + h;
        return await s.loadAsync(p);
      } else
        return f.data ? {
          data: Kd(f.type, f.data),
          width: f.width,
          height: f.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      s = new eg(this.manager), s.setCrossOrigin(this.crossOrigin);
      for (let f = 0, h = e.length; f < h; f++) {
        const p = e[f], v = p.url;
        if (Array.isArray(v)) {
          const _ = [];
          for (let S = 0, E = v.length; S < E; S++) {
            const x = v[S], A = await u(x);
            A !== null && (A instanceof HTMLImageElement ? _.push(A) : _.push(new Wo(A.data, A.width, A.height)));
          }
          i[p.uuid] = new qu(_);
        } else {
          const _ = await u(p.url);
          i[p.uuid] = new qu(_);
        }
      }
    }
    return i;
  }
  parseTextures(e, t) {
    function i(u, f) {
      return typeof u == "number" ? u : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", u), f[u]);
    }
    const s = {};
    if (e !== void 0)
      for (let u = 0, f = e.length; u < f; u++) {
        const h = e[u];
        h.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', h.uuid), t[h.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", h.image);
        const p = t[h.image], v = p.data;
        let _;
        Array.isArray(v) ? (_ = new ag(), v.length === 6 && (_.needsUpdate = !0)) : (v && v.data ? _ = new Wo() : _ = new Ai(), v && (_.needsUpdate = !0)), _.source = p, _.uuid = h.uuid, h.name !== void 0 && (_.name = h.name), h.mapping !== void 0 && (_.mapping = i(h.mapping, L3)), h.channel !== void 0 && (_.channel = h.channel), h.offset !== void 0 && _.offset.fromArray(h.offset), h.repeat !== void 0 && _.repeat.fromArray(h.repeat), h.center !== void 0 && _.center.fromArray(h.center), h.rotation !== void 0 && (_.rotation = h.rotation), h.wrap !== void 0 && (_.wrapS = i(h.wrap[0], X1), _.wrapT = i(h.wrap[1], X1)), h.format !== void 0 && (_.format = h.format), h.internalFormat !== void 0 && (_.internalFormat = h.internalFormat), h.type !== void 0 && (_.type = h.type), h.colorSpace !== void 0 && (_.colorSpace = h.colorSpace), h.minFilter !== void 0 && (_.minFilter = i(h.minFilter, q1)), h.magFilter !== void 0 && (_.magFilter = i(h.magFilter, q1)), h.anisotropy !== void 0 && (_.anisotropy = h.anisotropy), h.flipY !== void 0 && (_.flipY = h.flipY), h.generateMipmaps !== void 0 && (_.generateMipmaps = h.generateMipmaps), h.premultiplyAlpha !== void 0 && (_.premultiplyAlpha = h.premultiplyAlpha), h.unpackAlignment !== void 0 && (_.unpackAlignment = h.unpackAlignment), h.compareFunction !== void 0 && (_.compareFunction = h.compareFunction), h.userData !== void 0 && (_.userData = h.userData), s[h.uuid] = _;
      }
    return s;
  }
  parseObject(e, t, i, s, u) {
    let f;
    function h(E) {
      return t[E] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", E), t[E];
    }
    function p(E) {
      if (E !== void 0) {
        if (Array.isArray(E)) {
          const x = [];
          for (let A = 0, C = E.length; A < C; A++) {
            const R = E[A];
            i[R] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", R), x.push(i[R]);
          }
          return x;
        }
        return i[E] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", E), i[E];
      }
    }
    function v(E) {
      return s[E] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", E), s[E];
    }
    let _, S;
    switch (e.type) {
      case "Scene":
        f = new tM(), e.background !== void 0 && (Number.isInteger(e.background) ? f.background = new Et(e.background) : f.background = v(e.background)), e.environment !== void 0 && (f.environment = v(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? f.fog = new V_(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (f.fog = new I_(e.fog.color, e.fog.density)), e.fog.name !== "" && (f.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (f.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (f.backgroundIntensity = e.backgroundIntensity), e.backgroundRotation !== void 0 && f.backgroundRotation.fromArray(e.backgroundRotation), e.environmentIntensity !== void 0 && (f.environmentIntensity = e.environmentIntensity), e.environmentRotation !== void 0 && f.environmentRotation.fromArray(e.environmentRotation);
        break;
      case "PerspectiveCamera":
        f = new Ui(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (f.focus = e.focus), e.zoom !== void 0 && (f.zoom = e.zoom), e.filmGauge !== void 0 && (f.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (f.filmOffset = e.filmOffset), e.view !== void 0 && (f.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        f = new Yu(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (f.zoom = e.zoom), e.view !== void 0 && (f.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        f = new IR(e.color, e.intensity);
        break;
      case "DirectionalLight":
        f = new HR(e.color, e.intensity), f.target = e.target || "";
        break;
      case "PointLight":
        f = new PR(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        f = new VR(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        f = new BR(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay), f.target = e.target || "";
        break;
      case "HemisphereLight":
        f = new zR(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        f = new GR().fromJSON(e);
        break;
      case "SkinnedMesh":
        _ = h(e.geometry), S = p(e.material), f = new iR(_, S), e.bindMode !== void 0 && (f.bindMode = e.bindMode), e.bindMatrix !== void 0 && f.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (f.skeleton = e.skeleton);
        break;
      case "Mesh":
        _ = h(e.geometry), S = p(e.material), f = new Xi(_, S);
        break;
      case "InstancedMesh":
        _ = h(e.geometry), S = p(e.material);
        const E = e.count, x = e.instanceMatrix, A = e.instanceColor;
        f = new aR(_, S, E), f.instanceMatrix = new lp(new Float32Array(x.array), 16), A !== void 0 && (f.instanceColor = new lp(new Float32Array(A.array), A.itemSize));
        break;
      case "BatchedMesh":
        _ = h(e.geometry), S = p(e.material), f = new sR(e.maxInstanceCount, e.maxVertexCount, e.maxIndexCount, S), f.geometry = _, f.perObjectFrustumCulled = e.perObjectFrustumCulled, f.sortObjects = e.sortObjects, f._drawRanges = e.drawRanges, f._reservedRanges = e.reservedRanges, f._geometryInfo = e.geometryInfo.map((C) => {
          let R = null, M = null;
          return C.boundingBox !== void 0 && (R = new Ga().fromJSON(C.boundingBox)), C.boundingSphere !== void 0 && (M = new Da().fromJSON(C.boundingSphere)), {
            ...C,
            boundingBox: R,
            boundingSphere: M
          };
        }), f._instanceInfo = e.instanceInfo, f._availableInstanceIds = e._availableInstanceIds, f._availableGeometryIds = e._availableGeometryIds, f._nextIndexStart = e.nextIndexStart, f._nextVertexStart = e.nextVertexStart, f._geometryCount = e.geometryCount, f._maxInstanceCount = e.maxInstanceCount, f._maxVertexCount = e.maxVertexCount, f._maxIndexCount = e.maxIndexCount, f._geometryInitialized = e.geometryInitialized, f._matricesTexture = v(e.matricesTexture.uuid), f._indirectTexture = v(e.indirectTexture.uuid), e.colorsTexture !== void 0 && (f._colorsTexture = v(e.colorsTexture.uuid)), e.boundingSphere !== void 0 && (f.boundingSphere = new Da().fromJSON(e.boundingSphere)), e.boundingBox !== void 0 && (f.boundingBox = new Ga().fromJSON(e.boundingBox));
        break;
      case "LOD":
        f = new nR();
        break;
      case "Line":
        f = new Zu(h(e.geometry), p(e.material));
        break;
      case "LineLoop":
        f = new rR(h(e.geometry), p(e.material));
        break;
      case "LineSegments":
        f = new Ko(h(e.geometry), p(e.material));
        break;
      case "PointCloud":
      case "Points":
        f = new oR(h(e.geometry), p(e.material));
        break;
      case "Sprite":
        f = new tR(p(e.material));
        break;
      case "Group":
        f = new Qd();
        break;
      case "Bone":
        f = new iM();
        break;
      default:
        f = new Nn();
    }
    if (f.uuid = e.uuid, e.name !== void 0 && (f.name = e.name), e.matrix !== void 0 ? (f.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (f.matrixAutoUpdate = e.matrixAutoUpdate), f.matrixAutoUpdate && f.matrix.decompose(f.position, f.quaternion, f.scale)) : (e.position !== void 0 && f.position.fromArray(e.position), e.rotation !== void 0 && f.rotation.fromArray(e.rotation), e.quaternion !== void 0 && f.quaternion.fromArray(e.quaternion), e.scale !== void 0 && f.scale.fromArray(e.scale)), e.up !== void 0 && f.up.fromArray(e.up), e.castShadow !== void 0 && (f.castShadow = e.castShadow), e.receiveShadow !== void 0 && (f.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.intensity !== void 0 && (f.shadow.intensity = e.shadow.intensity), e.shadow.bias !== void 0 && (f.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (f.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (f.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && f.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (f.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (f.visible = e.visible), e.frustumCulled !== void 0 && (f.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (f.renderOrder = e.renderOrder), e.userData !== void 0 && (f.userData = e.userData), e.layers !== void 0 && (f.layers.mask = e.layers), e.children !== void 0) {
      const E = e.children;
      for (let x = 0; x < E.length; x++)
        f.add(this.parseObject(E[x], t, i, s, u));
    }
    if (e.animations !== void 0) {
      const E = e.animations;
      for (let x = 0; x < E.length; x++) {
        const A = E[x];
        f.animations.push(u[A]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (f.autoUpdate = e.autoUpdate);
      const E = e.levels;
      for (let x = 0; x < E.length; x++) {
        const A = E[x], C = f.getObjectByProperty("uuid", A.object);
        C !== void 0 && f.addLevel(C, A.distance, A.hysteresis);
      }
    }
    return f;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(i) {
      if (i.isSkinnedMesh === !0 && i.skeleton !== void 0) {
        const s = t[i.skeleton];
        s === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", i.skeleton) : i.bind(s, i.bindMatrix);
      }
    });
  }
  bindLightTargets(e) {
    e.traverse(function(t) {
      if (t.isDirectionalLight || t.isSpotLight) {
        const i = t.target, s = e.getObjectByProperty("uuid", i);
        s !== void 0 ? t.target = s : t.target = new Nn();
      }
    });
  }
}
const L3 = {
  UVMapping: C_,
  CubeReflectionMapping: Fl,
  CubeRefractionMapping: Wu,
  EquirectangularReflectionMapping: Iv,
  EquirectangularRefractionMapping: Vv,
  CubeUVReflectionMapping: fp
}, X1 = {
  RepeatWrapping: Fv,
  ClampToEdgeWrapping: Cr,
  MirroredRepeatWrapping: Gv
}, q1 = {
  NearestFilter: Ca,
  NearestMipmapNearestFilter: FE,
  NearestMipmapLinearFilter: Zd,
  LinearFilter: na,
  LinearMipmapNearestFilter: Dv,
  LinearMipmapLinearFilter: Xo
}, Vx = /* @__PURE__ */ new WeakMap();
class z3 extends ws {
  /**
   * Constructs a new image bitmap loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" }, this._abortController = new AbortController();
  }
  /**
   * Sets the given loader options. The structure of the object must match the `options` parameter of
   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.
   *
   * @param {Object} options - The loader options to set.
   * @return {ImageBitmapLoader} A reference to this image bitmap loader.
   */
  setOptions(e) {
    return this.options = e, this;
  }
  /**
   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {ImageBitmap|undefined} The image bitmap.
   */
  load(e, t, i, s) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const u = this, f = qo.get(`image-bitmap:${e}`);
    if (f !== void 0) {
      if (u.manager.itemStart(e), f.then) {
        f.then((v) => {
          if (Vx.has(f) === !0)
            s && s(Vx.get(f)), u.manager.itemError(e), u.manager.itemEnd(e);
          else
            return t && t(v), u.manager.itemEnd(e), v;
        });
        return;
      }
      return setTimeout(function() {
        t && t(f), u.manager.itemEnd(e);
      }, 0), f;
    }
    const h = {};
    h.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", h.headers = this.requestHeader, h.signal = typeof AbortSignal.any == "function" ? AbortSignal.any([this._abortController.signal, this.manager.abortController.signal]) : this._abortController.signal;
    const p = fetch(e, h).then(function(v) {
      return v.blob();
    }).then(function(v) {
      return createImageBitmap(v, Object.assign(u.options, { colorSpaceConversion: "none" }));
    }).then(function(v) {
      return qo.add(`image-bitmap:${e}`, v), t && t(v), u.manager.itemEnd(e), v;
    }).catch(function(v) {
      s && s(v), Vx.set(p, v), qo.remove(`image-bitmap:${e}`), u.manager.itemError(e), u.manager.itemEnd(e);
    });
    qo.add(`image-bitmap:${e}`, p), u.manager.itemStart(e);
  }
  /**
   * Aborts ongoing fetch requests.
   *
   * @return {ImageBitmapLoader} A reference to this instance.
   */
  abort() {
    return this._abortController.abort(), this._abortController = new AbortController(), this;
  }
}
let d0;
class SM {
  /**
   * Returns the global native audio context.
   *
   * @return {AudioContext} The native audio context.
   */
  static getContext() {
    return d0 === void 0 && (d0 = new (window.AudioContext || window.webkitAudioContext)()), d0;
  }
  /**
   * Allows to set the global native audio context from outside.
   *
   * @param {AudioContext} value - The native context to set.
   */
  static setContext(e) {
    d0 = e;
  }
}
class B3 extends ws {
  /**
   * Constructs a new audio loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded audio buffer
   * to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, t, i, s) {
    const u = this, f = new Xl(this.manager);
    f.setResponseType("arraybuffer"), f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(e, function(p) {
      try {
        const v = p.slice(0);
        SM.getContext().decodeAudioData(v, function(S) {
          t(S);
        }).catch(h);
      } catch (v) {
        h(v);
      }
    }, i, s);
    function h(p) {
      s ? s(p) : console.error(p), u.manager.itemError(e);
    }
  }
}
const Y1 = /* @__PURE__ */ new qt(), W1 = /* @__PURE__ */ new qt(), af = /* @__PURE__ */ new qt();
class P3 {
  /**
   * Constructs a new stereo camera.
   */
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Ui(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Ui(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  /**
   * Updates the stereo camera based on the given perspective camera.
   *
   * @param {PerspectiveCamera} camera - The perspective camera.
   */
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, af.copy(e.projectionMatrix);
      const s = t.eyeSep / 2, u = s * t.near / t.focus, f = t.near * Math.tan(xf * t.fov * 0.5) / t.zoom;
      let h, p;
      W1.elements[12] = -s, Y1.elements[12] = s, h = -f * t.aspect + u, p = f * t.aspect + u, af.elements[0] = 2 * t.near / (p - h), af.elements[8] = (p + h) / (p - h), this.cameraL.projectionMatrix.copy(af), h = -f * t.aspect - u, p = f * t.aspect - u, af.elements[0] = 2 * t.near / (p - h), af.elements[8] = (p + h) / (p - h), this.cameraR.projectionMatrix.copy(af);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(W1), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Y1);
  }
}
class YR extends Ui {
  /**
   * Constructs a new array camera.
   *
   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
   */
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.isMultiViewCamera = !1, this.cameras = e;
  }
}
class xM {
  /**
   * Constructs a new clock.
   *
   * @param {boolean} [autoStart=true] - Whether to automatically start the clock when
   * `getDelta()` is called for the first time.
   */
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  /**
   * Starts the clock. When `autoStart` is set to `true`, the method is automatically
   * called by the class.
   */
  start() {
    this.startTime = performance.now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  /**
   * Stops the clock.
   */
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  /**
   * Returns the elapsed time in seconds.
   *
   * @return {number} The elapsed time.
   */
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  /**
   * Returns the delta time in seconds.
   *
   * @return {number} The delta time.
   */
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = performance.now();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
const sf = /* @__PURE__ */ new j(), Fx = /* @__PURE__ */ new Fa(), H3 = /* @__PURE__ */ new j(), rf = /* @__PURE__ */ new j(), of = /* @__PURE__ */ new j();
class I3 extends Nn {
  /**
   * Constructs a new audio listener.
   */
  constructor() {
    super(), this.type = "AudioListener", this.context = SM.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new xM();
  }
  /**
   * Returns the listener's input node.
   *
   * This method is used by other audio nodes to connect to this listener.
   *
   * @return {GainNode} The input node.
   */
  getInput() {
    return this.gain;
  }
  /**
   * Removes the current filter from this listener.
   *
   * @return {AudioListener} A reference to this listener.
   */
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  /**
   * Returns the current set filter.
   *
   * @return {?AudioNode} The filter.
   */
  getFilter() {
    return this.filter;
  }
  /**
   * Sets the given filter to this listener.
   *
   * @param {AudioNode} value - The filter to set.
   * @return {AudioListener} A reference to this listener.
   */
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  /**
   * Returns the applications master volume.
   *
   * @return {number} The master volume.
   */
  getMasterVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the applications master volume. This volume setting affects
   * all audio nodes in the scene.
   *
   * @param {number} value - The master volume to set.
   * @return {AudioListener} A reference to this listener.
   */
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(sf, Fx, H3), rf.set(0, 0, -1).applyQuaternion(Fx), of.set(0, 1, 0).applyQuaternion(Fx), t.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(sf.x, i), t.positionY.linearRampToValueAtTime(sf.y, i), t.positionZ.linearRampToValueAtTime(sf.z, i), t.forwardX.linearRampToValueAtTime(rf.x, i), t.forwardY.linearRampToValueAtTime(rf.y, i), t.forwardZ.linearRampToValueAtTime(rf.z, i), t.upX.linearRampToValueAtTime(of.x, i), t.upY.linearRampToValueAtTime(of.y, i), t.upZ.linearRampToValueAtTime(of.z, i);
    } else
      t.setPosition(sf.x, sf.y, sf.z), t.setOrientation(rf.x, rf.y, rf.z, of.x, of.y, of.z);
  }
}
class WR extends Nn {
  /**
   * Constructs a new audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  /**
   * Returns the output audio node.
   *
   * @return {GainNode} The output node.
   */
  getOutput() {
    return this.gain;
  }
  /**
   * Sets the given audio node as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.
   * @return {Audio} A reference to this instance.
   */
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  /**
   * Sets the given media element as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {HTMLMediaElement} mediaElement - The media element.
   * @return {Audio} A reference to this instance.
   */
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  /**
   * Sets the given media stream as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {MediaStream} mediaStream - The media stream.
   * @return {Audio} A reference to this instance.
   */
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  /**
   * Sets the given audio buffer as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.
   *
   * @param {AudioBuffer} audioBuffer - The audio buffer.
   * @return {Audio} A reference to this instance.
   */
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  /**
   * Starts the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  /**
   * Pauses the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  /**
   * Stops the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  stop(e = 0) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(this.context.currentTime + e), this.source.onended = null), this.isPlaying = !1, this;
  }
  /**
   * Connects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio} A reference to this instance.
   */
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  /**
   * Disconnects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  /**
   * Returns the current set filters.
   *
   * @return {Array<AudioNode>} The list of filters.
   */
  getFilters() {
    return this.filters;
  }
  /**
   * Sets an array of filters and connects them with the audio source.
   *
   * @param {Array<AudioNode>} [value] - A list of filters.
   * @return {Audio} A reference to this instance.
   */
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  /**
   * Defines the detuning of oscillation in cents.
   *
   * @param {number} value - The detuning of oscillation in cents.
   * @return {Audio} A reference to this instance.
   */
  setDetune(e) {
    return this.detune = e, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  /**
   * Returns the detuning of oscillation in cents.
   *
   * @return {number} The detuning of oscillation in cents.
   */
  getDetune() {
    return this.detune;
  }
  /**
   * Returns the first filter in the list of filters.
   *
   * @return {AudioNode|undefined} The first filter in the list of filters.
   */
  getFilter() {
    return this.getFilters()[0];
  }
  /**
   * Applies a single filter node to the audio.
   *
   * @param {AudioNode} [filter] - The filter to set.
   * @return {Audio} A reference to this instance.
   */
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  /**
   * Sets the playback rate.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [value] - The playback rate to set.
   * @return {Audio|undefined} A reference to this instance.
   */
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  /**
  	 * Returns the current playback rate.
  
  	 * @return {number} The playback rate.
  	 */
  getPlaybackRate() {
    return this.playbackRate;
  }
  /**
   * Automatically called when playback finished.
   */
  onEnded() {
    this.isPlaying = !1, this._progress = 0;
  }
  /**
   * Returns the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {boolean} Whether the audio should loop or not.
   */
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  /**
   * Sets the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {boolean} value - Whether the audio should loop or not.
   * @return {Audio|undefined} A reference to this instance.
   */
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  /**
   * Sets the loop start value which defines where in the audio buffer the replay should
   * start, in seconds.
   *
   * @param {number} value - The loop start value.
   * @return {Audio} A reference to this instance.
   */
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  /**
   * Sets the loop end value which defines where in the audio buffer the replay should
   * stop, in seconds.
   *
   * @param {number} value - The loop end value.
   * @return {Audio} A reference to this instance.
   */
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  /**
   * Returns the volume.
   *
   * @return {number} The volume.
   */
  getVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the volume.
   *
   * @param {number} value - The volume to set.
   * @return {Audio} A reference to this instance.
   */
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  copy(e, t) {
    return super.copy(e, t), e.sourceType !== "buffer" ? (console.warn("THREE.Audio: Audio source type cannot be copied."), this) : (this.autoplay = e.autoplay, this.buffer = e.buffer, this.detune = e.detune, this.loop = e.loop, this.loopStart = e.loopStart, this.loopEnd = e.loopEnd, this.offset = e.offset, this.duration = e.duration, this.playbackRate = e.playbackRate, this.hasPlaybackControl = e.hasPlaybackControl, this.sourceType = e.sourceType, this.filters = e.filters.slice(), this);
  }
  clone(e) {
    return new this.constructor(this.listener).copy(this, e);
  }
}
const lf = /* @__PURE__ */ new j(), j1 = /* @__PURE__ */ new Fa(), V3 = /* @__PURE__ */ new j(), uf = /* @__PURE__ */ new j();
class F3 extends WR {
  /**
   * Constructs a positional audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    return super.connect(), this.panner.connect(this.gain), this;
  }
  disconnect() {
    return super.disconnect(), this.panner.disconnect(this.gain), this;
  }
  getOutput() {
    return this.panner;
  }
  /**
   * Returns the current reference distance.
   *
   * @return {number} The reference distance.
   */
  getRefDistance() {
    return this.panner.refDistance;
  }
  /**
   * Defines the reference distance for reducing volume as the audio source moves
   * further from the listener – i.e. the distance at which the volume reduction
   * starts taking effect.
   *
   * @param {number} value - The reference distance to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  /**
   * Returns the current rolloff factor.
   *
   * @return {number} The rolloff factor.
   */
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  /**
   * Defines how quickly the volume is reduced as the source moves away from the listener.
   *
   * @param {number} value - The rolloff factor.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  /**
   * Returns the current distance model.
   *
   * @return {('linear'|'inverse'|'exponential')} The distance model.
   */
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  /**
   * Defines which algorithm to use to reduce the volume of the audio source
   * as it moves away from the listener.
   *
   * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}
   * for more details.
   *
   * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  /**
   * Returns the current max distance.
   *
   * @return {number} The max distance.
   */
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  /**
   * Defines the maximum distance between the audio source and the listener,
   * after which the volume is not reduced any further.
   *
   * This value is used only by the `linear` distance model.
   *
   * @param {number} value - The max distance.
   * @return {PositionalAudio} A reference to this instance.
   */
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  /**
   * Sets the directional cone in which the audio can be listened.
   *
   * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.
   * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.
   * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDirectionalCone(e, t, i) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = i, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
    this.matrixWorld.decompose(lf, j1, V3), uf.set(0, 0, 1).applyQuaternion(j1);
    const t = this.panner;
    if (t.positionX) {
      const i = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(lf.x, i), t.positionY.linearRampToValueAtTime(lf.y, i), t.positionZ.linearRampToValueAtTime(lf.z, i), t.orientationX.linearRampToValueAtTime(uf.x, i), t.orientationY.linearRampToValueAtTime(uf.y, i), t.orientationZ.linearRampToValueAtTime(uf.z, i);
    } else
      t.setPosition(lf.x, lf.y, lf.z), t.setOrientation(uf.x, uf.y, uf.z);
  }
}
class G3 {
  /**
   * Constructs a new audio analyzer.
   *
   * @param {Audio} audio - The audio to analyze.
   * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
   */
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  /**
   * Returns an array with frequency data of the audio.
   *
   * Each item in the array represents the decibel value for a specific frequency.
   * The frequencies are spread linearly from 0 to 1/2 of the sample rate.
   * For example, for 48000 sample rate, the last item of the array will represent
   * the decibel value for 24000 Hz.
   *
   * @return {Uint8Array} The frequency data.
   */
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  /**
   * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.
   *
   * @return {number} The average frequency.
   */
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let i = 0; i < t.length; i++)
      e += t[i];
    return e / t.length;
  }
}
class jR {
  /**
   * Constructs a new property mixer.
   *
   * @param {PropertyBinding} binding - The property binding.
   * @param {string} typeName - The keyframe track type name.
   * @param {number} valueSize - The keyframe track value size.
   */
  constructor(e, t, i) {
    this.binding = e, this.valueSize = i;
    let s, u, f;
    switch (t) {
      case "quaternion":
        s = this._slerp, u = this._slerpAdditive, f = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(i * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        s = this._select, u = this._select, f = this._setAdditiveIdentityOther, this.buffer = new Array(i * 5);
        break;
      default:
        s = this._lerp, u = this._lerpAdditive, f = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(i * 5);
    }
    this._mixBufferRegion = s, this._mixBufferRegionAdditive = u, this._setIdentity = f, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  /**
   * Accumulates data in the `incoming` region into `accu<i>`.
   *
   * @param {number} accuIndex - The accumulation index.
   * @param {number} weight - The weight.
   */
  accumulate(e, t) {
    const i = this.buffer, s = this.valueSize, u = e * s + s;
    let f = this.cumulativeWeight;
    if (f === 0) {
      for (let h = 0; h !== s; ++h)
        i[u + h] = i[h];
      f = t;
    } else {
      f += t;
      const h = t / f;
      this._mixBufferRegion(i, u, 0, h, s);
    }
    this.cumulativeWeight = f;
  }
  /**
   * Accumulates data in the `incoming` region into `add`.
   *
   * @param {number} weight - The weight.
   */
  accumulateAdditive(e) {
    const t = this.buffer, i = this.valueSize, s = i * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, s, 0, e, i), this.cumulativeWeightAdditive += e;
  }
  /**
   * Applies the state of `accu<i>` to the binding when accus differ.
   *
   * @param {number} accuIndex - The accumulation index.
   */
  apply(e) {
    const t = this.valueSize, i = this.buffer, s = e * t + t, u = this.cumulativeWeight, f = this.cumulativeWeightAdditive, h = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, u < 1) {
      const p = t * this._origIndex;
      this._mixBufferRegion(
        i,
        s,
        p,
        1 - u,
        t
      );
    }
    f > 0 && this._mixBufferRegionAdditive(i, s, this._addIndex * t, 1, t);
    for (let p = t, v = t + t; p !== v; ++p)
      if (i[p] !== i[p + t]) {
        h.setValue(i, s);
        break;
      }
  }
  /**
   * Remembers the state of the bound property and copy it to both accus.
   */
  saveOriginalState() {
    const e = this.binding, t = this.buffer, i = this.valueSize, s = i * this._origIndex;
    e.getValue(t, s);
    for (let u = i, f = s; u !== f; ++u)
      t[u] = t[s + u % i];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  /**
   * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.
   */
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  // internals
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let i = e; i < t; i++)
      this.buffer[i] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let i = 0; i < this.valueSize; i++)
      this.buffer[t + i] = this.buffer[e + i];
  }
  // mix functions
  _select(e, t, i, s, u) {
    if (s >= 0.5)
      for (let f = 0; f !== u; ++f)
        e[t + f] = e[i + f];
  }
  _slerp(e, t, i, s) {
    Fa.slerpFlat(e, t, e, t, e, i, s);
  }
  _slerpAdditive(e, t, i, s, u) {
    const f = this._workIndex * u;
    Fa.multiplyQuaternionsFlat(e, f, e, t, e, i), Fa.slerpFlat(e, t, e, t, e, f, s);
  }
  _lerp(e, t, i, s, u) {
    const f = 1 - s;
    for (let h = 0; h !== u; ++h) {
      const p = t + h;
      e[p] = e[p] * f + e[i + h] * s;
    }
  }
  _lerpAdditive(e, t, i, s, u) {
    for (let f = 0; f !== u; ++f) {
      const h = t + f;
      e[h] = e[h] + e[i + f] * s;
    }
  }
}
const EM = "\\[\\]\\.:\\/", X3 = new RegExp("[" + EM + "]", "g"), MM = "[^" + EM + "]", q3 = "[^" + EM.replace("\\.", "") + "]", Y3 = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", MM), W3 = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", q3), j3 = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", MM), Z3 = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", MM), K3 = new RegExp(
  "^" + Y3 + W3 + j3 + Z3 + "$"
), Q3 = ["material", "materials", "bones", "map"];
class k3 {
  constructor(e, t, i) {
    const s = i || wn.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, s);
  }
  getValue(e, t) {
    this.bind();
    const i = this._targetGroup.nCachedObjects_, s = this._bindings[i];
    s !== void 0 && s.getValue(e, t);
  }
  setValue(e, t) {
    const i = this._bindings;
    for (let s = this._targetGroup.nCachedObjects_, u = i.length; s !== u; ++s)
      i[s].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, i = e.length; t !== i; ++t)
      e[t].unbind();
  }
}
class wn {
  /**
   * Constructs a new property binding.
   *
   * @param {Object} rootNode - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   */
  constructor(e, t, i) {
    this.path = t, this.parsedPath = i || wn.parseTrackName(t), this.node = wn.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  /**
   * Factory method for creating a property binding from the given parameters.
   *
   * @static
   * @param {Object} root - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   * @return {PropertyBinding|Composite} The created property binding or composite.
   */
  static create(e, t, i) {
    return e && e.isAnimationObjectGroup ? new wn.Composite(e, t, i) : new wn(e, t, i);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name - Node name to be sanitized.
   * @return {string} The sanitized node name.
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(X3, "");
  }
  /**
   * Parses the given track name (an object path to an animated property) and
   * returns an object with information about the path. Matches strings in the following forms:
   *
   * - nodeName.property
   * - nodeName.property[accessor]
   * - nodeName.material.property[accessor]
   * - uuid.property[accessor]
   * - uuid.objectName[objectIndex].propertyName[propertyIndex]
   * - parentName/nodeName.property
   * - parentName/parentName/nodeName.property[index]
   * - .bone[Armature.DEF_cog].position
   * - scene:helium_balloon_model:helium_balloon_model.position
   *
   * @static
   * @param {string} trackName - The track name to parse.
   * @return {Object} The parsed track name as an object.
   */
  static parseTrackName(e) {
    const t = K3.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const i = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, s = i.nodeName && i.nodeName.lastIndexOf(".");
    if (s !== void 0 && s !== -1) {
      const u = i.nodeName.substring(s + 1);
      Q3.indexOf(u) !== -1 && (i.nodeName = i.nodeName.substring(0, s), i.objectName = u);
    }
    if (i.propertyName === null || i.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return i;
  }
  /**
   * Searches for a node in the hierarchy of the given root object by the given
   * node name.
   *
   * @static
   * @param {Object} root - The root object.
   * @param {string|number} nodeName - The name of the node.
   * @return {?Object} The found node. Returns `null` if no object was found.
   */
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const i = e.skeleton.getBoneByName(t);
      if (i !== void 0)
        return i;
    }
    if (e.children) {
      const i = function(u) {
        for (let f = 0; f < u.length; f++) {
          const h = u[f];
          if (h.name === t || h.uuid === t)
            return h;
          const p = i(h.children);
          if (p) return p;
        }
        return null;
      }, s = i(e.children);
      if (s)
        return s;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const i = this.resolvedProperty;
    for (let s = 0, u = i.length; s !== u; ++s)
      e[t++] = i[s];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const i = this.resolvedProperty;
    for (let s = 0, u = i.length; s !== u; ++s)
      i[s] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const i = this.resolvedProperty;
    for (let s = 0, u = i.length; s !== u; ++s)
      i[s] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const i = this.resolvedProperty;
    for (let s = 0, u = i.length; s !== u; ++s)
      i[s] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  /**
   * Creates a getter / setter pair for the property tracked by this binding.
   */
  bind() {
    let e = this.node;
    const t = this.parsedPath, i = t.objectName, s = t.propertyName;
    let u = t.propertyIndex;
    if (e || (e = wn.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (i) {
      let v = t.objectIndex;
      switch (i) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let _ = 0; _ < e.length; _++)
            if (e[_].name === v) {
              v = _;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[i] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[i];
      }
      if (v !== void 0) {
        if (e[v] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[v];
      }
    }
    const f = e[s];
    if (f === void 0) {
      const v = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + v + "." + s + " but it wasn't found.", e);
      return;
    }
    let h = this.Versioning.None;
    this.targetObject = e, e.isMaterial === !0 ? h = this.Versioning.NeedsUpdate : e.isObject3D === !0 && (h = this.Versioning.MatrixWorldNeedsUpdate);
    let p = this.BindingType.Direct;
    if (u !== void 0) {
      if (s === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[u] !== void 0 && (u = e.morphTargetDictionary[u]);
      }
      p = this.BindingType.ArrayElement, this.resolvedProperty = f, this.propertyIndex = u;
    } else f.fromArray !== void 0 && f.toArray !== void 0 ? (p = this.BindingType.HasFromToArray, this.resolvedProperty = f) : Array.isArray(f) ? (p = this.BindingType.EntireArray, this.resolvedProperty = f) : this.propertyName = s;
    this.getValue = this.GetterByBindingType[p], this.setValue = this.SetterByBindingTypeAndVersioning[p][h];
  }
  /**
   * Unbinds the property.
   */
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
wn.Composite = k3;
wn.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
wn.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
wn.prototype.GetterByBindingType = [
  wn.prototype._getValue_direct,
  wn.prototype._getValue_array,
  wn.prototype._getValue_arrayElement,
  wn.prototype._getValue_toArray
];
wn.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    wn.prototype._setValue_direct,
    wn.prototype._setValue_direct_setNeedsUpdate,
    wn.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    wn.prototype._setValue_array,
    wn.prototype._setValue_array_setNeedsUpdate,
    wn.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    wn.prototype._setValue_arrayElement,
    wn.prototype._setValue_arrayElement_setNeedsUpdate,
    wn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    wn.prototype._setValue_fromArray,
    wn.prototype._setValue_fromArray_setNeedsUpdate,
    wn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class J3 {
  /**
   * Constructs a new animation group.
   *
   * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.
   */
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = Qs(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let i = 0, s = arguments.length; i !== s; ++i)
      e[arguments[i].uuid] = i;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  /**
   * Adds an arbitrary number of objects to this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to add.
   */
  add() {
    const e = this._objects, t = this._indicesByUUID, i = this._paths, s = this._parsedPaths, u = this._bindings, f = u.length;
    let h, p = e.length, v = this.nCachedObjects_;
    for (let _ = 0, S = arguments.length; _ !== S; ++_) {
      const E = arguments[_], x = E.uuid;
      let A = t[x];
      if (A === void 0) {
        A = p++, t[x] = A, e.push(E);
        for (let C = 0, R = f; C !== R; ++C)
          u[C].push(new wn(E, i[C], s[C]));
      } else if (A < v) {
        h = e[A];
        const C = --v, R = e[C];
        t[R.uuid] = A, e[A] = R, t[x] = C, e[C] = E;
        for (let M = 0, w = f; M !== w; ++M) {
          const N = u[M], U = N[C];
          let I = N[A];
          N[A] = U, I === void 0 && (I = new wn(E, i[M], s[M])), N[C] = I;
        }
      } else e[A] !== h && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = v;
  }
  /**
   * Removes an arbitrary number of objects to this animation group
   *
   * @param {...Object3D} arguments - The 3D objects to remove.
   */
  remove() {
    const e = this._objects, t = this._indicesByUUID, i = this._bindings, s = i.length;
    let u = this.nCachedObjects_;
    for (let f = 0, h = arguments.length; f !== h; ++f) {
      const p = arguments[f], v = p.uuid, _ = t[v];
      if (_ !== void 0 && _ >= u) {
        const S = u++, E = e[S];
        t[E.uuid] = _, e[_] = E, t[v] = S, e[S] = p;
        for (let x = 0, A = s; x !== A; ++x) {
          const C = i[x], R = C[S], M = C[_];
          C[_] = R, C[S] = M;
        }
      }
    }
    this.nCachedObjects_ = u;
  }
  /**
   * Deallocates all memory resources for the passed 3D objects of this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to uncache.
   */
  uncache() {
    const e = this._objects, t = this._indicesByUUID, i = this._bindings, s = i.length;
    let u = this.nCachedObjects_, f = e.length;
    for (let h = 0, p = arguments.length; h !== p; ++h) {
      const v = arguments[h], _ = v.uuid, S = t[_];
      if (S !== void 0)
        if (delete t[_], S < u) {
          const E = --u, x = e[E], A = --f, C = e[A];
          t[x.uuid] = S, e[S] = x, t[C.uuid] = E, e[E] = C, e.pop();
          for (let R = 0, M = s; R !== M; ++R) {
            const w = i[R], N = w[E], U = w[A];
            w[S] = N, w[E] = U, w.pop();
          }
        } else {
          const E = --f, x = e[E];
          E > 0 && (t[x.uuid] = S), e[S] = x, e.pop();
          for (let A = 0, C = s; A !== C; ++A) {
            const R = i[A];
            R[S] = R[E], R.pop();
          }
        }
    }
    this.nCachedObjects_ = u;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const i = this._bindingsIndicesByPath;
    let s = i[e];
    const u = this._bindings;
    if (s !== void 0) return u[s];
    const f = this._paths, h = this._parsedPaths, p = this._objects, v = p.length, _ = this.nCachedObjects_, S = new Array(v);
    s = u.length, i[e] = s, f.push(e), h.push(t), u.push(S);
    for (let E = _, x = p.length; E !== x; ++E) {
      const A = p[E];
      S[E] = new wn(A, e, t);
    }
    return S;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, i = t[e];
    if (i !== void 0) {
      const s = this._paths, u = this._parsedPaths, f = this._bindings, h = f.length - 1, p = f[h], v = e[h];
      t[v] = i, f[i] = p, f.pop(), u[i] = u[h], u.pop(), s[i] = s[h], s.pop();
    }
  }
}
class ZR {
  /**
   * Constructs a new animation action.
   *
   * @param {AnimationMixer} mixer - The mixer that is controlled by this action.
   * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.
   * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   */
  constructor(e, t, i = null, s = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = i, this.blendMode = s;
    const u = t.tracks, f = u.length, h = new Array(f), p = {
      endingStart: gf,
      endingEnd: gf
    };
    for (let v = 0; v !== f; ++v) {
      const _ = u[v].createInterpolant(null);
      h[v] = _, _.settings = p;
    }
    this._interpolantSettings = p, this._interpolants = h, this._propertyBindings = new Array(f), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = LA, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  /**
   * Starts the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  play() {
    return this._mixer._activateAction(this), this;
  }
  /**
   * Stops the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  /**
   * Resets the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  /**
   * Returns `true` if the animation is running.
   *
   * @return {boolean} Whether the animation is running or not.
   */
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  /**
   * Returns `true` when {@link AnimationAction#play} has been called.
   *
   * @return {boolean} Whether the animation is scheduled or not.
   */
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  /**
   * Defines the time when the animation should start.
   *
   * @param {number} time - The start time in seconds.
   * @return {AnimationAction} A reference to this animation action.
   */
  startAt(e) {
    return this._startTime = e, this;
  }
  /**
   * Configures the loop settings for this action.
   *
   * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.
   * @param {number} repetitions - The number of repetitions.
   * @return {AnimationAction} A reference to this animation action.
   */
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  /**
   * Sets the effective weight of this action.
   *
   * An action has no effect and thus an effective weight of zero when the
   * action is disabled.
   *
   * @param {number} weight - The weight to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  /**
   * Returns the effective weight of this action.
   *
   * @return {number} The effective weight.
   */
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  /**
   * Fades the animation in by increasing its weight gradually from `0` to `1`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  /**
   * Fades the animation out by decreasing its weight gradually from `1` to `0`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  /**
   * Causes this action to fade in and the given action to fade out,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeOutAction - The animation action to fade out.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeFrom(e, t, i = !1) {
    if (e.fadeOut(t), this.fadeIn(t), i === !0) {
      const s = this._clip.duration, u = e._clip.duration, f = u / s, h = s / u;
      e.warp(1, f, t), this.warp(h, 1, t);
    }
    return this;
  }
  /**
   * Causes this action to fade out and the given action to fade in,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeInAction - The animation action to fade in.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeTo(e, t, i = !1) {
    return e.crossFadeFrom(this, t, i);
  }
  /**
   * Stops any fading which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  /**
   * Sets the effective time scale of this action.
   *
   * An action has no effect and thus an effective time scale of zero when the
   * action is paused.
   *
   * @param {number} timeScale - The time scale to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  /**
   * Returns the effective time scale of this action.
   *
   * @return {number} The effective time scale.
   */
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  /**
   * Sets the duration for a single loop of this action.
   *
   * @param {number} duration - The duration to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  /**
   * Synchronizes this action with the passed other action.
   *
   * @param {AnimationAction} action - The action to sync with.
   * @return {AnimationAction} A reference to this animation action.
   */
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  /**
   * Decelerates this animation's speed to `0` within the passed time interval.
   *
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  /**
   * Changes the playback speed, within the passed time interval, by modifying
   * {@link AnimationAction#timeScale} gradually from `startTimeScale` to
   * `endTimeScale`.
   *
   * @param {number} startTimeScale - The start time scale.
   * @param {number} endTimeScale - The end time scale.
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  warp(e, t, i) {
    const s = this._mixer, u = s.time, f = this.timeScale;
    let h = this._timeScaleInterpolant;
    h === null && (h = s._lendControlInterpolant(), this._timeScaleInterpolant = h);
    const p = h.parameterPositions, v = h.sampleValues;
    return p[0] = u, p[1] = u + i, v[0] = e / f, v[1] = t / f, this;
  }
  /**
   * Stops any scheduled warping which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  /**
   * Returns the animation mixer of this animation action.
   *
   * @return {AnimationMixer} The animation mixer.
   */
  getMixer() {
    return this._mixer;
  }
  /**
   * Returns the animation clip of this animation action.
   *
   * @return {AnimationClip} The animation clip.
   */
  getClip() {
    return this._clip;
  }
  /**
   * Returns the root object of this animation action.
   *
   * @return {Object3D} The root object.
   */
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, i, s) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const u = this._startTime;
    if (u !== null) {
      const p = (e - u) * i;
      p < 0 || i === 0 ? t = 0 : (this._startTime = null, t = i * p);
    }
    t *= this._updateTimeScale(e);
    const f = this._updateTime(t), h = this._updateWeight(e);
    if (h > 0) {
      const p = this._interpolants, v = this._propertyBindings;
      switch (this.blendMode) {
        case KE:
          for (let _ = 0, S = p.length; _ !== S; ++_)
            p[_].evaluate(f), v[_].accumulateAdditive(h);
          break;
        case z_:
        default:
          for (let _ = 0, S = p.length; _ !== S; ++_)
            p[_].evaluate(f), v[_].accumulate(s, h);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const i = this._weightInterpolant;
      if (i !== null) {
        const s = i.evaluate(e)[0];
        t *= s, e > i.parameterPositions[1] && (this.stopFading(), s === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const i = this._timeScaleInterpolant;
      if (i !== null) {
        const s = i.evaluate(e)[0];
        t *= s, e > i.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, i = this.loop;
    let s = this.time + e, u = this._loopCount;
    const f = i === zA;
    if (e === 0)
      return u === -1 ? s : f && (u & 1) === 1 ? t - s : s;
    if (i === OA) {
      u === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (s >= t)
          s = t;
        else if (s < 0)
          s = 0;
        else {
          this.time = s;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = s, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (u === -1 && (e >= 0 ? (u = 0, this._setEndings(!0, this.repetitions === 0, f)) : this._setEndings(this.repetitions === 0, !0, f)), s >= t || s < 0) {
        const h = Math.floor(s / t);
        s -= t * h, u += Math.abs(h);
        const p = this.repetitions - u;
        if (p <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, s = e > 0 ? t : 0, this.time = s, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (p === 1) {
            const v = e < 0;
            this._setEndings(v, !v, f);
          } else
            this._setEndings(!1, !1, f);
          this._loopCount = u, this.time = s, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: h
          });
        }
      } else
        this.time = s;
      if (f && (u & 1) === 1)
        return t - s;
    }
    return s;
  }
  _setEndings(e, t, i) {
    const s = this._interpolantSettings;
    i ? (s.endingStart = yf, s.endingEnd = yf) : (e ? s.endingStart = this.zeroSlopeAtStart ? yf : gf : s.endingStart = qv, t ? s.endingEnd = this.zeroSlopeAtEnd ? yf : gf : s.endingEnd = qv);
  }
  _scheduleFading(e, t, i) {
    const s = this._mixer, u = s.time;
    let f = this._weightInterpolant;
    f === null && (f = s._lendControlInterpolant(), this._weightInterpolant = f);
    const h = f.parameterPositions, p = f.sampleValues;
    return h[0] = u, p[0] = t, h[1] = u + e, p[1] = i, this;
  }
}
const $3 = new Float32Array(1);
class ew extends Zo {
  /**
   * Constructs a new animation mixer.
   *
   * @param {Object3D} root - The object whose animations shall be played by this mixer.
   */
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const i = e._localRoot || this._root, s = e._clip.tracks, u = s.length, f = e._propertyBindings, h = e._interpolants, p = i.uuid, v = this._bindingsByRootAndName;
    let _ = v[p];
    _ === void 0 && (_ = {}, v[p] = _);
    for (let S = 0; S !== u; ++S) {
      const E = s[S], x = E.name;
      let A = _[x];
      if (A !== void 0)
        ++A.referenceCount, f[S] = A;
      else {
        if (A = f[S], A !== void 0) {
          A._cacheIndex === null && (++A.referenceCount, this._addInactiveBinding(A, p, x));
          continue;
        }
        const C = t && t._propertyBindings[S].binding.parsedPath;
        A = new jR(
          wn.create(i, x, C),
          E.ValueTypeName,
          E.getValueSize()
        ), ++A.referenceCount, this._addInactiveBinding(A, p, x), f[S] = A;
      }
      h[S].resultBuffer = A.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const i = (e._localRoot || this._root).uuid, s = e._clip.uuid, u = this._actionsByClip[s];
        this._bindAction(
          e,
          u && u.knownActions[0]
        ), this._addInactiveAction(e, s, i);
      }
      const t = e._propertyBindings;
      for (let i = 0, s = t.length; i !== s; ++i) {
        const u = t[i];
        u.useCount++ === 0 && (this._lendBinding(u), u.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let i = 0, s = t.length; i !== s; ++i) {
        const u = t[i];
        --u.useCount === 0 && (u.restoreOriginalState(), this._takeBackBinding(u));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, i) {
    const s = this._actions, u = this._actionsByClip;
    let f = u[t];
    if (f === void 0)
      f = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, u[t] = f;
    else {
      const h = f.knownActions;
      e._byClipCacheIndex = h.length, h.push(e);
    }
    e._cacheIndex = s.length, s.push(e), f.actionByRoot[i] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, i = t[t.length - 1], s = e._cacheIndex;
    i._cacheIndex = s, t[s] = i, t.pop(), e._cacheIndex = null;
    const u = e._clip.uuid, f = this._actionsByClip, h = f[u], p = h.knownActions, v = p[p.length - 1], _ = e._byClipCacheIndex;
    v._byClipCacheIndex = _, p[_] = v, p.pop(), e._byClipCacheIndex = null;
    const S = h.actionByRoot, E = (e._localRoot || this._root).uuid;
    delete S[E], p.length === 0 && delete f[u], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let i = 0, s = t.length; i !== s; ++i) {
      const u = t[i];
      --u.referenceCount === 0 && this._removeInactiveBinding(u);
    }
  }
  _lendAction(e) {
    const t = this._actions, i = e._cacheIndex, s = this._nActiveActions++, u = t[s];
    e._cacheIndex = s, t[s] = e, u._cacheIndex = i, t[i] = u;
  }
  _takeBackAction(e) {
    const t = this._actions, i = e._cacheIndex, s = --this._nActiveActions, u = t[s];
    e._cacheIndex = s, t[s] = e, u._cacheIndex = i, t[i] = u;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, i) {
    const s = this._bindingsByRootAndName, u = this._bindings;
    let f = s[t];
    f === void 0 && (f = {}, s[t] = f), f[i] = e, e._cacheIndex = u.length, u.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, i = e.binding, s = i.rootNode.uuid, u = i.path, f = this._bindingsByRootAndName, h = f[s], p = t[t.length - 1], v = e._cacheIndex;
    p._cacheIndex = v, t[v] = p, t.pop(), delete h[u], Object.keys(h).length === 0 && delete f[s];
  }
  _lendBinding(e) {
    const t = this._bindings, i = e._cacheIndex, s = this._nActiveBindings++, u = t[s];
    e._cacheIndex = s, t[s] = e, u._cacheIndex = i, t[i] = u;
  }
  _takeBackBinding(e) {
    const t = this._bindings, i = e._cacheIndex, s = --this._nActiveBindings, u = t[s];
    e._cacheIndex = s, t[s] = e, u._cacheIndex = i, t[i] = u;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let i = e[t];
    return i === void 0 && (i = new vM(
      new Float32Array(2),
      new Float32Array(2),
      1,
      $3
    ), i.__cacheIndex = t, e[t] = i), i;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, i = e.__cacheIndex, s = --this._nActiveControlInterpolants, u = t[s];
    e.__cacheIndex = s, t[s] = e, u.__cacheIndex = i, t[i] = u;
  }
  /**
   * Returns an instance of {@link AnimationAction} for the passed clip.
   *
   * If an action fitting the clip and root parameters doesn't yet exist, it
   * will be created by this method. Calling this method several times with the
   * same clip and root parameters always returns the same action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   * @return {?AnimationAction} The animation action.
   */
  clipAction(e, t, i) {
    const s = t || this._root, u = s.uuid;
    let f = typeof e == "string" ? $v.findByName(s, e) : e;
    const h = f !== null ? f.uuid : e, p = this._actionsByClip[h];
    let v = null;
    if (i === void 0 && (f !== null ? i = f.blendMode : i = z_), p !== void 0) {
      const S = p.actionByRoot[u];
      if (S !== void 0 && S.blendMode === i)
        return S;
      v = p.knownActions[0], f === null && (f = v._clip);
    }
    if (f === null) return null;
    const _ = new ZR(this, f, t, i);
    return this._bindAction(_, v), this._addInactiveAction(_, h, u), _;
  }
  /**
   * Returns an existing animation action for the passed clip.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @return {?AnimationAction} The animation action. Returns `null` if no action was found.
   */
  existingAction(e, t) {
    const i = t || this._root, s = i.uuid, u = typeof e == "string" ? $v.findByName(i, e) : e, f = u ? u.uuid : e, h = this._actionsByClip[f];
    return h !== void 0 && h.actionByRoot[s] || null;
  }
  /**
   * Deactivates all previously scheduled actions on this mixer.
   *
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let i = t - 1; i >= 0; --i)
      e[i].stop();
    return this;
  }
  /**
   * Advances the global mixer time and updates the animation.
   *
   * This is usually done in the render loop by passing the delta
   * time from {@link Clock} or {@link Timer}.
   *
   * @param {number} deltaTime - The delta time in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  update(e) {
    e *= this.timeScale;
    const t = this._actions, i = this._nActiveActions, s = this.time += e, u = Math.sign(e), f = this._accuIndex ^= 1;
    for (let v = 0; v !== i; ++v)
      t[v]._update(s, e, u, f);
    const h = this._bindings, p = this._nActiveBindings;
    for (let v = 0; v !== p; ++v)
      h[v].apply(f);
    return this;
  }
  /**
   * Sets the global mixer to a specific time and updates the animation accordingly.
   *
   * This is useful when you need to jump to an exact time in an animation. The
   * input parameter will be scaled by {@link AnimationMixer#timeScale}
   *
   * @param {number} time - The time to set in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  /**
   * Returns this mixer's root object.
   *
   * @return {Object3D} The mixer's root object.
   */
  getRoot() {
    return this._root;
  }
  /**
   * Deallocates all memory resources for a clip. Before using this method make
   * sure to call {@link AnimationAction#stop} for all related actions.
   *
   * @param {AnimationClip} clip - The clip to uncache.
   */
  uncacheClip(e) {
    const t = this._actions, i = e.uuid, s = this._actionsByClip, u = s[i];
    if (u !== void 0) {
      const f = u.knownActions;
      for (let h = 0, p = f.length; h !== p; ++h) {
        const v = f[h];
        this._deactivateAction(v);
        const _ = v._cacheIndex, S = t[t.length - 1];
        v._cacheIndex = null, v._byClipCacheIndex = null, S._cacheIndex = _, t[_] = S, t.pop(), this._removeInactiveBindingsForAction(v);
      }
      delete s[i];
    }
  }
  /**
   * Deallocates all memory resources for a root object. Before using this
   * method make sure to call {@link AnimationAction#stop} for all related
   * actions or alternatively {@link AnimationMixer#stopAllAction} when the
   * mixer operates on a single root.
   *
   * @param {Object3D} root - The root object to uncache.
   */
  uncacheRoot(e) {
    const t = e.uuid, i = this._actionsByClip;
    for (const f in i) {
      const h = i[f].actionByRoot, p = h[t];
      p !== void 0 && (this._deactivateAction(p), this._removeInactiveAction(p));
    }
    const s = this._bindingsByRootAndName, u = s[t];
    if (u !== void 0)
      for (const f in u) {
        const h = u[f];
        h.restoreOriginalState(), this._removeInactiveBinding(h);
      }
  }
  /**
   * Deallocates all memory resources for an action. The action is identified by the
   * given clip and an optional root object. Before using this method make
   * sure to call {@link AnimationAction#stop} to deactivate the action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   */
  uncacheAction(e, t) {
    const i = this.existingAction(e, t);
    i !== null && (this._deactivateAction(i), this._removeInactiveAction(i));
  }
}
class tw extends JE {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, t = 1, i = 1, s = {}) {
    super(e, t, s), this.isRenderTarget3D = !0, this.depth = i, this.texture = new P_(null, e, t, i), this._setTextureOptions(s), this.texture.isRenderTargetTexture = !0;
  }
}
class bM {
  /**
   * Constructs a new uniform.
   *
   * @param {any} value - The uniform value.
   */
  constructor(e) {
    this.value = e;
  }
  /**
   * Returns a new uniform with copied values from this instance.
   * If the value has a `clone()` method, the value is cloned as well.
   *
   * @return {Uniform} A clone of this instance.
   */
  clone() {
    return new bM(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let nw = 0;
class iw extends Zo {
  /**
   * Constructs a new uniforms group.
   */
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: nw++ }), this.name = "", this.usage = Wv, this.uniforms = [];
  }
  /**
   * Adds the given uniform to this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to add.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  add(e) {
    return this.uniforms.push(e), this;
  }
  /**
   * Removes the given uniform from this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to remove.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  /**
   * Sets the name of this uniforms group.
   *
   * @param {string} name - The name to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setName(e) {
    return this.name = e, this;
  }
  /**
   * Sets the usage of this uniforms group.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Copies the values of the given uniforms group to this instance.
   *
   * @param {UniformsGroup} source - The uniforms group to copy.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let i = 0, s = t.length; i < s; i++) {
      const u = Array.isArray(t[i]) ? t[i] : [t[i]];
      for (let f = 0; f < u.length; f++)
        this.uniforms.push(u[f].clone());
    }
    return this;
  }
  /**
   * Returns a new uniforms group with copied values from this instance.
   *
   * @return {UniformsGroup} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class aw extends F_ {
  /**
   * Constructs a new instanced interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.
   */
  constructor(e, t, i = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = i;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class sw {
  /**
   * Constructs a new GL buffer attribute.
   *
   * @param {WebGLBuffer} buffer - The native WebGL buffer.
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} itemSize - The item size.
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @param {number} count - The expected number of vertices in VBO.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, t, i, s, u, f = !1) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = i, this.elementSize = s, this.count = u, this.normalized = f, this.version = 0;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the given native WebGL buffer.
   *
   * @param {WebGLBuffer} buffer - The buffer to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setBuffer(e) {
    return this.buffer = e, this;
  }
  /**
   * Sets the given native data type and element size.
   *
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @return {BufferAttribute} A reference to this instance.
   */
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  /**
   * Sets the item size.
   *
   * @param {number} itemSize - The item size.
   * @return {BufferAttribute} A reference to this instance.
   */
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  /**
   * Sets the count (the expected number of vertices in VBO).
   *
   * @param {number} count - The count.
   * @return {BufferAttribute} A reference to this instance.
   */
  setCount(e) {
    return this.count = e, this;
  }
}
const Z1 = /* @__PURE__ */ new qt();
class KR {
  /**
   * Constructs a new raycaster.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.
   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.
   */
  constructor(e, t, i = 0, s = 1 / 0) {
    this.ray = new Rf(e, t), this.near = i, this.far = s, this.camera = null, this.layers = new rp(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  /**
   * Updates the ray with a new origin and direction by copying the values from the arguments.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   */
  set(e, t) {
    this.ray.set(e, t);
  }
  /**
   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.
   *
   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).
   * X and Y components should be between `-1` and `1`.
   * @param {Camera} camera - The camera from which the ray should originate.
   */
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  /**
   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.
   *
   * @param {WebXRController} controller - The controller to copy the position and direction from.
   * @return {Raycaster} A reference to this raycaster.
   */
  setFromXRController(e) {
    return Z1.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(Z1), this;
  }
  /**
   * The intersection point of a raycaster intersection test.
   * @typedef {Object} Raycaster~Intersection
   * @property {number} distance - The distance from the ray's origin to the intersection point.
   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the
   * intersection to the nearest point on the ray. For other objects it will be `undefined`.
   * @property {Vector3} point - The intersection point, in world coordinates.
   * @property {Object} face - The face that has been intersected.
   * @property {number} faceIndex - The face index.
   * @property {Object3D} object - The 3D object that has been intersected.
   * @property {Vector2} uv - U,V coordinates at point of intersection.
   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.
   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.
   * @property {number} instanceId - The index number of the instance where the ray
   * intersects the {@link InstancedMesh}.
   */
  /**
   * Checks all intersection between the ray and the object with or without the
   * descendants. Intersections are returned sorted by distance, closest first.
   *
   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when
   * evaluating whether the ray intersects the object or not. This allows meshes to respond
   * differently to ray casting than lines or points.
   *
   * Note that for meshes, faces must be pointed towards the origin of the ray in order
   * to be detected; intersections of the ray passing through the back of a face will not
   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}
   * to `THREE.DoubleSide`.
   *
   * @param {Object3D} object - The 3D object to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObject(e, t = !0, i = []) {
    return CE(e, this, i, t), i.sort(K1), i;
  }
  /**
   * Checks all intersection between the ray and the objects with or without
   * the descendants. Intersections are returned sorted by distance, closest first.
   *
   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObjects(e, t = !0, i = []) {
    for (let s = 0, u = e.length; s < u; s++)
      CE(e[s], this, i, t);
    return i.sort(K1), i;
  }
}
function K1(r, e) {
  return r.distance - e.distance;
}
function CE(r, e, t, i) {
  let s = !0;
  if (r.layers.test(e.layers) && r.raycast(e, t) === !1 && (s = !1), s === !0 && i === !0) {
    const u = r.children;
    for (let f = 0, h = u.length; f < h; f++)
      CE(u[f], e, t, !0);
  }
}
class rw {
  /**
   * Constructs a new timer.
   */
  constructor() {
    this._previousTime = 0, this._currentTime = 0, this._startTime = performance.now(), this._delta = 0, this._elapsed = 0, this._timescale = 1, this._document = null, this._pageVisibilityHandler = null;
  }
  /**
   * Connect the timer to the given document.Calling this method is not mandatory to
   * use the timer but enables the usage of the Page Visibility API to avoid large time
   * delta values.
   *
   * @param {Document} document - The document.
   */
  connect(e) {
    this._document = e, e.hidden !== void 0 && (this._pageVisibilityHandler = ow.bind(this), e.addEventListener("visibilitychange", this._pageVisibilityHandler, !1));
  }
  /**
   * Disconnects the timer from the DOM and also disables the usage of the Page Visibility API.
   */
  disconnect() {
    this._pageVisibilityHandler !== null && (this._document.removeEventListener("visibilitychange", this._pageVisibilityHandler), this._pageVisibilityHandler = null), this._document = null;
  }
  /**
   * Returns the time delta in seconds.
   *
   * @return {number} The time delta in second.
   */
  getDelta() {
    return this._delta / 1e3;
  }
  /**
   * Returns the elapsed time in seconds.
   *
   * @return {number} The elapsed time in second.
   */
  getElapsed() {
    return this._elapsed / 1e3;
  }
  /**
   * Returns the timescale.
   *
   * @return {number} The timescale.
   */
  getTimescale() {
    return this._timescale;
  }
  /**
   * Sets the given timescale which scale the time delta computation
   * in `update()`.
   *
   * @param {number} timescale - The timescale to set.
   * @return {Timer} A reference to this timer.
   */
  setTimescale(e) {
    return this._timescale = e, this;
  }
  /**
   * Resets the time computation for the current simulation step.
   *
   * @return {Timer} A reference to this timer.
   */
  reset() {
    return this._currentTime = performance.now() - this._startTime, this;
  }
  /**
   * Can be used to free all internal resources. Usually called when
   * the timer instance isn't required anymore.
   */
  dispose() {
    this.disconnect();
  }
  /**
   * Updates the internal state of the timer. This method should be called
   * once per simulation step and before you perform queries against the timer
   * (e.g. via `getDelta()`).
   *
   * @param {number} timestamp - The current time in milliseconds. Can be obtained
   * from the `requestAnimationFrame` callback argument. If not provided, the current
   * time will be determined with `performance.now`.
   * @return {Timer} A reference to this timer.
   */
  update(e) {
    return this._pageVisibilityHandler !== null && this._document.hidden === !0 ? this._delta = 0 : (this._previousTime = this._currentTime, this._currentTime = (e !== void 0 ? e : performance.now()) - this._startTime, this._delta = (this._currentTime - this._previousTime) * this._timescale, this._elapsed += this._delta), this;
  }
}
function ow() {
  this._document.hidden === !1 && this.reset();
}
class DE {
  /**
   * Constructs a new spherical.
   *
   * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.
   * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.
   * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.
   */
  constructor(e = 1, t = 0, i = 0) {
    this.radius = e, this.phi = t, this.theta = i;
  }
  /**
   * Sets the spherical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The polar angle.
   * @param {number} theta - The azimuthal angle.
   * @return {Spherical} A reference to this spherical.
   */
  set(e, t, i) {
    return this.radius = e, this.phi = t, this.theta = i, this;
  }
  /**
   * Copies the values of the given spherical to this instance.
   *
   * @param {Spherical} other - The spherical to copy.
   * @return {Spherical} A reference to this spherical.
   */
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  /**
   * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -
   * `0.000001`.
   *
   * @return {Spherical} A reference to this spherical.
   */
  makeSafe() {
    return this.phi = Xt(this.phi, 1e-6, Math.PI - 1e-6), this;
  }
  /**
   * Sets the spherical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Spherical} A reference to this spherical.
   */
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  /**
   * Sets the spherical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The y value.
   * @param {number} z - The z value.
   * @return {Spherical} A reference to this spherical.
   */
  setFromCartesianCoords(e, t, i) {
    return this.radius = Math.sqrt(e * e + t * t + i * i), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, i), this.phi = Math.acos(Xt(t / this.radius, -1, 1))), this;
  }
  /**
   * Returns a new spherical with copied values from this instance.
   *
   * @return {Spherical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class lw {
  /**
   * Constructs a new cylindrical.
   *
   * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.
   * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.
   * @param {number} [y=0] - The height above the x-z plane.
   */
  constructor(e = 1, t = 0, i = 0) {
    this.radius = e, this.theta = t, this.y = i;
  }
  /**
   * Sets the cylindrical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle.
   * @param {number} y - The height value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  set(e, t, i) {
    return this.radius = e, this.theta = t, this.y = i, this;
  }
  /**
   * Copies the values of the given cylindrical to this instance.
   *
   * @param {Cylindrical} other - The cylindrical to copy.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  /**
   * Sets the cylindrical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  /**
   * Sets the cylindrical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The x value.
   * @param {number} z - The x value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromCartesianCoords(e, t, i) {
    return this.radius = Math.sqrt(e * e + i * i), this.theta = Math.atan2(e, i), this.y = t, this;
  }
  /**
   * Returns a new cylindrical with copied values from this instance.
   *
   * @return {Cylindrical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class TM {
  /**
   * Constructs a new 2x2 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   */
  constructor(e, t, i, s) {
    TM.prototype.isMatrix2 = !0, this.elements = [
      1,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, i, s);
  }
  /**
   * Sets this matrix to the 2x2 identity matrix.
   *
   * @return {Matrix2} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix2} A reference to this matrix.
   */
  fromArray(e, t = 0) {
    for (let i = 0; i < 4; i++)
      this.elements[i] = e[i + t];
    return this;
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} n11 - 1-1 matrix element.
   * @param {number} n12 - 1-2 matrix element.
   * @param {number} n21 - 2-1 matrix element.
   * @param {number} n22 - 2-2 matrix element.
   * @return {Matrix2} A reference to this matrix.
   */
  set(e, t, i, s) {
    const u = this.elements;
    return u[0] = e, u[2] = t, u[1] = i, u[3] = s, this;
  }
}
const Q1 = /* @__PURE__ */ new ze();
class uw {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(e = new ze(1 / 0, 1 / 0), t = new ze(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector2} min - The lower boundary of the box.
   * @param {Vector2} max - The upper boundary of the box.
   * @return {Box2} A reference to this bounding box.
   */
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.
   * @return {Box2} A reference to this bounding box.
   */
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, i = e.length; t < i; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector2} center - The center of the box.
   * @param {Vector2} size - The x and y dimensions of the box.
   * @return {Box2} A reference to this bounding box.
   */
  setFromCenterAndSize(e, t) {
    const i = Q1.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box2} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box2} box - The box to copy.
   * @return {Box2} A reference to this bounding box.
   */
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 2D.
   *
   * @return {Box2} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The center point.
   */
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The size.
   */
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector2} point - The point that should be included by the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions.
   *
   * @param {Vector2} vector - The vector that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector2} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  /**
   * Returns a point as a proportion of this box's width and height.
   *
   * @param {Vector2} point - A point in 2D space.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} A point as a proportion of this box's width and height.
   */
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y;
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector2} point - The point to clamp.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The clamped point.
   */
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector2} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(e) {
    return this.clampPoint(e, Q1).distanceTo(e);
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box2} box - The bounding box to intersect with.
   * @return {Box2} A reference to this bounding box.
   */
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box2} box - The bounding box that will be unioned with this instance.
   * @return {Box2} A reference to this bounding box.
   */
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 2D space.
   *
   * @param {Vector2} offset - The offset that should be used to translate the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box2} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const k1 = /* @__PURE__ */ new j(), p0 = /* @__PURE__ */ new j(), Gd = /* @__PURE__ */ new j(), Xd = /* @__PURE__ */ new j(), Gx = /* @__PURE__ */ new j(), cw = /* @__PURE__ */ new j(), fw = /* @__PURE__ */ new j();
class hw {
  /**
   * Constructs a new line segment.
   *
   * @param {Vector3} [start=(0,0,0)] - Start of the line segment.
   * @param {Vector3} [end=(0,0,0)] - End of the line segment.
   */
  constructor(e = new j(), t = new j()) {
    this.start = e, this.end = t;
  }
  /**
   * Sets the start and end values by copying the given vectors.
   *
   * @param {Vector3} start - The start point.
   * @param {Vector3} end - The end point.
   * @return {Line3} A reference to this line segment.
   */
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  /**
   * Copies the values of the given line segment to this instance.
   *
   * @param {Line3} line - The line segment to copy.
   * @return {Line3} A reference to this line segment.
   */
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  /**
   * Returns the center of the line segment.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  /**
   * Returns the delta vector of the line segment's start and end point.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  /**
   * Returns the squared Euclidean distance between the line' start and end point.
   *
   * @return {number} The squared Euclidean distance.
   */
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  /**
   * Returns the Euclidean distance between the line' start and end point.
   *
   * @return {number} The Euclidean distance.
   */
  distance() {
    return this.start.distanceTo(this.end);
  }
  /**
   * Returns a vector at a certain position along the line segment.
   *
   * @param {number} t - A value between `[0,1]` to represent a position along the line segment.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  /**
   * Returns a point parameter based on the closest point as projected on the line segment.
   *
   * @param {Vector3} point - The point for which to return a point parameter.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @return {number} The point parameter.
   */
  closestPointToPointParameter(e, t) {
    k1.subVectors(e, this.start), p0.subVectors(this.end, this.start);
    const i = p0.dot(p0);
    let u = p0.dot(k1) / i;
    return t && (u = Xt(u, 0, 1)), u;
  }
  /**
   * Returns the closest point on the line for a given point.
   *
   * @param {Vector3} point - The point to compute the closest point on the line for.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the line.
   */
  closestPointToPoint(e, t, i) {
    const s = this.closestPointToPointParameter(e, t);
    return this.delta(i).multiplyScalar(s).add(this.start);
  }
  /**
   * Returns the closest squared distance between this line segment and the given one.
   *
   * @param {Line3} line - The line segment to compute the closest squared distance to.
   * @param {Vector3} [c1] - The closest point on this line segment.
   * @param {Vector3} [c2] - The closest point on the given line segment.
   * @return {number} The squared distance between this line segment and the given one.
   */
  distanceSqToLine3(e, t = cw, i = fw) {
    const s = 10000000000000001e-32;
    let u, f;
    const h = this.start, p = e.start, v = this.end, _ = e.end;
    Gd.subVectors(v, h), Xd.subVectors(_, p), Gx.subVectors(h, p);
    const S = Gd.dot(Gd), E = Xd.dot(Xd), x = Xd.dot(Gx);
    if (S <= s && E <= s)
      return t.copy(h), i.copy(p), t.sub(i), t.dot(t);
    if (S <= s)
      u = 0, f = x / E, f = Xt(f, 0, 1);
    else {
      const A = Gd.dot(Gx);
      if (E <= s)
        f = 0, u = Xt(-A / S, 0, 1);
      else {
        const C = Gd.dot(Xd), R = S * E - C * C;
        R !== 0 ? u = Xt((C * x - A * E) / R, 0, 1) : u = 0, f = (C * u + x) / E, f < 0 ? (f = 0, u = Xt(-A / S, 0, 1)) : f > 1 && (f = 1, u = Xt((C - A) / S, 0, 1));
      }
    }
    return t.copy(h).add(Gd.multiplyScalar(u)), i.copy(p).add(Xd.multiplyScalar(f)), t.sub(i), t.dot(t);
  }
  /**
   * Applies a 4x4 transformation matrix to this line segment.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Line3} A reference to this line segment.
   */
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  /**
   * Returns `true` if this line segment is equal with the given one.
   *
   * @param {Line3} line - The line segment to test for equality.
   * @return {boolean} Whether this line segment is equal with the given one.
   */
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  /**
   * Returns a new line segment with copied values from this instance.
   *
   * @return {Line3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const J1 = /* @__PURE__ */ new j();
class dw extends Nn {
  /**
   * Constructs a new spot light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, t) {
    super(), this.light = e, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const i = new on(), s = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let f = 0, h = 1, p = 32; f < p; f++, h++) {
      const v = f / p * Math.PI * 2, _ = h / p * Math.PI * 2;
      s.push(
        Math.cos(v),
        Math.sin(v),
        1,
        Math.cos(_),
        Math.sin(_),
        1
      );
    }
    i.setAttribute("position", new At(s, 3));
    const u = new fs({ fog: !1, toneMapped: !1 });
    this.cone = new Ko(i, u), this.add(this.cone), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), J1.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(J1), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Vu = /* @__PURE__ */ new j(), m0 = /* @__PURE__ */ new qt(), Xx = /* @__PURE__ */ new qt();
class pw extends Ko {
  /**
   * Constructs a new skeleton helper.
   *
   * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object
   * can be used if it represents a hierarchy of bones (see {@link Bone}).
   */
  constructor(e) {
    const t = QR(e), i = new on(), s = [], u = [];
    for (let v = 0; v < t.length; v++) {
      const _ = t[v];
      _.parent && _.parent.isBone && (s.push(0, 0, 0), s.push(0, 0, 0), u.push(0, 0, 0), u.push(0, 0, 0));
    }
    i.setAttribute("position", new At(s, 3)), i.setAttribute("color", new At(u, 3));
    const f = new fs({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(i, f), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
    const h = new Et(255), p = new Et(65280);
    this.setColors(h, p);
  }
  updateMatrixWorld(e) {
    const t = this.bones, i = this.geometry, s = i.getAttribute("position");
    Xx.copy(this.root.matrixWorld).invert();
    for (let u = 0, f = 0; u < t.length; u++) {
      const h = t[u];
      h.parent && h.parent.isBone && (m0.multiplyMatrices(Xx, h.matrixWorld), Vu.setFromMatrixPosition(m0), s.setXYZ(f, Vu.x, Vu.y, Vu.z), m0.multiplyMatrices(Xx, h.parent.matrixWorld), Vu.setFromMatrixPosition(m0), s.setXYZ(f + 1, Vu.x, Vu.y, Vu.z), f += 2);
    }
    i.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  /**
   * Defines the colors of the helper.
   *
   * @param {Color} color1 - The first line color for each bone.
   * @param {Color} color2 - The second line color for each bone.
   * @return {SkeletonHelper} A reference to this helper.
   */
  setColors(e, t) {
    const s = this.geometry.getAttribute("color");
    for (let u = 0; u < s.count; u += 2)
      s.setXYZ(u, e.r, e.g, e.b), s.setXYZ(u + 1, t.r, t.g, t.b);
    return s.needsUpdate = !0, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function QR(r) {
  const e = [];
  r.isBone === !0 && e.push(r);
  for (let t = 0; t < r.children.length; t++)
    e.push(...QR(r.children[t]));
  return e;
}
class mw extends Xi {
  /**
   * Constructs a new point light helper.
   *
   * @param {PointLight} light - The light to be visualized.
   * @param {number} [sphereSize=1] - The size of the sphere helper.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, t, i) {
    const s = new lg(t, 4, 2), u = new Qu({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(s, u), this.light = e, this.color = i, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  /**
   * Updates the helper to match the position of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const vw = /* @__PURE__ */ new j(), $1 = /* @__PURE__ */ new Et(), eT = /* @__PURE__ */ new Et();
class gw extends Nn {
  /**
   * Constructs a new hemisphere light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number} [size=1] - The size of the mesh used to visualize the light.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, t, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "HemisphereLightHelper";
    const s = new og(t);
    s.rotateY(Math.PI * 0.5), this.material = new Qu({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const u = s.getAttribute("position"), f = new Float32Array(u.count * 3);
    s.setAttribute("color", new jn(f, 3)), this.add(new Xi(s, this.material)), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      $1.copy(this.light.color), eT.copy(this.light.groundColor);
      for (let i = 0, s = t.count; i < s; i++) {
        const u = i < s / 2 ? $1 : eT;
        t.setXYZ(i, u.r, u.g, u.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(vw.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class yw extends Ko {
  /**
   * Constructs a new grid helper.
   *
   * @param {number} [size=10] - The size of the grid.
   * @param {number} [divisions=10] - The number of divisions across the grid.
   * @param {number|Color|string} [color1=0x444444] - The color of the center line.
   * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.
   */
  constructor(e = 10, t = 10, i = 4473924, s = 8947848) {
    i = new Et(i), s = new Et(s);
    const u = t / 2, f = e / t, h = e / 2, p = [], v = [];
    for (let E = 0, x = 0, A = -h; E <= t; E++, A += f) {
      p.push(-h, 0, A, h, 0, A), p.push(A, 0, -h, A, 0, h);
      const C = E === u ? i : s;
      C.toArray(v, x), x += 3, C.toArray(v, x), x += 3, C.toArray(v, x), x += 3, C.toArray(v, x), x += 3;
    }
    const _ = new on();
    _.setAttribute("position", new At(p, 3)), _.setAttribute("color", new At(v, 3));
    const S = new fs({ vertexColors: !0, toneMapped: !1 });
    super(_, S), this.type = "GridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class _w extends Ko {
  /**
   * Constructs a new polar grid helper.
   *
   * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.
   * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.
   * @param {number} [rings=16] - The number of rings. This can be any positive integer.
   * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.
   * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.
   * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.
   */
  constructor(e = 10, t = 16, i = 8, s = 64, u = 4473924, f = 8947848) {
    u = new Et(u), f = new Et(f);
    const h = [], p = [];
    if (t > 1)
      for (let S = 0; S < t; S++) {
        const E = S / t * (Math.PI * 2), x = Math.sin(E) * e, A = Math.cos(E) * e;
        h.push(0, 0, 0), h.push(x, 0, A);
        const C = S & 1 ? u : f;
        p.push(C.r, C.g, C.b), p.push(C.r, C.g, C.b);
      }
    for (let S = 0; S < i; S++) {
      const E = S & 1 ? u : f, x = e - e / i * S;
      for (let A = 0; A < s; A++) {
        let C = A / s * (Math.PI * 2), R = Math.sin(C) * x, M = Math.cos(C) * x;
        h.push(R, 0, M), p.push(E.r, E.g, E.b), C = (A + 1) / s * (Math.PI * 2), R = Math.sin(C) * x, M = Math.cos(C) * x, h.push(R, 0, M), p.push(E.r, E.g, E.b);
      }
    }
    const v = new on();
    v.setAttribute("position", new At(h, 3)), v.setAttribute("color", new At(p, 3));
    const _ = new fs({ vertexColors: !0, toneMapped: !1 });
    super(v, _), this.type = "PolarGridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const tT = /* @__PURE__ */ new j(), v0 = /* @__PURE__ */ new j(), nT = /* @__PURE__ */ new j();
class Sw extends Nn {
  /**
   * Constructs a new directional light helper.
   *
   * @param {DirectionalLight} light - The light to be visualized.
   * @param {number} [size=1] - The dimensions of the plane.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, t, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let s = new on();
    s.setAttribute("position", new At([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const u = new fs({ fog: !1, toneMapped: !1 });
    this.lightPlane = new Zu(s, u), this.add(this.lightPlane), s = new on(), s.setAttribute("position", new At([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Zu(s, u), this.add(this.targetLine), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), tT.setFromMatrixPosition(this.light.matrixWorld), v0.setFromMatrixPosition(this.light.target.matrixWorld), nT.subVectors(v0, tT), this.lightPlane.lookAt(v0), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(v0), this.targetLine.scale.z = nT.length();
  }
}
const g0 = /* @__PURE__ */ new j(), Ti = /* @__PURE__ */ new H_();
class xw extends Ko {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Camera} camera - The camera to visualize.
   */
  constructor(e) {
    const t = new on(), i = new fs({ color: 16777215, vertexColors: !0, toneMapped: !1 }), s = [], u = [], f = {};
    h("n1", "n2"), h("n2", "n4"), h("n4", "n3"), h("n3", "n1"), h("f1", "f2"), h("f2", "f4"), h("f4", "f3"), h("f3", "f1"), h("n1", "f1"), h("n2", "f2"), h("n3", "f3"), h("n4", "f4"), h("p", "n1"), h("p", "n2"), h("p", "n3"), h("p", "n4"), h("u1", "u2"), h("u2", "u3"), h("u3", "u1"), h("c", "t"), h("p", "c"), h("cn1", "cn2"), h("cn3", "cn4"), h("cf1", "cf2"), h("cf3", "cf4");
    function h(A, C) {
      p(A), p(C);
    }
    function p(A) {
      s.push(0, 0, 0), u.push(0, 0, 0), f[A] === void 0 && (f[A] = []), f[A].push(s.length / 3 - 1);
    }
    t.setAttribute("position", new At(s, 3)), t.setAttribute("color", new At(u, 3)), super(t, i), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = f, this.update();
    const v = new Et(16755200), _ = new Et(16711680), S = new Et(43775), E = new Et(16777215), x = new Et(3355443);
    this.setColors(v, _, S, E, x);
  }
  /**
   * Defines the colors of the helper.
   *
   * @param {Color} frustum - The frustum line color.
   * @param {Color} cone - The cone line color.
   * @param {Color} up - The up line color.
   * @param {Color} target - The target line color.
   * @param {Color} cross - The cross line color.
   * @return {CameraHelper} A reference to this helper.
   */
  setColors(e, t, i, s, u) {
    const h = this.geometry.getAttribute("color");
    return h.setXYZ(0, e.r, e.g, e.b), h.setXYZ(1, e.r, e.g, e.b), h.setXYZ(2, e.r, e.g, e.b), h.setXYZ(3, e.r, e.g, e.b), h.setXYZ(4, e.r, e.g, e.b), h.setXYZ(5, e.r, e.g, e.b), h.setXYZ(6, e.r, e.g, e.b), h.setXYZ(7, e.r, e.g, e.b), h.setXYZ(8, e.r, e.g, e.b), h.setXYZ(9, e.r, e.g, e.b), h.setXYZ(10, e.r, e.g, e.b), h.setXYZ(11, e.r, e.g, e.b), h.setXYZ(12, e.r, e.g, e.b), h.setXYZ(13, e.r, e.g, e.b), h.setXYZ(14, e.r, e.g, e.b), h.setXYZ(15, e.r, e.g, e.b), h.setXYZ(16, e.r, e.g, e.b), h.setXYZ(17, e.r, e.g, e.b), h.setXYZ(18, e.r, e.g, e.b), h.setXYZ(19, e.r, e.g, e.b), h.setXYZ(20, e.r, e.g, e.b), h.setXYZ(21, e.r, e.g, e.b), h.setXYZ(22, e.r, e.g, e.b), h.setXYZ(23, e.r, e.g, e.b), h.setXYZ(24, t.r, t.g, t.b), h.setXYZ(25, t.r, t.g, t.b), h.setXYZ(26, t.r, t.g, t.b), h.setXYZ(27, t.r, t.g, t.b), h.setXYZ(28, t.r, t.g, t.b), h.setXYZ(29, t.r, t.g, t.b), h.setXYZ(30, t.r, t.g, t.b), h.setXYZ(31, t.r, t.g, t.b), h.setXYZ(32, i.r, i.g, i.b), h.setXYZ(33, i.r, i.g, i.b), h.setXYZ(34, i.r, i.g, i.b), h.setXYZ(35, i.r, i.g, i.b), h.setXYZ(36, i.r, i.g, i.b), h.setXYZ(37, i.r, i.g, i.b), h.setXYZ(38, s.r, s.g, s.b), h.setXYZ(39, s.r, s.g, s.b), h.setXYZ(40, u.r, u.g, u.b), h.setXYZ(41, u.r, u.g, u.b), h.setXYZ(42, u.r, u.g, u.b), h.setXYZ(43, u.r, u.g, u.b), h.setXYZ(44, u.r, u.g, u.b), h.setXYZ(45, u.r, u.g, u.b), h.setXYZ(46, u.r, u.g, u.b), h.setXYZ(47, u.r, u.g, u.b), h.setXYZ(48, u.r, u.g, u.b), h.setXYZ(49, u.r, u.g, u.b), h.needsUpdate = !0, this;
  }
  /**
   * Updates the helper based on the projection matrix of the camera.
   */
  update() {
    const e = this.geometry, t = this.pointMap, i = 1, s = 1;
    let u, f;
    if (Ti.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), this.camera.reversedDepth === !0)
      u = 1, f = 0;
    else if (this.camera.coordinateSystem === Ks)
      u = -1, f = 1;
    else if (this.camera.coordinateSystem === ap)
      u = 0, f = 1;
    else
      throw new Error("THREE.CameraHelper.update(): Invalid coordinate system: " + this.camera.coordinateSystem);
    wi("c", t, e, Ti, 0, 0, u), wi("t", t, e, Ti, 0, 0, f), wi("n1", t, e, Ti, -i, -s, u), wi("n2", t, e, Ti, i, -s, u), wi("n3", t, e, Ti, -i, s, u), wi("n4", t, e, Ti, i, s, u), wi("f1", t, e, Ti, -i, -s, f), wi("f2", t, e, Ti, i, -s, f), wi("f3", t, e, Ti, -i, s, f), wi("f4", t, e, Ti, i, s, f), wi("u1", t, e, Ti, i * 0.7, s * 1.1, u), wi("u2", t, e, Ti, -i * 0.7, s * 1.1, u), wi("u3", t, e, Ti, 0, s * 2, u), wi("cf1", t, e, Ti, -i, 0, f), wi("cf2", t, e, Ti, i, 0, f), wi("cf3", t, e, Ti, 0, -s, f), wi("cf4", t, e, Ti, 0, s, f), wi("cn1", t, e, Ti, -i, 0, u), wi("cn2", t, e, Ti, i, 0, u), wi("cn3", t, e, Ti, 0, -s, u), wi("cn4", t, e, Ti, 0, s, u), e.getAttribute("position").needsUpdate = !0;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function wi(r, e, t, i, s, u, f) {
  g0.set(s, u, f).unproject(i);
  const h = e[r];
  if (h !== void 0) {
    const p = t.getAttribute("position");
    for (let v = 0, _ = h.length; v < _; v++)
      p.setXYZ(h[v], g0.x, g0.y, g0.z);
  }
}
const y0 = /* @__PURE__ */ new Ga();
class Ew extends Ko {
  /**
   * Constructs a new box helper.
   *
   * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(e, t = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), s = new Float32Array(24), u = new on();
    u.setIndex(new jn(i, 1)), u.setAttribute("position", new jn(s, 3)), super(u, new fs({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Updates the helper's geometry to match the dimensions of the object,
   * including any children.
   */
  update() {
    if (this.object !== void 0 && y0.setFromObject(this.object), y0.isEmpty()) return;
    const e = y0.min, t = y0.max, i = this.geometry.attributes.position, s = i.array;
    s[0] = t.x, s[1] = t.y, s[2] = t.z, s[3] = e.x, s[4] = t.y, s[5] = t.z, s[6] = e.x, s[7] = e.y, s[8] = t.z, s[9] = t.x, s[10] = e.y, s[11] = t.z, s[12] = t.x, s[13] = t.y, s[14] = e.z, s[15] = e.x, s[16] = t.y, s[17] = e.z, s[18] = e.x, s[19] = e.y, s[20] = e.z, s[21] = t.x, s[22] = e.y, s[23] = e.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  /**
   * Updates the wireframe box for the passed object.
   *
   * @param {Object3D} object - The 3D object to create the helper for.
   * @return {BoxHelper} A reference to this instance.
   */
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Mw extends Ko {
  /**
   * Constructs a new box3 helper.
   *
   * @param {Box3} box - The box to visualize.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(e, t = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), s = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], u = new on();
    u.setIndex(new jn(i, 1)), u.setAttribute("position", new At(s, 3)), super(u, new fs({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class bw extends Zu {
  /**
   * Constructs a new plane helper.
   *
   * @param {Plane} plane - The plane to be visualized.
   * @param {number} [size=1] - The side length of plane helper.
   * @param {number|Color|string} [hex=0xffff00] - The helper's color.
   */
  constructor(e, t = 1, i = 16776960) {
    const s = i, u = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], f = new on();
    f.setAttribute("position", new At(u, 3)), f.computeBoundingSphere(), super(f, new fs({ color: s, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const h = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], p = new on();
    p.setAttribute("position", new At(h, 3)), p.computeBoundingSphere(), this.add(new Xi(p, new Qu({ color: s, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const iT = /* @__PURE__ */ new j();
let _0, qx;
class Tw extends Nn {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.
   * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.
   * @param {number} [length=1] - Length of the arrow in world units.
   * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  constructor(e = new j(0, 0, 1), t = new j(0, 0, 0), i = 1, s = 16776960, u = i * 0.2, f = u * 0.2) {
    super(), this.type = "ArrowHelper", _0 === void 0 && (_0 = new on(), _0.setAttribute("position", new At([0, 0, 0, 0, 1, 0], 3)), qx = new rg(0.5, 1, 5, 1), qx.translate(0, -0.5, 0)), this.position.copy(t), this.line = new Zu(_0, new fs({ color: s, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Xi(qx, new Qu({ color: s, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(i, u, f);
  }
  /**
   * Sets the direction of the helper.
   *
   * @param {Vector3} dir - The normalized direction vector.
   */
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      iT.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(iT, t);
    }
  }
  /**
   * Sets the length of the helper.
   *
   * @param {number} length - Length of the arrow in world units.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  setLength(e, t = e * 0.2, i = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(i, t, i), this.cone.position.y = e, this.cone.updateMatrix();
  }
  /**
   * Sets the color of the helper.
   *
   * @param {number|Color|string} color - The color to set.
   */
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class Aw extends Ko {
  /**
   * Constructs a new axes helper.
   *
   * @param {number} [size=1] - Size of the lines representing the axes.
   */
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], i = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], s = new on();
    s.setAttribute("position", new At(t, 3)), s.setAttribute("color", new At(i, 3));
    const u = new fs({ vertexColors: !0, toneMapped: !1 });
    super(s, u), this.type = "AxesHelper";
  }
  /**
   * Defines the colors of the axes helper.
   *
   * @param {number|Color|string} xAxisColor - The color for the x axis.
   * @param {number|Color|string} yAxisColor - The color for the y axis.
   * @param {number|Color|string} zAxisColor - The color for the z axis.
   * @return {AxesHelper} A reference to this axes helper.
   */
  setColors(e, t, i) {
    const s = new Et(), u = this.geometry.attributes.color.array;
    return s.set(e), s.toArray(u, 0), s.toArray(u, 3), s.set(t), s.toArray(u, 6), s.toArray(u, 9), s.set(i), s.toArray(u, 12), s.toArray(u, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Rw {
  /**
   * Constructs a new shape path.
   */
  constructor() {
    this.type = "ShapePath", this.color = new Et(), this.subPaths = [], this.currentPath = null;
  }
  /**
   * Creates a new path and moves it current point to the given one.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {ShapePath} A reference to this shape path.
   */
  moveTo(e, t) {
    return this.currentPath = new x_(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  quadraticCurveTo(e, t, i, s) {
    return this.currentPath.quadraticCurveTo(e, t, i, s), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  bezierCurveTo(e, t, i, s, u, f) {
    return this.currentPath.bezierCurveTo(e, t, i, s, u, f), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {ShapePath} A reference to this shape path.
   */
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  /**
   * Converts the paths into an array of shapes.
   *
   * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).
   * If this flag is set to `true`, then those are flipped.
   * @return {Array<Shape>} An array of shapes.
   */
  toShapes(e) {
    function t(M) {
      const w = [];
      for (let N = 0, U = M.length; N < U; N++) {
        const I = M[N], P = new Ef();
        P.curves = I.curves, w.push(P);
      }
      return w;
    }
    function i(M, w) {
      const N = w.length;
      let U = !1;
      for (let I = N - 1, P = 0; P < N; I = P++) {
        let X = w[I], Y = w[P], z = Y.x - X.x, L = Y.y - X.y;
        if (Math.abs(L) > Number.EPSILON) {
          if (L < 0 && (X = w[P], z = -z, Y = w[I], L = -L), M.y < X.y || M.y > Y.y) continue;
          if (M.y === X.y) {
            if (M.x === X.x) return !0;
          } else {
            const W = L * (M.x - X.x) - z * (M.y - X.y);
            if (W === 0) return !0;
            if (W < 0) continue;
            U = !U;
          }
        } else {
          if (M.y !== X.y) continue;
          if (Y.x <= M.x && M.x <= X.x || X.x <= M.x && M.x <= Y.x) return !0;
        }
      }
      return U;
    }
    const s = ro.isClockWise, u = this.subPaths;
    if (u.length === 0) return [];
    let f, h, p;
    const v = [];
    if (u.length === 1)
      return h = u[0], p = new Ef(), p.curves = h.curves, v.push(p), v;
    let _ = !s(u[0].getPoints());
    _ = e ? !_ : _;
    const S = [], E = [];
    let x = [], A = 0, C;
    E[A] = void 0, x[A] = [];
    for (let M = 0, w = u.length; M < w; M++)
      h = u[M], C = h.getPoints(), f = s(C), f = e ? !f : f, f ? (!_ && E[A] && A++, E[A] = { s: new Ef(), p: C }, E[A].s.curves = h.curves, _ && A++, x[A] = []) : x[A].push({ h, p: C[0] });
    if (!E[0]) return t(u);
    if (E.length > 1) {
      let M = !1, w = 0;
      for (let N = 0, U = E.length; N < U; N++)
        S[N] = [];
      for (let N = 0, U = E.length; N < U; N++) {
        const I = x[N];
        for (let P = 0; P < I.length; P++) {
          const X = I[P];
          let Y = !0;
          for (let z = 0; z < E.length; z++)
            i(X.p, E[z].p) && (N !== z && w++, Y ? (Y = !1, S[z].push(X)) : M = !0);
          Y && S[N].push(X);
        }
      }
      w > 0 && M === !1 && (x = S);
    }
    let R;
    for (let M = 0, w = E.length; M < w; M++) {
      p = E[M].s, v.push(p), R = x[M];
      for (let N = 0, U = R.length; N < U; N++)
        p.holes.push(R[N].h);
    }
    return v;
  }
}
class Cw extends Zo {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(e, t = null) {
    super(), this.object = e, this.domElement = t, this.enabled = !0, this.state = -1, this.keys = {}, this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null }, this.touches = { ONE: null, TWO: null };
  }
  /**
   * Connects the controls to the DOM. This method has so called "side effects" since
   * it adds the module's event listeners to the DOM.
   *
   * @param {HTMLDOMElement} element - The DOM element to connect to.
   */
  connect(e) {
    if (e === void 0) {
      console.warn("THREE.Controls: connect() now requires an element.");
      return;
    }
    this.domElement !== null && this.disconnect(), this.domElement = e;
  }
  /**
   * Disconnects the controls from the DOM.
   */
  disconnect() {
  }
  /**
   * Call this method if you no longer want use to the controls. It frees all internal
   * resources and removes all event listeners.
   */
  dispose() {
  }
  /**
   * Controls should implement this method if they have to update their internal state
   * per simulation step.
   *
   * @param {number} [delta] - The time delta in seconds.
   */
  update() {
  }
}
function Dw(r, e) {
  const t = r.image && r.image.width ? r.image.width / r.image.height : 1;
  return t > e ? (r.repeat.x = 1, r.repeat.y = t / e, r.offset.x = 0, r.offset.y = (1 - r.repeat.y) / 2) : (r.repeat.x = e / t, r.repeat.y = 1, r.offset.x = (1 - r.repeat.x) / 2, r.offset.y = 0), r;
}
function ww(r, e) {
  const t = r.image && r.image.width ? r.image.width / r.image.height : 1;
  return t > e ? (r.repeat.x = e / t, r.repeat.y = 1, r.offset.x = (1 - r.repeat.x) / 2, r.offset.y = 0) : (r.repeat.x = 1, r.repeat.y = t / e, r.offset.x = 0, r.offset.y = (1 - r.repeat.y) / 2), r;
}
function Uw(r) {
  return r.repeat.x = 1, r.repeat.y = 1, r.offset.x = 0, r.offset.y = 0, r;
}
function wE(r, e, t, i) {
  const s = Nw(i);
  switch (t) {
    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    case YE:
      return r * e;
    case N_:
      return r * e / s.components * s.byteLength;
    case ig:
      return r * e / s.components * s.byteLength;
    case jE:
      return r * e * 2 / s.components * s.byteLength;
    case O_:
      return r * e * 2 / s.components * s.byteLength;
    case WE:
      return r * e * 3 / s.components * s.byteLength;
    case Va:
      return r * e * 4 / s.components * s.byteLength;
    case L_:
      return r * e * 4 / s.components * s.byteLength;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    case wv:
    case Uv:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case Nv:
    case Ov:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    case W0:
    case Z0:
      return Math.max(r, 16) * Math.max(e, 8) / 4;
    case Y0:
    case j0:
      return Math.max(r, 8) * Math.max(e, 8) / 2;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    case K0:
    case Q0:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case k0:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    case J0:
      return Math.floor((r + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case $0:
      return Math.floor((r + 4) / 5) * Math.floor((e + 3) / 4) * 16;
    case e_:
      return Math.floor((r + 4) / 5) * Math.floor((e + 4) / 5) * 16;
    case t_:
      return Math.floor((r + 5) / 6) * Math.floor((e + 4) / 5) * 16;
    case n_:
      return Math.floor((r + 5) / 6) * Math.floor((e + 5) / 6) * 16;
    case i_:
      return Math.floor((r + 7) / 8) * Math.floor((e + 4) / 5) * 16;
    case a_:
      return Math.floor((r + 7) / 8) * Math.floor((e + 5) / 6) * 16;
    case s_:
      return Math.floor((r + 7) / 8) * Math.floor((e + 7) / 8) * 16;
    case r_:
      return Math.floor((r + 9) / 10) * Math.floor((e + 4) / 5) * 16;
    case o_:
      return Math.floor((r + 9) / 10) * Math.floor((e + 5) / 6) * 16;
    case l_:
      return Math.floor((r + 9) / 10) * Math.floor((e + 7) / 8) * 16;
    case u_:
      return Math.floor((r + 9) / 10) * Math.floor((e + 9) / 10) * 16;
    case c_:
      return Math.floor((r + 11) / 12) * Math.floor((e + 9) / 10) * 16;
    case f_:
      return Math.floor((r + 11) / 12) * Math.floor((e + 11) / 12) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    case Lv:
    case h_:
    case d_:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    case ZE:
    case p_:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 8;
    case m_:
    case v_:
      return Math.ceil(r / 4) * Math.ceil(e / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${t} format.`
  );
}
function Nw(r) {
  switch (r) {
    case Dr:
    case GE:
      return { byteLength: 1, components: 1 };
    case ep:
    case XE:
    case hp:
      return { byteLength: 2, components: 1 };
    case w_:
    case U_:
      return { byteLength: 2, components: 4 };
    case Gl:
    case D_:
    case Ds:
      return { byteLength: 4, components: 1 };
    case qE:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${r}.`);
}
class Ow {
  /**
   * Scales the texture as large as possible within its surface without cropping
   * or stretching the texture. The method preserves the original aspect ratio of
   * the texture. Akin to CSS `object-fit: contain`
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static contain(e, t) {
    return Dw(e, t);
  }
  /**
   * Scales the texture to the smallest possible size to fill the surface, leaving
   * no empty space. The method preserves the original aspect ratio of the texture.
   * Akin to CSS `object-fit: cover`.
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static cover(e, t) {
    return ww(e, t);
  }
  /**
   * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.
   *
   * @param {Texture} texture - The texture.
   * @return {Texture} The updated texture.
   */
  static fill(e) {
    return Uw(e);
  }
  /**
   * Determines how many bytes must be used to represent the texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} format - The texture's format.
   * @param {number} type - The texture's type.
   * @return {number} The byte length.
   */
  static getByteLength(e, t, i, s) {
    return wE(e, t, i, s);
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: A_
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = A_);
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function kR() {
  let r = null, e = !1, t = null, i = null;
  function s(u, f) {
    t(u, f), i = r.requestAnimationFrame(s);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (i = r.requestAnimationFrame(s), e = !0);
    },
    stop: function() {
      r.cancelAnimationFrame(i), e = !1;
    },
    setAnimationLoop: function(u) {
      t = u;
    },
    setContext: function(u) {
      r = u;
    }
  };
}
function Lw(r) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(h, p) {
    const v = h.array, _ = h.usage, S = v.byteLength, E = r.createBuffer();
    r.bindBuffer(p, E), r.bufferData(p, v, _), h.onUploadCallback();
    let x;
    if (v instanceof Float32Array)
      x = r.FLOAT;
    else if (typeof Float16Array < "u" && v instanceof Float16Array)
      x = r.HALF_FLOAT;
    else if (v instanceof Uint16Array)
      h.isFloat16BufferAttribute ? x = r.HALF_FLOAT : x = r.UNSIGNED_SHORT;
    else if (v instanceof Int16Array)
      x = r.SHORT;
    else if (v instanceof Uint32Array)
      x = r.UNSIGNED_INT;
    else if (v instanceof Int32Array)
      x = r.INT;
    else if (v instanceof Int8Array)
      x = r.BYTE;
    else if (v instanceof Uint8Array)
      x = r.UNSIGNED_BYTE;
    else if (v instanceof Uint8ClampedArray)
      x = r.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + v);
    return {
      buffer: E,
      type: x,
      bytesPerElement: v.BYTES_PER_ELEMENT,
      version: h.version,
      size: S
    };
  }
  function i(h, p, v) {
    const _ = p.array, S = p.updateRanges;
    if (r.bindBuffer(v, h), S.length === 0)
      r.bufferSubData(v, 0, _);
    else {
      S.sort((x, A) => x.start - A.start);
      let E = 0;
      for (let x = 1; x < S.length; x++) {
        const A = S[E], C = S[x];
        C.start <= A.start + A.count + 1 ? A.count = Math.max(
          A.count,
          C.start + C.count - A.start
        ) : (++E, S[E] = C);
      }
      S.length = E + 1;
      for (let x = 0, A = S.length; x < A; x++) {
        const C = S[x];
        r.bufferSubData(
          v,
          C.start * _.BYTES_PER_ELEMENT,
          _,
          C.start,
          C.count
        );
      }
      p.clearUpdateRanges();
    }
    p.onUploadCallback();
  }
  function s(h) {
    return h.isInterleavedBufferAttribute && (h = h.data), e.get(h);
  }
  function u(h) {
    h.isInterleavedBufferAttribute && (h = h.data);
    const p = e.get(h);
    p && (r.deleteBuffer(p.buffer), e.delete(h));
  }
  function f(h, p) {
    if (h.isInterleavedBufferAttribute && (h = h.data), h.isGLBufferAttribute) {
      const _ = e.get(h);
      (!_ || _.version < h.version) && e.set(h, {
        buffer: h.buffer,
        type: h.type,
        bytesPerElement: h.elementSize,
        version: h.version
      });
      return;
    }
    const v = e.get(h);
    if (v === void 0)
      e.set(h, t(h, p));
    else if (v.version < h.version) {
      if (v.size !== h.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      i(v.buffer, h, p), v.version = h.version;
    }
  }
  return {
    get: s,
    remove: u,
    update: f
  };
}
var zw = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, Bw = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, Pw = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Hw = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, Iw = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, Vw = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, Fw = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, Gw = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, Xw = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, qw = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, Yw = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, Ww = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, jw = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, Zw = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, Kw = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, Qw = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, kw = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, Jw = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, $w = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, eU = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, tU = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, nU = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, iU = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, aU = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, sU = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, rU = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, oU = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, lU = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, uU = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, cU = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, fU = "gl_FragColor = linearToOutputTexel( gl_FragColor );", hU = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, dU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, pU = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, mU = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, vU = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, gU = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, yU = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, _U = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, SU = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, xU = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, EU = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, MU = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, bU = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, TU = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, AU = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, RU = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, CU = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, DU = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, wU = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, UU = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, NU = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, OU = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, LU = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, zU = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, BU = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, PU = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, HU = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, IU = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, VU = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, FU = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, GU = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, XU = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, qU = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, YU = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, WU = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, jU = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, ZU = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, KU = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, QU = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, kU = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, JU = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, $U = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, eN = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, tN = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, nN = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, iN = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, aN = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, sN = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, rN = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, oN = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, lN = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, uN = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, cN = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, fN = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, hN = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, dN = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, pN = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, mN = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, vN = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSEDEPTHBUF
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSEDEPTHBUF
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare , distribution.x );
		#endif
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, gN = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, yN = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, _N = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, SN = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, xN = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, EN = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, MN = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, bN = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, TN = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, AN = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, RN = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, CN = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, DN = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, wN = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, UN = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, NN = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, ON = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const LN = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, zN = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, BN = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, PN = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, HN = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, IN = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, VN = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, FN = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSEDEPTHBUF
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, GN = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, XN = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, qN = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, YN = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, WN = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, jN = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, ZN = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, KN = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, QN = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, kN = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, JN = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, $N = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, eO = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, tO = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, nO = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, iO = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, aO = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, sO = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, rO = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, oO = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, lO = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, uO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, cO = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, fO = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, hO = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, dO = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, cn = {
  alphahash_fragment: zw,
  alphahash_pars_fragment: Bw,
  alphamap_fragment: Pw,
  alphamap_pars_fragment: Hw,
  alphatest_fragment: Iw,
  alphatest_pars_fragment: Vw,
  aomap_fragment: Fw,
  aomap_pars_fragment: Gw,
  batching_pars_vertex: Xw,
  batching_vertex: qw,
  begin_vertex: Yw,
  beginnormal_vertex: Ww,
  bsdfs: jw,
  iridescence_fragment: Zw,
  bumpmap_pars_fragment: Kw,
  clipping_planes_fragment: Qw,
  clipping_planes_pars_fragment: kw,
  clipping_planes_pars_vertex: Jw,
  clipping_planes_vertex: $w,
  color_fragment: eU,
  color_pars_fragment: tU,
  color_pars_vertex: nU,
  color_vertex: iU,
  common: aU,
  cube_uv_reflection_fragment: sU,
  defaultnormal_vertex: rU,
  displacementmap_pars_vertex: oU,
  displacementmap_vertex: lU,
  emissivemap_fragment: uU,
  emissivemap_pars_fragment: cU,
  colorspace_fragment: fU,
  colorspace_pars_fragment: hU,
  envmap_fragment: dU,
  envmap_common_pars_fragment: pU,
  envmap_pars_fragment: mU,
  envmap_pars_vertex: vU,
  envmap_physical_pars_fragment: RU,
  envmap_vertex: gU,
  fog_vertex: yU,
  fog_pars_vertex: _U,
  fog_fragment: SU,
  fog_pars_fragment: xU,
  gradientmap_pars_fragment: EU,
  lightmap_pars_fragment: MU,
  lights_lambert_fragment: bU,
  lights_lambert_pars_fragment: TU,
  lights_pars_begin: AU,
  lights_toon_fragment: CU,
  lights_toon_pars_fragment: DU,
  lights_phong_fragment: wU,
  lights_phong_pars_fragment: UU,
  lights_physical_fragment: NU,
  lights_physical_pars_fragment: OU,
  lights_fragment_begin: LU,
  lights_fragment_maps: zU,
  lights_fragment_end: BU,
  logdepthbuf_fragment: PU,
  logdepthbuf_pars_fragment: HU,
  logdepthbuf_pars_vertex: IU,
  logdepthbuf_vertex: VU,
  map_fragment: FU,
  map_pars_fragment: GU,
  map_particle_fragment: XU,
  map_particle_pars_fragment: qU,
  metalnessmap_fragment: YU,
  metalnessmap_pars_fragment: WU,
  morphinstance_vertex: jU,
  morphcolor_vertex: ZU,
  morphnormal_vertex: KU,
  morphtarget_pars_vertex: QU,
  morphtarget_vertex: kU,
  normal_fragment_begin: JU,
  normal_fragment_maps: $U,
  normal_pars_fragment: eN,
  normal_pars_vertex: tN,
  normal_vertex: nN,
  normalmap_pars_fragment: iN,
  clearcoat_normal_fragment_begin: aN,
  clearcoat_normal_fragment_maps: sN,
  clearcoat_pars_fragment: rN,
  iridescence_pars_fragment: oN,
  opaque_fragment: lN,
  packing: uN,
  premultiplied_alpha_fragment: cN,
  project_vertex: fN,
  dithering_fragment: hN,
  dithering_pars_fragment: dN,
  roughnessmap_fragment: pN,
  roughnessmap_pars_fragment: mN,
  shadowmap_pars_fragment: vN,
  shadowmap_pars_vertex: gN,
  shadowmap_vertex: yN,
  shadowmask_pars_fragment: _N,
  skinbase_vertex: SN,
  skinning_pars_vertex: xN,
  skinning_vertex: EN,
  skinnormal_vertex: MN,
  specularmap_fragment: bN,
  specularmap_pars_fragment: TN,
  tonemapping_fragment: AN,
  tonemapping_pars_fragment: RN,
  transmission_fragment: CN,
  transmission_pars_fragment: DN,
  uv_pars_fragment: wN,
  uv_pars_vertex: UN,
  uv_vertex: NN,
  worldpos_vertex: ON,
  background_vert: LN,
  background_frag: zN,
  backgroundCube_vert: BN,
  backgroundCube_frag: PN,
  cube_vert: HN,
  cube_frag: IN,
  depth_vert: VN,
  depth_frag: FN,
  distanceRGBA_vert: GN,
  distanceRGBA_frag: XN,
  equirect_vert: qN,
  equirect_frag: YN,
  linedashed_vert: WN,
  linedashed_frag: jN,
  meshbasic_vert: ZN,
  meshbasic_frag: KN,
  meshlambert_vert: QN,
  meshlambert_frag: kN,
  meshmatcap_vert: JN,
  meshmatcap_frag: $N,
  meshnormal_vert: eO,
  meshnormal_frag: tO,
  meshphong_vert: nO,
  meshphong_frag: iO,
  meshphysical_vert: aO,
  meshphysical_frag: sO,
  meshtoon_vert: rO,
  meshtoon_frag: oO,
  points_vert: lO,
  points_frag: uO,
  shadow_vert: cO,
  shadow_frag: fO,
  sprite_vert: hO,
  sprite_frag: dO
}, ht = {
  common: {
    diffuse: { value: /* @__PURE__ */ new Et(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new en() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new en() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new en() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new en() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new en() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new en() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new en() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new en() },
    normalScale: { value: /* @__PURE__ */ new ze(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new en() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new en() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new en() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new en() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new Et(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new Et(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new en() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new en() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new Et(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new ze(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new en() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new en() },
    alphaTest: { value: 0 }
  }
}, so = {
  basic: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.specularmap,
      ht.envmap,
      ht.aomap,
      ht.lightmap,
      ht.fog
    ]),
    vertexShader: cn.meshbasic_vert,
    fragmentShader: cn.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.specularmap,
      ht.envmap,
      ht.aomap,
      ht.lightmap,
      ht.emissivemap,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      ht.fog,
      ht.lights,
      {
        emissive: { value: /* @__PURE__ */ new Et(0) }
      }
    ]),
    vertexShader: cn.meshlambert_vert,
    fragmentShader: cn.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.specularmap,
      ht.envmap,
      ht.aomap,
      ht.lightmap,
      ht.emissivemap,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      ht.fog,
      ht.lights,
      {
        emissive: { value: /* @__PURE__ */ new Et(0) },
        specular: { value: /* @__PURE__ */ new Et(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: cn.meshphong_vert,
    fragmentShader: cn.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.envmap,
      ht.aomap,
      ht.lightmap,
      ht.emissivemap,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      ht.roughnessmap,
      ht.metalnessmap,
      ht.fog,
      ht.lights,
      {
        emissive: { value: /* @__PURE__ */ new Et(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: cn.meshphysical_vert,
    fragmentShader: cn.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.aomap,
      ht.lightmap,
      ht.emissivemap,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      ht.gradientmap,
      ht.fog,
      ht.lights,
      {
        emissive: { value: /* @__PURE__ */ new Et(0) }
      }
    ]),
    vertexShader: cn.meshtoon_vert,
    fragmentShader: cn.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      ht.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: cn.meshmatcap_vert,
    fragmentShader: cn.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ ls([
      ht.points,
      ht.fog
    ]),
    vertexShader: cn.points_vert,
    fragmentShader: cn.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: cn.linedashed_vert,
    fragmentShader: cn.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.displacementmap
    ]),
    vertexShader: cn.depth_vert,
    fragmentShader: cn.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.bumpmap,
      ht.normalmap,
      ht.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: cn.meshnormal_vert,
    fragmentShader: cn.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ ls([
      ht.sprite,
      ht.fog
    ]),
    vertexShader: cn.sprite_vert,
    fragmentShader: cn.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new en() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: cn.background_vert,
    fragmentShader: cn.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new en() }
    },
    vertexShader: cn.backgroundCube_vert,
    fragmentShader: cn.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: cn.cube_vert,
    fragmentShader: cn.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: cn.equirect_vert,
    fragmentShader: cn.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ ls([
      ht.common,
      ht.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new j() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: cn.distanceRGBA_vert,
    fragmentShader: cn.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ ls([
      ht.lights,
      ht.fog,
      {
        color: { value: /* @__PURE__ */ new Et(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: cn.shadow_vert,
    fragmentShader: cn.shadow_frag
  }
};
so.physical = {
  uniforms: /* @__PURE__ */ ls([
    so.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new en() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new en() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new ze(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new en() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new en() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new en() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new Et(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new en() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new en() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new en() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new ze() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new en() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new Et(0) },
      specularColor: { value: /* @__PURE__ */ new Et(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new en() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new en() },
      anisotropyVector: { value: /* @__PURE__ */ new ze() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new en() }
    }
  ]),
  vertexShader: cn.meshphysical_vert,
  fragmentShader: cn.meshphysical_frag
};
const S0 = { r: 0, b: 0, g: 0 }, cf = /* @__PURE__ */ new ks(), pO = /* @__PURE__ */ new qt();
function mO(r, e, t, i, s, u, f) {
  const h = new Et(0);
  let p = u === !0 ? 0 : 1, v, _, S = null, E = 0, x = null;
  function A(N) {
    let U = N.isScene === !0 ? N.background : null;
    return U && U.isTexture && (U = (N.backgroundBlurriness > 0 ? t : e).get(U)), U;
  }
  function C(N) {
    let U = !1;
    const I = A(N);
    I === null ? M(h, p) : I && I.isColor && (M(I, 1), U = !0);
    const P = r.xr.getEnvironmentBlendMode();
    P === "additive" ? i.buffers.color.setClear(0, 0, 0, 1, f) : P === "alpha-blend" && i.buffers.color.setClear(0, 0, 0, 0, f), (r.autoClear || U) && (i.buffers.depth.setTest(!0), i.buffers.depth.setMask(!0), i.buffers.color.setMask(!0), r.clear(r.autoClearColor, r.autoClearDepth, r.autoClearStencil));
  }
  function R(N, U) {
    const I = A(U);
    I && (I.isCubeTexture || I.mapping === fp) ? (_ === void 0 && (_ = new Xi(
      new Cf(1, 1, 1),
      new oo({
        name: "BackgroundCubeMaterial",
        uniforms: op(so.backgroundCube.uniforms),
        vertexShader: so.backgroundCube.vertexShader,
        fragmentShader: so.backgroundCube.fragmentShader,
        side: cs,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), _.geometry.deleteAttribute("normal"), _.geometry.deleteAttribute("uv"), _.onBeforeRender = function(P, X, Y) {
      this.matrixWorld.copyPosition(Y.matrixWorld);
    }, Object.defineProperty(_.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), s.update(_)), cf.copy(U.backgroundRotation), cf.x *= -1, cf.y *= -1, cf.z *= -1, I.isCubeTexture && I.isRenderTargetTexture === !1 && (cf.y *= -1, cf.z *= -1), _.material.uniforms.envMap.value = I, _.material.uniforms.flipEnvMap.value = I.isCubeTexture && I.isRenderTargetTexture === !1 ? -1 : 1, _.material.uniforms.backgroundBlurriness.value = U.backgroundBlurriness, _.material.uniforms.backgroundIntensity.value = U.backgroundIntensity, _.material.uniforms.backgroundRotation.value.setFromMatrix4(pO.makeRotationFromEuler(cf)), _.material.toneMapped = An.getTransfer(I.colorSpace) !== Fn, (S !== I || E !== I.version || x !== r.toneMapping) && (_.material.needsUpdate = !0, S = I, E = I.version, x = r.toneMapping), _.layers.enableAll(), N.unshift(_, _.geometry, _.material, 0, 0, null)) : I && I.isTexture && (v === void 0 && (v = new Xi(
      new pp(2, 2),
      new oo({
        name: "BackgroundMaterial",
        uniforms: op(so.background.uniforms),
        vertexShader: so.background.vertexShader,
        fragmentShader: so.background.fragmentShader,
        side: Vl,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), v.geometry.deleteAttribute("normal"), Object.defineProperty(v.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), s.update(v)), v.material.uniforms.t2D.value = I, v.material.uniforms.backgroundIntensity.value = U.backgroundIntensity, v.material.toneMapped = An.getTransfer(I.colorSpace) !== Fn, I.matrixAutoUpdate === !0 && I.updateMatrix(), v.material.uniforms.uvTransform.value.copy(I.matrix), (S !== I || E !== I.version || x !== r.toneMapping) && (v.material.needsUpdate = !0, S = I, E = I.version, x = r.toneMapping), v.layers.enableAll(), N.unshift(v, v.geometry, v.material, 0, 0, null));
  }
  function M(N, U) {
    N.getRGB(S0, QA(r)), i.buffers.color.setClear(S0.r, S0.g, S0.b, U, f);
  }
  function w() {
    _ !== void 0 && (_.geometry.dispose(), _.material.dispose(), _ = void 0), v !== void 0 && (v.geometry.dispose(), v.material.dispose(), v = void 0);
  }
  return {
    getClearColor: function() {
      return h;
    },
    setClearColor: function(N, U = 1) {
      h.set(N), p = U, M(h, p);
    },
    getClearAlpha: function() {
      return p;
    },
    setClearAlpha: function(N) {
      p = N, M(h, p);
    },
    render: C,
    addToRenderList: R,
    dispose: w
  };
}
function vO(r, e) {
  const t = r.getParameter(r.MAX_VERTEX_ATTRIBS), i = {}, s = E(null);
  let u = s, f = !1;
  function h(L, W, me, Q, oe) {
    let Se = !1;
    const B = S(Q, me, W);
    u !== B && (u = B, v(u.object)), Se = x(L, Q, me, oe), Se && A(L, Q, me, oe), oe !== null && e.update(oe, r.ELEMENT_ARRAY_BUFFER), (Se || f) && (f = !1, U(L, W, me, Q), oe !== null && r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, e.get(oe).buffer));
  }
  function p() {
    return r.createVertexArray();
  }
  function v(L) {
    return r.bindVertexArray(L);
  }
  function _(L) {
    return r.deleteVertexArray(L);
  }
  function S(L, W, me) {
    const Q = me.wireframe === !0;
    let oe = i[L.id];
    oe === void 0 && (oe = {}, i[L.id] = oe);
    let Se = oe[W.id];
    Se === void 0 && (Se = {}, oe[W.id] = Se);
    let B = Se[Q];
    return B === void 0 && (B = E(p()), Se[Q] = B), B;
  }
  function E(L) {
    const W = [], me = [], Q = [];
    for (let oe = 0; oe < t; oe++)
      W[oe] = 0, me[oe] = 0, Q[oe] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: W,
      enabledAttributes: me,
      attributeDivisors: Q,
      object: L,
      attributes: {},
      index: null
    };
  }
  function x(L, W, me, Q) {
    const oe = u.attributes, Se = W.attributes;
    let B = 0;
    const K = me.getAttributes();
    for (const q in K)
      if (K[q].location >= 0) {
        const le = oe[q];
        let Te = Se[q];
        if (Te === void 0 && (q === "instanceMatrix" && L.instanceMatrix && (Te = L.instanceMatrix), q === "instanceColor" && L.instanceColor && (Te = L.instanceColor)), le === void 0 || le.attribute !== Te || Te && le.data !== Te.data) return !0;
        B++;
      }
    return u.attributesNum !== B || u.index !== Q;
  }
  function A(L, W, me, Q) {
    const oe = {}, Se = W.attributes;
    let B = 0;
    const K = me.getAttributes();
    for (const q in K)
      if (K[q].location >= 0) {
        let le = Se[q];
        le === void 0 && (q === "instanceMatrix" && L.instanceMatrix && (le = L.instanceMatrix), q === "instanceColor" && L.instanceColor && (le = L.instanceColor));
        const Te = {};
        Te.attribute = le, le && le.data && (Te.data = le.data), oe[q] = Te, B++;
      }
    u.attributes = oe, u.attributesNum = B, u.index = Q;
  }
  function C() {
    const L = u.newAttributes;
    for (let W = 0, me = L.length; W < me; W++)
      L[W] = 0;
  }
  function R(L) {
    M(L, 0);
  }
  function M(L, W) {
    const me = u.newAttributes, Q = u.enabledAttributes, oe = u.attributeDivisors;
    me[L] = 1, Q[L] === 0 && (r.enableVertexAttribArray(L), Q[L] = 1), oe[L] !== W && (r.vertexAttribDivisor(L, W), oe[L] = W);
  }
  function w() {
    const L = u.newAttributes, W = u.enabledAttributes;
    for (let me = 0, Q = W.length; me < Q; me++)
      W[me] !== L[me] && (r.disableVertexAttribArray(me), W[me] = 0);
  }
  function N(L, W, me, Q, oe, Se, B) {
    B === !0 ? r.vertexAttribIPointer(L, W, me, oe, Se) : r.vertexAttribPointer(L, W, me, Q, oe, Se);
  }
  function U(L, W, me, Q) {
    C();
    const oe = Q.attributes, Se = me.getAttributes(), B = W.defaultAttributeValues;
    for (const K in Se) {
      const q = Se[K];
      if (q.location >= 0) {
        let se = oe[K];
        if (se === void 0 && (K === "instanceMatrix" && L.instanceMatrix && (se = L.instanceMatrix), K === "instanceColor" && L.instanceColor && (se = L.instanceColor)), se !== void 0) {
          const le = se.normalized, Te = se.itemSize, we = e.get(se);
          if (we === void 0) continue;
          const gt = we.buffer, $e = we.type, _e = we.bytesPerElement, Je = $e === r.INT || $e === r.UNSIGNED_INT || se.gpuType === D_;
          if (se.isInterleavedBufferAttribute) {
            const We = se.data, Mt = We.stride, yt = se.offset;
            if (We.isInstancedInterleavedBuffer) {
              for (let Ct = 0; Ct < q.locationSize; Ct++)
                M(q.location + Ct, We.meshPerAttribute);
              L.isInstancedMesh !== !0 && Q._maxInstanceCount === void 0 && (Q._maxInstanceCount = We.meshPerAttribute * We.count);
            } else
              for (let Ct = 0; Ct < q.locationSize; Ct++)
                R(q.location + Ct);
            r.bindBuffer(r.ARRAY_BUFFER, gt);
            for (let Ct = 0; Ct < q.locationSize; Ct++)
              N(
                q.location + Ct,
                Te / q.locationSize,
                $e,
                le,
                Mt * _e,
                (yt + Te / q.locationSize * Ct) * _e,
                Je
              );
          } else {
            if (se.isInstancedBufferAttribute) {
              for (let We = 0; We < q.locationSize; We++)
                M(q.location + We, se.meshPerAttribute);
              L.isInstancedMesh !== !0 && Q._maxInstanceCount === void 0 && (Q._maxInstanceCount = se.meshPerAttribute * se.count);
            } else
              for (let We = 0; We < q.locationSize; We++)
                R(q.location + We);
            r.bindBuffer(r.ARRAY_BUFFER, gt);
            for (let We = 0; We < q.locationSize; We++)
              N(
                q.location + We,
                Te / q.locationSize,
                $e,
                le,
                Te * _e,
                Te / q.locationSize * We * _e,
                Je
              );
          }
        } else if (B !== void 0) {
          const le = B[K];
          if (le !== void 0)
            switch (le.length) {
              case 2:
                r.vertexAttrib2fv(q.location, le);
                break;
              case 3:
                r.vertexAttrib3fv(q.location, le);
                break;
              case 4:
                r.vertexAttrib4fv(q.location, le);
                break;
              default:
                r.vertexAttrib1fv(q.location, le);
            }
        }
      }
    }
    w();
  }
  function I() {
    Y();
    for (const L in i) {
      const W = i[L];
      for (const me in W) {
        const Q = W[me];
        for (const oe in Q)
          _(Q[oe].object), delete Q[oe];
        delete W[me];
      }
      delete i[L];
    }
  }
  function P(L) {
    if (i[L.id] === void 0) return;
    const W = i[L.id];
    for (const me in W) {
      const Q = W[me];
      for (const oe in Q)
        _(Q[oe].object), delete Q[oe];
      delete W[me];
    }
    delete i[L.id];
  }
  function X(L) {
    for (const W in i) {
      const me = i[W];
      if (me[L.id] === void 0) continue;
      const Q = me[L.id];
      for (const oe in Q)
        _(Q[oe].object), delete Q[oe];
      delete me[L.id];
    }
  }
  function Y() {
    z(), f = !0, u !== s && (u = s, v(u.object));
  }
  function z() {
    s.geometry = null, s.program = null, s.wireframe = !1;
  }
  return {
    setup: h,
    reset: Y,
    resetDefaultState: z,
    dispose: I,
    releaseStatesOfGeometry: P,
    releaseStatesOfProgram: X,
    initAttributes: C,
    enableAttribute: R,
    disableUnusedAttributes: w
  };
}
function gO(r, e, t) {
  let i;
  function s(v) {
    i = v;
  }
  function u(v, _) {
    r.drawArrays(i, v, _), t.update(_, i, 1);
  }
  function f(v, _, S) {
    S !== 0 && (r.drawArraysInstanced(i, v, _, S), t.update(_, i, S));
  }
  function h(v, _, S) {
    if (S === 0) return;
    e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i, v, 0, _, 0, S);
    let x = 0;
    for (let A = 0; A < S; A++)
      x += _[A];
    t.update(x, i, 1);
  }
  function p(v, _, S, E) {
    if (S === 0) return;
    const x = e.get("WEBGL_multi_draw");
    if (x === null)
      for (let A = 0; A < v.length; A++)
        f(v[A], _[A], E[A]);
    else {
      x.multiDrawArraysInstancedWEBGL(i, v, 0, _, 0, E, 0, S);
      let A = 0;
      for (let C = 0; C < S; C++)
        A += _[C] * E[C];
      t.update(A, i, 1);
    }
  }
  this.setMode = s, this.render = u, this.renderInstances = f, this.renderMultiDraw = h, this.renderMultiDrawInstances = p;
}
function yO(r, e, t, i) {
  let s;
  function u() {
    if (s !== void 0) return s;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const X = e.get("EXT_texture_filter_anisotropic");
      s = r.getParameter(X.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      s = 0;
    return s;
  }
  function f(X) {
    return !(X !== Va && i.convert(X) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function h(X) {
    const Y = X === hp && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
    return !(X !== Dr && i.convert(X) !== r.getParameter(r.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    X !== Ds && !Y);
  }
  function p(X) {
    if (X === "highp") {
      if (r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.HIGH_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.HIGH_FLOAT).precision > 0)
        return "highp";
      X = "mediump";
    }
    return X === "mediump" && r.getShaderPrecisionFormat(r.VERTEX_SHADER, r.MEDIUM_FLOAT).precision > 0 && r.getShaderPrecisionFormat(r.FRAGMENT_SHADER, r.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let v = t.precision !== void 0 ? t.precision : "highp";
  const _ = p(v);
  _ !== v && (console.warn("THREE.WebGLRenderer:", v, "not supported, using", _, "instead."), v = _);
  const S = t.logarithmicDepthBuffer === !0, E = t.reversedDepthBuffer === !0 && e.has("EXT_clip_control"), x = r.getParameter(r.MAX_TEXTURE_IMAGE_UNITS), A = r.getParameter(r.MAX_VERTEX_TEXTURE_IMAGE_UNITS), C = r.getParameter(r.MAX_TEXTURE_SIZE), R = r.getParameter(r.MAX_CUBE_MAP_TEXTURE_SIZE), M = r.getParameter(r.MAX_VERTEX_ATTRIBS), w = r.getParameter(r.MAX_VERTEX_UNIFORM_VECTORS), N = r.getParameter(r.MAX_VARYING_VECTORS), U = r.getParameter(r.MAX_FRAGMENT_UNIFORM_VECTORS), I = A > 0, P = r.getParameter(r.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: u,
    getMaxPrecision: p,
    textureFormatReadable: f,
    textureTypeReadable: h,
    precision: v,
    logarithmicDepthBuffer: S,
    reversedDepthBuffer: E,
    maxTextures: x,
    maxVertexTextures: A,
    maxTextureSize: C,
    maxCubemapSize: R,
    maxAttributes: M,
    maxVertexUniforms: w,
    maxVaryings: N,
    maxFragmentUniforms: U,
    vertexTextures: I,
    maxSamples: P
  };
}
function _O(r) {
  const e = this;
  let t = null, i = 0, s = !1, u = !1;
  const f = new zl(), h = new en(), p = { value: null, needsUpdate: !1 };
  this.uniform = p, this.numPlanes = 0, this.numIntersection = 0, this.init = function(S, E) {
    const x = S.length !== 0 || E || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    i !== 0 || s;
    return s = E, i = S.length, x;
  }, this.beginShadows = function() {
    u = !0, _(null);
  }, this.endShadows = function() {
    u = !1;
  }, this.setGlobalState = function(S, E) {
    t = _(S, E, 0);
  }, this.setState = function(S, E, x) {
    const A = S.clippingPlanes, C = S.clipIntersection, R = S.clipShadows, M = r.get(S);
    if (!s || A === null || A.length === 0 || u && !R)
      u ? _(null) : v();
    else {
      const w = u ? 0 : i, N = w * 4;
      let U = M.clippingState || null;
      p.value = U, U = _(A, E, N, x);
      for (let I = 0; I !== N; ++I)
        U[I] = t[I];
      M.clippingState = U, this.numIntersection = C ? this.numPlanes : 0, this.numPlanes += w;
    }
  };
  function v() {
    p.value !== t && (p.value = t, p.needsUpdate = i > 0), e.numPlanes = i, e.numIntersection = 0;
  }
  function _(S, E, x, A) {
    const C = S !== null ? S.length : 0;
    let R = null;
    if (C !== 0) {
      if (R = p.value, A !== !0 || R === null) {
        const M = x + C * 4, w = E.matrixWorldInverse;
        h.getNormalMatrix(w), (R === null || R.length < M) && (R = new Float32Array(M));
        for (let N = 0, U = x; N !== C; ++N, U += 4)
          f.copy(S[N]).applyMatrix4(w, h), f.normal.toArray(R, U), R[U + 3] = f.constant;
      }
      p.value = R, p.needsUpdate = !0;
    }
    return e.numPlanes = C, e.numIntersection = 0, R;
  }
}
function SO(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(f, h) {
    return h === Iv ? f.mapping = Fl : h === Vv && (f.mapping = Wu), f;
  }
  function i(f) {
    if (f && f.isTexture) {
      const h = f.mapping;
      if (h === Iv || h === Vv)
        if (e.has(f)) {
          const p = e.get(f).texture;
          return t(p, f.mapping);
        } else {
          const p = f.image;
          if (p && p.height > 0) {
            const v = new $A(p.height);
            return v.fromEquirectangularTexture(r, f), e.set(f, v), f.addEventListener("dispose", s), t(v.texture, f.mapping);
          } else
            return null;
        }
    }
    return f;
  }
  function s(f) {
    const h = f.target;
    h.removeEventListener("dispose", s);
    const p = e.get(h);
    p !== void 0 && (e.delete(h), p.dispose());
  }
  function u() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: i,
    dispose: u
  };
}
const kd = 4, aT = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], vf = 20, Yx = /* @__PURE__ */ new Yu(), sT = /* @__PURE__ */ new Et();
let Wx = null, jx = 0, Zx = 0, Kx = !1;
const mf = (1 + Math.sqrt(5)) / 2, qd = 1 / mf, rT = [
  /* @__PURE__ */ new j(-mf, qd, 0),
  /* @__PURE__ */ new j(mf, qd, 0),
  /* @__PURE__ */ new j(-qd, 0, mf),
  /* @__PURE__ */ new j(qd, 0, mf),
  /* @__PURE__ */ new j(0, mf, -qd),
  /* @__PURE__ */ new j(0, mf, qd),
  /* @__PURE__ */ new j(-1, 1, -1),
  /* @__PURE__ */ new j(1, 1, -1),
  /* @__PURE__ */ new j(-1, 1, 1),
  /* @__PURE__ */ new j(1, 1, 1)
], xO = /* @__PURE__ */ new j();
class UE {
  /**
   * Constructs a new PMREM generator.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety.
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromScene(e, t = 0, i = 0.1, s = 100, u = {}) {
    const {
      size: f = 256,
      position: h = xO
    } = u;
    Wx = this._renderer.getRenderTarget(), jx = this._renderer.getActiveCubeFace(), Zx = this._renderer.getActiveMipmapLevel(), Kx = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(f);
    const p = this._allocateTargets();
    return p.depthBuffer = !0, this._sceneToCubeUV(e, i, s, p, h), t > 0 && this._blur(p, 0, 0, t), this._applyPMREM(p), this._cleanup(p), p;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = uT(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = lT(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(Wx, jx, Zx), this._renderer.xr.enabled = Kx, e.scissorTest = !1, x0(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === Fl || e.mapping === Wu ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), Wx = this._renderer.getRenderTarget(), jx = this._renderer.getActiveCubeFace(), Zx = this._renderer.getActiveMipmapLevel(), Kx = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const i = t || this._allocateTargets();
    return this._textureToCubeUV(e, i), this._applyPMREM(i), this._cleanup(i), i;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, i = {
      magFilter: na,
      minFilter: na,
      generateMipmaps: !1,
      type: hp,
      format: Va,
      colorSpace: ju,
      depthBuffer: !1
    }, s = oT(e, t, i);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = oT(e, t, i);
      const { _lodMax: u } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = EO(u)), this._blurMaterial = MO(u, e, t);
    }
    return s;
  }
  _compileMaterial(e) {
    const t = new Xi(this._lodPlanes[0], e);
    this._renderer.compile(t, Yx);
  }
  _sceneToCubeUV(e, t, i, s, u) {
    const p = new Ui(90, 1, t, i), v = [1, -1, 1, 1, 1, 1], _ = [1, 1, 1, -1, -1, -1], S = this._renderer, E = S.autoClear, x = S.toneMapping;
    S.getClearColor(sT), S.toneMapping = Yo, S.autoClear = !1, S.state.buffers.depth.getReversed() && (S.setRenderTarget(s), S.clearDepth(), S.setRenderTarget(null));
    const C = new Qu({
      name: "PMREM.Background",
      side: cs,
      depthWrite: !1,
      depthTest: !1
    }), R = new Xi(new Cf(), C);
    let M = !1;
    const w = e.background;
    w ? w.isColor && (C.color.copy(w), e.background = null, M = !0) : (C.color.copy(sT), M = !0);
    for (let N = 0; N < 6; N++) {
      const U = N % 3;
      U === 0 ? (p.up.set(0, v[N], 0), p.position.set(u.x, u.y, u.z), p.lookAt(u.x + _[N], u.y, u.z)) : U === 1 ? (p.up.set(0, 0, v[N]), p.position.set(u.x, u.y, u.z), p.lookAt(u.x, u.y + _[N], u.z)) : (p.up.set(0, v[N], 0), p.position.set(u.x, u.y, u.z), p.lookAt(u.x, u.y, u.z + _[N]));
      const I = this._cubeSize;
      x0(s, U * I, N > 2 ? I : 0, I, I), S.setRenderTarget(s), M && S.render(R, p), S.render(e, p);
    }
    R.geometry.dispose(), R.material.dispose(), S.toneMapping = x, S.autoClear = E, e.background = w;
  }
  _textureToCubeUV(e, t) {
    const i = this._renderer, s = e.mapping === Fl || e.mapping === Wu;
    s ? (this._cubemapMaterial === null && (this._cubemapMaterial = uT()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = lT());
    const u = s ? this._cubemapMaterial : this._equirectMaterial, f = new Xi(this._lodPlanes[0], u), h = u.uniforms;
    h.envMap.value = e;
    const p = this._cubeSize;
    x0(t, 0, 0, 3 * p, 2 * p), i.setRenderTarget(t), i.render(f, Yx);
  }
  _applyPMREM(e) {
    const t = this._renderer, i = t.autoClear;
    t.autoClear = !1;
    const s = this._lodPlanes.length;
    for (let u = 1; u < s; u++) {
      const f = Math.sqrt(this._sigmas[u] * this._sigmas[u] - this._sigmas[u - 1] * this._sigmas[u - 1]), h = rT[(s - u - 1) % rT.length];
      this._blur(e, u - 1, u, f, h);
    }
    t.autoClear = i;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @private
   * @param {WebGLRenderTarget} cubeUVRenderTarget
   * @param {number} lodIn
   * @param {number} lodOut
   * @param {number} sigma
   * @param {Vector3} [poleAxis]
   */
  _blur(e, t, i, s, u) {
    const f = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      f,
      t,
      i,
      s,
      "latitudinal",
      u
    ), this._halfBlur(
      f,
      e,
      i,
      i,
      s,
      "longitudinal",
      u
    );
  }
  _halfBlur(e, t, i, s, u, f, h) {
    const p = this._renderer, v = this._blurMaterial;
    f !== "latitudinal" && f !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const _ = 3, S = new Xi(this._lodPlanes[s], v), E = v.uniforms, x = this._sizeLods[i] - 1, A = isFinite(u) ? Math.PI / (2 * x) : 2 * Math.PI / (2 * vf - 1), C = u / A, R = isFinite(u) ? 1 + Math.floor(_ * C) : vf;
    R > vf && console.warn(`sigmaRadians, ${u}, is too large and will clip, as it requested ${R} samples when the maximum is set to ${vf}`);
    const M = [];
    let w = 0;
    for (let X = 0; X < vf; ++X) {
      const Y = X / C, z = Math.exp(-Y * Y / 2);
      M.push(z), X === 0 ? w += z : X < R && (w += 2 * z);
    }
    for (let X = 0; X < M.length; X++)
      M[X] = M[X] / w;
    E.envMap.value = e.texture, E.samples.value = R, E.weights.value = M, E.latitudinal.value = f === "latitudinal", h && (E.poleAxis.value = h);
    const { _lodMax: N } = this;
    E.dTheta.value = A, E.mipInt.value = N - i;
    const U = this._sizeLods[s], I = 3 * U * (s > N - kd ? s - N + kd : 0), P = 4 * (this._cubeSize - U);
    x0(t, I, P, 3 * U, 2 * U), p.setRenderTarget(t), p.render(S, Yx);
  }
}
function EO(r) {
  const e = [], t = [], i = [];
  let s = r;
  const u = r - kd + 1 + aT.length;
  for (let f = 0; f < u; f++) {
    const h = Math.pow(2, s);
    t.push(h);
    let p = 1 / h;
    f > r - kd ? p = aT[f - r + kd - 1] : f === 0 && (p = 0), i.push(p);
    const v = 1 / (h - 2), _ = -v, S = 1 + v, E = [_, _, S, _, S, S, _, _, S, S, _, S], x = 6, A = 6, C = 3, R = 2, M = 1, w = new Float32Array(C * A * x), N = new Float32Array(R * A * x), U = new Float32Array(M * A * x);
    for (let P = 0; P < x; P++) {
      const X = P % 3 * 2 / 3 - 1, Y = P > 2 ? 0 : -1, z = [
        X,
        Y,
        0,
        X + 2 / 3,
        Y,
        0,
        X + 2 / 3,
        Y + 1,
        0,
        X,
        Y,
        0,
        X + 2 / 3,
        Y + 1,
        0,
        X,
        Y + 1,
        0
      ];
      w.set(z, C * A * P), N.set(E, R * A * P);
      const L = [P, P, P, P, P, P];
      U.set(L, M * A * P);
    }
    const I = new on();
    I.setAttribute("position", new jn(w, C)), I.setAttribute("uv", new jn(N, R)), I.setAttribute("faceIndex", new jn(U, M)), e.push(I), s > kd && s--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: i };
}
function oT(r, e, t) {
  const i = new jo(r, e, t);
  return i.texture.mapping = fp, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i;
}
function x0(r, e, t, i, s) {
  r.viewport.set(e, t, i, s), r.scissor.set(e, t, i, s);
}
function MO(r, e, t) {
  const i = new Float32Array(vf), s = new j(0, 1, 0);
  return new oo({
    name: "SphericalGaussianBlur",
    defines: {
      n: vf,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${r}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: i },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: s }
    },
    vertexShader: AM(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: Hl,
    depthTest: !1,
    depthWrite: !1
  });
}
function lT() {
  return new oo({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: AM(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: Hl,
    depthTest: !1,
    depthWrite: !1
  });
}
function uT() {
  return new oo({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: AM(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: Hl,
    depthTest: !1,
    depthWrite: !1
  });
}
function AM() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function bO(r) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function i(h) {
    if (h && h.isTexture) {
      const p = h.mapping, v = p === Iv || p === Vv, _ = p === Fl || p === Wu;
      if (v || _) {
        let S = e.get(h);
        const E = S !== void 0 ? S.texture.pmremVersion : 0;
        if (h.isRenderTargetTexture && h.pmremVersion !== E)
          return t === null && (t = new UE(r)), S = v ? t.fromEquirectangular(h, S) : t.fromCubemap(h, S), S.texture.pmremVersion = h.pmremVersion, e.set(h, S), S.texture;
        if (S !== void 0)
          return S.texture;
        {
          const x = h.image;
          return v && x && x.height > 0 || _ && x && s(x) ? (t === null && (t = new UE(r)), S = v ? t.fromEquirectangular(h) : t.fromCubemap(h), S.texture.pmremVersion = h.pmremVersion, e.set(h, S), h.addEventListener("dispose", u), S.texture) : null;
        }
      }
    }
    return h;
  }
  function s(h) {
    let p = 0;
    const v = 6;
    for (let _ = 0; _ < v; _++)
      h[_] !== void 0 && p++;
    return p === v;
  }
  function u(h) {
    const p = h.target;
    p.removeEventListener("dispose", u);
    const v = e.get(p);
    v !== void 0 && (e.delete(p), v.dispose());
  }
  function f() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: i,
    dispose: f
  };
}
function TO(r) {
  const e = {};
  function t(i) {
    if (e[i] !== void 0)
      return e[i];
    let s;
    switch (i) {
      case "WEBGL_depth_texture":
        s = r.getExtension("WEBGL_depth_texture") || r.getExtension("MOZ_WEBGL_depth_texture") || r.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        s = r.getExtension("EXT_texture_filter_anisotropic") || r.getExtension("MOZ_EXT_texture_filter_anisotropic") || r.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        s = r.getExtension("WEBGL_compressed_texture_s3tc") || r.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        s = r.getExtension("WEBGL_compressed_texture_pvrtc") || r.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        s = r.getExtension(i);
    }
    return e[i] = s, s;
  }
  return {
    has: function(i) {
      return t(i) !== null;
    },
    init: function() {
      t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance"), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture"), t("WEBGL_render_shared_exponent");
    },
    get: function(i) {
      const s = t(i);
      return s === null && Jd("THREE.WebGLRenderer: " + i + " extension not supported."), s;
    }
  };
}
function AO(r, e, t, i) {
  const s = {}, u = /* @__PURE__ */ new WeakMap();
  function f(S) {
    const E = S.target;
    E.index !== null && e.remove(E.index);
    for (const A in E.attributes)
      e.remove(E.attributes[A]);
    E.removeEventListener("dispose", f), delete s[E.id];
    const x = u.get(E);
    x && (e.remove(x), u.delete(E)), i.releaseStatesOfGeometry(E), E.isInstancedBufferGeometry === !0 && delete E._maxInstanceCount, t.memory.geometries--;
  }
  function h(S, E) {
    return s[E.id] === !0 || (E.addEventListener("dispose", f), s[E.id] = !0, t.memory.geometries++), E;
  }
  function p(S) {
    const E = S.attributes;
    for (const x in E)
      e.update(E[x], r.ARRAY_BUFFER);
  }
  function v(S) {
    const E = [], x = S.index, A = S.attributes.position;
    let C = 0;
    if (x !== null) {
      const w = x.array;
      C = x.version;
      for (let N = 0, U = w.length; N < U; N += 3) {
        const I = w[N + 0], P = w[N + 1], X = w[N + 2];
        E.push(I, P, P, X, X, I);
      }
    } else if (A !== void 0) {
      const w = A.array;
      C = A.version;
      for (let N = 0, U = w.length / 3 - 1; N < U; N += 3) {
        const I = N + 0, P = N + 1, X = N + 2;
        E.push(I, P, P, X, X, I);
      }
    } else
      return;
    const R = new (WA(E) ? eM : $E)(E, 1);
    R.version = C;
    const M = u.get(S);
    M && e.remove(M), u.set(S, R);
  }
  function _(S) {
    const E = u.get(S);
    if (E) {
      const x = S.index;
      x !== null && E.version < x.version && v(S);
    } else
      v(S);
    return u.get(S);
  }
  return {
    get: h,
    update: p,
    getWireframeAttribute: _
  };
}
function RO(r, e, t) {
  let i;
  function s(E) {
    i = E;
  }
  let u, f;
  function h(E) {
    u = E.type, f = E.bytesPerElement;
  }
  function p(E, x) {
    r.drawElements(i, x, u, E * f), t.update(x, i, 1);
  }
  function v(E, x, A) {
    A !== 0 && (r.drawElementsInstanced(i, x, u, E * f, A), t.update(x, i, A));
  }
  function _(E, x, A) {
    if (A === 0) return;
    e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i, x, 0, u, E, 0, A);
    let R = 0;
    for (let M = 0; M < A; M++)
      R += x[M];
    t.update(R, i, 1);
  }
  function S(E, x, A, C) {
    if (A === 0) return;
    const R = e.get("WEBGL_multi_draw");
    if (R === null)
      for (let M = 0; M < E.length; M++)
        v(E[M] / f, x[M], C[M]);
    else {
      R.multiDrawElementsInstancedWEBGL(i, x, 0, u, E, 0, C, 0, A);
      let M = 0;
      for (let w = 0; w < A; w++)
        M += x[w] * C[w];
      t.update(M, i, 1);
    }
  }
  this.setMode = s, this.setIndex = h, this.render = p, this.renderInstances = v, this.renderMultiDraw = _, this.renderMultiDrawInstances = S;
}
function CO(r) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function i(u, f, h) {
    switch (t.calls++, f) {
      case r.TRIANGLES:
        t.triangles += h * (u / 3);
        break;
      case r.LINES:
        t.lines += h * (u / 2);
        break;
      case r.LINE_STRIP:
        t.lines += h * (u - 1);
        break;
      case r.LINE_LOOP:
        t.lines += h * u;
        break;
      case r.POINTS:
        t.points += h * u;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", f);
        break;
    }
  }
  function s() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: s,
    update: i
  };
}
function DO(r, e, t) {
  const i = /* @__PURE__ */ new WeakMap(), s = new Un();
  function u(f, h, p) {
    const v = f.morphTargetInfluences, _ = h.morphAttributes.position || h.morphAttributes.normal || h.morphAttributes.color, S = _ !== void 0 ? _.length : 0;
    let E = i.get(h);
    if (E === void 0 || E.count !== S) {
      let z = function() {
        X.dispose(), i.delete(h), h.removeEventListener("dispose", z);
      };
      E !== void 0 && E.texture.dispose();
      const x = h.morphAttributes.position !== void 0, A = h.morphAttributes.normal !== void 0, C = h.morphAttributes.color !== void 0, R = h.morphAttributes.position || [], M = h.morphAttributes.normal || [], w = h.morphAttributes.color || [];
      let N = 0;
      x === !0 && (N = 1), A === !0 && (N = 2), C === !0 && (N = 3);
      let U = h.attributes.position.count * N, I = 1;
      U > e.maxTextureSize && (I = Math.ceil(U / e.maxTextureSize), U = e.maxTextureSize);
      const P = new Float32Array(U * I * 4 * S), X = new B_(P, U, I, S);
      X.type = Ds, X.needsUpdate = !0;
      const Y = N * 4;
      for (let L = 0; L < S; L++) {
        const W = R[L], me = M[L], Q = w[L], oe = U * I * 4 * L;
        for (let Se = 0; Se < W.count; Se++) {
          const B = Se * Y;
          x === !0 && (s.fromBufferAttribute(W, Se), P[oe + B + 0] = s.x, P[oe + B + 1] = s.y, P[oe + B + 2] = s.z, P[oe + B + 3] = 0), A === !0 && (s.fromBufferAttribute(me, Se), P[oe + B + 4] = s.x, P[oe + B + 5] = s.y, P[oe + B + 6] = s.z, P[oe + B + 7] = 0), C === !0 && (s.fromBufferAttribute(Q, Se), P[oe + B + 8] = s.x, P[oe + B + 9] = s.y, P[oe + B + 10] = s.z, P[oe + B + 11] = Q.itemSize === 4 ? s.w : 1);
        }
      }
      E = {
        count: S,
        texture: X,
        size: new ze(U, I)
      }, i.set(h, E), h.addEventListener("dispose", z);
    }
    if (f.isInstancedMesh === !0 && f.morphTexture !== null)
      p.getUniforms().setValue(r, "morphTexture", f.morphTexture, t);
    else {
      let x = 0;
      for (let C = 0; C < v.length; C++)
        x += v[C];
      const A = h.morphTargetsRelative ? 1 : 1 - x;
      p.getUniforms().setValue(r, "morphTargetBaseInfluence", A), p.getUniforms().setValue(r, "morphTargetInfluences", v);
    }
    p.getUniforms().setValue(r, "morphTargetsTexture", E.texture, t), p.getUniforms().setValue(r, "morphTargetsTextureSize", E.size);
  }
  return {
    update: u
  };
}
function wO(r, e, t, i) {
  let s = /* @__PURE__ */ new WeakMap();
  function u(p) {
    const v = i.render.frame, _ = p.geometry, S = e.get(p, _);
    if (s.get(S) !== v && (e.update(S), s.set(S, v)), p.isInstancedMesh && (p.hasEventListener("dispose", h) === !1 && p.addEventListener("dispose", h), s.get(p) !== v && (t.update(p.instanceMatrix, r.ARRAY_BUFFER), p.instanceColor !== null && t.update(p.instanceColor, r.ARRAY_BUFFER), s.set(p, v))), p.isSkinnedMesh) {
      const E = p.skeleton;
      s.get(E) !== v && (E.update(), s.set(E, v));
    }
    return S;
  }
  function f() {
    s = /* @__PURE__ */ new WeakMap();
  }
  function h(p) {
    const v = p.target;
    v.removeEventListener("dispose", h), t.remove(v.instanceMatrix), v.instanceColor !== null && t.remove(v.instanceColor);
  }
  return {
    update: u,
    dispose: f
  };
}
const JR = /* @__PURE__ */ new Ai(), cT = /* @__PURE__ */ new sM(1, 1), $R = /* @__PURE__ */ new B_(), e2 = /* @__PURE__ */ new P_(), t2 = /* @__PURE__ */ new ag(), fT = [], hT = [], dT = new Float32Array(16), pT = new Float32Array(9), mT = new Float32Array(4);
function mp(r, e, t) {
  const i = r[0];
  if (i <= 0 || i > 0) return r;
  const s = e * t;
  let u = fT[s];
  if (u === void 0 && (u = new Float32Array(s), fT[s] = u), e !== 0) {
    i.toArray(u, 0);
    for (let f = 1, h = 0; f !== e; ++f)
      h += t, r[f].toArray(u, h);
  }
  return u;
}
function ia(r, e) {
  if (r.length !== e.length) return !1;
  for (let t = 0, i = r.length; t < i; t++)
    if (r[t] !== e[t]) return !1;
  return !0;
}
function aa(r, e) {
  for (let t = 0, i = e.length; t < i; t++)
    r[t] = e[t];
}
function sS(r, e) {
  let t = hT[e];
  t === void 0 && (t = new Int32Array(e), hT[e] = t);
  for (let i = 0; i !== e; ++i)
    t[i] = r.allocateTextureUnit();
  return t;
}
function UO(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1f(this.addr, e), t[0] = e);
}
function NO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (ia(t, e)) return;
    r.uniform2fv(this.addr, e), aa(t, e);
  }
}
function OO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (r.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (ia(t, e)) return;
    r.uniform3fv(this.addr, e), aa(t, e);
  }
}
function LO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (ia(t, e)) return;
    r.uniform4fv(this.addr, e), aa(t, e);
  }
}
function zO(r, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (ia(t, e)) return;
    r.uniformMatrix2fv(this.addr, !1, e), aa(t, e);
  } else {
    if (ia(t, i)) return;
    mT.set(i), r.uniformMatrix2fv(this.addr, !1, mT), aa(t, i);
  }
}
function BO(r, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (ia(t, e)) return;
    r.uniformMatrix3fv(this.addr, !1, e), aa(t, e);
  } else {
    if (ia(t, i)) return;
    pT.set(i), r.uniformMatrix3fv(this.addr, !1, pT), aa(t, i);
  }
}
function PO(r, e) {
  const t = this.cache, i = e.elements;
  if (i === void 0) {
    if (ia(t, e)) return;
    r.uniformMatrix4fv(this.addr, !1, e), aa(t, e);
  } else {
    if (ia(t, i)) return;
    dT.set(i), r.uniformMatrix4fv(this.addr, !1, dT), aa(t, i);
  }
}
function HO(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1i(this.addr, e), t[0] = e);
}
function IO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (ia(t, e)) return;
    r.uniform2iv(this.addr, e), aa(t, e);
  }
}
function VO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (ia(t, e)) return;
    r.uniform3iv(this.addr, e), aa(t, e);
  }
}
function FO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (ia(t, e)) return;
    r.uniform4iv(this.addr, e), aa(t, e);
  }
}
function GO(r, e) {
  const t = this.cache;
  t[0] !== e && (r.uniform1ui(this.addr, e), t[0] = e);
}
function XO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (r.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (ia(t, e)) return;
    r.uniform2uiv(this.addr, e), aa(t, e);
  }
}
function qO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (r.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (ia(t, e)) return;
    r.uniform3uiv(this.addr, e), aa(t, e);
  }
}
function YO(r, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (r.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (ia(t, e)) return;
    r.uniform4uiv(this.addr, e), aa(t, e);
  }
}
function WO(r, e, t) {
  const i = this.cache, s = t.allocateTextureUnit();
  i[0] !== s && (r.uniform1i(this.addr, s), i[0] = s);
  let u;
  this.type === r.SAMPLER_2D_SHADOW ? (cT.compareFunction = QE, u = cT) : u = JR, t.setTexture2D(e || u, s);
}
function jO(r, e, t) {
  const i = this.cache, s = t.allocateTextureUnit();
  i[0] !== s && (r.uniform1i(this.addr, s), i[0] = s), t.setTexture3D(e || e2, s);
}
function ZO(r, e, t) {
  const i = this.cache, s = t.allocateTextureUnit();
  i[0] !== s && (r.uniform1i(this.addr, s), i[0] = s), t.setTextureCube(e || t2, s);
}
function KO(r, e, t) {
  const i = this.cache, s = t.allocateTextureUnit();
  i[0] !== s && (r.uniform1i(this.addr, s), i[0] = s), t.setTexture2DArray(e || $R, s);
}
function QO(r) {
  switch (r) {
    case 5126:
      return UO;
    // FLOAT
    case 35664:
      return NO;
    // _VEC2
    case 35665:
      return OO;
    // _VEC3
    case 35666:
      return LO;
    // _VEC4
    case 35674:
      return zO;
    // _MAT2
    case 35675:
      return BO;
    // _MAT3
    case 35676:
      return PO;
    // _MAT4
    case 5124:
    case 35670:
      return HO;
    // INT, BOOL
    case 35667:
    case 35671:
      return IO;
    // _VEC2
    case 35668:
    case 35672:
      return VO;
    // _VEC3
    case 35669:
    case 35673:
      return FO;
    // _VEC4
    case 5125:
      return GO;
    // UINT
    case 36294:
      return XO;
    // _VEC2
    case 36295:
      return qO;
    // _VEC3
    case 36296:
      return YO;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return WO;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return jO;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return ZO;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return KO;
  }
}
function kO(r, e) {
  r.uniform1fv(this.addr, e);
}
function JO(r, e) {
  const t = mp(e, this.size, 2);
  r.uniform2fv(this.addr, t);
}
function $O(r, e) {
  const t = mp(e, this.size, 3);
  r.uniform3fv(this.addr, t);
}
function eL(r, e) {
  const t = mp(e, this.size, 4);
  r.uniform4fv(this.addr, t);
}
function tL(r, e) {
  const t = mp(e, this.size, 4);
  r.uniformMatrix2fv(this.addr, !1, t);
}
function nL(r, e) {
  const t = mp(e, this.size, 9);
  r.uniformMatrix3fv(this.addr, !1, t);
}
function iL(r, e) {
  const t = mp(e, this.size, 16);
  r.uniformMatrix4fv(this.addr, !1, t);
}
function aL(r, e) {
  r.uniform1iv(this.addr, e);
}
function sL(r, e) {
  r.uniform2iv(this.addr, e);
}
function rL(r, e) {
  r.uniform3iv(this.addr, e);
}
function oL(r, e) {
  r.uniform4iv(this.addr, e);
}
function lL(r, e) {
  r.uniform1uiv(this.addr, e);
}
function uL(r, e) {
  r.uniform2uiv(this.addr, e);
}
function cL(r, e) {
  r.uniform3uiv(this.addr, e);
}
function fL(r, e) {
  r.uniform4uiv(this.addr, e);
}
function hL(r, e, t) {
  const i = this.cache, s = e.length, u = sS(t, s);
  ia(i, u) || (r.uniform1iv(this.addr, u), aa(i, u));
  for (let f = 0; f !== s; ++f)
    t.setTexture2D(e[f] || JR, u[f]);
}
function dL(r, e, t) {
  const i = this.cache, s = e.length, u = sS(t, s);
  ia(i, u) || (r.uniform1iv(this.addr, u), aa(i, u));
  for (let f = 0; f !== s; ++f)
    t.setTexture3D(e[f] || e2, u[f]);
}
function pL(r, e, t) {
  const i = this.cache, s = e.length, u = sS(t, s);
  ia(i, u) || (r.uniform1iv(this.addr, u), aa(i, u));
  for (let f = 0; f !== s; ++f)
    t.setTextureCube(e[f] || t2, u[f]);
}
function mL(r, e, t) {
  const i = this.cache, s = e.length, u = sS(t, s);
  ia(i, u) || (r.uniform1iv(this.addr, u), aa(i, u));
  for (let f = 0; f !== s; ++f)
    t.setTexture2DArray(e[f] || $R, u[f]);
}
function vL(r) {
  switch (r) {
    case 5126:
      return kO;
    // FLOAT
    case 35664:
      return JO;
    // _VEC2
    case 35665:
      return $O;
    // _VEC3
    case 35666:
      return eL;
    // _VEC4
    case 35674:
      return tL;
    // _MAT2
    case 35675:
      return nL;
    // _MAT3
    case 35676:
      return iL;
    // _MAT4
    case 5124:
    case 35670:
      return aL;
    // INT, BOOL
    case 35667:
    case 35671:
      return sL;
    // _VEC2
    case 35668:
    case 35672:
      return rL;
    // _VEC3
    case 35669:
    case 35673:
      return oL;
    // _VEC4
    case 5125:
      return lL;
    // UINT
    case 36294:
      return uL;
    // _VEC2
    case 36295:
      return cL;
    // _VEC3
    case 36296:
      return fL;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return hL;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return dL;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return pL;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return mL;
  }
}
class gL {
  constructor(e, t, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.setValue = QO(t.type);
  }
}
class yL {
  constructor(e, t, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = vL(t.type);
  }
}
class _L {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, i) {
    const s = this.seq;
    for (let u = 0, f = s.length; u !== f; ++u) {
      const h = s[u];
      h.setValue(e, t[h.id], i);
    }
  }
}
const Qx = /(\w+)(\])?(\[|\.)?/g;
function vT(r, e) {
  r.seq.push(e), r.map[e.id] = e;
}
function SL(r, e, t) {
  const i = r.name, s = i.length;
  for (Qx.lastIndex = 0; ; ) {
    const u = Qx.exec(i), f = Qx.lastIndex;
    let h = u[1];
    const p = u[2] === "]", v = u[3];
    if (p && (h = h | 0), v === void 0 || v === "[" && f + 2 === s) {
      vT(t, v === void 0 ? new gL(h, r, e) : new yL(h, r, e));
      break;
    } else {
      let S = t.map[h];
      S === void 0 && (S = new _L(h), vT(t, S)), t = S;
    }
  }
}
class L0 {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const i = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let s = 0; s < i; ++s) {
      const u = e.getActiveUniform(t, s), f = e.getUniformLocation(t, u.name);
      SL(u, f, this);
    }
  }
  setValue(e, t, i, s) {
    const u = this.map[t];
    u !== void 0 && u.setValue(e, i, s);
  }
  setOptional(e, t, i) {
    const s = t[i];
    s !== void 0 && this.setValue(e, i, s);
  }
  static upload(e, t, i, s) {
    for (let u = 0, f = t.length; u !== f; ++u) {
      const h = t[u], p = i[h.id];
      p.needsUpdate !== !1 && h.setValue(e, p.value, s);
    }
  }
  static seqWithValue(e, t) {
    const i = [];
    for (let s = 0, u = e.length; s !== u; ++s) {
      const f = e[s];
      f.id in t && i.push(f);
    }
    return i;
  }
}
function gT(r, e, t) {
  const i = r.createShader(e);
  return r.shaderSource(i, t), r.compileShader(i), i;
}
const xL = 37297;
let EL = 0;
function ML(r, e) {
  const t = r.split(`
`), i = [], s = Math.max(e - 6, 0), u = Math.min(e + 6, t.length);
  for (let f = s; f < u; f++) {
    const h = f + 1;
    i.push(`${h === e ? ">" : " "} ${h}: ${t[f]}`);
  }
  return i.join(`
`);
}
const yT = /* @__PURE__ */ new en();
function bL(r) {
  An._getMatrix(yT, An.workingColorSpace, r);
  const e = `mat3( ${yT.elements.map((t) => t.toFixed(4))} )`;
  switch (An.getTransfer(r)) {
    case Yv:
      return [e, "LinearTransferOETF"];
    case Fn:
      return [e, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space: ", r), [e, "LinearTransferOETF"];
  }
}
function _T(r, e, t) {
  const i = r.getShaderParameter(e, r.COMPILE_STATUS), u = (r.getShaderInfoLog(e) || "").trim();
  if (i && u === "") return "";
  const f = /ERROR: 0:(\d+)/.exec(u);
  if (f) {
    const h = parseInt(f[1]);
    return t.toUpperCase() + `

` + u + `

` + ML(r.getShaderSource(e), h);
  } else
    return u;
}
function TL(r, e) {
  const t = bL(e);
  return [
    `vec4 ${r}( vec4 value ) {`,
    `	return ${t[1]}( vec4( value.rgb * ${t[0]}, value.a ) );`,
    "}"
  ].join(`
`);
}
function AL(r, e) {
  let t;
  switch (e) {
    case AA:
      t = "Linear";
      break;
    case RA:
      t = "Reinhard";
      break;
    case CA:
      t = "Cineon";
      break;
    case VE:
      t = "ACESFilmic";
      break;
    case wA:
      t = "AgX";
      break;
    case UA:
      t = "Neutral";
      break;
    case DA:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + r + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
const E0 = /* @__PURE__ */ new j();
function RL() {
  An.getLuminanceCoefficients(E0);
  const r = E0.x.toFixed(4), e = E0.y.toFixed(4), t = E0.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r}, ${e}, ${t} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join(`
`);
}
function CL(r) {
  return [
    r.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    r.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(Av).join(`
`);
}
function DL(r) {
  const e = [];
  for (const t in r) {
    const i = r[t];
    i !== !1 && e.push("#define " + t + " " + i);
  }
  return e.join(`
`);
}
function wL(r, e) {
  const t = {}, i = r.getProgramParameter(e, r.ACTIVE_ATTRIBUTES);
  for (let s = 0; s < i; s++) {
    const u = r.getActiveAttrib(e, s), f = u.name;
    let h = 1;
    u.type === r.FLOAT_MAT2 && (h = 2), u.type === r.FLOAT_MAT3 && (h = 3), u.type === r.FLOAT_MAT4 && (h = 4), t[f] = {
      type: u.type,
      location: r.getAttribLocation(e, f),
      locationSize: h
    };
  }
  return t;
}
function Av(r) {
  return r !== "";
}
function ST(r, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return r.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function xT(r, e) {
  return r.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const UL = /^[ \t]*#include +<([\w\d./]+)>/gm;
function NE(r) {
  return r.replace(UL, OL);
}
const NL = /* @__PURE__ */ new Map();
function OL(r, e) {
  let t = cn[e];
  if (t === void 0) {
    const i = NL.get(e);
    if (i !== void 0)
      t = cn[i], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, i);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return NE(t);
}
const LL = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function ET(r) {
  return r.replace(LL, zL);
}
function zL(r, e, t, i) {
  let s = "";
  for (let u = parseInt(e); u < parseInt(t); u++)
    s += i.replace(/\[\s*i\s*\]/g, "[ " + u + " ]").replace(/UNROLLED_LOOP_INDEX/g, u);
  return s;
}
function MT(r) {
  let e = `precision ${r.precision} float;
	precision ${r.precision} int;
	precision ${r.precision} sampler2D;
	precision ${r.precision} samplerCube;
	precision ${r.precision} sampler3D;
	precision ${r.precision} sampler2DArray;
	precision ${r.precision} sampler2DShadow;
	precision ${r.precision} samplerCubeShadow;
	precision ${r.precision} sampler2DArrayShadow;
	precision ${r.precision} isampler2D;
	precision ${r.precision} isampler3D;
	precision ${r.precision} isamplerCube;
	precision ${r.precision} isampler2DArray;
	precision ${r.precision} usampler2D;
	precision ${r.precision} usampler3D;
	precision ${r.precision} usamplerCube;
	precision ${r.precision} usampler2DArray;
	`;
  return r.precision === "highp" ? e += `
#define HIGH_PRECISION` : r.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : r.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function BL(r) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return r.shadowMapType === R_ ? e = "SHADOWMAP_TYPE_PCF" : r.shadowMapType === Cv ? e = "SHADOWMAP_TYPE_PCF_SOFT" : r.shadowMapType === ao && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function PL(r) {
  let e = "ENVMAP_TYPE_CUBE";
  if (r.envMap)
    switch (r.envMapMode) {
      case Fl:
      case Wu:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case fp:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function HL(r) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (r.envMap)
    switch (r.envMapMode) {
      case Wu:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function IL(r) {
  let e = "ENVMAP_BLENDING_NONE";
  if (r.envMap)
    switch (r.combine) {
      case ng:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case bA:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case TA:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function VL(r) {
  const e = r.envMapCubeUVHeight;
  if (e === null) return null;
  const t = Math.log2(e) - 2, i = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 112)), texelHeight: i, maxMip: t };
}
function FL(r, e, t, i) {
  const s = r.getContext(), u = t.defines;
  let f = t.vertexShader, h = t.fragmentShader;
  const p = BL(t), v = PL(t), _ = HL(t), S = IL(t), E = VL(t), x = CL(t), A = DL(u), C = s.createProgram();
  let R, M, w = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (R = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    A
  ].filter(Av).join(`
`), R.length > 0 && (R += `
`), M = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    A
  ].filter(Av).join(`
`), M.length > 0 && (M += `
`)) : (R = [
    MT(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    A,
    t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    t.batching ? "#define USE_BATCHING" : "",
    t.batchingColor ? "#define USE_BATCHING_COLOR" : "",
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + _ : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.reversedDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(Av).join(`
`), M = [
    MT(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    A,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + v : "",
    t.envMap ? "#define " + _ : "",
    t.envMap ? "#define " + S : "",
    E ? "#define CUBEUV_TEXEL_WIDTH " + E.texelWidth : "",
    E ? "#define CUBEUV_TEXEL_HEIGHT " + E.texelHeight : "",
    E ? "#define CUBEUV_MAX_MIP " + E.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.dispersion ? "#define USE_DISPERSION" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor || t.batchingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    t.reversedDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== Yo ? "#define TONE_MAPPING" : "",
    t.toneMapping !== Yo ? cn.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== Yo ? AL("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    cn.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    TL("linearToOutputTexel", t.outputColorSpace),
    RL(),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(Av).join(`
`)), f = NE(f), f = ST(f, t), f = xT(f, t), h = NE(h), h = ST(h, t), h = xT(h, t), f = ET(f), h = ET(h), t.isRawShaderMaterial !== !0 && (w = `#version 300 es
`, R = [
    x,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + R, M = [
    "#define varying in",
    t.glslVersion === EE ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === EE ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + M);
  const N = w + R + f, U = w + M + h, I = gT(s, s.VERTEX_SHADER, N), P = gT(s, s.FRAGMENT_SHADER, U);
  s.attachShader(C, I), s.attachShader(C, P), t.index0AttributeName !== void 0 ? s.bindAttribLocation(C, 0, t.index0AttributeName) : t.morphTargets === !0 && s.bindAttribLocation(C, 0, "position"), s.linkProgram(C);
  function X(W) {
    if (r.debug.checkShaderErrors) {
      const me = s.getProgramInfoLog(C) || "", Q = s.getShaderInfoLog(I) || "", oe = s.getShaderInfoLog(P) || "", Se = me.trim(), B = Q.trim(), K = oe.trim();
      let q = !0, se = !0;
      if (s.getProgramParameter(C, s.LINK_STATUS) === !1)
        if (q = !1, typeof r.debug.onShaderError == "function")
          r.debug.onShaderError(s, C, I, P);
        else {
          const le = _T(s, I, "vertex"), Te = _T(s, P, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + s.getError() + " - VALIDATE_STATUS " + s.getProgramParameter(C, s.VALIDATE_STATUS) + `

Material Name: ` + W.name + `
Material Type: ` + W.type + `

Program Info Log: ` + Se + `
` + le + `
` + Te
          );
        }
      else Se !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", Se) : (B === "" || K === "") && (se = !1);
      se && (W.diagnostics = {
        runnable: q,
        programLog: Se,
        vertexShader: {
          log: B,
          prefix: R
        },
        fragmentShader: {
          log: K,
          prefix: M
        }
      });
    }
    s.deleteShader(I), s.deleteShader(P), Y = new L0(s, C), z = wL(s, C);
  }
  let Y;
  this.getUniforms = function() {
    return Y === void 0 && X(this), Y;
  };
  let z;
  this.getAttributes = function() {
    return z === void 0 && X(this), z;
  };
  let L = t.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return L === !1 && (L = s.getProgramParameter(C, xL)), L;
  }, this.destroy = function() {
    i.releaseStatesOfProgram(this), s.deleteProgram(C), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = EL++, this.cacheKey = e, this.usedTimes = 1, this.program = C, this.vertexShader = I, this.fragmentShader = P, this;
}
let GL = 0;
class XL {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, i = e.fragmentShader, s = this._getShaderStage(t), u = this._getShaderStage(i), f = this._getShaderCacheForMaterial(e);
    return f.has(s) === !1 && (f.add(s), s.usedTimes++), f.has(u) === !1 && (f.add(u), u.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const i of t)
      i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let i = t.get(e);
    return i === void 0 && (i = /* @__PURE__ */ new Set(), t.set(e, i)), i;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let i = t.get(e);
    return i === void 0 && (i = new qL(e), t.set(e, i)), i;
  }
}
class qL {
  constructor(e) {
    this.id = GL++, this.code = e, this.usedTimes = 0;
  }
}
function YL(r, e, t, i, s, u, f) {
  const h = new rp(), p = new XL(), v = /* @__PURE__ */ new Set(), _ = [], S = s.logarithmicDepthBuffer, E = s.vertexTextures;
  let x = s.precision;
  const A = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function C(z) {
    return v.add(z), z === 0 ? "uv" : `uv${z}`;
  }
  function R(z, L, W, me, Q) {
    const oe = me.fog, Se = Q.geometry, B = z.isMeshStandardMaterial ? me.environment : null, K = (z.isMeshStandardMaterial ? t : e).get(z.envMap || B), q = K && K.mapping === fp ? K.image.height : null, se = A[z.type];
    z.precision !== null && (x = s.getMaxPrecision(z.precision), x !== z.precision && console.warn("THREE.WebGLProgram.getParameters:", z.precision, "not supported, using", x, "instead."));
    const le = Se.morphAttributes.position || Se.morphAttributes.normal || Se.morphAttributes.color, Te = le !== void 0 ? le.length : 0;
    let we = 0;
    Se.morphAttributes.position !== void 0 && (we = 1), Se.morphAttributes.normal !== void 0 && (we = 2), Se.morphAttributes.color !== void 0 && (we = 3);
    let gt, $e, _e, Je;
    if (se) {
      const Ft = so[se];
      gt = Ft.vertexShader, $e = Ft.fragmentShader;
    } else
      gt = z.vertexShader, $e = z.fragmentShader, p.update(z), _e = p.getVertexShaderID(z), Je = p.getFragmentShaderID(z);
    const We = r.getRenderTarget(), Mt = r.state.buffers.depth.getReversed(), yt = Q.isInstancedMesh === !0, Ct = Q.isBatchedMesh === !0, _n = !!z.map, Dt = !!z.matcap, ee = !!K, Be = !!z.aoMap, Ce = !!z.lightMap, Ie = !!z.bumpMap, De = !!z.normalMap, et = !!z.displacementMap, Ve = !!z.emissiveMap, Qe = !!z.metalnessMap, ut = !!z.roughnessMap, Bt = z.anisotropy > 0, Z = z.clearcoat > 0, H = z.dispersion > 0, he = z.iridescence > 0, be = z.sheen > 0, He = z.transmission > 0, Re = Bt && !!z.anisotropyMap, bt = Z && !!z.clearcoatMap, Xe = Z && !!z.clearcoatNormalMap, ct = Z && !!z.clearcoatRoughnessMap, _t = he && !!z.iridescenceMap, Ge = he && !!z.iridescenceThicknessMap, it = be && !!z.sheenColorMap, Tt = be && !!z.sheenRoughnessMap, k = !!z.specularMap, ye = !!z.specularColorMap, qe = !!z.specularIntensityMap, J = He && !!z.transmissionMap, Oe = He && !!z.thicknessMap, Ye = !!z.gradientMap, lt = !!z.alphaMap, Pe = z.alphaTest > 0, Ue = !!z.alphaHash, rt = !!z.extensions;
    let Rt = Yo;
    z.toneMapped && (We === null || We.isXRRenderTarget === !0) && (Rt = r.toneMapping);
    const Yt = {
      shaderID: se,
      shaderType: z.type,
      shaderName: z.name,
      vertexShader: gt,
      fragmentShader: $e,
      defines: z.defines,
      customVertexShaderID: _e,
      customFragmentShaderID: Je,
      isRawShaderMaterial: z.isRawShaderMaterial === !0,
      glslVersion: z.glslVersion,
      precision: x,
      batching: Ct,
      batchingColor: Ct && Q._colorsTexture !== null,
      instancing: yt,
      instancingColor: yt && Q.instanceColor !== null,
      instancingMorph: yt && Q.morphTexture !== null,
      supportsVertexTextures: E,
      outputColorSpace: We === null ? r.outputColorSpace : We.isXRRenderTarget === !0 ? We.texture.colorSpace : ju,
      alphaToCoverage: !!z.alphaToCoverage,
      map: _n,
      matcap: Dt,
      envMap: ee,
      envMapMode: ee && K.mapping,
      envMapCubeUVHeight: q,
      aoMap: Be,
      lightMap: Ce,
      bumpMap: Ie,
      normalMap: De,
      displacementMap: E && et,
      emissiveMap: Ve,
      normalMapObjectSpace: De && z.normalMapType === HA,
      normalMapTangentSpace: De && z.normalMapType === Ku,
      metalnessMap: Qe,
      roughnessMap: ut,
      anisotropy: Bt,
      anisotropyMap: Re,
      clearcoat: Z,
      clearcoatMap: bt,
      clearcoatNormalMap: Xe,
      clearcoatRoughnessMap: ct,
      dispersion: H,
      iridescence: he,
      iridescenceMap: _t,
      iridescenceThicknessMap: Ge,
      sheen: be,
      sheenColorMap: it,
      sheenRoughnessMap: Tt,
      specularMap: k,
      specularColorMap: ye,
      specularIntensityMap: qe,
      transmission: He,
      transmissionMap: J,
      thicknessMap: Oe,
      gradientMap: Ye,
      opaque: z.transparent === !1 && z.blending === Sf && z.alphaToCoverage === !1,
      alphaMap: lt,
      alphaTest: Pe,
      alphaHash: Ue,
      combine: z.combine,
      //
      mapUv: _n && C(z.map.channel),
      aoMapUv: Be && C(z.aoMap.channel),
      lightMapUv: Ce && C(z.lightMap.channel),
      bumpMapUv: Ie && C(z.bumpMap.channel),
      normalMapUv: De && C(z.normalMap.channel),
      displacementMapUv: et && C(z.displacementMap.channel),
      emissiveMapUv: Ve && C(z.emissiveMap.channel),
      metalnessMapUv: Qe && C(z.metalnessMap.channel),
      roughnessMapUv: ut && C(z.roughnessMap.channel),
      anisotropyMapUv: Re && C(z.anisotropyMap.channel),
      clearcoatMapUv: bt && C(z.clearcoatMap.channel),
      clearcoatNormalMapUv: Xe && C(z.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: ct && C(z.clearcoatRoughnessMap.channel),
      iridescenceMapUv: _t && C(z.iridescenceMap.channel),
      iridescenceThicknessMapUv: Ge && C(z.iridescenceThicknessMap.channel),
      sheenColorMapUv: it && C(z.sheenColorMap.channel),
      sheenRoughnessMapUv: Tt && C(z.sheenRoughnessMap.channel),
      specularMapUv: k && C(z.specularMap.channel),
      specularColorMapUv: ye && C(z.specularColorMap.channel),
      specularIntensityMapUv: qe && C(z.specularIntensityMap.channel),
      transmissionMapUv: J && C(z.transmissionMap.channel),
      thicknessMapUv: Oe && C(z.thicknessMap.channel),
      alphaMapUv: lt && C(z.alphaMap.channel),
      //
      vertexTangents: !!Se.attributes.tangent && (De || Bt),
      vertexColors: z.vertexColors,
      vertexAlphas: z.vertexColors === !0 && !!Se.attributes.color && Se.attributes.color.itemSize === 4,
      pointsUvs: Q.isPoints === !0 && !!Se.attributes.uv && (_n || lt),
      fog: !!oe,
      useFog: z.fog === !0,
      fogExp2: !!oe && oe.isFogExp2,
      flatShading: z.flatShading === !0 && z.wireframe === !1,
      sizeAttenuation: z.sizeAttenuation === !0,
      logarithmicDepthBuffer: S,
      reversedDepthBuffer: Mt,
      skinning: Q.isSkinnedMesh === !0,
      morphTargets: Se.morphAttributes.position !== void 0,
      morphNormals: Se.morphAttributes.normal !== void 0,
      morphColors: Se.morphAttributes.color !== void 0,
      morphTargetsCount: Te,
      morphTextureStride: we,
      numDirLights: L.directional.length,
      numPointLights: L.point.length,
      numSpotLights: L.spot.length,
      numSpotLightMaps: L.spotLightMap.length,
      numRectAreaLights: L.rectArea.length,
      numHemiLights: L.hemi.length,
      numDirLightShadows: L.directionalShadowMap.length,
      numPointLightShadows: L.pointShadowMap.length,
      numSpotLightShadows: L.spotShadowMap.length,
      numSpotLightShadowsWithMaps: L.numSpotLightShadowsWithMaps,
      numLightProbes: L.numLightProbes,
      numClippingPlanes: f.numPlanes,
      numClipIntersection: f.numIntersection,
      dithering: z.dithering,
      shadowMapEnabled: r.shadowMap.enabled && W.length > 0,
      shadowMapType: r.shadowMap.type,
      toneMapping: Rt,
      decodeVideoTexture: _n && z.map.isVideoTexture === !0 && An.getTransfer(z.map.colorSpace) === Fn,
      decodeVideoTextureEmissive: Ve && z.emissiveMap.isVideoTexture === !0 && An.getTransfer(z.emissiveMap.colorSpace) === Fn,
      premultipliedAlpha: z.premultipliedAlpha,
      doubleSided: z.side === Go,
      flipSided: z.side === cs,
      useDepthPacking: z.depthPacking >= 0,
      depthPacking: z.depthPacking || 0,
      index0AttributeName: z.index0AttributeName,
      extensionClipCullDistance: rt && z.extensions.clipCullDistance === !0 && i.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (rt && z.extensions.multiDraw === !0 || Ct) && i.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: i.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: z.customProgramCacheKey()
    };
    return Yt.vertexUv1s = v.has(1), Yt.vertexUv2s = v.has(2), Yt.vertexUv3s = v.has(3), v.clear(), Yt;
  }
  function M(z) {
    const L = [];
    if (z.shaderID ? L.push(z.shaderID) : (L.push(z.customVertexShaderID), L.push(z.customFragmentShaderID)), z.defines !== void 0)
      for (const W in z.defines)
        L.push(W), L.push(z.defines[W]);
    return z.isRawShaderMaterial === !1 && (w(L, z), N(L, z), L.push(r.outputColorSpace)), L.push(z.customProgramCacheKey), L.join();
  }
  function w(z, L) {
    z.push(L.precision), z.push(L.outputColorSpace), z.push(L.envMapMode), z.push(L.envMapCubeUVHeight), z.push(L.mapUv), z.push(L.alphaMapUv), z.push(L.lightMapUv), z.push(L.aoMapUv), z.push(L.bumpMapUv), z.push(L.normalMapUv), z.push(L.displacementMapUv), z.push(L.emissiveMapUv), z.push(L.metalnessMapUv), z.push(L.roughnessMapUv), z.push(L.anisotropyMapUv), z.push(L.clearcoatMapUv), z.push(L.clearcoatNormalMapUv), z.push(L.clearcoatRoughnessMapUv), z.push(L.iridescenceMapUv), z.push(L.iridescenceThicknessMapUv), z.push(L.sheenColorMapUv), z.push(L.sheenRoughnessMapUv), z.push(L.specularMapUv), z.push(L.specularColorMapUv), z.push(L.specularIntensityMapUv), z.push(L.transmissionMapUv), z.push(L.thicknessMapUv), z.push(L.combine), z.push(L.fogExp2), z.push(L.sizeAttenuation), z.push(L.morphTargetsCount), z.push(L.morphAttributeCount), z.push(L.numDirLights), z.push(L.numPointLights), z.push(L.numSpotLights), z.push(L.numSpotLightMaps), z.push(L.numHemiLights), z.push(L.numRectAreaLights), z.push(L.numDirLightShadows), z.push(L.numPointLightShadows), z.push(L.numSpotLightShadows), z.push(L.numSpotLightShadowsWithMaps), z.push(L.numLightProbes), z.push(L.shadowMapType), z.push(L.toneMapping), z.push(L.numClippingPlanes), z.push(L.numClipIntersection), z.push(L.depthPacking);
  }
  function N(z, L) {
    h.disableAll(), L.supportsVertexTextures && h.enable(0), L.instancing && h.enable(1), L.instancingColor && h.enable(2), L.instancingMorph && h.enable(3), L.matcap && h.enable(4), L.envMap && h.enable(5), L.normalMapObjectSpace && h.enable(6), L.normalMapTangentSpace && h.enable(7), L.clearcoat && h.enable(8), L.iridescence && h.enable(9), L.alphaTest && h.enable(10), L.vertexColors && h.enable(11), L.vertexAlphas && h.enable(12), L.vertexUv1s && h.enable(13), L.vertexUv2s && h.enable(14), L.vertexUv3s && h.enable(15), L.vertexTangents && h.enable(16), L.anisotropy && h.enable(17), L.alphaHash && h.enable(18), L.batching && h.enable(19), L.dispersion && h.enable(20), L.batchingColor && h.enable(21), L.gradientMap && h.enable(22), z.push(h.mask), h.disableAll(), L.fog && h.enable(0), L.useFog && h.enable(1), L.flatShading && h.enable(2), L.logarithmicDepthBuffer && h.enable(3), L.reversedDepthBuffer && h.enable(4), L.skinning && h.enable(5), L.morphTargets && h.enable(6), L.morphNormals && h.enable(7), L.morphColors && h.enable(8), L.premultipliedAlpha && h.enable(9), L.shadowMapEnabled && h.enable(10), L.doubleSided && h.enable(11), L.flipSided && h.enable(12), L.useDepthPacking && h.enable(13), L.dithering && h.enable(14), L.transmission && h.enable(15), L.sheen && h.enable(16), L.opaque && h.enable(17), L.pointsUvs && h.enable(18), L.decodeVideoTexture && h.enable(19), L.decodeVideoTextureEmissive && h.enable(20), L.alphaToCoverage && h.enable(21), z.push(h.mask);
  }
  function U(z) {
    const L = A[z.type];
    let W;
    if (L) {
      const me = so[L];
      W = kA.clone(me.uniforms);
    } else
      W = z.uniforms;
    return W;
  }
  function I(z, L) {
    let W;
    for (let me = 0, Q = _.length; me < Q; me++) {
      const oe = _[me];
      if (oe.cacheKey === L) {
        W = oe, ++W.usedTimes;
        break;
      }
    }
    return W === void 0 && (W = new FL(r, L, z, u), _.push(W)), W;
  }
  function P(z) {
    if (--z.usedTimes === 0) {
      const L = _.indexOf(z);
      _[L] = _[_.length - 1], _.pop(), z.destroy();
    }
  }
  function X(z) {
    p.remove(z);
  }
  function Y() {
    p.dispose();
  }
  return {
    getParameters: R,
    getProgramCacheKey: M,
    getUniforms: U,
    acquireProgram: I,
    releaseProgram: P,
    releaseShaderCache: X,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: _,
    dispose: Y
  };
}
function WL() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(f) {
    return r.has(f);
  }
  function t(f) {
    let h = r.get(f);
    return h === void 0 && (h = {}, r.set(f, h)), h;
  }
  function i(f) {
    r.delete(f);
  }
  function s(f, h, p) {
    r.get(f)[h] = p;
  }
  function u() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    has: e,
    get: t,
    remove: i,
    update: s,
    dispose: u
  };
}
function jL(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.material.id !== e.material.id ? r.material.id - e.material.id : r.z !== e.z ? r.z - e.z : r.id - e.id;
}
function bT(r, e) {
  return r.groupOrder !== e.groupOrder ? r.groupOrder - e.groupOrder : r.renderOrder !== e.renderOrder ? r.renderOrder - e.renderOrder : r.z !== e.z ? e.z - r.z : r.id - e.id;
}
function TT() {
  const r = [];
  let e = 0;
  const t = [], i = [], s = [];
  function u() {
    e = 0, t.length = 0, i.length = 0, s.length = 0;
  }
  function f(S, E, x, A, C, R) {
    let M = r[e];
    return M === void 0 ? (M = {
      id: S.id,
      object: S,
      geometry: E,
      material: x,
      groupOrder: A,
      renderOrder: S.renderOrder,
      z: C,
      group: R
    }, r[e] = M) : (M.id = S.id, M.object = S, M.geometry = E, M.material = x, M.groupOrder = A, M.renderOrder = S.renderOrder, M.z = C, M.group = R), e++, M;
  }
  function h(S, E, x, A, C, R) {
    const M = f(S, E, x, A, C, R);
    x.transmission > 0 ? i.push(M) : x.transparent === !0 ? s.push(M) : t.push(M);
  }
  function p(S, E, x, A, C, R) {
    const M = f(S, E, x, A, C, R);
    x.transmission > 0 ? i.unshift(M) : x.transparent === !0 ? s.unshift(M) : t.unshift(M);
  }
  function v(S, E) {
    t.length > 1 && t.sort(S || jL), i.length > 1 && i.sort(E || bT), s.length > 1 && s.sort(E || bT);
  }
  function _() {
    for (let S = e, E = r.length; S < E; S++) {
      const x = r[S];
      if (x.id === null) break;
      x.id = null, x.object = null, x.geometry = null, x.material = null, x.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: i,
    transparent: s,
    init: u,
    push: h,
    unshift: p,
    finish: _,
    sort: v
  };
}
function ZL() {
  let r = /* @__PURE__ */ new WeakMap();
  function e(i, s) {
    const u = r.get(i);
    let f;
    return u === void 0 ? (f = new TT(), r.set(i, [f])) : s >= u.length ? (f = new TT(), u.push(f)) : f = u[s], f;
  }
  function t() {
    r = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function KL() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new j(),
            color: new Et()
          };
          break;
        case "SpotLight":
          t = {
            position: new j(),
            direction: new j(),
            color: new Et(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new j(),
            color: new Et(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new j(),
            skyColor: new Et(),
            groundColor: new Et()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new Et(),
            position: new j(),
            halfWidth: new j(),
            halfHeight: new j()
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
function QL() {
  const r = {};
  return {
    get: function(e) {
      if (r[e.id] !== void 0)
        return r[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ze()
          };
          break;
        case "SpotLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ze()
          };
          break;
        case "PointLight":
          t = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new ze(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return r[e.id] = t, t;
    }
  };
}
let kL = 0;
function JL(r, e) {
  return (e.castShadow ? 2 : 0) - (r.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (r.map ? 1 : 0);
}
function $L(r) {
  const e = new KL(), t = QL(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let v = 0; v < 9; v++) i.probe.push(new j());
  const s = new j(), u = new qt(), f = new qt();
  function h(v) {
    let _ = 0, S = 0, E = 0;
    for (let z = 0; z < 9; z++) i.probe[z].set(0, 0, 0);
    let x = 0, A = 0, C = 0, R = 0, M = 0, w = 0, N = 0, U = 0, I = 0, P = 0, X = 0;
    v.sort(JL);
    for (let z = 0, L = v.length; z < L; z++) {
      const W = v[z], me = W.color, Q = W.intensity, oe = W.distance, Se = W.shadow && W.shadow.map ? W.shadow.map.texture : null;
      if (W.isAmbientLight)
        _ += me.r * Q, S += me.g * Q, E += me.b * Q;
      else if (W.isLightProbe) {
        for (let B = 0; B < 9; B++)
          i.probe[B].addScaledVector(W.sh.coefficients[B], Q);
        X++;
      } else if (W.isDirectionalLight) {
        const B = e.get(W);
        if (B.color.copy(W.color).multiplyScalar(W.intensity), W.castShadow) {
          const K = W.shadow, q = t.get(W);
          q.shadowIntensity = K.intensity, q.shadowBias = K.bias, q.shadowNormalBias = K.normalBias, q.shadowRadius = K.radius, q.shadowMapSize = K.mapSize, i.directionalShadow[x] = q, i.directionalShadowMap[x] = Se, i.directionalShadowMatrix[x] = W.shadow.matrix, w++;
        }
        i.directional[x] = B, x++;
      } else if (W.isSpotLight) {
        const B = e.get(W);
        B.position.setFromMatrixPosition(W.matrixWorld), B.color.copy(me).multiplyScalar(Q), B.distance = oe, B.coneCos = Math.cos(W.angle), B.penumbraCos = Math.cos(W.angle * (1 - W.penumbra)), B.decay = W.decay, i.spot[C] = B;
        const K = W.shadow;
        if (W.map && (i.spotLightMap[I] = W.map, I++, K.updateMatrices(W), W.castShadow && P++), i.spotLightMatrix[C] = K.matrix, W.castShadow) {
          const q = t.get(W);
          q.shadowIntensity = K.intensity, q.shadowBias = K.bias, q.shadowNormalBias = K.normalBias, q.shadowRadius = K.radius, q.shadowMapSize = K.mapSize, i.spotShadow[C] = q, i.spotShadowMap[C] = Se, U++;
        }
        C++;
      } else if (W.isRectAreaLight) {
        const B = e.get(W);
        B.color.copy(me).multiplyScalar(Q), B.halfWidth.set(W.width * 0.5, 0, 0), B.halfHeight.set(0, W.height * 0.5, 0), i.rectArea[R] = B, R++;
      } else if (W.isPointLight) {
        const B = e.get(W);
        if (B.color.copy(W.color).multiplyScalar(W.intensity), B.distance = W.distance, B.decay = W.decay, W.castShadow) {
          const K = W.shadow, q = t.get(W);
          q.shadowIntensity = K.intensity, q.shadowBias = K.bias, q.shadowNormalBias = K.normalBias, q.shadowRadius = K.radius, q.shadowMapSize = K.mapSize, q.shadowCameraNear = K.camera.near, q.shadowCameraFar = K.camera.far, i.pointShadow[A] = q, i.pointShadowMap[A] = Se, i.pointShadowMatrix[A] = W.shadow.matrix, N++;
        }
        i.point[A] = B, A++;
      } else if (W.isHemisphereLight) {
        const B = e.get(W);
        B.skyColor.copy(W.color).multiplyScalar(Q), B.groundColor.copy(W.groundColor).multiplyScalar(Q), i.hemi[M] = B, M++;
      }
    }
    R > 0 && (r.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = ht.LTC_FLOAT_1, i.rectAreaLTC2 = ht.LTC_FLOAT_2) : (i.rectAreaLTC1 = ht.LTC_HALF_1, i.rectAreaLTC2 = ht.LTC_HALF_2)), i.ambient[0] = _, i.ambient[1] = S, i.ambient[2] = E;
    const Y = i.hash;
    (Y.directionalLength !== x || Y.pointLength !== A || Y.spotLength !== C || Y.rectAreaLength !== R || Y.hemiLength !== M || Y.numDirectionalShadows !== w || Y.numPointShadows !== N || Y.numSpotShadows !== U || Y.numSpotMaps !== I || Y.numLightProbes !== X) && (i.directional.length = x, i.spot.length = C, i.rectArea.length = R, i.point.length = A, i.hemi.length = M, i.directionalShadow.length = w, i.directionalShadowMap.length = w, i.pointShadow.length = N, i.pointShadowMap.length = N, i.spotShadow.length = U, i.spotShadowMap.length = U, i.directionalShadowMatrix.length = w, i.pointShadowMatrix.length = N, i.spotLightMatrix.length = U + I - P, i.spotLightMap.length = I, i.numSpotLightShadowsWithMaps = P, i.numLightProbes = X, Y.directionalLength = x, Y.pointLength = A, Y.spotLength = C, Y.rectAreaLength = R, Y.hemiLength = M, Y.numDirectionalShadows = w, Y.numPointShadows = N, Y.numSpotShadows = U, Y.numSpotMaps = I, Y.numLightProbes = X, i.version = kL++);
  }
  function p(v, _) {
    let S = 0, E = 0, x = 0, A = 0, C = 0;
    const R = _.matrixWorldInverse;
    for (let M = 0, w = v.length; M < w; M++) {
      const N = v[M];
      if (N.isDirectionalLight) {
        const U = i.directional[S];
        U.direction.setFromMatrixPosition(N.matrixWorld), s.setFromMatrixPosition(N.target.matrixWorld), U.direction.sub(s), U.direction.transformDirection(R), S++;
      } else if (N.isSpotLight) {
        const U = i.spot[x];
        U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), U.direction.setFromMatrixPosition(N.matrixWorld), s.setFromMatrixPosition(N.target.matrixWorld), U.direction.sub(s), U.direction.transformDirection(R), x++;
      } else if (N.isRectAreaLight) {
        const U = i.rectArea[A];
        U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), f.identity(), u.copy(N.matrixWorld), u.premultiply(R), f.extractRotation(u), U.halfWidth.set(N.width * 0.5, 0, 0), U.halfHeight.set(0, N.height * 0.5, 0), U.halfWidth.applyMatrix4(f), U.halfHeight.applyMatrix4(f), A++;
      } else if (N.isPointLight) {
        const U = i.point[E];
        U.position.setFromMatrixPosition(N.matrixWorld), U.position.applyMatrix4(R), E++;
      } else if (N.isHemisphereLight) {
        const U = i.hemi[C];
        U.direction.setFromMatrixPosition(N.matrixWorld), U.direction.transformDirection(R), C++;
      }
    }
  }
  return {
    setup: h,
    setupView: p,
    state: i
  };
}
function AT(r) {
  const e = new $L(r), t = [], i = [];
  function s(_) {
    v.camera = _, t.length = 0, i.length = 0;
  }
  function u(_) {
    t.push(_);
  }
  function f(_) {
    i.push(_);
  }
  function h() {
    e.setup(t);
  }
  function p(_) {
    e.setupView(t, _);
  }
  const v = {
    lightsArray: t,
    shadowsArray: i,
    camera: null,
    lights: e,
    transmissionRenderTarget: {}
  };
  return {
    init: s,
    state: v,
    setupLights: h,
    setupLightsView: p,
    pushLight: u,
    pushShadow: f
  };
}
function ez(r) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(s, u = 0) {
    const f = e.get(s);
    let h;
    return f === void 0 ? (h = new AT(r), e.set(s, [h])) : u >= f.length ? (h = new AT(r), f.push(h)) : h = f[u], h;
  }
  function i() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: t,
    dispose: i
  };
}
const tz = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, nz = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function iz(r, e, t) {
  let i = new dp();
  const s = new ze(), u = new ze(), f = new Un(), h = new dM({ depthPacking: PA }), p = new pM(), v = {}, _ = t.maxTextureSize, S = { [Vl]: cs, [cs]: Vl, [Go]: Go }, E = new oo({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new ze() },
      radius: { value: 4 }
    },
    vertexShader: tz,
    fragmentShader: nz
  }), x = E.clone();
  x.defines.HORIZONTAL_PASS = 1;
  const A = new on();
  A.setAttribute(
    "position",
    new jn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const C = new Xi(A, E), R = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = R_;
  let M = this.type;
  this.render = function(P, X, Y) {
    if (R.enabled === !1 || R.autoUpdate === !1 && R.needsUpdate === !1 || P.length === 0) return;
    const z = r.getRenderTarget(), L = r.getActiveCubeFace(), W = r.getActiveMipmapLevel(), me = r.state;
    me.setBlending(Hl), me.buffers.depth.getReversed() ? me.buffers.color.setClear(0, 0, 0, 0) : me.buffers.color.setClear(1, 1, 1, 1), me.buffers.depth.setTest(!0), me.setScissorTest(!1);
    const Q = M !== ao && this.type === ao, oe = M === ao && this.type !== ao;
    for (let Se = 0, B = P.length; Se < B; Se++) {
      const K = P[Se], q = K.shadow;
      if (q === void 0) {
        console.warn("THREE.WebGLShadowMap:", K, "has no shadow.");
        continue;
      }
      if (q.autoUpdate === !1 && q.needsUpdate === !1) continue;
      s.copy(q.mapSize);
      const se = q.getFrameExtents();
      if (s.multiply(se), u.copy(q.mapSize), (s.x > _ || s.y > _) && (s.x > _ && (u.x = Math.floor(_ / se.x), s.x = u.x * se.x, q.mapSize.x = u.x), s.y > _ && (u.y = Math.floor(_ / se.y), s.y = u.y * se.y, q.mapSize.y = u.y)), q.map === null || Q === !0 || oe === !0) {
        const Te = this.type !== ao ? { minFilter: Ca, magFilter: Ca } : {};
        q.map !== null && q.map.dispose(), q.map = new jo(s.x, s.y, Te), q.map.texture.name = K.name + ".shadowMap", q.camera.updateProjectionMatrix();
      }
      r.setRenderTarget(q.map), r.clear();
      const le = q.getViewportCount();
      for (let Te = 0; Te < le; Te++) {
        const we = q.getViewport(Te);
        f.set(
          u.x * we.x,
          u.y * we.y,
          u.x * we.z,
          u.y * we.w
        ), me.viewport(f), q.updateMatrices(K, Te), i = q.getFrustum(), U(X, Y, q.camera, K, this.type);
      }
      q.isPointLightShadow !== !0 && this.type === ao && w(q, Y), q.needsUpdate = !1;
    }
    M = this.type, R.needsUpdate = !1, r.setRenderTarget(z, L, W);
  };
  function w(P, X) {
    const Y = e.update(C);
    E.defines.VSM_SAMPLES !== P.blurSamples && (E.defines.VSM_SAMPLES = P.blurSamples, x.defines.VSM_SAMPLES = P.blurSamples, E.needsUpdate = !0, x.needsUpdate = !0), P.mapPass === null && (P.mapPass = new jo(s.x, s.y)), E.uniforms.shadow_pass.value = P.map.texture, E.uniforms.resolution.value = P.mapSize, E.uniforms.radius.value = P.radius, r.setRenderTarget(P.mapPass), r.clear(), r.renderBufferDirect(X, null, Y, E, C, null), x.uniforms.shadow_pass.value = P.mapPass.texture, x.uniforms.resolution.value = P.mapSize, x.uniforms.radius.value = P.radius, r.setRenderTarget(P.map), r.clear(), r.renderBufferDirect(X, null, Y, x, C, null);
  }
  function N(P, X, Y, z) {
    let L = null;
    const W = Y.isPointLight === !0 ? P.customDistanceMaterial : P.customDepthMaterial;
    if (W !== void 0)
      L = W;
    else if (L = Y.isPointLight === !0 ? p : h, r.localClippingEnabled && X.clipShadows === !0 && Array.isArray(X.clippingPlanes) && X.clippingPlanes.length !== 0 || X.displacementMap && X.displacementScale !== 0 || X.alphaMap && X.alphaTest > 0 || X.map && X.alphaTest > 0 || X.alphaToCoverage === !0) {
      const me = L.uuid, Q = X.uuid;
      let oe = v[me];
      oe === void 0 && (oe = {}, v[me] = oe);
      let Se = oe[Q];
      Se === void 0 && (Se = L.clone(), oe[Q] = Se, X.addEventListener("dispose", I)), L = Se;
    }
    if (L.visible = X.visible, L.wireframe = X.wireframe, z === ao ? L.side = X.shadowSide !== null ? X.shadowSide : X.side : L.side = X.shadowSide !== null ? X.shadowSide : S[X.side], L.alphaMap = X.alphaMap, L.alphaTest = X.alphaToCoverage === !0 ? 0.5 : X.alphaTest, L.map = X.map, L.clipShadows = X.clipShadows, L.clippingPlanes = X.clippingPlanes, L.clipIntersection = X.clipIntersection, L.displacementMap = X.displacementMap, L.displacementScale = X.displacementScale, L.displacementBias = X.displacementBias, L.wireframeLinewidth = X.wireframeLinewidth, L.linewidth = X.linewidth, Y.isPointLight === !0 && L.isMeshDistanceMaterial === !0) {
      const me = r.properties.get(L);
      me.light = Y;
    }
    return L;
  }
  function U(P, X, Y, z, L) {
    if (P.visible === !1) return;
    if (P.layers.test(X.layers) && (P.isMesh || P.isLine || P.isPoints) && (P.castShadow || P.receiveShadow && L === ao) && (!P.frustumCulled || i.intersectsObject(P))) {
      P.modelViewMatrix.multiplyMatrices(Y.matrixWorldInverse, P.matrixWorld);
      const Q = e.update(P), oe = P.material;
      if (Array.isArray(oe)) {
        const Se = Q.groups;
        for (let B = 0, K = Se.length; B < K; B++) {
          const q = Se[B], se = oe[q.materialIndex];
          if (se && se.visible) {
            const le = N(P, se, z, L);
            P.onBeforeShadow(r, P, X, Y, Q, le, q), r.renderBufferDirect(Y, null, Q, le, P, q), P.onAfterShadow(r, P, X, Y, Q, le, q);
          }
        }
      } else if (oe.visible) {
        const Se = N(P, oe, z, L);
        P.onBeforeShadow(r, P, X, Y, Q, Se, null), r.renderBufferDirect(Y, null, Q, Se, P, null), P.onAfterShadow(r, P, X, Y, Q, Se, null);
      }
    }
    const me = P.children;
    for (let Q = 0, oe = me.length; Q < oe; Q++)
      U(me[Q], X, Y, z, L);
  }
  function I(P) {
    P.target.removeEventListener("dispose", I);
    for (const Y in v) {
      const z = v[Y], L = P.target.uuid;
      L in z && (z[L].dispose(), delete z[L]);
    }
  }
}
const az = {
  [H0]: I0,
  [V0]: X0,
  [F0]: q0,
  [Mf]: G0,
  [I0]: H0,
  [X0]: V0,
  [q0]: F0,
  [G0]: Mf
};
function sz(r, e) {
  function t() {
    let J = !1;
    const Oe = new Un();
    let Ye = null;
    const lt = new Un(0, 0, 0, 0);
    return {
      setMask: function(Pe) {
        Ye !== Pe && !J && (r.colorMask(Pe, Pe, Pe, Pe), Ye = Pe);
      },
      setLocked: function(Pe) {
        J = Pe;
      },
      setClear: function(Pe, Ue, rt, Rt, Yt) {
        Yt === !0 && (Pe *= Rt, Ue *= Rt, rt *= Rt), Oe.set(Pe, Ue, rt, Rt), lt.equals(Oe) === !1 && (r.clearColor(Pe, Ue, rt, Rt), lt.copy(Oe));
      },
      reset: function() {
        J = !1, Ye = null, lt.set(-1, 0, 0, 0);
      }
    };
  }
  function i() {
    let J = !1, Oe = !1, Ye = null, lt = null, Pe = null;
    return {
      setReversed: function(Ue) {
        if (Oe !== Ue) {
          const rt = e.get("EXT_clip_control");
          Ue ? rt.clipControlEXT(rt.LOWER_LEFT_EXT, rt.ZERO_TO_ONE_EXT) : rt.clipControlEXT(rt.LOWER_LEFT_EXT, rt.NEGATIVE_ONE_TO_ONE_EXT), Oe = Ue;
          const Rt = Pe;
          Pe = null, this.setClear(Rt);
        }
      },
      getReversed: function() {
        return Oe;
      },
      setTest: function(Ue) {
        Ue ? We(r.DEPTH_TEST) : Mt(r.DEPTH_TEST);
      },
      setMask: function(Ue) {
        Ye !== Ue && !J && (r.depthMask(Ue), Ye = Ue);
      },
      setFunc: function(Ue) {
        if (Oe && (Ue = az[Ue]), lt !== Ue) {
          switch (Ue) {
            case H0:
              r.depthFunc(r.NEVER);
              break;
            case I0:
              r.depthFunc(r.ALWAYS);
              break;
            case V0:
              r.depthFunc(r.LESS);
              break;
            case Mf:
              r.depthFunc(r.LEQUAL);
              break;
            case F0:
              r.depthFunc(r.EQUAL);
              break;
            case G0:
              r.depthFunc(r.GEQUAL);
              break;
            case X0:
              r.depthFunc(r.GREATER);
              break;
            case q0:
              r.depthFunc(r.NOTEQUAL);
              break;
            default:
              r.depthFunc(r.LEQUAL);
          }
          lt = Ue;
        }
      },
      setLocked: function(Ue) {
        J = Ue;
      },
      setClear: function(Ue) {
        Pe !== Ue && (Oe && (Ue = 1 - Ue), r.clearDepth(Ue), Pe = Ue);
      },
      reset: function() {
        J = !1, Ye = null, lt = null, Pe = null, Oe = !1;
      }
    };
  }
  function s() {
    let J = !1, Oe = null, Ye = null, lt = null, Pe = null, Ue = null, rt = null, Rt = null, Yt = null;
    return {
      setTest: function(Ft) {
        J || (Ft ? We(r.STENCIL_TEST) : Mt(r.STENCIL_TEST));
      },
      setMask: function(Ft) {
        Oe !== Ft && !J && (r.stencilMask(Ft), Oe = Ft);
      },
      setFunc: function(Ft, si, Jn) {
        (Ye !== Ft || lt !== si || Pe !== Jn) && (r.stencilFunc(Ft, si, Jn), Ye = Ft, lt = si, Pe = Jn);
      },
      setOp: function(Ft, si, Jn) {
        (Ue !== Ft || rt !== si || Rt !== Jn) && (r.stencilOp(Ft, si, Jn), Ue = Ft, rt = si, Rt = Jn);
      },
      setLocked: function(Ft) {
        J = Ft;
      },
      setClear: function(Ft) {
        Yt !== Ft && (r.clearStencil(Ft), Yt = Ft);
      },
      reset: function() {
        J = !1, Oe = null, Ye = null, lt = null, Pe = null, Ue = null, rt = null, Rt = null, Yt = null;
      }
    };
  }
  const u = new t(), f = new i(), h = new s(), p = /* @__PURE__ */ new WeakMap(), v = /* @__PURE__ */ new WeakMap();
  let _ = {}, S = {}, E = /* @__PURE__ */ new WeakMap(), x = [], A = null, C = !1, R = null, M = null, w = null, N = null, U = null, I = null, P = null, X = new Et(0, 0, 0), Y = 0, z = !1, L = null, W = null, me = null, Q = null, oe = null;
  const Se = r.getParameter(r.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let B = !1, K = 0;
  const q = r.getParameter(r.VERSION);
  q.indexOf("WebGL") !== -1 ? (K = parseFloat(/^WebGL (\d)/.exec(q)[1]), B = K >= 1) : q.indexOf("OpenGL ES") !== -1 && (K = parseFloat(/^OpenGL ES (\d)/.exec(q)[1]), B = K >= 2);
  let se = null, le = {};
  const Te = r.getParameter(r.SCISSOR_BOX), we = r.getParameter(r.VIEWPORT), gt = new Un().fromArray(Te), $e = new Un().fromArray(we);
  function _e(J, Oe, Ye, lt) {
    const Pe = new Uint8Array(4), Ue = r.createTexture();
    r.bindTexture(J, Ue), r.texParameteri(J, r.TEXTURE_MIN_FILTER, r.NEAREST), r.texParameteri(J, r.TEXTURE_MAG_FILTER, r.NEAREST);
    for (let rt = 0; rt < Ye; rt++)
      J === r.TEXTURE_3D || J === r.TEXTURE_2D_ARRAY ? r.texImage3D(Oe, 0, r.RGBA, 1, 1, lt, 0, r.RGBA, r.UNSIGNED_BYTE, Pe) : r.texImage2D(Oe + rt, 0, r.RGBA, 1, 1, 0, r.RGBA, r.UNSIGNED_BYTE, Pe);
    return Ue;
  }
  const Je = {};
  Je[r.TEXTURE_2D] = _e(r.TEXTURE_2D, r.TEXTURE_2D, 1), Je[r.TEXTURE_CUBE_MAP] = _e(r.TEXTURE_CUBE_MAP, r.TEXTURE_CUBE_MAP_POSITIVE_X, 6), Je[r.TEXTURE_2D_ARRAY] = _e(r.TEXTURE_2D_ARRAY, r.TEXTURE_2D_ARRAY, 1, 1), Je[r.TEXTURE_3D] = _e(r.TEXTURE_3D, r.TEXTURE_3D, 1, 1), u.setClear(0, 0, 0, 1), f.setClear(1), h.setClear(0), We(r.DEPTH_TEST), f.setFunc(Mf), Ie(!1), De(vE), We(r.CULL_FACE), Be(Hl);
  function We(J) {
    _[J] !== !0 && (r.enable(J), _[J] = !0);
  }
  function Mt(J) {
    _[J] !== !1 && (r.disable(J), _[J] = !1);
  }
  function yt(J, Oe) {
    return S[J] !== Oe ? (r.bindFramebuffer(J, Oe), S[J] = Oe, J === r.DRAW_FRAMEBUFFER && (S[r.FRAMEBUFFER] = Oe), J === r.FRAMEBUFFER && (S[r.DRAW_FRAMEBUFFER] = Oe), !0) : !1;
  }
  function Ct(J, Oe) {
    let Ye = x, lt = !1;
    if (J) {
      Ye = E.get(Oe), Ye === void 0 && (Ye = [], E.set(Oe, Ye));
      const Pe = J.textures;
      if (Ye.length !== Pe.length || Ye[0] !== r.COLOR_ATTACHMENT0) {
        for (let Ue = 0, rt = Pe.length; Ue < rt; Ue++)
          Ye[Ue] = r.COLOR_ATTACHMENT0 + Ue;
        Ye.length = Pe.length, lt = !0;
      }
    } else
      Ye[0] !== r.BACK && (Ye[0] = r.BACK, lt = !0);
    lt && r.drawBuffers(Ye);
  }
  function _n(J) {
    return A !== J ? (r.useProgram(J), A = J, !0) : !1;
  }
  const Dt = {
    [Gu]: r.FUNC_ADD,
    [oA]: r.FUNC_SUBTRACT,
    [lA]: r.FUNC_REVERSE_SUBTRACT
  };
  Dt[uA] = r.MIN, Dt[cA] = r.MAX;
  const ee = {
    [fA]: r.ZERO,
    [hA]: r.ONE,
    [dA]: r.SRC_COLOR,
    [B0]: r.SRC_ALPHA,
    [_A]: r.SRC_ALPHA_SATURATE,
    [gA]: r.DST_COLOR,
    [mA]: r.DST_ALPHA,
    [pA]: r.ONE_MINUS_SRC_COLOR,
    [P0]: r.ONE_MINUS_SRC_ALPHA,
    [yA]: r.ONE_MINUS_DST_COLOR,
    [vA]: r.ONE_MINUS_DST_ALPHA,
    [SA]: r.CONSTANT_COLOR,
    [xA]: r.ONE_MINUS_CONSTANT_COLOR,
    [EA]: r.CONSTANT_ALPHA,
    [MA]: r.ONE_MINUS_CONSTANT_ALPHA
  };
  function Be(J, Oe, Ye, lt, Pe, Ue, rt, Rt, Yt, Ft) {
    if (J === Hl) {
      C === !0 && (Mt(r.BLEND), C = !1);
      return;
    }
    if (C === !1 && (We(r.BLEND), C = !0), J !== rA) {
      if (J !== R || Ft !== z) {
        if ((M !== Gu || U !== Gu) && (r.blendEquation(r.FUNC_ADD), M = Gu, U = Gu), Ft)
          switch (J) {
            case Sf:
              r.blendFuncSeparate(r.ONE, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case gE:
              r.blendFunc(r.ONE, r.ONE);
              break;
            case yE:
              r.blendFuncSeparate(r.ZERO, r.ONE_MINUS_SRC_COLOR, r.ZERO, r.ONE);
              break;
            case _E:
              r.blendFuncSeparate(r.DST_COLOR, r.ONE_MINUS_SRC_ALPHA, r.ZERO, r.ONE);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", J);
              break;
          }
        else
          switch (J) {
            case Sf:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE_MINUS_SRC_ALPHA, r.ONE, r.ONE_MINUS_SRC_ALPHA);
              break;
            case gE:
              r.blendFuncSeparate(r.SRC_ALPHA, r.ONE, r.ONE, r.ONE);
              break;
            case yE:
              console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");
              break;
            case _E:
              console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", J);
              break;
          }
        w = null, N = null, I = null, P = null, X.set(0, 0, 0), Y = 0, R = J, z = Ft;
      }
      return;
    }
    Pe = Pe || Oe, Ue = Ue || Ye, rt = rt || lt, (Oe !== M || Pe !== U) && (r.blendEquationSeparate(Dt[Oe], Dt[Pe]), M = Oe, U = Pe), (Ye !== w || lt !== N || Ue !== I || rt !== P) && (r.blendFuncSeparate(ee[Ye], ee[lt], ee[Ue], ee[rt]), w = Ye, N = lt, I = Ue, P = rt), (Rt.equals(X) === !1 || Yt !== Y) && (r.blendColor(Rt.r, Rt.g, Rt.b, Yt), X.copy(Rt), Y = Yt), R = J, z = !1;
  }
  function Ce(J, Oe) {
    J.side === Go ? Mt(r.CULL_FACE) : We(r.CULL_FACE);
    let Ye = J.side === cs;
    Oe && (Ye = !Ye), Ie(Ye), J.blending === Sf && J.transparent === !1 ? Be(Hl) : Be(J.blending, J.blendEquation, J.blendSrc, J.blendDst, J.blendEquationAlpha, J.blendSrcAlpha, J.blendDstAlpha, J.blendColor, J.blendAlpha, J.premultipliedAlpha), f.setFunc(J.depthFunc), f.setTest(J.depthTest), f.setMask(J.depthWrite), u.setMask(J.colorWrite);
    const lt = J.stencilWrite;
    h.setTest(lt), lt && (h.setMask(J.stencilWriteMask), h.setFunc(J.stencilFunc, J.stencilRef, J.stencilFuncMask), h.setOp(J.stencilFail, J.stencilZFail, J.stencilZPass)), Ve(J.polygonOffset, J.polygonOffsetFactor, J.polygonOffsetUnits), J.alphaToCoverage === !0 ? We(r.SAMPLE_ALPHA_TO_COVERAGE) : Mt(r.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Ie(J) {
    L !== J && (J ? r.frontFace(r.CW) : r.frontFace(r.CCW), L = J);
  }
  function De(J) {
    J !== iA ? (We(r.CULL_FACE), J !== W && (J === vE ? r.cullFace(r.BACK) : J === aA ? r.cullFace(r.FRONT) : r.cullFace(r.FRONT_AND_BACK))) : Mt(r.CULL_FACE), W = J;
  }
  function et(J) {
    J !== me && (B && r.lineWidth(J), me = J);
  }
  function Ve(J, Oe, Ye) {
    J ? (We(r.POLYGON_OFFSET_FILL), (Q !== Oe || oe !== Ye) && (r.polygonOffset(Oe, Ye), Q = Oe, oe = Ye)) : Mt(r.POLYGON_OFFSET_FILL);
  }
  function Qe(J) {
    J ? We(r.SCISSOR_TEST) : Mt(r.SCISSOR_TEST);
  }
  function ut(J) {
    J === void 0 && (J = r.TEXTURE0 + Se - 1), se !== J && (r.activeTexture(J), se = J);
  }
  function Bt(J, Oe, Ye) {
    Ye === void 0 && (se === null ? Ye = r.TEXTURE0 + Se - 1 : Ye = se);
    let lt = le[Ye];
    lt === void 0 && (lt = { type: void 0, texture: void 0 }, le[Ye] = lt), (lt.type !== J || lt.texture !== Oe) && (se !== Ye && (r.activeTexture(Ye), se = Ye), r.bindTexture(J, Oe || Je[J]), lt.type = J, lt.texture = Oe);
  }
  function Z() {
    const J = le[se];
    J !== void 0 && J.type !== void 0 && (r.bindTexture(J.type, null), J.type = void 0, J.texture = void 0);
  }
  function H() {
    try {
      r.compressedTexImage2D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function he() {
    try {
      r.compressedTexImage3D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function be() {
    try {
      r.texSubImage2D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function He() {
    try {
      r.texSubImage3D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function Re() {
    try {
      r.compressedTexSubImage2D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function bt() {
    try {
      r.compressedTexSubImage3D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function Xe() {
    try {
      r.texStorage2D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function ct() {
    try {
      r.texStorage3D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function _t() {
    try {
      r.texImage2D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function Ge() {
    try {
      r.texImage3D(...arguments);
    } catch (J) {
      console.error("THREE.WebGLState:", J);
    }
  }
  function it(J) {
    gt.equals(J) === !1 && (r.scissor(J.x, J.y, J.z, J.w), gt.copy(J));
  }
  function Tt(J) {
    $e.equals(J) === !1 && (r.viewport(J.x, J.y, J.z, J.w), $e.copy(J));
  }
  function k(J, Oe) {
    let Ye = v.get(Oe);
    Ye === void 0 && (Ye = /* @__PURE__ */ new WeakMap(), v.set(Oe, Ye));
    let lt = Ye.get(J);
    lt === void 0 && (lt = r.getUniformBlockIndex(Oe, J.name), Ye.set(J, lt));
  }
  function ye(J, Oe) {
    const lt = v.get(Oe).get(J);
    p.get(Oe) !== lt && (r.uniformBlockBinding(Oe, lt, J.__bindingPointIndex), p.set(Oe, lt));
  }
  function qe() {
    r.disable(r.BLEND), r.disable(r.CULL_FACE), r.disable(r.DEPTH_TEST), r.disable(r.POLYGON_OFFSET_FILL), r.disable(r.SCISSOR_TEST), r.disable(r.STENCIL_TEST), r.disable(r.SAMPLE_ALPHA_TO_COVERAGE), r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ZERO), r.blendFuncSeparate(r.ONE, r.ZERO, r.ONE, r.ZERO), r.blendColor(0, 0, 0, 0), r.colorMask(!0, !0, !0, !0), r.clearColor(0, 0, 0, 0), r.depthMask(!0), r.depthFunc(r.LESS), f.setReversed(!1), r.clearDepth(1), r.stencilMask(4294967295), r.stencilFunc(r.ALWAYS, 0, 4294967295), r.stencilOp(r.KEEP, r.KEEP, r.KEEP), r.clearStencil(0), r.cullFace(r.BACK), r.frontFace(r.CCW), r.polygonOffset(0, 0), r.activeTexture(r.TEXTURE0), r.bindFramebuffer(r.FRAMEBUFFER, null), r.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), r.bindFramebuffer(r.READ_FRAMEBUFFER, null), r.useProgram(null), r.lineWidth(1), r.scissor(0, 0, r.canvas.width, r.canvas.height), r.viewport(0, 0, r.canvas.width, r.canvas.height), _ = {}, se = null, le = {}, S = {}, E = /* @__PURE__ */ new WeakMap(), x = [], A = null, C = !1, R = null, M = null, w = null, N = null, U = null, I = null, P = null, X = new Et(0, 0, 0), Y = 0, z = !1, L = null, W = null, me = null, Q = null, oe = null, gt.set(0, 0, r.canvas.width, r.canvas.height), $e.set(0, 0, r.canvas.width, r.canvas.height), u.reset(), f.reset(), h.reset();
  }
  return {
    buffers: {
      color: u,
      depth: f,
      stencil: h
    },
    enable: We,
    disable: Mt,
    bindFramebuffer: yt,
    drawBuffers: Ct,
    useProgram: _n,
    setBlending: Be,
    setMaterial: Ce,
    setFlipSided: Ie,
    setCullFace: De,
    setLineWidth: et,
    setPolygonOffset: Ve,
    setScissorTest: Qe,
    activeTexture: ut,
    bindTexture: Bt,
    unbindTexture: Z,
    compressedTexImage2D: H,
    compressedTexImage3D: he,
    texImage2D: _t,
    texImage3D: Ge,
    updateUBOMapping: k,
    uniformBlockBinding: ye,
    texStorage2D: Xe,
    texStorage3D: ct,
    texSubImage2D: be,
    texSubImage3D: He,
    compressedTexSubImage2D: Re,
    compressedTexSubImage3D: bt,
    scissor: it,
    viewport: Tt,
    reset: qe
  };
}
function rz(r, e, t, i, s, u, f) {
  const h = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, p = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), v = new ze(), _ = /* @__PURE__ */ new WeakMap();
  let S;
  const E = /* @__PURE__ */ new WeakMap();
  let x = !1;
  try {
    x = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function A(Z, H) {
    return x ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(Z, H)
    ) : jv("canvas");
  }
  function C(Z, H, he) {
    let be = 1;
    const He = Bt(Z);
    if ((He.width > he || He.height > he) && (be = he / Math.max(He.width, He.height)), be < 1)
      if (typeof HTMLImageElement < "u" && Z instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && Z instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && Z instanceof ImageBitmap || typeof VideoFrame < "u" && Z instanceof VideoFrame) {
        const Re = Math.floor(be * He.width), bt = Math.floor(be * He.height);
        S === void 0 && (S = A(Re, bt));
        const Xe = H ? A(Re, bt) : S;
        return Xe.width = Re, Xe.height = bt, Xe.getContext("2d").drawImage(Z, 0, 0, Re, bt), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + He.width + "x" + He.height + ") to (" + Re + "x" + bt + ")."), Xe;
      } else
        return "data" in Z && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + He.width + "x" + He.height + ")."), Z;
    return Z;
  }
  function R(Z) {
    return Z.generateMipmaps;
  }
  function M(Z) {
    r.generateMipmap(Z);
  }
  function w(Z) {
    return Z.isWebGLCubeRenderTarget ? r.TEXTURE_CUBE_MAP : Z.isWebGL3DRenderTarget ? r.TEXTURE_3D : Z.isWebGLArrayRenderTarget || Z.isCompressedArrayTexture ? r.TEXTURE_2D_ARRAY : r.TEXTURE_2D;
  }
  function N(Z, H, he, be, He = !1) {
    if (Z !== null) {
      if (r[Z] !== void 0) return r[Z];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + Z + "'");
    }
    let Re = H;
    if (H === r.RED && (he === r.FLOAT && (Re = r.R32F), he === r.HALF_FLOAT && (Re = r.R16F), he === r.UNSIGNED_BYTE && (Re = r.R8)), H === r.RED_INTEGER && (he === r.UNSIGNED_BYTE && (Re = r.R8UI), he === r.UNSIGNED_SHORT && (Re = r.R16UI), he === r.UNSIGNED_INT && (Re = r.R32UI), he === r.BYTE && (Re = r.R8I), he === r.SHORT && (Re = r.R16I), he === r.INT && (Re = r.R32I)), H === r.RG && (he === r.FLOAT && (Re = r.RG32F), he === r.HALF_FLOAT && (Re = r.RG16F), he === r.UNSIGNED_BYTE && (Re = r.RG8)), H === r.RG_INTEGER && (he === r.UNSIGNED_BYTE && (Re = r.RG8UI), he === r.UNSIGNED_SHORT && (Re = r.RG16UI), he === r.UNSIGNED_INT && (Re = r.RG32UI), he === r.BYTE && (Re = r.RG8I), he === r.SHORT && (Re = r.RG16I), he === r.INT && (Re = r.RG32I)), H === r.RGB_INTEGER && (he === r.UNSIGNED_BYTE && (Re = r.RGB8UI), he === r.UNSIGNED_SHORT && (Re = r.RGB16UI), he === r.UNSIGNED_INT && (Re = r.RGB32UI), he === r.BYTE && (Re = r.RGB8I), he === r.SHORT && (Re = r.RGB16I), he === r.INT && (Re = r.RGB32I)), H === r.RGBA_INTEGER && (he === r.UNSIGNED_BYTE && (Re = r.RGBA8UI), he === r.UNSIGNED_SHORT && (Re = r.RGBA16UI), he === r.UNSIGNED_INT && (Re = r.RGBA32UI), he === r.BYTE && (Re = r.RGBA8I), he === r.SHORT && (Re = r.RGBA16I), he === r.INT && (Re = r.RGBA32I)), H === r.RGB && he === r.UNSIGNED_INT_5_9_9_9_REV && (Re = r.RGB9_E5), H === r.RGBA) {
      const bt = He ? Yv : An.getTransfer(be);
      he === r.FLOAT && (Re = r.RGBA32F), he === r.HALF_FLOAT && (Re = r.RGBA16F), he === r.UNSIGNED_BYTE && (Re = bt === Fn ? r.SRGB8_ALPHA8 : r.RGBA8), he === r.UNSIGNED_SHORT_4_4_4_4 && (Re = r.RGBA4), he === r.UNSIGNED_SHORT_5_5_5_1 && (Re = r.RGB5_A1);
    }
    return (Re === r.R16F || Re === r.R32F || Re === r.RG16F || Re === r.RG32F || Re === r.RGBA16F || Re === r.RGBA32F) && e.get("EXT_color_buffer_float"), Re;
  }
  function U(Z, H) {
    let he;
    return Z ? H === null || H === Gl || H === tp ? he = r.DEPTH24_STENCIL8 : H === Ds ? he = r.DEPTH32F_STENCIL8 : H === ep && (he = r.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : H === null || H === Gl || H === tp ? he = r.DEPTH_COMPONENT24 : H === Ds ? he = r.DEPTH_COMPONENT32F : H === ep && (he = r.DEPTH_COMPONENT16), he;
  }
  function I(Z, H) {
    return R(Z) === !0 || Z.isFramebufferTexture && Z.minFilter !== Ca && Z.minFilter !== na ? Math.log2(Math.max(H.width, H.height)) + 1 : Z.mipmaps !== void 0 && Z.mipmaps.length > 0 ? Z.mipmaps.length : Z.isCompressedTexture && Array.isArray(Z.image) ? H.mipmaps.length : 1;
  }
  function P(Z) {
    const H = Z.target;
    H.removeEventListener("dispose", P), Y(H), H.isVideoTexture && _.delete(H);
  }
  function X(Z) {
    const H = Z.target;
    H.removeEventListener("dispose", X), L(H);
  }
  function Y(Z) {
    const H = i.get(Z);
    if (H.__webglInit === void 0) return;
    const he = Z.source, be = E.get(he);
    if (be) {
      const He = be[H.__cacheKey];
      He.usedTimes--, He.usedTimes === 0 && z(Z), Object.keys(be).length === 0 && E.delete(he);
    }
    i.remove(Z);
  }
  function z(Z) {
    const H = i.get(Z);
    r.deleteTexture(H.__webglTexture);
    const he = Z.source, be = E.get(he);
    delete be[H.__cacheKey], f.memory.textures--;
  }
  function L(Z) {
    const H = i.get(Z);
    if (Z.depthTexture && (Z.depthTexture.dispose(), i.remove(Z.depthTexture)), Z.isWebGLCubeRenderTarget)
      for (let be = 0; be < 6; be++) {
        if (Array.isArray(H.__webglFramebuffer[be]))
          for (let He = 0; He < H.__webglFramebuffer[be].length; He++) r.deleteFramebuffer(H.__webglFramebuffer[be][He]);
        else
          r.deleteFramebuffer(H.__webglFramebuffer[be]);
        H.__webglDepthbuffer && r.deleteRenderbuffer(H.__webglDepthbuffer[be]);
      }
    else {
      if (Array.isArray(H.__webglFramebuffer))
        for (let be = 0; be < H.__webglFramebuffer.length; be++) r.deleteFramebuffer(H.__webglFramebuffer[be]);
      else
        r.deleteFramebuffer(H.__webglFramebuffer);
      if (H.__webglDepthbuffer && r.deleteRenderbuffer(H.__webglDepthbuffer), H.__webglMultisampledFramebuffer && r.deleteFramebuffer(H.__webglMultisampledFramebuffer), H.__webglColorRenderbuffer)
        for (let be = 0; be < H.__webglColorRenderbuffer.length; be++)
          H.__webglColorRenderbuffer[be] && r.deleteRenderbuffer(H.__webglColorRenderbuffer[be]);
      H.__webglDepthRenderbuffer && r.deleteRenderbuffer(H.__webglDepthRenderbuffer);
    }
    const he = Z.textures;
    for (let be = 0, He = he.length; be < He; be++) {
      const Re = i.get(he[be]);
      Re.__webglTexture && (r.deleteTexture(Re.__webglTexture), f.memory.textures--), i.remove(he[be]);
    }
    i.remove(Z);
  }
  let W = 0;
  function me() {
    W = 0;
  }
  function Q() {
    const Z = W;
    return Z >= s.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + Z + " texture units while this GPU supports only " + s.maxTextures), W += 1, Z;
  }
  function oe(Z) {
    const H = [];
    return H.push(Z.wrapS), H.push(Z.wrapT), H.push(Z.wrapR || 0), H.push(Z.magFilter), H.push(Z.minFilter), H.push(Z.anisotropy), H.push(Z.internalFormat), H.push(Z.format), H.push(Z.type), H.push(Z.generateMipmaps), H.push(Z.premultiplyAlpha), H.push(Z.flipY), H.push(Z.unpackAlignment), H.push(Z.colorSpace), H.join();
  }
  function Se(Z, H) {
    const he = i.get(Z);
    if (Z.isVideoTexture && Qe(Z), Z.isRenderTargetTexture === !1 && Z.isExternalTexture !== !0 && Z.version > 0 && he.__version !== Z.version) {
      const be = Z.image;
      if (be === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (be.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        Je(he, Z, H);
        return;
      }
    } else Z.isExternalTexture && (he.__webglTexture = Z.sourceTexture ? Z.sourceTexture : null);
    t.bindTexture(r.TEXTURE_2D, he.__webglTexture, r.TEXTURE0 + H);
  }
  function B(Z, H) {
    const he = i.get(Z);
    if (Z.isRenderTargetTexture === !1 && Z.version > 0 && he.__version !== Z.version) {
      Je(he, Z, H);
      return;
    }
    t.bindTexture(r.TEXTURE_2D_ARRAY, he.__webglTexture, r.TEXTURE0 + H);
  }
  function K(Z, H) {
    const he = i.get(Z);
    if (Z.isRenderTargetTexture === !1 && Z.version > 0 && he.__version !== Z.version) {
      Je(he, Z, H);
      return;
    }
    t.bindTexture(r.TEXTURE_3D, he.__webglTexture, r.TEXTURE0 + H);
  }
  function q(Z, H) {
    const he = i.get(Z);
    if (Z.version > 0 && he.__version !== Z.version) {
      We(he, Z, H);
      return;
    }
    t.bindTexture(r.TEXTURE_CUBE_MAP, he.__webglTexture, r.TEXTURE0 + H);
  }
  const se = {
    [Fv]: r.REPEAT,
    [Cr]: r.CLAMP_TO_EDGE,
    [Gv]: r.MIRRORED_REPEAT
  }, le = {
    [Ca]: r.NEAREST,
    [FE]: r.NEAREST_MIPMAP_NEAREST,
    [Zd]: r.NEAREST_MIPMAP_LINEAR,
    [na]: r.LINEAR,
    [Dv]: r.LINEAR_MIPMAP_NEAREST,
    [Xo]: r.LINEAR_MIPMAP_LINEAR
  }, Te = {
    [IA]: r.NEVER,
    [YA]: r.ALWAYS,
    [VA]: r.LESS,
    [QE]: r.LEQUAL,
    [FA]: r.EQUAL,
    [qA]: r.GEQUAL,
    [GA]: r.GREATER,
    [XA]: r.NOTEQUAL
  };
  function we(Z, H) {
    if (H.type === Ds && e.has("OES_texture_float_linear") === !1 && (H.magFilter === na || H.magFilter === Dv || H.magFilter === Zd || H.magFilter === Xo || H.minFilter === na || H.minFilter === Dv || H.minFilter === Zd || H.minFilter === Xo) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), r.texParameteri(Z, r.TEXTURE_WRAP_S, se[H.wrapS]), r.texParameteri(Z, r.TEXTURE_WRAP_T, se[H.wrapT]), (Z === r.TEXTURE_3D || Z === r.TEXTURE_2D_ARRAY) && r.texParameteri(Z, r.TEXTURE_WRAP_R, se[H.wrapR]), r.texParameteri(Z, r.TEXTURE_MAG_FILTER, le[H.magFilter]), r.texParameteri(Z, r.TEXTURE_MIN_FILTER, le[H.minFilter]), H.compareFunction && (r.texParameteri(Z, r.TEXTURE_COMPARE_MODE, r.COMPARE_REF_TO_TEXTURE), r.texParameteri(Z, r.TEXTURE_COMPARE_FUNC, Te[H.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      if (H.magFilter === Ca || H.minFilter !== Zd && H.minFilter !== Xo || H.type === Ds && e.has("OES_texture_float_linear") === !1) return;
      if (H.anisotropy > 1 || i.get(H).__currentAnisotropy) {
        const he = e.get("EXT_texture_filter_anisotropic");
        r.texParameterf(Z, he.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(H.anisotropy, s.getMaxAnisotropy())), i.get(H).__currentAnisotropy = H.anisotropy;
      }
    }
  }
  function gt(Z, H) {
    let he = !1;
    Z.__webglInit === void 0 && (Z.__webglInit = !0, H.addEventListener("dispose", P));
    const be = H.source;
    let He = E.get(be);
    He === void 0 && (He = {}, E.set(be, He));
    const Re = oe(H);
    if (Re !== Z.__cacheKey) {
      He[Re] === void 0 && (He[Re] = {
        texture: r.createTexture(),
        usedTimes: 0
      }, f.memory.textures++, he = !0), He[Re].usedTimes++;
      const bt = He[Z.__cacheKey];
      bt !== void 0 && (He[Z.__cacheKey].usedTimes--, bt.usedTimes === 0 && z(H)), Z.__cacheKey = Re, Z.__webglTexture = He[Re].texture;
    }
    return he;
  }
  function $e(Z, H, he) {
    return Math.floor(Math.floor(Z / he) / H);
  }
  function _e(Z, H, he, be) {
    const Re = Z.updateRanges;
    if (Re.length === 0)
      t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, H.width, H.height, he, be, H.data);
    else {
      Re.sort((Ge, it) => Ge.start - it.start);
      let bt = 0;
      for (let Ge = 1; Ge < Re.length; Ge++) {
        const it = Re[bt], Tt = Re[Ge], k = it.start + it.count, ye = $e(Tt.start, H.width, 4), qe = $e(it.start, H.width, 4);
        Tt.start <= k + 1 && ye === qe && $e(Tt.start + Tt.count - 1, H.width, 4) === ye ? it.count = Math.max(
          it.count,
          Tt.start + Tt.count - it.start
        ) : (++bt, Re[bt] = Tt);
      }
      Re.length = bt + 1;
      const Xe = r.getParameter(r.UNPACK_ROW_LENGTH), ct = r.getParameter(r.UNPACK_SKIP_PIXELS), _t = r.getParameter(r.UNPACK_SKIP_ROWS);
      r.pixelStorei(r.UNPACK_ROW_LENGTH, H.width);
      for (let Ge = 0, it = Re.length; Ge < it; Ge++) {
        const Tt = Re[Ge], k = Math.floor(Tt.start / 4), ye = Math.ceil(Tt.count / 4), qe = k % H.width, J = Math.floor(k / H.width), Oe = ye, Ye = 1;
        r.pixelStorei(r.UNPACK_SKIP_PIXELS, qe), r.pixelStorei(r.UNPACK_SKIP_ROWS, J), t.texSubImage2D(r.TEXTURE_2D, 0, qe, J, Oe, Ye, he, be, H.data);
      }
      Z.clearUpdateRanges(), r.pixelStorei(r.UNPACK_ROW_LENGTH, Xe), r.pixelStorei(r.UNPACK_SKIP_PIXELS, ct), r.pixelStorei(r.UNPACK_SKIP_ROWS, _t);
    }
  }
  function Je(Z, H, he) {
    let be = r.TEXTURE_2D;
    (H.isDataArrayTexture || H.isCompressedArrayTexture) && (be = r.TEXTURE_2D_ARRAY), H.isData3DTexture && (be = r.TEXTURE_3D);
    const He = gt(Z, H), Re = H.source;
    t.bindTexture(be, Z.__webglTexture, r.TEXTURE0 + he);
    const bt = i.get(Re);
    if (Re.version !== bt.__version || He === !0) {
      t.activeTexture(r.TEXTURE0 + he);
      const Xe = An.getPrimaries(An.workingColorSpace), ct = H.colorSpace === Bl ? null : An.getPrimaries(H.colorSpace), _t = H.colorSpace === Bl || Xe === ct ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, H.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, H.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, _t);
      let Ge = C(H.image, !1, s.maxTextureSize);
      Ge = ut(H, Ge);
      const it = u.convert(H.format, H.colorSpace), Tt = u.convert(H.type);
      let k = N(H.internalFormat, it, Tt, H.colorSpace, H.isVideoTexture);
      we(be, H);
      let ye;
      const qe = H.mipmaps, J = H.isVideoTexture !== !0, Oe = bt.__version === void 0 || He === !0, Ye = Re.dataReady, lt = I(H, Ge);
      if (H.isDepthTexture)
        k = U(H.format === ip, H.type), Oe && (J ? t.texStorage2D(r.TEXTURE_2D, 1, k, Ge.width, Ge.height) : t.texImage2D(r.TEXTURE_2D, 0, k, Ge.width, Ge.height, 0, it, Tt, null));
      else if (H.isDataTexture)
        if (qe.length > 0) {
          J && Oe && t.texStorage2D(r.TEXTURE_2D, lt, k, qe[0].width, qe[0].height);
          for (let Pe = 0, Ue = qe.length; Pe < Ue; Pe++)
            ye = qe[Pe], J ? Ye && t.texSubImage2D(r.TEXTURE_2D, Pe, 0, 0, ye.width, ye.height, it, Tt, ye.data) : t.texImage2D(r.TEXTURE_2D, Pe, k, ye.width, ye.height, 0, it, Tt, ye.data);
          H.generateMipmaps = !1;
        } else
          J ? (Oe && t.texStorage2D(r.TEXTURE_2D, lt, k, Ge.width, Ge.height), Ye && _e(H, Ge, it, Tt)) : t.texImage2D(r.TEXTURE_2D, 0, k, Ge.width, Ge.height, 0, it, Tt, Ge.data);
      else if (H.isCompressedTexture)
        if (H.isCompressedArrayTexture) {
          J && Oe && t.texStorage3D(r.TEXTURE_2D_ARRAY, lt, k, qe[0].width, qe[0].height, Ge.depth);
          for (let Pe = 0, Ue = qe.length; Pe < Ue; Pe++)
            if (ye = qe[Pe], H.format !== Va)
              if (it !== null)
                if (J) {
                  if (Ye)
                    if (H.layerUpdates.size > 0) {
                      const rt = wE(ye.width, ye.height, H.format, H.type);
                      for (const Rt of H.layerUpdates) {
                        const Yt = ye.data.subarray(
                          Rt * rt / ye.data.BYTES_PER_ELEMENT,
                          (Rt + 1) * rt / ye.data.BYTES_PER_ELEMENT
                        );
                        t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, Pe, 0, 0, Rt, ye.width, ye.height, 1, it, Yt);
                      }
                      H.clearLayerUpdates();
                    } else
                      t.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY, Pe, 0, 0, 0, ye.width, ye.height, Ge.depth, it, ye.data);
                } else
                  t.compressedTexImage3D(r.TEXTURE_2D_ARRAY, Pe, k, ye.width, ye.height, Ge.depth, 0, ye.data, 0, 0);
              else
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            else
              J ? Ye && t.texSubImage3D(r.TEXTURE_2D_ARRAY, Pe, 0, 0, 0, ye.width, ye.height, Ge.depth, it, Tt, ye.data) : t.texImage3D(r.TEXTURE_2D_ARRAY, Pe, k, ye.width, ye.height, Ge.depth, 0, it, Tt, ye.data);
        } else {
          J && Oe && t.texStorage2D(r.TEXTURE_2D, lt, k, qe[0].width, qe[0].height);
          for (let Pe = 0, Ue = qe.length; Pe < Ue; Pe++)
            ye = qe[Pe], H.format !== Va ? it !== null ? J ? Ye && t.compressedTexSubImage2D(r.TEXTURE_2D, Pe, 0, 0, ye.width, ye.height, it, ye.data) : t.compressedTexImage2D(r.TEXTURE_2D, Pe, k, ye.width, ye.height, 0, ye.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : J ? Ye && t.texSubImage2D(r.TEXTURE_2D, Pe, 0, 0, ye.width, ye.height, it, Tt, ye.data) : t.texImage2D(r.TEXTURE_2D, Pe, k, ye.width, ye.height, 0, it, Tt, ye.data);
        }
      else if (H.isDataArrayTexture)
        if (J) {
          if (Oe && t.texStorage3D(r.TEXTURE_2D_ARRAY, lt, k, Ge.width, Ge.height, Ge.depth), Ye)
            if (H.layerUpdates.size > 0) {
              const Pe = wE(Ge.width, Ge.height, H.format, H.type);
              for (const Ue of H.layerUpdates) {
                const rt = Ge.data.subarray(
                  Ue * Pe / Ge.data.BYTES_PER_ELEMENT,
                  (Ue + 1) * Pe / Ge.data.BYTES_PER_ELEMENT
                );
                t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, Ue, Ge.width, Ge.height, 1, it, Tt, rt);
              }
              H.clearLayerUpdates();
            } else
              t.texSubImage3D(r.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Ge.width, Ge.height, Ge.depth, it, Tt, Ge.data);
        } else
          t.texImage3D(r.TEXTURE_2D_ARRAY, 0, k, Ge.width, Ge.height, Ge.depth, 0, it, Tt, Ge.data);
      else if (H.isData3DTexture)
        J ? (Oe && t.texStorage3D(r.TEXTURE_3D, lt, k, Ge.width, Ge.height, Ge.depth), Ye && t.texSubImage3D(r.TEXTURE_3D, 0, 0, 0, 0, Ge.width, Ge.height, Ge.depth, it, Tt, Ge.data)) : t.texImage3D(r.TEXTURE_3D, 0, k, Ge.width, Ge.height, Ge.depth, 0, it, Tt, Ge.data);
      else if (H.isFramebufferTexture) {
        if (Oe)
          if (J)
            t.texStorage2D(r.TEXTURE_2D, lt, k, Ge.width, Ge.height);
          else {
            let Pe = Ge.width, Ue = Ge.height;
            for (let rt = 0; rt < lt; rt++)
              t.texImage2D(r.TEXTURE_2D, rt, k, Pe, Ue, 0, it, Tt, null), Pe >>= 1, Ue >>= 1;
          }
      } else if (qe.length > 0) {
        if (J && Oe) {
          const Pe = Bt(qe[0]);
          t.texStorage2D(r.TEXTURE_2D, lt, k, Pe.width, Pe.height);
        }
        for (let Pe = 0, Ue = qe.length; Pe < Ue; Pe++)
          ye = qe[Pe], J ? Ye && t.texSubImage2D(r.TEXTURE_2D, Pe, 0, 0, it, Tt, ye) : t.texImage2D(r.TEXTURE_2D, Pe, k, it, Tt, ye);
        H.generateMipmaps = !1;
      } else if (J) {
        if (Oe) {
          const Pe = Bt(Ge);
          t.texStorage2D(r.TEXTURE_2D, lt, k, Pe.width, Pe.height);
        }
        Ye && t.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, it, Tt, Ge);
      } else
        t.texImage2D(r.TEXTURE_2D, 0, k, it, Tt, Ge);
      R(H) && M(be), bt.__version = Re.version, H.onUpdate && H.onUpdate(H);
    }
    Z.__version = H.version;
  }
  function We(Z, H, he) {
    if (H.image.length !== 6) return;
    const be = gt(Z, H), He = H.source;
    t.bindTexture(r.TEXTURE_CUBE_MAP, Z.__webglTexture, r.TEXTURE0 + he);
    const Re = i.get(He);
    if (He.version !== Re.__version || be === !0) {
      t.activeTexture(r.TEXTURE0 + he);
      const bt = An.getPrimaries(An.workingColorSpace), Xe = H.colorSpace === Bl ? null : An.getPrimaries(H.colorSpace), ct = H.colorSpace === Bl || bt === Xe ? r.NONE : r.BROWSER_DEFAULT_WEBGL;
      r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL, H.flipY), r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), r.pixelStorei(r.UNPACK_ALIGNMENT, H.unpackAlignment), r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL, ct);
      const _t = H.isCompressedTexture || H.image[0].isCompressedTexture, Ge = H.image[0] && H.image[0].isDataTexture, it = [];
      for (let Ue = 0; Ue < 6; Ue++)
        !_t && !Ge ? it[Ue] = C(H.image[Ue], !0, s.maxCubemapSize) : it[Ue] = Ge ? H.image[Ue].image : H.image[Ue], it[Ue] = ut(H, it[Ue]);
      const Tt = it[0], k = u.convert(H.format, H.colorSpace), ye = u.convert(H.type), qe = N(H.internalFormat, k, ye, H.colorSpace), J = H.isVideoTexture !== !0, Oe = Re.__version === void 0 || be === !0, Ye = He.dataReady;
      let lt = I(H, Tt);
      we(r.TEXTURE_CUBE_MAP, H);
      let Pe;
      if (_t) {
        J && Oe && t.texStorage2D(r.TEXTURE_CUBE_MAP, lt, qe, Tt.width, Tt.height);
        for (let Ue = 0; Ue < 6; Ue++) {
          Pe = it[Ue].mipmaps;
          for (let rt = 0; rt < Pe.length; rt++) {
            const Rt = Pe[rt];
            H.format !== Va ? k !== null ? J ? Ye && t.compressedTexSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt, 0, 0, Rt.width, Rt.height, k, Rt.data) : t.compressedTexImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt, qe, Rt.width, Rt.height, 0, Rt.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : J ? Ye && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt, 0, 0, Rt.width, Rt.height, k, ye, Rt.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt, qe, Rt.width, Rt.height, 0, k, ye, Rt.data);
          }
        }
      } else {
        if (Pe = H.mipmaps, J && Oe) {
          Pe.length > 0 && lt++;
          const Ue = Bt(it[0]);
          t.texStorage2D(r.TEXTURE_CUBE_MAP, lt, qe, Ue.width, Ue.height);
        }
        for (let Ue = 0; Ue < 6; Ue++)
          if (Ge) {
            J ? Ye && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, 0, 0, 0, it[Ue].width, it[Ue].height, k, ye, it[Ue].data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, 0, qe, it[Ue].width, it[Ue].height, 0, k, ye, it[Ue].data);
            for (let rt = 0; rt < Pe.length; rt++) {
              const Yt = Pe[rt].image[Ue].image;
              J ? Ye && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt + 1, 0, 0, Yt.width, Yt.height, k, ye, Yt.data) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt + 1, qe, Yt.width, Yt.height, 0, k, ye, Yt.data);
            }
          } else {
            J ? Ye && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, 0, 0, 0, k, ye, it[Ue]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, 0, qe, k, ye, it[Ue]);
            for (let rt = 0; rt < Pe.length; rt++) {
              const Rt = Pe[rt];
              J ? Ye && t.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt + 1, 0, 0, k, ye, Rt.image[Ue]) : t.texImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X + Ue, rt + 1, qe, k, ye, Rt.image[Ue]);
            }
          }
      }
      R(H) && M(r.TEXTURE_CUBE_MAP), Re.__version = He.version, H.onUpdate && H.onUpdate(H);
    }
    Z.__version = H.version;
  }
  function Mt(Z, H, he, be, He, Re) {
    const bt = u.convert(he.format, he.colorSpace), Xe = u.convert(he.type), ct = N(he.internalFormat, bt, Xe, he.colorSpace), _t = i.get(H), Ge = i.get(he);
    if (Ge.__renderTarget = H, !_t.__hasExternalTextures) {
      const it = Math.max(1, H.width >> Re), Tt = Math.max(1, H.height >> Re);
      He === r.TEXTURE_3D || He === r.TEXTURE_2D_ARRAY ? t.texImage3D(He, Re, ct, it, Tt, H.depth, 0, bt, Xe, null) : t.texImage2D(He, Re, ct, it, Tt, 0, bt, Xe, null);
    }
    t.bindFramebuffer(r.FRAMEBUFFER, Z), Ve(H) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, be, He, Ge.__webglTexture, 0, et(H)) : (He === r.TEXTURE_2D || He >= r.TEXTURE_CUBE_MAP_POSITIVE_X && He <= r.TEXTURE_CUBE_MAP_NEGATIVE_Z) && r.framebufferTexture2D(r.FRAMEBUFFER, be, He, Ge.__webglTexture, Re), t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function yt(Z, H, he) {
    if (r.bindRenderbuffer(r.RENDERBUFFER, Z), H.depthBuffer) {
      const be = H.depthTexture, He = be && be.isDepthTexture ? be.type : null, Re = U(H.stencilBuffer, He), bt = H.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, Xe = et(H);
      Ve(H) ? h.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, Xe, Re, H.width, H.height) : he ? r.renderbufferStorageMultisample(r.RENDERBUFFER, Xe, Re, H.width, H.height) : r.renderbufferStorage(r.RENDERBUFFER, Re, H.width, H.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, bt, r.RENDERBUFFER, Z);
    } else {
      const be = H.textures;
      for (let He = 0; He < be.length; He++) {
        const Re = be[He], bt = u.convert(Re.format, Re.colorSpace), Xe = u.convert(Re.type), ct = N(Re.internalFormat, bt, Xe, Re.colorSpace), _t = et(H);
        he && Ve(H) === !1 ? r.renderbufferStorageMultisample(r.RENDERBUFFER, _t, ct, H.width, H.height) : Ve(H) ? h.renderbufferStorageMultisampleEXT(r.RENDERBUFFER, _t, ct, H.width, H.height) : r.renderbufferStorage(r.RENDERBUFFER, ct, H.width, H.height);
      }
    }
    r.bindRenderbuffer(r.RENDERBUFFER, null);
  }
  function Ct(Z, H) {
    if (H && H.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(r.FRAMEBUFFER, Z), !(H.depthTexture && H.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    const be = i.get(H.depthTexture);
    be.__renderTarget = H, (!be.__webglTexture || H.depthTexture.image.width !== H.width || H.depthTexture.image.height !== H.height) && (H.depthTexture.image.width = H.width, H.depthTexture.image.height = H.height, H.depthTexture.needsUpdate = !0), Se(H.depthTexture, 0);
    const He = be.__webglTexture, Re = et(H);
    if (H.depthTexture.format === np)
      Ve(H) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, He, 0, Re) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_ATTACHMENT, r.TEXTURE_2D, He, 0);
    else if (H.depthTexture.format === ip)
      Ve(H) ? h.framebufferTexture2DMultisampleEXT(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, He, 0, Re) : r.framebufferTexture2D(r.FRAMEBUFFER, r.DEPTH_STENCIL_ATTACHMENT, r.TEXTURE_2D, He, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function _n(Z) {
    const H = i.get(Z), he = Z.isWebGLCubeRenderTarget === !0;
    if (H.__boundDepthTexture !== Z.depthTexture) {
      const be = Z.depthTexture;
      if (H.__depthDisposeCallback && H.__depthDisposeCallback(), be) {
        const He = () => {
          delete H.__boundDepthTexture, delete H.__depthDisposeCallback, be.removeEventListener("dispose", He);
        };
        be.addEventListener("dispose", He), H.__depthDisposeCallback = He;
      }
      H.__boundDepthTexture = be;
    }
    if (Z.depthTexture && !H.__autoAllocateDepthBuffer) {
      if (he) throw new Error("target.depthTexture not supported in Cube render targets");
      const be = Z.texture.mipmaps;
      be && be.length > 0 ? Ct(H.__webglFramebuffer[0], Z) : Ct(H.__webglFramebuffer, Z);
    } else if (he) {
      H.__webglDepthbuffer = [];
      for (let be = 0; be < 6; be++)
        if (t.bindFramebuffer(r.FRAMEBUFFER, H.__webglFramebuffer[be]), H.__webglDepthbuffer[be] === void 0)
          H.__webglDepthbuffer[be] = r.createRenderbuffer(), yt(H.__webglDepthbuffer[be], Z, !1);
        else {
          const He = Z.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, Re = H.__webglDepthbuffer[be];
          r.bindRenderbuffer(r.RENDERBUFFER, Re), r.framebufferRenderbuffer(r.FRAMEBUFFER, He, r.RENDERBUFFER, Re);
        }
    } else {
      const be = Z.texture.mipmaps;
      if (be && be.length > 0 ? t.bindFramebuffer(r.FRAMEBUFFER, H.__webglFramebuffer[0]) : t.bindFramebuffer(r.FRAMEBUFFER, H.__webglFramebuffer), H.__webglDepthbuffer === void 0)
        H.__webglDepthbuffer = r.createRenderbuffer(), yt(H.__webglDepthbuffer, Z, !1);
      else {
        const He = Z.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, Re = H.__webglDepthbuffer;
        r.bindRenderbuffer(r.RENDERBUFFER, Re), r.framebufferRenderbuffer(r.FRAMEBUFFER, He, r.RENDERBUFFER, Re);
      }
    }
    t.bindFramebuffer(r.FRAMEBUFFER, null);
  }
  function Dt(Z, H, he) {
    const be = i.get(Z);
    H !== void 0 && Mt(be.__webglFramebuffer, Z, Z.texture, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, 0), he !== void 0 && _n(Z);
  }
  function ee(Z) {
    const H = Z.texture, he = i.get(Z), be = i.get(H);
    Z.addEventListener("dispose", X);
    const He = Z.textures, Re = Z.isWebGLCubeRenderTarget === !0, bt = He.length > 1;
    if (bt || (be.__webglTexture === void 0 && (be.__webglTexture = r.createTexture()), be.__version = H.version, f.memory.textures++), Re) {
      he.__webglFramebuffer = [];
      for (let Xe = 0; Xe < 6; Xe++)
        if (H.mipmaps && H.mipmaps.length > 0) {
          he.__webglFramebuffer[Xe] = [];
          for (let ct = 0; ct < H.mipmaps.length; ct++)
            he.__webglFramebuffer[Xe][ct] = r.createFramebuffer();
        } else
          he.__webglFramebuffer[Xe] = r.createFramebuffer();
    } else {
      if (H.mipmaps && H.mipmaps.length > 0) {
        he.__webglFramebuffer = [];
        for (let Xe = 0; Xe < H.mipmaps.length; Xe++)
          he.__webglFramebuffer[Xe] = r.createFramebuffer();
      } else
        he.__webglFramebuffer = r.createFramebuffer();
      if (bt)
        for (let Xe = 0, ct = He.length; Xe < ct; Xe++) {
          const _t = i.get(He[Xe]);
          _t.__webglTexture === void 0 && (_t.__webglTexture = r.createTexture(), f.memory.textures++);
        }
      if (Z.samples > 0 && Ve(Z) === !1) {
        he.__webglMultisampledFramebuffer = r.createFramebuffer(), he.__webglColorRenderbuffer = [], t.bindFramebuffer(r.FRAMEBUFFER, he.__webglMultisampledFramebuffer);
        for (let Xe = 0; Xe < He.length; Xe++) {
          const ct = He[Xe];
          he.__webglColorRenderbuffer[Xe] = r.createRenderbuffer(), r.bindRenderbuffer(r.RENDERBUFFER, he.__webglColorRenderbuffer[Xe]);
          const _t = u.convert(ct.format, ct.colorSpace), Ge = u.convert(ct.type), it = N(ct.internalFormat, _t, Ge, ct.colorSpace, Z.isXRRenderTarget === !0), Tt = et(Z);
          r.renderbufferStorageMultisample(r.RENDERBUFFER, Tt, it, Z.width, Z.height), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + Xe, r.RENDERBUFFER, he.__webglColorRenderbuffer[Xe]);
        }
        r.bindRenderbuffer(r.RENDERBUFFER, null), Z.depthBuffer && (he.__webglDepthRenderbuffer = r.createRenderbuffer(), yt(he.__webglDepthRenderbuffer, Z, !0)), t.bindFramebuffer(r.FRAMEBUFFER, null);
      }
    }
    if (Re) {
      t.bindTexture(r.TEXTURE_CUBE_MAP, be.__webglTexture), we(r.TEXTURE_CUBE_MAP, H);
      for (let Xe = 0; Xe < 6; Xe++)
        if (H.mipmaps && H.mipmaps.length > 0)
          for (let ct = 0; ct < H.mipmaps.length; ct++)
            Mt(he.__webglFramebuffer[Xe][ct], Z, H, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + Xe, ct);
        else
          Mt(he.__webglFramebuffer[Xe], Z, H, r.COLOR_ATTACHMENT0, r.TEXTURE_CUBE_MAP_POSITIVE_X + Xe, 0);
      R(H) && M(r.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (bt) {
      for (let Xe = 0, ct = He.length; Xe < ct; Xe++) {
        const _t = He[Xe], Ge = i.get(_t);
        let it = r.TEXTURE_2D;
        (Z.isWebGL3DRenderTarget || Z.isWebGLArrayRenderTarget) && (it = Z.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY), t.bindTexture(it, Ge.__webglTexture), we(it, _t), Mt(he.__webglFramebuffer, Z, _t, r.COLOR_ATTACHMENT0 + Xe, it, 0), R(_t) && M(it);
      }
      t.unbindTexture();
    } else {
      let Xe = r.TEXTURE_2D;
      if ((Z.isWebGL3DRenderTarget || Z.isWebGLArrayRenderTarget) && (Xe = Z.isWebGL3DRenderTarget ? r.TEXTURE_3D : r.TEXTURE_2D_ARRAY), t.bindTexture(Xe, be.__webglTexture), we(Xe, H), H.mipmaps && H.mipmaps.length > 0)
        for (let ct = 0; ct < H.mipmaps.length; ct++)
          Mt(he.__webglFramebuffer[ct], Z, H, r.COLOR_ATTACHMENT0, Xe, ct);
      else
        Mt(he.__webglFramebuffer, Z, H, r.COLOR_ATTACHMENT0, Xe, 0);
      R(H) && M(Xe), t.unbindTexture();
    }
    Z.depthBuffer && _n(Z);
  }
  function Be(Z) {
    const H = Z.textures;
    for (let he = 0, be = H.length; he < be; he++) {
      const He = H[he];
      if (R(He)) {
        const Re = w(Z), bt = i.get(He).__webglTexture;
        t.bindTexture(Re, bt), M(Re), t.unbindTexture();
      }
    }
  }
  const Ce = [], Ie = [];
  function De(Z) {
    if (Z.samples > 0) {
      if (Ve(Z) === !1) {
        const H = Z.textures, he = Z.width, be = Z.height;
        let He = r.COLOR_BUFFER_BIT;
        const Re = Z.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT, bt = i.get(Z), Xe = H.length > 1;
        if (Xe)
          for (let _t = 0; _t < H.length; _t++)
            t.bindFramebuffer(r.FRAMEBUFFER, bt.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + _t, r.RENDERBUFFER, null), t.bindFramebuffer(r.FRAMEBUFFER, bt.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + _t, r.TEXTURE_2D, null, 0);
        t.bindFramebuffer(r.READ_FRAMEBUFFER, bt.__webglMultisampledFramebuffer);
        const ct = Z.texture.mipmaps;
        ct && ct.length > 0 ? t.bindFramebuffer(r.DRAW_FRAMEBUFFER, bt.__webglFramebuffer[0]) : t.bindFramebuffer(r.DRAW_FRAMEBUFFER, bt.__webglFramebuffer);
        for (let _t = 0; _t < H.length; _t++) {
          if (Z.resolveDepthBuffer && (Z.depthBuffer && (He |= r.DEPTH_BUFFER_BIT), Z.stencilBuffer && Z.resolveStencilBuffer && (He |= r.STENCIL_BUFFER_BIT)), Xe) {
            r.framebufferRenderbuffer(r.READ_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.RENDERBUFFER, bt.__webglColorRenderbuffer[_t]);
            const Ge = i.get(H[_t]).__webglTexture;
            r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, Ge, 0);
          }
          r.blitFramebuffer(0, 0, he, be, 0, 0, he, be, He, r.NEAREST), p === !0 && (Ce.length = 0, Ie.length = 0, Ce.push(r.COLOR_ATTACHMENT0 + _t), Z.depthBuffer && Z.resolveDepthBuffer === !1 && (Ce.push(Re), Ie.push(Re), r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, Ie)), r.invalidateFramebuffer(r.READ_FRAMEBUFFER, Ce));
        }
        if (t.bindFramebuffer(r.READ_FRAMEBUFFER, null), t.bindFramebuffer(r.DRAW_FRAMEBUFFER, null), Xe)
          for (let _t = 0; _t < H.length; _t++) {
            t.bindFramebuffer(r.FRAMEBUFFER, bt.__webglMultisampledFramebuffer), r.framebufferRenderbuffer(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0 + _t, r.RENDERBUFFER, bt.__webglColorRenderbuffer[_t]);
            const Ge = i.get(H[_t]).__webglTexture;
            t.bindFramebuffer(r.FRAMEBUFFER, bt.__webglFramebuffer), r.framebufferTexture2D(r.DRAW_FRAMEBUFFER, r.COLOR_ATTACHMENT0 + _t, r.TEXTURE_2D, Ge, 0);
          }
        t.bindFramebuffer(r.DRAW_FRAMEBUFFER, bt.__webglMultisampledFramebuffer);
      } else if (Z.depthBuffer && Z.resolveDepthBuffer === !1 && p) {
        const H = Z.stencilBuffer ? r.DEPTH_STENCIL_ATTACHMENT : r.DEPTH_ATTACHMENT;
        r.invalidateFramebuffer(r.DRAW_FRAMEBUFFER, [H]);
      }
    }
  }
  function et(Z) {
    return Math.min(s.maxSamples, Z.samples);
  }
  function Ve(Z) {
    const H = i.get(Z);
    return Z.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && H.__useRenderToTexture !== !1;
  }
  function Qe(Z) {
    const H = f.render.frame;
    _.get(Z) !== H && (_.set(Z, H), Z.update());
  }
  function ut(Z, H) {
    const he = Z.colorSpace, be = Z.format, He = Z.type;
    return Z.isCompressedTexture === !0 || Z.isVideoTexture === !0 || he !== ju && he !== Bl && (An.getTransfer(he) === Fn ? (be !== Va || He !== Dr) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", he)), H;
  }
  function Bt(Z) {
    return typeof HTMLImageElement < "u" && Z instanceof HTMLImageElement ? (v.width = Z.naturalWidth || Z.width, v.height = Z.naturalHeight || Z.height) : typeof VideoFrame < "u" && Z instanceof VideoFrame ? (v.width = Z.displayWidth, v.height = Z.displayHeight) : (v.width = Z.width, v.height = Z.height), v;
  }
  this.allocateTextureUnit = Q, this.resetTextureUnits = me, this.setTexture2D = Se, this.setTexture2DArray = B, this.setTexture3D = K, this.setTextureCube = q, this.rebindTextures = Dt, this.setupRenderTarget = ee, this.updateRenderTargetMipmap = Be, this.updateMultisampleRenderTarget = De, this.setupDepthRenderbuffer = _n, this.setupFrameBufferTexture = Mt, this.useMultisampledRTT = Ve;
}
function n2(r, e) {
  function t(i, s = Bl) {
    let u;
    const f = An.getTransfer(s);
    if (i === Dr) return r.UNSIGNED_BYTE;
    if (i === w_) return r.UNSIGNED_SHORT_4_4_4_4;
    if (i === U_) return r.UNSIGNED_SHORT_5_5_5_1;
    if (i === qE) return r.UNSIGNED_INT_5_9_9_9_REV;
    if (i === GE) return r.BYTE;
    if (i === XE) return r.SHORT;
    if (i === ep) return r.UNSIGNED_SHORT;
    if (i === D_) return r.INT;
    if (i === Gl) return r.UNSIGNED_INT;
    if (i === Ds) return r.FLOAT;
    if (i === hp) return r.HALF_FLOAT;
    if (i === YE) return r.ALPHA;
    if (i === WE) return r.RGB;
    if (i === Va) return r.RGBA;
    if (i === np) return r.DEPTH_COMPONENT;
    if (i === ip) return r.DEPTH_STENCIL;
    if (i === N_) return r.RED;
    if (i === ig) return r.RED_INTEGER;
    if (i === jE) return r.RG;
    if (i === O_) return r.RG_INTEGER;
    if (i === L_) return r.RGBA_INTEGER;
    if (i === wv || i === Uv || i === Nv || i === Ov)
      if (f === Fn)
        if (u = e.get("WEBGL_compressed_texture_s3tc_srgb"), u !== null) {
          if (i === wv) return u.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (i === Uv) return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (i === Nv) return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (i === Ov) return u.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (u = e.get("WEBGL_compressed_texture_s3tc"), u !== null) {
        if (i === wv) return u.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (i === Uv) return u.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (i === Nv) return u.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (i === Ov) return u.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (i === Y0 || i === W0 || i === j0 || i === Z0)
      if (u = e.get("WEBGL_compressed_texture_pvrtc"), u !== null) {
        if (i === Y0) return u.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (i === W0) return u.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (i === j0) return u.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (i === Z0) return u.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (i === K0 || i === Q0 || i === k0)
      if (u = e.get("WEBGL_compressed_texture_etc"), u !== null) {
        if (i === K0 || i === Q0) return f === Fn ? u.COMPRESSED_SRGB8_ETC2 : u.COMPRESSED_RGB8_ETC2;
        if (i === k0) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : u.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (i === J0 || i === $0 || i === e_ || i === t_ || i === n_ || i === i_ || i === a_ || i === s_ || i === r_ || i === o_ || i === l_ || i === u_ || i === c_ || i === f_)
      if (u = e.get("WEBGL_compressed_texture_astc"), u !== null) {
        if (i === J0) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : u.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (i === $0) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : u.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (i === e_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : u.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (i === t_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : u.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (i === n_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : u.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (i === i_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : u.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (i === a_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : u.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (i === s_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : u.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (i === r_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : u.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (i === o_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : u.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (i === l_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : u.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (i === u_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : u.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (i === c_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : u.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (i === f_) return f === Fn ? u.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : u.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (i === Lv || i === h_ || i === d_)
      if (u = e.get("EXT_texture_compression_bptc"), u !== null) {
        if (i === Lv) return f === Fn ? u.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : u.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (i === h_) return u.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (i === d_) return u.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (i === ZE || i === p_ || i === m_ || i === v_)
      if (u = e.get("EXT_texture_compression_rgtc"), u !== null) {
        if (i === Lv) return u.COMPRESSED_RED_RGTC1_EXT;
        if (i === p_) return u.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (i === m_) return u.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (i === v_) return u.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return i === tp ? r.UNSIGNED_INT_24_8 : r[i] !== void 0 ? r[i] : null;
  }
  return { convert: t };
}
class i2 extends Ai {
  /**
   * Creates a new raw texture.
   *
   * @param {?WebGLTexture} [sourceTexture=null] - The external texture.
   */
  constructor(e = null) {
    super(), this.sourceTexture = e, this.isExternalTexture = !0;
  }
}
const oz = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, lz = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class uz {
  /**
   * Constructs a new depth sensing module.
   */
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  /**
   * Inits the depth sensing module
   *
   * @param {XRWebGLDepthInformation} depthData - The XR depth data.
   * @param {XRRenderState} renderState - The XR render state.
   */
  init(e, t) {
    if (this.texture === null) {
      const i = new i2(e.texture);
      (e.depthNear !== t.depthNear || e.depthFar !== t.depthFar) && (this.depthNear = e.depthNear, this.depthFar = e.depthFar), this.texture = i;
    }
  }
  /**
   * Returns a plane mesh that visualizes the depth texture.
   *
   * @param {ArrayCamera} cameraXR - The XR camera.
   * @return {?Mesh} The plane mesh.
   */
  getMesh(e) {
    if (this.texture !== null && this.mesh === null) {
      const t = e.cameras[0].viewport, i = new oo({
        vertexShader: oz,
        fragmentShader: lz,
        uniforms: {
          depthColor: { value: this.texture },
          depthWidth: { value: t.z },
          depthHeight: { value: t.w }
        }
      });
      this.mesh = new Xi(new pp(20, 20), i);
    }
    return this.mesh;
  }
  /**
   * Resets the module
   */
  reset() {
    this.texture = null, this.mesh = null;
  }
  /**
   * Returns a texture representing the depth of the user's environment.
   *
   * @return {?ExternalTexture} The depth texture.
   */
  getDepthTexture() {
    return this.texture;
  }
}
class cz extends Zo {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGL2RenderingContext} gl - The rendering context.
   */
  constructor(e, t) {
    super();
    const i = this;
    let s = null, u = 1, f = null, h = "local-floor", p = 1, v = null, _ = null, S = null, E = null, x = null, A = null;
    const C = new uz(), R = {}, M = t.getContextAttributes();
    let w = null, N = null;
    const U = [], I = [], P = new ze();
    let X = null;
    const Y = new Ui();
    Y.viewport = new Un();
    const z = new Ui();
    z.viewport = new Un();
    const L = [Y, z], W = new YR();
    let me = null, Q = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(_e) {
      let Je = U[_e];
      return Je === void 0 && (Je = new O0(), U[_e] = Je), Je.getTargetRaySpace();
    }, this.getControllerGrip = function(_e) {
      let Je = U[_e];
      return Je === void 0 && (Je = new O0(), U[_e] = Je), Je.getGripSpace();
    }, this.getHand = function(_e) {
      let Je = U[_e];
      return Je === void 0 && (Je = new O0(), U[_e] = Je), Je.getHandSpace();
    };
    function oe(_e) {
      const Je = I.indexOf(_e.inputSource);
      if (Je === -1)
        return;
      const We = U[Je];
      We !== void 0 && (We.update(_e.inputSource, _e.frame, v || f), We.dispatchEvent({ type: _e.type, data: _e.inputSource }));
    }
    function Se() {
      s.removeEventListener("select", oe), s.removeEventListener("selectstart", oe), s.removeEventListener("selectend", oe), s.removeEventListener("squeeze", oe), s.removeEventListener("squeezestart", oe), s.removeEventListener("squeezeend", oe), s.removeEventListener("end", Se), s.removeEventListener("inputsourceschange", B);
      for (let _e = 0; _e < U.length; _e++) {
        const Je = I[_e];
        Je !== null && (I[_e] = null, U[_e].disconnect(Je));
      }
      me = null, Q = null, C.reset();
      for (const _e in R)
        delete R[_e];
      e.setRenderTarget(w), x = null, E = null, S = null, s = null, N = null, $e.stop(), i.isPresenting = !1, e.setPixelRatio(X), e.setSize(P.width, P.height, !1), i.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(_e) {
      u = _e, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(_e) {
      h = _e, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return v || f;
    }, this.setReferenceSpace = function(_e) {
      v = _e;
    }, this.getBaseLayer = function() {
      return E !== null ? E : x;
    }, this.getBinding = function() {
      return S;
    }, this.getFrame = function() {
      return A;
    }, this.getSession = function() {
      return s;
    }, this.setSession = async function(_e) {
      if (s = _e, s !== null) {
        if (w = e.getRenderTarget(), s.addEventListener("select", oe), s.addEventListener("selectstart", oe), s.addEventListener("selectend", oe), s.addEventListener("squeeze", oe), s.addEventListener("squeezestart", oe), s.addEventListener("squeezeend", oe), s.addEventListener("end", Se), s.addEventListener("inputsourceschange", B), M.xrCompatible !== !0 && await t.makeXRCompatible(), X = e.getPixelRatio(), e.getSize(P), typeof XRWebGLBinding < "u" && (S = new XRWebGLBinding(s, t)), S !== null && "createProjectionLayer" in XRWebGLBinding.prototype) {
          let We = null, Mt = null, yt = null;
          M.depth && (yt = M.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, We = M.stencil ? ip : np, Mt = M.stencil ? tp : Gl);
          const Ct = {
            colorFormat: t.RGBA8,
            depthFormat: yt,
            scaleFactor: u
          };
          E = S.createProjectionLayer(Ct), s.updateRenderState({ layers: [E] }), e.setPixelRatio(1), e.setSize(E.textureWidth, E.textureHeight, !1), N = new jo(
            E.textureWidth,
            E.textureHeight,
            {
              format: Va,
              type: Dr,
              depthTexture: new sM(E.textureWidth, E.textureHeight, Mt, void 0, void 0, void 0, void 0, void 0, void 0, We),
              stencilBuffer: M.stencil,
              colorSpace: e.outputColorSpace,
              samples: M.antialias ? 4 : 0,
              resolveDepthBuffer: E.ignoreDepthValues === !1,
              resolveStencilBuffer: E.ignoreDepthValues === !1
            }
          );
        } else {
          const We = {
            antialias: M.antialias,
            alpha: !0,
            depth: M.depth,
            stencil: M.stencil,
            framebufferScaleFactor: u
          };
          x = new XRWebGLLayer(s, t, We), s.updateRenderState({ baseLayer: x }), e.setPixelRatio(1), e.setSize(x.framebufferWidth, x.framebufferHeight, !1), N = new jo(
            x.framebufferWidth,
            x.framebufferHeight,
            {
              format: Va,
              type: Dr,
              colorSpace: e.outputColorSpace,
              stencilBuffer: M.stencil,
              resolveDepthBuffer: x.ignoreDepthValues === !1,
              resolveStencilBuffer: x.ignoreDepthValues === !1
            }
          );
        }
        N.isXRRenderTarget = !0, this.setFoveation(p), v = null, f = await s.requestReferenceSpace(h), $e.setContext(s), $e.start(), i.isPresenting = !0, i.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (s !== null)
        return s.environmentBlendMode;
    }, this.getDepthTexture = function() {
      return C.getDepthTexture();
    };
    function B(_e) {
      for (let Je = 0; Je < _e.removed.length; Je++) {
        const We = _e.removed[Je], Mt = I.indexOf(We);
        Mt >= 0 && (I[Mt] = null, U[Mt].disconnect(We));
      }
      for (let Je = 0; Je < _e.added.length; Je++) {
        const We = _e.added[Je];
        let Mt = I.indexOf(We);
        if (Mt === -1) {
          for (let Ct = 0; Ct < U.length; Ct++)
            if (Ct >= I.length) {
              I.push(We), Mt = Ct;
              break;
            } else if (I[Ct] === null) {
              I[Ct] = We, Mt = Ct;
              break;
            }
          if (Mt === -1) break;
        }
        const yt = U[Mt];
        yt && yt.connect(We);
      }
    }
    const K = new j(), q = new j();
    function se(_e, Je, We) {
      K.setFromMatrixPosition(Je.matrixWorld), q.setFromMatrixPosition(We.matrixWorld);
      const Mt = K.distanceTo(q), yt = Je.projectionMatrix.elements, Ct = We.projectionMatrix.elements, _n = yt[14] / (yt[10] - 1), Dt = yt[14] / (yt[10] + 1), ee = (yt[9] + 1) / yt[5], Be = (yt[9] - 1) / yt[5], Ce = (yt[8] - 1) / yt[0], Ie = (Ct[8] + 1) / Ct[0], De = _n * Ce, et = _n * Ie, Ve = Mt / (-Ce + Ie), Qe = Ve * -Ce;
      if (Je.matrixWorld.decompose(_e.position, _e.quaternion, _e.scale), _e.translateX(Qe), _e.translateZ(Ve), _e.matrixWorld.compose(_e.position, _e.quaternion, _e.scale), _e.matrixWorldInverse.copy(_e.matrixWorld).invert(), yt[10] === -1)
        _e.projectionMatrix.copy(Je.projectionMatrix), _e.projectionMatrixInverse.copy(Je.projectionMatrixInverse);
      else {
        const ut = _n + Ve, Bt = Dt + Ve, Z = De - Qe, H = et + (Mt - Qe), he = ee * Dt / Bt * ut, be = Be * Dt / Bt * ut;
        _e.projectionMatrix.makePerspective(Z, H, he, be, ut, Bt), _e.projectionMatrixInverse.copy(_e.projectionMatrix).invert();
      }
    }
    function le(_e, Je) {
      Je === null ? _e.matrixWorld.copy(_e.matrix) : _e.matrixWorld.multiplyMatrices(Je.matrixWorld, _e.matrix), _e.matrixWorldInverse.copy(_e.matrixWorld).invert();
    }
    this.updateCamera = function(_e) {
      if (s === null) return;
      let Je = _e.near, We = _e.far;
      C.texture !== null && (C.depthNear > 0 && (Je = C.depthNear), C.depthFar > 0 && (We = C.depthFar)), W.near = z.near = Y.near = Je, W.far = z.far = Y.far = We, (me !== W.near || Q !== W.far) && (s.updateRenderState({
        depthNear: W.near,
        depthFar: W.far
      }), me = W.near, Q = W.far), W.layers.mask = _e.layers.mask | 6, Y.layers.mask = W.layers.mask & 3, z.layers.mask = W.layers.mask & 5;
      const Mt = _e.parent, yt = W.cameras;
      le(W, Mt);
      for (let Ct = 0; Ct < yt.length; Ct++)
        le(yt[Ct], Mt);
      yt.length === 2 ? se(W, Y, z) : W.projectionMatrix.copy(Y.projectionMatrix), Te(_e, W, Mt);
    };
    function Te(_e, Je, We) {
      We === null ? _e.matrix.copy(Je.matrixWorld) : (_e.matrix.copy(We.matrixWorld), _e.matrix.invert(), _e.matrix.multiply(Je.matrixWorld)), _e.matrix.decompose(_e.position, _e.quaternion, _e.scale), _e.updateMatrixWorld(!0), _e.projectionMatrix.copy(Je.projectionMatrix), _e.projectionMatrixInverse.copy(Je.projectionMatrixInverse), _e.isPerspectiveCamera && (_e.fov = sp * 2 * Math.atan(1 / _e.projectionMatrix.elements[5]), _e.zoom = 1);
    }
    this.getCamera = function() {
      return W;
    }, this.getFoveation = function() {
      if (!(E === null && x === null))
        return p;
    }, this.setFoveation = function(_e) {
      p = _e, E !== null && (E.fixedFoveation = _e), x !== null && x.fixedFoveation !== void 0 && (x.fixedFoveation = _e);
    }, this.hasDepthSensing = function() {
      return C.texture !== null;
    }, this.getDepthSensingMesh = function() {
      return C.getMesh(W);
    }, this.getCameraTexture = function(_e) {
      return R[_e];
    };
    let we = null;
    function gt(_e, Je) {
      if (_ = Je.getViewerPose(v || f), A = Je, _ !== null) {
        const We = _.views;
        x !== null && (e.setRenderTargetFramebuffer(N, x.framebuffer), e.setRenderTarget(N));
        let Mt = !1;
        We.length !== W.cameras.length && (W.cameras.length = 0, Mt = !0);
        for (let Dt = 0; Dt < We.length; Dt++) {
          const ee = We[Dt];
          let Be = null;
          if (x !== null)
            Be = x.getViewport(ee);
          else {
            const Ie = S.getViewSubImage(E, ee);
            Be = Ie.viewport, Dt === 0 && (e.setRenderTargetTextures(
              N,
              Ie.colorTexture,
              Ie.depthStencilTexture
            ), e.setRenderTarget(N));
          }
          let Ce = L[Dt];
          Ce === void 0 && (Ce = new Ui(), Ce.layers.enable(Dt), Ce.viewport = new Un(), L[Dt] = Ce), Ce.matrix.fromArray(ee.transform.matrix), Ce.matrix.decompose(Ce.position, Ce.quaternion, Ce.scale), Ce.projectionMatrix.fromArray(ee.projectionMatrix), Ce.projectionMatrixInverse.copy(Ce.projectionMatrix).invert(), Ce.viewport.set(Be.x, Be.y, Be.width, Be.height), Dt === 0 && (W.matrix.copy(Ce.matrix), W.matrix.decompose(W.position, W.quaternion, W.scale)), Mt === !0 && W.cameras.push(Ce);
        }
        const yt = s.enabledFeatures;
        if (yt && yt.includes("depth-sensing") && s.depthUsage == "gpu-optimized" && S) {
          const Dt = S.getDepthInformation(We[0]);
          Dt && Dt.isValid && Dt.texture && C.init(Dt, s.renderState);
        }
        if (yt && yt.includes("camera-access") && (e.state.unbindTexture(), S))
          for (let Dt = 0; Dt < We.length; Dt++) {
            const ee = We[Dt].camera;
            if (ee) {
              let Be = R[ee];
              Be || (Be = new i2(), R[ee] = Be);
              const Ce = S.getCameraImage(ee);
              Be.sourceTexture = Ce;
            }
          }
      }
      for (let We = 0; We < U.length; We++) {
        const Mt = I[We], yt = U[We];
        Mt !== null && yt !== void 0 && yt.update(Mt, Je, v || f);
      }
      we && we(_e, Je), Je.detectedPlanes && i.dispatchEvent({ type: "planesdetected", data: Je }), A = null;
    }
    const $e = new kR();
    $e.setAnimationLoop(gt), this.setAnimationLoop = function(_e) {
      we = _e;
    }, this.dispose = function() {
    };
  }
}
const ff = /* @__PURE__ */ new ks(), fz = /* @__PURE__ */ new qt();
function hz(r, e) {
  function t(R, M) {
    R.matrixAutoUpdate === !0 && R.updateMatrix(), M.value.copy(R.matrix);
  }
  function i(R, M) {
    M.color.getRGB(R.fogColor.value, QA(r)), M.isFog ? (R.fogNear.value = M.near, R.fogFar.value = M.far) : M.isFogExp2 && (R.fogDensity.value = M.density);
  }
  function s(R, M, w, N, U) {
    M.isMeshBasicMaterial || M.isMeshLambertMaterial ? u(R, M) : M.isMeshToonMaterial ? (u(R, M), S(R, M)) : M.isMeshPhongMaterial ? (u(R, M), _(R, M)) : M.isMeshStandardMaterial ? (u(R, M), E(R, M), M.isMeshPhysicalMaterial && x(R, M, U)) : M.isMeshMatcapMaterial ? (u(R, M), A(R, M)) : M.isMeshDepthMaterial ? u(R, M) : M.isMeshDistanceMaterial ? (u(R, M), C(R, M)) : M.isMeshNormalMaterial ? u(R, M) : M.isLineBasicMaterial ? (f(R, M), M.isLineDashedMaterial && h(R, M)) : M.isPointsMaterial ? p(R, M, w, N) : M.isSpriteMaterial ? v(R, M) : M.isShadowMaterial ? (R.color.value.copy(M.color), R.opacity.value = M.opacity) : M.isShaderMaterial && (M.uniformsNeedUpdate = !1);
  }
  function u(R, M) {
    R.opacity.value = M.opacity, M.color && R.diffuse.value.copy(M.color), M.emissive && R.emissive.value.copy(M.emissive).multiplyScalar(M.emissiveIntensity), M.map && (R.map.value = M.map, t(M.map, R.mapTransform)), M.alphaMap && (R.alphaMap.value = M.alphaMap, t(M.alphaMap, R.alphaMapTransform)), M.bumpMap && (R.bumpMap.value = M.bumpMap, t(M.bumpMap, R.bumpMapTransform), R.bumpScale.value = M.bumpScale, M.side === cs && (R.bumpScale.value *= -1)), M.normalMap && (R.normalMap.value = M.normalMap, t(M.normalMap, R.normalMapTransform), R.normalScale.value.copy(M.normalScale), M.side === cs && R.normalScale.value.negate()), M.displacementMap && (R.displacementMap.value = M.displacementMap, t(M.displacementMap, R.displacementMapTransform), R.displacementScale.value = M.displacementScale, R.displacementBias.value = M.displacementBias), M.emissiveMap && (R.emissiveMap.value = M.emissiveMap, t(M.emissiveMap, R.emissiveMapTransform)), M.specularMap && (R.specularMap.value = M.specularMap, t(M.specularMap, R.specularMapTransform)), M.alphaTest > 0 && (R.alphaTest.value = M.alphaTest);
    const w = e.get(M), N = w.envMap, U = w.envMapRotation;
    N && (R.envMap.value = N, ff.copy(U), ff.x *= -1, ff.y *= -1, ff.z *= -1, N.isCubeTexture && N.isRenderTargetTexture === !1 && (ff.y *= -1, ff.z *= -1), R.envMapRotation.value.setFromMatrix4(fz.makeRotationFromEuler(ff)), R.flipEnvMap.value = N.isCubeTexture && N.isRenderTargetTexture === !1 ? -1 : 1, R.reflectivity.value = M.reflectivity, R.ior.value = M.ior, R.refractionRatio.value = M.refractionRatio), M.lightMap && (R.lightMap.value = M.lightMap, R.lightMapIntensity.value = M.lightMapIntensity, t(M.lightMap, R.lightMapTransform)), M.aoMap && (R.aoMap.value = M.aoMap, R.aoMapIntensity.value = M.aoMapIntensity, t(M.aoMap, R.aoMapTransform));
  }
  function f(R, M) {
    R.diffuse.value.copy(M.color), R.opacity.value = M.opacity, M.map && (R.map.value = M.map, t(M.map, R.mapTransform));
  }
  function h(R, M) {
    R.dashSize.value = M.dashSize, R.totalSize.value = M.dashSize + M.gapSize, R.scale.value = M.scale;
  }
  function p(R, M, w, N) {
    R.diffuse.value.copy(M.color), R.opacity.value = M.opacity, R.size.value = M.size * w, R.scale.value = N * 0.5, M.map && (R.map.value = M.map, t(M.map, R.uvTransform)), M.alphaMap && (R.alphaMap.value = M.alphaMap, t(M.alphaMap, R.alphaMapTransform)), M.alphaTest > 0 && (R.alphaTest.value = M.alphaTest);
  }
  function v(R, M) {
    R.diffuse.value.copy(M.color), R.opacity.value = M.opacity, R.rotation.value = M.rotation, M.map && (R.map.value = M.map, t(M.map, R.mapTransform)), M.alphaMap && (R.alphaMap.value = M.alphaMap, t(M.alphaMap, R.alphaMapTransform)), M.alphaTest > 0 && (R.alphaTest.value = M.alphaTest);
  }
  function _(R, M) {
    R.specular.value.copy(M.specular), R.shininess.value = Math.max(M.shininess, 1e-4);
  }
  function S(R, M) {
    M.gradientMap && (R.gradientMap.value = M.gradientMap);
  }
  function E(R, M) {
    R.metalness.value = M.metalness, M.metalnessMap && (R.metalnessMap.value = M.metalnessMap, t(M.metalnessMap, R.metalnessMapTransform)), R.roughness.value = M.roughness, M.roughnessMap && (R.roughnessMap.value = M.roughnessMap, t(M.roughnessMap, R.roughnessMapTransform)), M.envMap && (R.envMapIntensity.value = M.envMapIntensity);
  }
  function x(R, M, w) {
    R.ior.value = M.ior, M.sheen > 0 && (R.sheenColor.value.copy(M.sheenColor).multiplyScalar(M.sheen), R.sheenRoughness.value = M.sheenRoughness, M.sheenColorMap && (R.sheenColorMap.value = M.sheenColorMap, t(M.sheenColorMap, R.sheenColorMapTransform)), M.sheenRoughnessMap && (R.sheenRoughnessMap.value = M.sheenRoughnessMap, t(M.sheenRoughnessMap, R.sheenRoughnessMapTransform))), M.clearcoat > 0 && (R.clearcoat.value = M.clearcoat, R.clearcoatRoughness.value = M.clearcoatRoughness, M.clearcoatMap && (R.clearcoatMap.value = M.clearcoatMap, t(M.clearcoatMap, R.clearcoatMapTransform)), M.clearcoatRoughnessMap && (R.clearcoatRoughnessMap.value = M.clearcoatRoughnessMap, t(M.clearcoatRoughnessMap, R.clearcoatRoughnessMapTransform)), M.clearcoatNormalMap && (R.clearcoatNormalMap.value = M.clearcoatNormalMap, t(M.clearcoatNormalMap, R.clearcoatNormalMapTransform), R.clearcoatNormalScale.value.copy(M.clearcoatNormalScale), M.side === cs && R.clearcoatNormalScale.value.negate())), M.dispersion > 0 && (R.dispersion.value = M.dispersion), M.iridescence > 0 && (R.iridescence.value = M.iridescence, R.iridescenceIOR.value = M.iridescenceIOR, R.iridescenceThicknessMinimum.value = M.iridescenceThicknessRange[0], R.iridescenceThicknessMaximum.value = M.iridescenceThicknessRange[1], M.iridescenceMap && (R.iridescenceMap.value = M.iridescenceMap, t(M.iridescenceMap, R.iridescenceMapTransform)), M.iridescenceThicknessMap && (R.iridescenceThicknessMap.value = M.iridescenceThicknessMap, t(M.iridescenceThicknessMap, R.iridescenceThicknessMapTransform))), M.transmission > 0 && (R.transmission.value = M.transmission, R.transmissionSamplerMap.value = w.texture, R.transmissionSamplerSize.value.set(w.width, w.height), M.transmissionMap && (R.transmissionMap.value = M.transmissionMap, t(M.transmissionMap, R.transmissionMapTransform)), R.thickness.value = M.thickness, M.thicknessMap && (R.thicknessMap.value = M.thicknessMap, t(M.thicknessMap, R.thicknessMapTransform)), R.attenuationDistance.value = M.attenuationDistance, R.attenuationColor.value.copy(M.attenuationColor)), M.anisotropy > 0 && (R.anisotropyVector.value.set(M.anisotropy * Math.cos(M.anisotropyRotation), M.anisotropy * Math.sin(M.anisotropyRotation)), M.anisotropyMap && (R.anisotropyMap.value = M.anisotropyMap, t(M.anisotropyMap, R.anisotropyMapTransform))), R.specularIntensity.value = M.specularIntensity, R.specularColor.value.copy(M.specularColor), M.specularColorMap && (R.specularColorMap.value = M.specularColorMap, t(M.specularColorMap, R.specularColorMapTransform)), M.specularIntensityMap && (R.specularIntensityMap.value = M.specularIntensityMap, t(M.specularIntensityMap, R.specularIntensityMapTransform));
  }
  function A(R, M) {
    M.matcap && (R.matcap.value = M.matcap);
  }
  function C(R, M) {
    const w = e.get(M).light;
    R.referencePosition.value.setFromMatrixPosition(w.matrixWorld), R.nearDistance.value = w.shadow.camera.near, R.farDistance.value = w.shadow.camera.far;
  }
  return {
    refreshFogUniforms: i,
    refreshMaterialUniforms: s
  };
}
function dz(r, e, t, i) {
  let s = {}, u = {}, f = [];
  const h = r.getParameter(r.MAX_UNIFORM_BUFFER_BINDINGS);
  function p(w, N) {
    const U = N.program;
    i.uniformBlockBinding(w, U);
  }
  function v(w, N) {
    let U = s[w.id];
    U === void 0 && (A(w), U = _(w), s[w.id] = U, w.addEventListener("dispose", R));
    const I = N.program;
    i.updateUBOMapping(w, I);
    const P = e.render.frame;
    u[w.id] !== P && (E(w), u[w.id] = P);
  }
  function _(w) {
    const N = S();
    w.__bindingPointIndex = N;
    const U = r.createBuffer(), I = w.__size, P = w.usage;
    return r.bindBuffer(r.UNIFORM_BUFFER, U), r.bufferData(r.UNIFORM_BUFFER, I, P), r.bindBuffer(r.UNIFORM_BUFFER, null), r.bindBufferBase(r.UNIFORM_BUFFER, N, U), U;
  }
  function S() {
    for (let w = 0; w < h; w++)
      if (f.indexOf(w) === -1)
        return f.push(w), w;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function E(w) {
    const N = s[w.id], U = w.uniforms, I = w.__cache;
    r.bindBuffer(r.UNIFORM_BUFFER, N);
    for (let P = 0, X = U.length; P < X; P++) {
      const Y = Array.isArray(U[P]) ? U[P] : [U[P]];
      for (let z = 0, L = Y.length; z < L; z++) {
        const W = Y[z];
        if (x(W, P, z, I) === !0) {
          const me = W.__offset, Q = Array.isArray(W.value) ? W.value : [W.value];
          let oe = 0;
          for (let Se = 0; Se < Q.length; Se++) {
            const B = Q[Se], K = C(B);
            typeof B == "number" || typeof B == "boolean" ? (W.__data[0] = B, r.bufferSubData(r.UNIFORM_BUFFER, me + oe, W.__data)) : B.isMatrix3 ? (W.__data[0] = B.elements[0], W.__data[1] = B.elements[1], W.__data[2] = B.elements[2], W.__data[3] = 0, W.__data[4] = B.elements[3], W.__data[5] = B.elements[4], W.__data[6] = B.elements[5], W.__data[7] = 0, W.__data[8] = B.elements[6], W.__data[9] = B.elements[7], W.__data[10] = B.elements[8], W.__data[11] = 0) : (B.toArray(W.__data, oe), oe += K.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          r.bufferSubData(r.UNIFORM_BUFFER, me, W.__data);
        }
      }
    }
    r.bindBuffer(r.UNIFORM_BUFFER, null);
  }
  function x(w, N, U, I) {
    const P = w.value, X = N + "_" + U;
    if (I[X] === void 0)
      return typeof P == "number" || typeof P == "boolean" ? I[X] = P : I[X] = P.clone(), !0;
    {
      const Y = I[X];
      if (typeof P == "number" || typeof P == "boolean") {
        if (Y !== P)
          return I[X] = P, !0;
      } else if (Y.equals(P) === !1)
        return Y.copy(P), !0;
    }
    return !1;
  }
  function A(w) {
    const N = w.uniforms;
    let U = 0;
    const I = 16;
    for (let X = 0, Y = N.length; X < Y; X++) {
      const z = Array.isArray(N[X]) ? N[X] : [N[X]];
      for (let L = 0, W = z.length; L < W; L++) {
        const me = z[L], Q = Array.isArray(me.value) ? me.value : [me.value];
        for (let oe = 0, Se = Q.length; oe < Se; oe++) {
          const B = Q[oe], K = C(B), q = U % I, se = q % K.boundary, le = q + se;
          U += se, le !== 0 && I - le < K.storage && (U += I - le), me.__data = new Float32Array(K.storage / Float32Array.BYTES_PER_ELEMENT), me.__offset = U, U += K.storage;
        }
      }
    }
    const P = U % I;
    return P > 0 && (U += I - P), w.__size = U, w.__cache = {}, this;
  }
  function C(w) {
    const N = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof w == "number" || typeof w == "boolean" ? (N.boundary = 4, N.storage = 4) : w.isVector2 ? (N.boundary = 8, N.storage = 8) : w.isVector3 || w.isColor ? (N.boundary = 16, N.storage = 12) : w.isVector4 ? (N.boundary = 16, N.storage = 16) : w.isMatrix3 ? (N.boundary = 48, N.storage = 48) : w.isMatrix4 ? (N.boundary = 64, N.storage = 64) : w.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", w), N;
  }
  function R(w) {
    const N = w.target;
    N.removeEventListener("dispose", R);
    const U = f.indexOf(N.__bindingPointIndex);
    f.splice(U, 1), r.deleteBuffer(s[N.id]), delete s[N.id], delete u[N.id];
  }
  function M() {
    for (const w in s)
      r.deleteBuffer(s[w]);
    f = [], s = {}, u = {};
  }
  return {
    bind: p,
    update: v,
    dispose: M
  };
}
class a2 {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
   */
  constructor(e = {}) {
    const {
      canvas: t = jA(),
      context: i = null,
      depth: s = !0,
      stencil: u = !1,
      alpha: f = !1,
      antialias: h = !1,
      premultipliedAlpha: p = !0,
      preserveDrawingBuffer: v = !1,
      powerPreference: _ = "default",
      failIfMajorPerformanceCaveat: S = !1,
      reversedDepthBuffer: E = !1
    } = e;
    this.isWebGLRenderer = !0;
    let x;
    if (i !== null) {
      if (typeof WebGLRenderingContext < "u" && i instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      x = i.getContextAttributes().alpha;
    } else
      x = f;
    const A = new Uint32Array(4), C = new Int32Array(4);
    let R = null, M = null;
    const w = [], N = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled.
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.toneMapping = Yo, this.toneMappingExposure = 1, this.transmissionResolutionScale = 1;
    const U = this;
    let I = !1;
    this._outputColorSpace = Ia;
    let P = 0, X = 0, Y = null, z = -1, L = null;
    const W = new Un(), me = new Un();
    let Q = null;
    const oe = new Et(0);
    let Se = 0, B = t.width, K = t.height, q = 1, se = null, le = null;
    const Te = new Un(0, 0, B, K), we = new Un(0, 0, B, K);
    let gt = !1;
    const $e = new dp();
    let _e = !1, Je = !1;
    const We = new qt(), Mt = new j(), yt = new Un(), Ct = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let _n = !1;
    function Dt() {
      return Y === null ? q : 1;
    }
    let ee = i;
    function Be(V, ae) {
      return t.getContext(V, ae);
    }
    try {
      const V = {
        alpha: !0,
        depth: s,
        stencil: u,
        antialias: h,
        premultipliedAlpha: p,
        preserveDrawingBuffer: v,
        powerPreference: _,
        failIfMajorPerformanceCaveat: S
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${A_}`), t.addEventListener("webglcontextlost", Ye, !1), t.addEventListener("webglcontextrestored", lt, !1), t.addEventListener("webglcontextcreationerror", Pe, !1), ee === null) {
        const ae = "webgl2";
        if (ee = Be(ae, V), ee === null)
          throw Be(ae) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (V) {
      throw console.error("THREE.WebGLRenderer: " + V.message), V;
    }
    let Ce, Ie, De, et, Ve, Qe, ut, Bt, Z, H, he, be, He, Re, bt, Xe, ct, _t, Ge, it, Tt, k, ye, qe;
    function J() {
      Ce = new TO(ee), Ce.init(), k = new n2(ee, Ce), Ie = new yO(ee, Ce, e, k), De = new sz(ee, Ce), Ie.reversedDepthBuffer && E && De.buffers.depth.setReversed(!0), et = new CO(ee), Ve = new WL(), Qe = new rz(ee, Ce, De, Ve, Ie, k, et), ut = new SO(U), Bt = new bO(U), Z = new Lw(ee), ye = new vO(ee, Z), H = new AO(ee, Z, et, ye), he = new wO(ee, H, Z, et), Ge = new DO(ee, Ie, Qe), Xe = new _O(Ve), be = new YL(U, ut, Bt, Ce, Ie, ye, Xe), He = new hz(U, Ve), Re = new ZL(), bt = new ez(Ce), _t = new mO(U, ut, Bt, De, he, x, p), ct = new iz(U, he, Ie), qe = new dz(ee, et, Ie, De), it = new gO(ee, Ce, et), Tt = new RO(ee, Ce, et), et.programs = be.programs, U.capabilities = Ie, U.extensions = Ce, U.properties = Ve, U.renderLists = Re, U.shadowMap = ct, U.state = De, U.info = et;
    }
    J();
    const Oe = new cz(U, ee);
    this.xr = Oe, this.getContext = function() {
      return ee;
    }, this.getContextAttributes = function() {
      return ee.getContextAttributes();
    }, this.forceContextLoss = function() {
      const V = Ce.get("WEBGL_lose_context");
      V && V.loseContext();
    }, this.forceContextRestore = function() {
      const V = Ce.get("WEBGL_lose_context");
      V && V.restoreContext();
    }, this.getPixelRatio = function() {
      return q;
    }, this.setPixelRatio = function(V) {
      V !== void 0 && (q = V, this.setSize(B, K, !1));
    }, this.getSize = function(V) {
      return V.set(B, K);
    }, this.setSize = function(V, ae, ve = !0) {
      if (Oe.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      B = V, K = ae, t.width = Math.floor(V * q), t.height = Math.floor(ae * q), ve === !0 && (t.style.width = V + "px", t.style.height = ae + "px"), this.setViewport(0, 0, V, ae);
    }, this.getDrawingBufferSize = function(V) {
      return V.set(B * q, K * q).floor();
    }, this.setDrawingBufferSize = function(V, ae, ve) {
      B = V, K = ae, q = ve, t.width = Math.floor(V * ve), t.height = Math.floor(ae * ve), this.setViewport(0, 0, V, ae);
    }, this.getCurrentViewport = function(V) {
      return V.copy(W);
    }, this.getViewport = function(V) {
      return V.copy(Te);
    }, this.setViewport = function(V, ae, ve, pe) {
      V.isVector4 ? Te.set(V.x, V.y, V.z, V.w) : Te.set(V, ae, ve, pe), De.viewport(W.copy(Te).multiplyScalar(q).round());
    }, this.getScissor = function(V) {
      return V.copy(we);
    }, this.setScissor = function(V, ae, ve, pe) {
      V.isVector4 ? we.set(V.x, V.y, V.z, V.w) : we.set(V, ae, ve, pe), De.scissor(me.copy(we).multiplyScalar(q).round());
    }, this.getScissorTest = function() {
      return gt;
    }, this.setScissorTest = function(V) {
      De.setScissorTest(gt = V);
    }, this.setOpaqueSort = function(V) {
      se = V;
    }, this.setTransparentSort = function(V) {
      le = V;
    }, this.getClearColor = function(V) {
      return V.copy(_t.getClearColor());
    }, this.setClearColor = function() {
      _t.setClearColor(...arguments);
    }, this.getClearAlpha = function() {
      return _t.getClearAlpha();
    }, this.setClearAlpha = function() {
      _t.setClearAlpha(...arguments);
    }, this.clear = function(V = !0, ae = !0, ve = !0) {
      let pe = 0;
      if (V) {
        let ce = !1;
        if (Y !== null) {
          const Ze = Y.texture.format;
          ce = Ze === L_ || Ze === O_ || Ze === ig;
        }
        if (ce) {
          const Ze = Y.texture.type, tt = Ze === Dr || Ze === Gl || Ze === ep || Ze === tp || Ze === w_ || Ze === U_, St = _t.getClearColor(), pt = _t.getClearAlpha(), Lt = St.r, Pt = St.g, Nt = St.b;
          tt ? (A[0] = Lt, A[1] = Pt, A[2] = Nt, A[3] = pt, ee.clearBufferuiv(ee.COLOR, 0, A)) : (C[0] = Lt, C[1] = Pt, C[2] = Nt, C[3] = pt, ee.clearBufferiv(ee.COLOR, 0, C));
        } else
          pe |= ee.COLOR_BUFFER_BIT;
      }
      ae && (pe |= ee.DEPTH_BUFFER_BIT), ve && (pe |= ee.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), ee.clear(pe);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", Ye, !1), t.removeEventListener("webglcontextrestored", lt, !1), t.removeEventListener("webglcontextcreationerror", Pe, !1), _t.dispose(), Re.dispose(), bt.dispose(), Ve.dispose(), ut.dispose(), Bt.dispose(), he.dispose(), ye.dispose(), qe.dispose(), be.dispose(), Oe.dispose(), Oe.removeEventListener("sessionstart", Jn), Oe.removeEventListener("sessionend", qa), ma.stop();
    };
    function Ye(V) {
      V.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), I = !0;
    }
    function lt() {
      console.log("THREE.WebGLRenderer: Context Restored."), I = !1;
      const V = et.autoReset, ae = ct.enabled, ve = ct.autoUpdate, pe = ct.needsUpdate, ce = ct.type;
      J(), et.autoReset = V, ct.enabled = ae, ct.autoUpdate = ve, ct.needsUpdate = pe, ct.type = ce;
    }
    function Pe(V) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", V.statusMessage);
    }
    function Ue(V) {
      const ae = V.target;
      ae.removeEventListener("dispose", Ue), rt(ae);
    }
    function rt(V) {
      Rt(V), Ve.remove(V);
    }
    function Rt(V) {
      const ae = Ve.get(V).programs;
      ae !== void 0 && (ae.forEach(function(ve) {
        be.releaseProgram(ve);
      }), V.isShaderMaterial && be.releaseShaderCache(V));
    }
    this.renderBufferDirect = function(V, ae, ve, pe, ce, Ze) {
      ae === null && (ae = Ct);
      const tt = ce.isMesh && ce.matrixWorld.determinant() < 0, St = En(V, ae, ve, pe, ce);
      De.setMaterial(pe, tt);
      let pt = ve.index, Lt = 1;
      if (pe.wireframe === !0) {
        if (pt = H.getWireframeAttribute(ve), pt === void 0) return;
        Lt = 2;
      }
      const Pt = ve.drawRange, Nt = ve.attributes.position;
      let It = Pt.start * Lt, nn = (Pt.start + Pt.count) * Lt;
      Ze !== null && (It = Math.max(It, Ze.start * Lt), nn = Math.min(nn, (Ze.start + Ze.count) * Lt)), pt !== null ? (It = Math.max(It, 0), nn = Math.min(nn, pt.count)) : Nt != null && (It = Math.max(It, 0), nn = Math.min(nn, Nt.count));
      const Ln = nn - It;
      if (Ln < 0 || Ln === 1 / 0) return;
      ye.setup(ce, pe, St, ve, pt);
      let dn, vn = it;
      if (pt !== null && (dn = Z.get(pt), vn = Tt, vn.setIndex(dn)), ce.isMesh)
        pe.wireframe === !0 ? (De.setLineWidth(pe.wireframeLinewidth * Dt()), vn.setMode(ee.LINES)) : vn.setMode(ee.TRIANGLES);
      else if (ce.isLine) {
        let zt = pe.linewidth;
        zt === void 0 && (zt = 1), De.setLineWidth(zt * Dt()), ce.isLineSegments ? vn.setMode(ee.LINES) : ce.isLineLoop ? vn.setMode(ee.LINE_LOOP) : vn.setMode(ee.LINE_STRIP);
      } else ce.isPoints ? vn.setMode(ee.POINTS) : ce.isSprite && vn.setMode(ee.TRIANGLES);
      if (ce.isBatchedMesh)
        if (ce._multiDrawInstances !== null)
          Jd("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), vn.renderMultiDrawInstances(ce._multiDrawStarts, ce._multiDrawCounts, ce._multiDrawCount, ce._multiDrawInstances);
        else if (Ce.get("WEBGL_multi_draw"))
          vn.renderMultiDraw(ce._multiDrawStarts, ce._multiDrawCounts, ce._multiDrawCount);
        else {
          const zt = ce._multiDrawStarts, Gn = ce._multiDrawCounts, gn = ce._multiDrawCount, qi = pt ? Z.get(pt).bytesPerElement : 1, Us = Ve.get(pe).currentProgram.getUniforms();
          for (let Ni = 0; Ni < gn; Ni++)
            Us.setValue(ee, "_gl_DrawID", Ni), vn.render(zt[Ni] / qi, Gn[Ni]);
        }
      else if (ce.isInstancedMesh)
        vn.renderInstances(It, Ln, ce.count);
      else if (ve.isInstancedBufferGeometry) {
        const zt = ve._maxInstanceCount !== void 0 ? ve._maxInstanceCount : 1 / 0, Gn = Math.min(ve.instanceCount, zt);
        vn.renderInstances(It, Ln, Gn);
      } else
        vn.render(It, Ln);
    };
    function Yt(V, ae, ve) {
      V.transparent === !0 && V.side === Go && V.forceSinglePass === !1 ? (V.side = cs, V.needsUpdate = !0, at(V, ae, ve), V.side = Vl, V.needsUpdate = !0, at(V, ae, ve), V.side = Go) : at(V, ae, ve);
    }
    this.compile = function(V, ae, ve = null) {
      ve === null && (ve = V), M = bt.get(ve), M.init(ae), N.push(M), ve.traverseVisible(function(ce) {
        ce.isLight && ce.layers.test(ae.layers) && (M.pushLight(ce), ce.castShadow && M.pushShadow(ce));
      }), V !== ve && V.traverseVisible(function(ce) {
        ce.isLight && ce.layers.test(ae.layers) && (M.pushLight(ce), ce.castShadow && M.pushShadow(ce));
      }), M.setupLights();
      const pe = /* @__PURE__ */ new Set();
      return V.traverse(function(ce) {
        if (!(ce.isMesh || ce.isPoints || ce.isLine || ce.isSprite))
          return;
        const Ze = ce.material;
        if (Ze)
          if (Array.isArray(Ze))
            for (let tt = 0; tt < Ze.length; tt++) {
              const St = Ze[tt];
              Yt(St, ve, ce), pe.add(St);
            }
          else
            Yt(Ze, ve, ce), pe.add(Ze);
      }), M = N.pop(), pe;
    }, this.compileAsync = function(V, ae, ve = null) {
      const pe = this.compile(V, ae, ve);
      return new Promise((ce) => {
        function Ze() {
          if (pe.forEach(function(tt) {
            Ve.get(tt).currentProgram.isReady() && pe.delete(tt);
          }), pe.size === 0) {
            ce(V);
            return;
          }
          setTimeout(Ze, 10);
        }
        Ce.get("KHR_parallel_shader_compile") !== null ? Ze() : setTimeout(Ze, 10);
      });
    };
    let Ft = null;
    function si(V) {
      Ft && Ft(V);
    }
    function Jn() {
      ma.stop();
    }
    function qa() {
      ma.start();
    }
    const ma = new kR();
    ma.setAnimationLoop(si), typeof self < "u" && ma.setContext(self), this.setAnimationLoop = function(V) {
      Ft = V, Oe.setAnimationLoop(V), V === null ? ma.stop() : ma.start();
    }, Oe.addEventListener("sessionstart", Jn), Oe.addEventListener("sessionend", qa), this.render = function(V, ae) {
      if (ae !== void 0 && ae.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (I === !0) return;
      if (V.matrixWorldAutoUpdate === !0 && V.updateMatrixWorld(), ae.parent === null && ae.matrixWorldAutoUpdate === !0 && ae.updateMatrixWorld(), Oe.enabled === !0 && Oe.isPresenting === !0 && (Oe.cameraAutoUpdate === !0 && Oe.updateCamera(ae), ae = Oe.getCamera()), V.isScene === !0 && V.onBeforeRender(U, V, ae, Y), M = bt.get(V, N.length), M.init(ae), N.push(M), We.multiplyMatrices(ae.projectionMatrix, ae.matrixWorldInverse), $e.setFromProjectionMatrix(We, Ks, ae.reversedDepth), Je = this.localClippingEnabled, _e = Xe.init(this.clippingPlanes, Je), R = Re.get(V, w.length), R.init(), w.push(R), Oe.enabled === !0 && Oe.isPresenting === !0) {
        const Ze = U.xr.getDepthSensingMesh();
        Ze !== null && Ur(Ze, ae, -1 / 0, U.sortObjects);
      }
      Ur(V, ae, 0, U.sortObjects), R.finish(), U.sortObjects === !0 && R.sort(se, le), _n = Oe.enabled === !1 || Oe.isPresenting === !1 || Oe.hasDepthSensing() === !1, _n && _t.addToRenderList(R, V), this.info.render.frame++, _e === !0 && Xe.beginShadows();
      const ve = M.state.shadowsArray;
      ct.render(ve, V, ae), _e === !0 && Xe.endShadows(), this.info.autoReset === !0 && this.info.reset();
      const pe = R.opaque, ce = R.transmissive;
      if (M.setupLights(), ae.isArrayCamera) {
        const Ze = ae.cameras;
        if (ce.length > 0)
          for (let tt = 0, St = Ze.length; tt < St; tt++) {
            const pt = Ze[tt];
            uo(pe, ce, V, pt);
          }
        _n && _t.render(V);
        for (let tt = 0, St = Ze.length; tt < St; tt++) {
          const pt = Ze[tt];
          Ya(R, V, pt, pt.viewport);
        }
      } else
        ce.length > 0 && uo(pe, ce, V, ae), _n && _t.render(V), Ya(R, V, ae);
      Y !== null && X === 0 && (Qe.updateMultisampleRenderTarget(Y), Qe.updateRenderTargetMipmap(Y)), V.isScene === !0 && V.onAfterRender(U, V, ae), ye.resetDefaultState(), z = -1, L = null, N.pop(), N.length > 0 ? (M = N[N.length - 1], _e === !0 && Xe.setGlobalState(U.clippingPlanes, M.state.camera)) : M = null, w.pop(), w.length > 0 ? R = w[w.length - 1] : R = null;
    };
    function Ur(V, ae, ve, pe) {
      if (V.visible === !1) return;
      if (V.layers.test(ae.layers)) {
        if (V.isGroup)
          ve = V.renderOrder;
        else if (V.isLOD)
          V.autoUpdate === !0 && V.update(ae);
        else if (V.isLight)
          M.pushLight(V), V.castShadow && M.pushShadow(V);
        else if (V.isSprite) {
          if (!V.frustumCulled || $e.intersectsSprite(V)) {
            pe && yt.setFromMatrixPosition(V.matrixWorld).applyMatrix4(We);
            const tt = he.update(V), St = V.material;
            St.visible && R.push(V, tt, St, ve, yt.z, null);
          }
        } else if ((V.isMesh || V.isLine || V.isPoints) && (!V.frustumCulled || $e.intersectsObject(V))) {
          const tt = he.update(V), St = V.material;
          if (pe && (V.boundingSphere !== void 0 ? (V.boundingSphere === null && V.computeBoundingSphere(), yt.copy(V.boundingSphere.center)) : (tt.boundingSphere === null && tt.computeBoundingSphere(), yt.copy(tt.boundingSphere.center)), yt.applyMatrix4(V.matrixWorld).applyMatrix4(We)), Array.isArray(St)) {
            const pt = tt.groups;
            for (let Lt = 0, Pt = pt.length; Lt < Pt; Lt++) {
              const Nt = pt[Lt], It = St[Nt.materialIndex];
              It && It.visible && R.push(V, tt, It, ve, yt.z, Nt);
            }
          } else St.visible && R.push(V, tt, St, ve, yt.z, null);
        }
      }
      const Ze = V.children;
      for (let tt = 0, St = Ze.length; tt < St; tt++)
        Ur(Ze[tt], ae, ve, pe);
    }
    function Ya(V, ae, ve, pe) {
      const ce = V.opaque, Ze = V.transmissive, tt = V.transparent;
      M.setupLightsView(ve), _e === !0 && Xe.setGlobalState(U.clippingPlanes, ve), pe && De.viewport(W.copy(pe)), ce.length > 0 && $(ce, ae, ve), Ze.length > 0 && $(Ze, ae, ve), tt.length > 0 && $(tt, ae, ve), De.buffers.depth.setTest(!0), De.buffers.depth.setMask(!0), De.buffers.color.setMask(!0), De.setPolygonOffset(!1);
    }
    function uo(V, ae, ve, pe) {
      if ((ve.isScene === !0 ? ve.overrideMaterial : null) !== null)
        return;
      M.state.transmissionRenderTarget[pe.id] === void 0 && (M.state.transmissionRenderTarget[pe.id] = new jo(1, 1, {
        generateMipmaps: !0,
        type: Ce.has("EXT_color_buffer_half_float") || Ce.has("EXT_color_buffer_float") ? hp : Dr,
        minFilter: Xo,
        samples: 4,
        stencilBuffer: u,
        resolveDepthBuffer: !1,
        resolveStencilBuffer: !1,
        colorSpace: An.workingColorSpace
      }));
      const Ze = M.state.transmissionRenderTarget[pe.id], tt = pe.viewport || W;
      Ze.setSize(tt.z * U.transmissionResolutionScale, tt.w * U.transmissionResolutionScale);
      const St = U.getRenderTarget(), pt = U.getActiveCubeFace(), Lt = U.getActiveMipmapLevel();
      U.setRenderTarget(Ze), U.getClearColor(oe), Se = U.getClearAlpha(), Se < 1 && U.setClearColor(16777215, 0.5), U.clear(), _n && _t.render(ve);
      const Pt = U.toneMapping;
      U.toneMapping = Yo;
      const Nt = pe.viewport;
      if (pe.viewport !== void 0 && (pe.viewport = void 0), M.setupLightsView(pe), _e === !0 && Xe.setGlobalState(U.clippingPlanes, pe), $(V, ve, pe), Qe.updateMultisampleRenderTarget(Ze), Qe.updateRenderTargetMipmap(Ze), Ce.has("WEBGL_multisampled_render_to_texture") === !1) {
        let It = !1;
        for (let nn = 0, Ln = ae.length; nn < Ln; nn++) {
          const dn = ae[nn], vn = dn.object, zt = dn.geometry, Gn = dn.material, gn = dn.group;
          if (Gn.side === Go && vn.layers.test(pe.layers)) {
            const qi = Gn.side;
            Gn.side = cs, Gn.needsUpdate = !0, Fe(vn, ve, pe, zt, Gn, gn), Gn.side = qi, Gn.needsUpdate = !0, It = !0;
          }
        }
        It === !0 && (Qe.updateMultisampleRenderTarget(Ze), Qe.updateRenderTargetMipmap(Ze));
      }
      U.setRenderTarget(St, pt, Lt), U.setClearColor(oe, Se), Nt !== void 0 && (pe.viewport = Nt), U.toneMapping = Pt;
    }
    function $(V, ae, ve) {
      const pe = ae.isScene === !0 ? ae.overrideMaterial : null;
      for (let ce = 0, Ze = V.length; ce < Ze; ce++) {
        const tt = V[ce], St = tt.object, pt = tt.geometry, Lt = tt.group;
        let Pt = tt.material;
        Pt.allowOverride === !0 && pe !== null && (Pt = pe), St.layers.test(ve.layers) && Fe(St, ae, ve, pt, Pt, Lt);
      }
    }
    function Fe(V, ae, ve, pe, ce, Ze) {
      V.onBeforeRender(U, ae, ve, pe, ce, Ze), V.modelViewMatrix.multiplyMatrices(ve.matrixWorldInverse, V.matrixWorld), V.normalMatrix.getNormalMatrix(V.modelViewMatrix), ce.onBeforeRender(U, ae, ve, pe, V, Ze), ce.transparent === !0 && ce.side === Go && ce.forceSinglePass === !1 ? (ce.side = cs, ce.needsUpdate = !0, U.renderBufferDirect(ve, ae, pe, ce, V, Ze), ce.side = Vl, ce.needsUpdate = !0, U.renderBufferDirect(ve, ae, pe, ce, V, Ze), ce.side = Go) : U.renderBufferDirect(ve, ae, pe, ce, V, Ze), V.onAfterRender(U, ae, ve, pe, ce, Ze);
    }
    function at(V, ae, ve) {
      ae.isScene !== !0 && (ae = Ct);
      const pe = Ve.get(V), ce = M.state.lights, Ze = M.state.shadowsArray, tt = ce.state.version, St = be.getParameters(V, ce.state, Ze, ae, ve), pt = be.getProgramCacheKey(St);
      let Lt = pe.programs;
      pe.environment = V.isMeshStandardMaterial ? ae.environment : null, pe.fog = ae.fog, pe.envMap = (V.isMeshStandardMaterial ? Bt : ut).get(V.envMap || pe.environment), pe.envMapRotation = pe.environment !== null && V.envMap === null ? ae.environmentRotation : V.envMapRotation, Lt === void 0 && (V.addEventListener("dispose", Ue), Lt = /* @__PURE__ */ new Map(), pe.programs = Lt);
      let Pt = Lt.get(pt);
      if (Pt !== void 0) {
        if (pe.currentProgram === Pt && pe.lightsStateVersion === tt)
          return Qt(V, St), Pt;
      } else
        St.uniforms = be.getUniforms(V), V.onBeforeCompile(St, U), Pt = be.acquireProgram(St, pt), Lt.set(pt, Pt), pe.uniforms = St.uniforms;
      const Nt = pe.uniforms;
      return (!V.isShaderMaterial && !V.isRawShaderMaterial || V.clipping === !0) && (Nt.clippingPlanes = Xe.uniform), Qt(V, St), pe.needsLights = Wt(V), pe.lightsStateVersion = tt, pe.needsLights && (Nt.ambientLightColor.value = ce.state.ambient, Nt.lightProbe.value = ce.state.probe, Nt.directionalLights.value = ce.state.directional, Nt.directionalLightShadows.value = ce.state.directionalShadow, Nt.spotLights.value = ce.state.spot, Nt.spotLightShadows.value = ce.state.spotShadow, Nt.rectAreaLights.value = ce.state.rectArea, Nt.ltc_1.value = ce.state.rectAreaLTC1, Nt.ltc_2.value = ce.state.rectAreaLTC2, Nt.pointLights.value = ce.state.point, Nt.pointLightShadows.value = ce.state.pointShadow, Nt.hemisphereLights.value = ce.state.hemi, Nt.directionalShadowMap.value = ce.state.directionalShadowMap, Nt.directionalShadowMatrix.value = ce.state.directionalShadowMatrix, Nt.spotShadowMap.value = ce.state.spotShadowMap, Nt.spotLightMatrix.value = ce.state.spotLightMatrix, Nt.spotLightMap.value = ce.state.spotLightMap, Nt.pointShadowMap.value = ce.state.pointShadowMap, Nt.pointShadowMatrix.value = ce.state.pointShadowMatrix), pe.currentProgram = Pt, pe.uniformsList = null, Pt;
    }
    function dt(V) {
      if (V.uniformsList === null) {
        const ae = V.currentProgram.getUniforms();
        V.uniformsList = L0.seqWithValue(ae.seq, V.uniforms);
      }
      return V.uniformsList;
    }
    function Qt(V, ae) {
      const ve = Ve.get(V);
      ve.outputColorSpace = ae.outputColorSpace, ve.batching = ae.batching, ve.batchingColor = ae.batchingColor, ve.instancing = ae.instancing, ve.instancingColor = ae.instancingColor, ve.instancingMorph = ae.instancingMorph, ve.skinning = ae.skinning, ve.morphTargets = ae.morphTargets, ve.morphNormals = ae.morphNormals, ve.morphColors = ae.morphColors, ve.morphTargetsCount = ae.morphTargetsCount, ve.numClippingPlanes = ae.numClippingPlanes, ve.numIntersection = ae.numClipIntersection, ve.vertexAlphas = ae.vertexAlphas, ve.vertexTangents = ae.vertexTangents, ve.toneMapping = ae.toneMapping;
    }
    function En(V, ae, ve, pe, ce) {
      ae.isScene !== !0 && (ae = Ct), Qe.resetTextureUnits();
      const Ze = ae.fog, tt = pe.isMeshStandardMaterial ? ae.environment : null, St = Y === null ? U.outputColorSpace : Y.isXRRenderTarget === !0 ? Y.texture.colorSpace : ju, pt = (pe.isMeshStandardMaterial ? Bt : ut).get(pe.envMap || tt), Lt = pe.vertexColors === !0 && !!ve.attributes.color && ve.attributes.color.itemSize === 4, Pt = !!ve.attributes.tangent && (!!pe.normalMap || pe.anisotropy > 0), Nt = !!ve.morphAttributes.position, It = !!ve.morphAttributes.normal, nn = !!ve.morphAttributes.color;
      let Ln = Yo;
      pe.toneMapped && (Y === null || Y.isXRRenderTarget === !0) && (Ln = U.toneMapping);
      const dn = ve.morphAttributes.position || ve.morphAttributes.normal || ve.morphAttributes.color, vn = dn !== void 0 ? dn.length : 0, zt = Ve.get(pe), Gn = M.state.lights;
      if (_e === !0 && (Je === !0 || V !== L)) {
        const vi = V === L && pe.id === z;
        Xe.setState(pe, V, vi);
      }
      let gn = !1;
      pe.version === zt.__version ? (zt.needsLights && zt.lightsStateVersion !== Gn.state.version || zt.outputColorSpace !== St || ce.isBatchedMesh && zt.batching === !1 || !ce.isBatchedMesh && zt.batching === !0 || ce.isBatchedMesh && zt.batchingColor === !0 && ce.colorTexture === null || ce.isBatchedMesh && zt.batchingColor === !1 && ce.colorTexture !== null || ce.isInstancedMesh && zt.instancing === !1 || !ce.isInstancedMesh && zt.instancing === !0 || ce.isSkinnedMesh && zt.skinning === !1 || !ce.isSkinnedMesh && zt.skinning === !0 || ce.isInstancedMesh && zt.instancingColor === !0 && ce.instanceColor === null || ce.isInstancedMesh && zt.instancingColor === !1 && ce.instanceColor !== null || ce.isInstancedMesh && zt.instancingMorph === !0 && ce.morphTexture === null || ce.isInstancedMesh && zt.instancingMorph === !1 && ce.morphTexture !== null || zt.envMap !== pt || pe.fog === !0 && zt.fog !== Ze || zt.numClippingPlanes !== void 0 && (zt.numClippingPlanes !== Xe.numPlanes || zt.numIntersection !== Xe.numIntersection) || zt.vertexAlphas !== Lt || zt.vertexTangents !== Pt || zt.morphTargets !== Nt || zt.morphNormals !== It || zt.morphColors !== nn || zt.toneMapping !== Ln || zt.morphTargetsCount !== vn) && (gn = !0) : (gn = !0, zt.__version = pe.version);
      let qi = zt.currentProgram;
      gn === !0 && (qi = at(pe, ae, ce));
      let Us = !1, Ni = !1, Js = !1;
      const Xn = qi.getUniforms(), sa = zt.uniforms;
      if (De.useProgram(qi.program) && (Us = !0, Ni = !0, Js = !0), pe.id !== z && (z = pe.id, Ni = !0), Us || L !== V) {
        De.buffers.depth.getReversed() && V.reversedDepth !== !0 && (V._reversedDepth = !0, V.updateProjectionMatrix()), Xn.setValue(ee, "projectionMatrix", V.projectionMatrix), Xn.setValue(ee, "viewMatrix", V.matrixWorldInverse);
        const Oi = Xn.map.cameraPosition;
        Oi !== void 0 && Oi.setValue(ee, Mt.setFromMatrixPosition(V.matrixWorld)), Ie.logarithmicDepthBuffer && Xn.setValue(
          ee,
          "logDepthBufFC",
          2 / (Math.log(V.far + 1) / Math.LN2)
        ), (pe.isMeshPhongMaterial || pe.isMeshToonMaterial || pe.isMeshLambertMaterial || pe.isMeshBasicMaterial || pe.isMeshStandardMaterial || pe.isShaderMaterial) && Xn.setValue(ee, "isOrthographic", V.isOrthographicCamera === !0), L !== V && (L = V, Ni = !0, Js = !0);
      }
      if (ce.isSkinnedMesh) {
        Xn.setOptional(ee, ce, "bindMatrix"), Xn.setOptional(ee, ce, "bindMatrixInverse");
        const vi = ce.skeleton;
        vi && (vi.boneTexture === null && vi.computeBoneTexture(), Xn.setValue(ee, "boneTexture", vi.boneTexture, Qe));
      }
      ce.isBatchedMesh && (Xn.setOptional(ee, ce, "batchingTexture"), Xn.setValue(ee, "batchingTexture", ce._matricesTexture, Qe), Xn.setOptional(ee, ce, "batchingIdTexture"), Xn.setValue(ee, "batchingIdTexture", ce._indirectTexture, Qe), Xn.setOptional(ee, ce, "batchingColorTexture"), ce._colorsTexture !== null && Xn.setValue(ee, "batchingColorTexture", ce._colorsTexture, Qe));
      const va = ve.morphAttributes;
      if ((va.position !== void 0 || va.normal !== void 0 || va.color !== void 0) && Ge.update(ce, ve, qi), (Ni || zt.receiveShadow !== ce.receiveShadow) && (zt.receiveShadow = ce.receiveShadow, Xn.setValue(ee, "receiveShadow", ce.receiveShadow)), pe.isMeshGouraudMaterial && pe.envMap !== null && (sa.envMap.value = pt, sa.flipEnvMap.value = pt.isCubeTexture && pt.isRenderTargetTexture === !1 ? -1 : 1), pe.isMeshStandardMaterial && pe.envMap === null && ae.environment !== null && (sa.envMapIntensity.value = ae.environmentIntensity), Ni && (Xn.setValue(ee, "toneMappingExposure", U.toneMappingExposure), zt.needsLights && tn(sa, Js), Ze && pe.fog === !0 && He.refreshFogUniforms(sa, Ze), He.refreshMaterialUniforms(sa, pe, q, K, M.state.transmissionRenderTarget[V.id]), L0.upload(ee, dt(zt), sa, Qe)), pe.isShaderMaterial && pe.uniformsNeedUpdate === !0 && (L0.upload(ee, dt(zt), sa, Qe), pe.uniformsNeedUpdate = !1), pe.isSpriteMaterial && Xn.setValue(ee, "center", ce.center), Xn.setValue(ee, "modelViewMatrix", ce.modelViewMatrix), Xn.setValue(ee, "normalMatrix", ce.normalMatrix), Xn.setValue(ee, "modelMatrix", ce.matrixWorld), pe.isShaderMaterial || pe.isRawShaderMaterial) {
        const vi = pe.uniformsGroups;
        for (let Oi = 0, Wa = vi.length; Oi < Wa; Oi++) {
          const fi = vi[Oi];
          qe.update(fi, qi), qe.bind(fi, qi);
        }
      }
      return qi;
    }
    function tn(V, ae) {
      V.ambientLightColor.needsUpdate = ae, V.lightProbe.needsUpdate = ae, V.directionalLights.needsUpdate = ae, V.directionalLightShadows.needsUpdate = ae, V.pointLights.needsUpdate = ae, V.pointLightShadows.needsUpdate = ae, V.spotLights.needsUpdate = ae, V.spotLightShadows.needsUpdate = ae, V.rectAreaLights.needsUpdate = ae, V.hemisphereLights.needsUpdate = ae;
    }
    function Wt(V) {
      return V.isMeshLambertMaterial || V.isMeshToonMaterial || V.isMeshPhongMaterial || V.isMeshStandardMaterial || V.isShadowMaterial || V.isShaderMaterial && V.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return P;
    }, this.getActiveMipmapLevel = function() {
      return X;
    }, this.getRenderTarget = function() {
      return Y;
    }, this.setRenderTargetTextures = function(V, ae, ve) {
      const pe = Ve.get(V);
      pe.__autoAllocateDepthBuffer = V.resolveDepthBuffer === !1, pe.__autoAllocateDepthBuffer === !1 && (pe.__useRenderToTexture = !1), Ve.get(V.texture).__webglTexture = ae, Ve.get(V.depthTexture).__webglTexture = pe.__autoAllocateDepthBuffer ? void 0 : ve, pe.__hasExternalTextures = !0;
    }, this.setRenderTargetFramebuffer = function(V, ae) {
      const ve = Ve.get(V);
      ve.__webglFramebuffer = ae, ve.__useDefaultFramebuffer = ae === void 0;
    };
    const ti = ee.createFramebuffer();
    this.setRenderTarget = function(V, ae = 0, ve = 0) {
      Y = V, P = ae, X = ve;
      let pe = !0, ce = null, Ze = !1, tt = !1;
      if (V) {
        const pt = Ve.get(V);
        if (pt.__useDefaultFramebuffer !== void 0)
          De.bindFramebuffer(ee.FRAMEBUFFER, null), pe = !1;
        else if (pt.__webglFramebuffer === void 0)
          Qe.setupRenderTarget(V);
        else if (pt.__hasExternalTextures)
          Qe.rebindTextures(V, Ve.get(V.texture).__webglTexture, Ve.get(V.depthTexture).__webglTexture);
        else if (V.depthBuffer) {
          const Nt = V.depthTexture;
          if (pt.__boundDepthTexture !== Nt) {
            if (Nt !== null && Ve.has(Nt) && (V.width !== Nt.image.width || V.height !== Nt.image.height))
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            Qe.setupDepthRenderbuffer(V);
          }
        }
        const Lt = V.texture;
        (Lt.isData3DTexture || Lt.isDataArrayTexture || Lt.isCompressedArrayTexture) && (tt = !0);
        const Pt = Ve.get(V).__webglFramebuffer;
        V.isWebGLCubeRenderTarget ? (Array.isArray(Pt[ae]) ? ce = Pt[ae][ve] : ce = Pt[ae], Ze = !0) : V.samples > 0 && Qe.useMultisampledRTT(V) === !1 ? ce = Ve.get(V).__webglMultisampledFramebuffer : Array.isArray(Pt) ? ce = Pt[ve] : ce = Pt, W.copy(V.viewport), me.copy(V.scissor), Q = V.scissorTest;
      } else
        W.copy(Te).multiplyScalar(q).floor(), me.copy(we).multiplyScalar(q).floor(), Q = gt;
      if (ve !== 0 && (ce = ti), De.bindFramebuffer(ee.FRAMEBUFFER, ce) && pe && De.drawBuffers(V, ce), De.viewport(W), De.scissor(me), De.setScissorTest(Q), Ze) {
        const pt = Ve.get(V.texture);
        ee.framebufferTexture2D(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_CUBE_MAP_POSITIVE_X + ae, pt.__webglTexture, ve);
      } else if (tt) {
        const pt = ae;
        for (let Lt = 0; Lt < V.textures.length; Lt++) {
          const Pt = Ve.get(V.textures[Lt]);
          ee.framebufferTextureLayer(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0 + Lt, Pt.__webglTexture, ve, pt);
        }
      } else if (V !== null && ve !== 0) {
        const pt = Ve.get(V.texture);
        ee.framebufferTexture2D(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, pt.__webglTexture, ve);
      }
      z = -1;
    }, this.readRenderTargetPixels = function(V, ae, ve, pe, ce, Ze, tt, St = 0) {
      if (!(V && V.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let pt = Ve.get(V).__webglFramebuffer;
      if (V.isWebGLCubeRenderTarget && tt !== void 0 && (pt = pt[tt]), pt) {
        De.bindFramebuffer(ee.FRAMEBUFFER, pt);
        try {
          const Lt = V.textures[St], Pt = Lt.format, Nt = Lt.type;
          if (!Ie.textureFormatReadable(Pt)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!Ie.textureTypeReadable(Nt)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          ae >= 0 && ae <= V.width - pe && ve >= 0 && ve <= V.height - ce && (V.textures.length > 1 && ee.readBuffer(ee.COLOR_ATTACHMENT0 + St), ee.readPixels(ae, ve, pe, ce, k.convert(Pt), k.convert(Nt), Ze));
        } finally {
          const Lt = Y !== null ? Ve.get(Y).__webglFramebuffer : null;
          De.bindFramebuffer(ee.FRAMEBUFFER, Lt);
        }
      }
    }, this.readRenderTargetPixelsAsync = async function(V, ae, ve, pe, ce, Ze, tt, St = 0) {
      if (!(V && V.isWebGLRenderTarget))
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      let pt = Ve.get(V).__webglFramebuffer;
      if (V.isWebGLCubeRenderTarget && tt !== void 0 && (pt = pt[tt]), pt)
        if (ae >= 0 && ae <= V.width - pe && ve >= 0 && ve <= V.height - ce) {
          De.bindFramebuffer(ee.FRAMEBUFFER, pt);
          const Lt = V.textures[St], Pt = Lt.format, Nt = Lt.type;
          if (!Ie.textureFormatReadable(Pt))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          if (!Ie.textureTypeReadable(Nt))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          const It = ee.createBuffer();
          ee.bindBuffer(ee.PIXEL_PACK_BUFFER, It), ee.bufferData(ee.PIXEL_PACK_BUFFER, Ze.byteLength, ee.STREAM_READ), V.textures.length > 1 && ee.readBuffer(ee.COLOR_ATTACHMENT0 + St), ee.readPixels(ae, ve, pe, ce, k.convert(Pt), k.convert(Nt), 0);
          const nn = Y !== null ? Ve.get(Y).__webglFramebuffer : null;
          De.bindFramebuffer(ee.FRAMEBUFFER, nn);
          const Ln = ee.fenceSync(ee.SYNC_GPU_COMMANDS_COMPLETE, 0);
          return ee.flush(), await JC(ee, Ln, 4), ee.bindBuffer(ee.PIXEL_PACK_BUFFER, It), ee.getBufferSubData(ee.PIXEL_PACK_BUFFER, 0, Ze), ee.deleteBuffer(It), ee.deleteSync(Ln), Ze;
        } else
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
    }, this.copyFramebufferToTexture = function(V, ae = null, ve = 0) {
      const pe = Math.pow(2, -ve), ce = Math.floor(V.image.width * pe), Ze = Math.floor(V.image.height * pe), tt = ae !== null ? ae.x : 0, St = ae !== null ? ae.y : 0;
      Qe.setTexture2D(V, 0), ee.copyTexSubImage2D(ee.TEXTURE_2D, ve, 0, 0, tt, St, ce, Ze), De.unbindTexture();
    };
    const Rn = ee.createFramebuffer(), Vn = ee.createFramebuffer();
    this.copyTextureToTexture = function(V, ae, ve = null, pe = null, ce = 0, Ze = null) {
      Ze === null && (ce !== 0 ? (Jd("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), Ze = ce, ce = 0) : Ze = 0);
      let tt, St, pt, Lt, Pt, Nt, It, nn, Ln;
      const dn = V.isCompressedTexture ? V.mipmaps[Ze] : V.image;
      if (ve !== null)
        tt = ve.max.x - ve.min.x, St = ve.max.y - ve.min.y, pt = ve.isBox3 ? ve.max.z - ve.min.z : 1, Lt = ve.min.x, Pt = ve.min.y, Nt = ve.isBox3 ? ve.min.z : 0;
      else {
        const va = Math.pow(2, -ce);
        tt = Math.floor(dn.width * va), St = Math.floor(dn.height * va), V.isDataArrayTexture ? pt = dn.depth : V.isData3DTexture ? pt = Math.floor(dn.depth * va) : pt = 1, Lt = 0, Pt = 0, Nt = 0;
      }
      pe !== null ? (It = pe.x, nn = pe.y, Ln = pe.z) : (It = 0, nn = 0, Ln = 0);
      const vn = k.convert(ae.format), zt = k.convert(ae.type);
      let Gn;
      ae.isData3DTexture ? (Qe.setTexture3D(ae, 0), Gn = ee.TEXTURE_3D) : ae.isDataArrayTexture || ae.isCompressedArrayTexture ? (Qe.setTexture2DArray(ae, 0), Gn = ee.TEXTURE_2D_ARRAY) : (Qe.setTexture2D(ae, 0), Gn = ee.TEXTURE_2D), ee.pixelStorei(ee.UNPACK_FLIP_Y_WEBGL, ae.flipY), ee.pixelStorei(ee.UNPACK_PREMULTIPLY_ALPHA_WEBGL, ae.premultiplyAlpha), ee.pixelStorei(ee.UNPACK_ALIGNMENT, ae.unpackAlignment);
      const gn = ee.getParameter(ee.UNPACK_ROW_LENGTH), qi = ee.getParameter(ee.UNPACK_IMAGE_HEIGHT), Us = ee.getParameter(ee.UNPACK_SKIP_PIXELS), Ni = ee.getParameter(ee.UNPACK_SKIP_ROWS), Js = ee.getParameter(ee.UNPACK_SKIP_IMAGES);
      ee.pixelStorei(ee.UNPACK_ROW_LENGTH, dn.width), ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT, dn.height), ee.pixelStorei(ee.UNPACK_SKIP_PIXELS, Lt), ee.pixelStorei(ee.UNPACK_SKIP_ROWS, Pt), ee.pixelStorei(ee.UNPACK_SKIP_IMAGES, Nt);
      const Xn = V.isDataArrayTexture || V.isData3DTexture, sa = ae.isDataArrayTexture || ae.isData3DTexture;
      if (V.isDepthTexture) {
        const va = Ve.get(V), vi = Ve.get(ae), Oi = Ve.get(va.__renderTarget), Wa = Ve.get(vi.__renderTarget);
        De.bindFramebuffer(ee.READ_FRAMEBUFFER, Oi.__webglFramebuffer), De.bindFramebuffer(ee.DRAW_FRAMEBUFFER, Wa.__webglFramebuffer);
        for (let fi = 0; fi < pt; fi++)
          Xn && (ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Ve.get(V).__webglTexture, ce, Nt + fi), ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Ve.get(ae).__webglTexture, Ze, Ln + fi)), ee.blitFramebuffer(Lt, Pt, tt, St, It, nn, tt, St, ee.DEPTH_BUFFER_BIT, ee.NEAREST);
        De.bindFramebuffer(ee.READ_FRAMEBUFFER, null), De.bindFramebuffer(ee.DRAW_FRAMEBUFFER, null);
      } else if (ce !== 0 || V.isRenderTargetTexture || Ve.has(V)) {
        const va = Ve.get(V), vi = Ve.get(ae);
        De.bindFramebuffer(ee.READ_FRAMEBUFFER, Rn), De.bindFramebuffer(ee.DRAW_FRAMEBUFFER, Vn);
        for (let Oi = 0; Oi < pt; Oi++)
          Xn ? ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, va.__webglTexture, ce, Nt + Oi) : ee.framebufferTexture2D(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, va.__webglTexture, ce), sa ? ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, vi.__webglTexture, Ze, Ln + Oi) : ee.framebufferTexture2D(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, vi.__webglTexture, Ze), ce !== 0 ? ee.blitFramebuffer(Lt, Pt, tt, St, It, nn, tt, St, ee.COLOR_BUFFER_BIT, ee.NEAREST) : sa ? ee.copyTexSubImage3D(Gn, Ze, It, nn, Ln + Oi, Lt, Pt, tt, St) : ee.copyTexSubImage2D(Gn, Ze, It, nn, Lt, Pt, tt, St);
        De.bindFramebuffer(ee.READ_FRAMEBUFFER, null), De.bindFramebuffer(ee.DRAW_FRAMEBUFFER, null);
      } else
        sa ? V.isDataTexture || V.isData3DTexture ? ee.texSubImage3D(Gn, Ze, It, nn, Ln, tt, St, pt, vn, zt, dn.data) : ae.isCompressedArrayTexture ? ee.compressedTexSubImage3D(Gn, Ze, It, nn, Ln, tt, St, pt, vn, dn.data) : ee.texSubImage3D(Gn, Ze, It, nn, Ln, tt, St, pt, vn, zt, dn) : V.isDataTexture ? ee.texSubImage2D(ee.TEXTURE_2D, Ze, It, nn, tt, St, vn, zt, dn.data) : V.isCompressedTexture ? ee.compressedTexSubImage2D(ee.TEXTURE_2D, Ze, It, nn, dn.width, dn.height, vn, dn.data) : ee.texSubImage2D(ee.TEXTURE_2D, Ze, It, nn, tt, St, vn, zt, dn);
      ee.pixelStorei(ee.UNPACK_ROW_LENGTH, gn), ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT, qi), ee.pixelStorei(ee.UNPACK_SKIP_PIXELS, Us), ee.pixelStorei(ee.UNPACK_SKIP_ROWS, Ni), ee.pixelStorei(ee.UNPACK_SKIP_IMAGES, Js), Ze === 0 && ae.generateMipmaps && ee.generateMipmap(Gn), De.unbindTexture();
    }, this.copyTextureToTexture3D = function(V, ae, ve = null, pe = null, ce = 0) {
      return Jd('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(V, ae, ve, pe, ce);
    }, this.initRenderTarget = function(V) {
      Ve.get(V).__webglFramebuffer === void 0 && Qe.setupRenderTarget(V);
    }, this.initTexture = function(V) {
      V.isCubeTexture ? Qe.setTextureCube(V, 0) : V.isData3DTexture ? Qe.setTexture3D(V, 0) : V.isDataArrayTexture || V.isCompressedArrayTexture ? Qe.setTexture2DArray(V, 0) : Qe.setTexture2D(V, 0), De.unbindTexture();
    }, this.resetState = function() {
      P = 0, X = 0, Y = null, De.reset(), ye.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  /**
   * Defines the coordinate system of the renderer.
   *
   * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
   *
   * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
   * @default WebGLCoordinateSystem
   * @readonly
   */
  get coordinateSystem() {
    return Ks;
  }
  /**
   * Defines the output color space of the renderer.
   *
   * @type {SRGBColorSpace|LinearSRGBColorSpace}
   * @default SRGBColorSpace
   */
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = An._getDrawingBufferColorSpace(e), t.unpackColorSpace = An._getUnpackColorSpace();
  }
}
const pz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: VE,
  AddEquation: Gu,
  AddOperation: TA,
  AdditiveAnimationBlendMode: KE,
  AdditiveBlending: gE,
  AgXToneMapping: wA,
  AlphaFormat: YE,
  AlwaysCompare: YA,
  AlwaysDepth: I0,
  AlwaysStencilFunc: xE,
  AmbientLight: IR,
  AnimationAction: ZR,
  AnimationClip: $v,
  AnimationLoader: T3,
  AnimationMixer: ew,
  AnimationObjectGroup: J3,
  AnimationUtils: x3,
  ArcCurve: cR,
  ArrayCamera: YR,
  ArrowHelper: Tw,
  AttachedBindMode: SE,
  Audio: WR,
  AudioAnalyser: G3,
  AudioContext: SM,
  AudioListener: I3,
  AudioLoader: B3,
  AxesHelper: Aw,
  BackSide: cs,
  BasicDepthPacking: BA,
  BasicShadowMap: sA,
  BatchedMesh: sR,
  Bone: iM,
  BooleanKeyframeTrack: Df,
  Box2: uw,
  Box3: Ga,
  Box3Helper: Mw,
  BoxGeometry: Cf,
  BoxHelper: Ew,
  BufferAttribute: jn,
  BufferGeometry: on,
  BufferGeometryLoader: qR,
  ByteType: GE,
  Cache: qo,
  Camera: H_,
  CameraHelper: xw,
  CanvasTexture: qD,
  CapsuleGeometry: Y_,
  CatmullRomCurve3: fR,
  CineonToneMapping: CA,
  CircleGeometry: W_,
  ClampToEdgeWrapping: Cr,
  Clock: xM,
  Color: Et,
  ColorKeyframeTrack: gM,
  ColorManagement: An,
  CompressedArrayTexture: GD,
  CompressedCubeTexture: XD,
  CompressedTexture: q_,
  CompressedTextureLoader: A3,
  ConeGeometry: rg,
  ConstantAlphaFactor: EA,
  ConstantColorFactor: SA,
  Controls: Cw,
  CubeCamera: JA,
  CubeReflectionMapping: Fl,
  CubeRefractionMapping: Wu,
  CubeTexture: ag,
  CubeTextureLoader: R3,
  CubeUVReflectionMapping: fp,
  CubicBezierCurve: oM,
  CubicBezierCurve3: hR,
  CubicInterpolant: UR,
  CullFaceBack: vE,
  CullFaceFront: aA,
  CullFaceFrontBack: k2,
  CullFaceNone: iA,
  Curve: lo,
  CurvePath: pR,
  CustomBlending: rA,
  CustomToneMapping: DA,
  CylinderGeometry: sg,
  Cylindrical: lw,
  Data3DTexture: P_,
  DataArrayTexture: B_,
  DataTexture: Wo,
  DataTextureLoader: C3,
  DataUtils: dD,
  DecrementStencilOp: fC,
  DecrementWrapStencilOp: dC,
  DefaultLoadingManager: LR,
  DepthFormat: np,
  DepthStencilFormat: ip,
  DepthTexture: sM,
  DetachedBindMode: NA,
  DirectionalLight: HR,
  DirectionalLightHelper: Sw,
  DiscreteInterpolant: NR,
  DodecahedronGeometry: j_,
  DoubleSide: Go,
  DstAlphaFactor: mA,
  DstColorFactor: gA,
  DynamicCopyUsage: CC,
  DynamicDrawUsage: EC,
  DynamicReadUsage: TC,
  EdgesGeometry: uR,
  EllipseCurve: Z_,
  EqualCompare: FA,
  EqualDepth: F0,
  EqualStencilFunc: gC,
  EquirectangularReflectionMapping: Iv,
  EquirectangularRefractionMapping: Vv,
  Euler: ks,
  EventDispatcher: Zo,
  ExtrudeGeometry: K_,
  FileLoader: Xl,
  Float16BufferAttribute: SD,
  Float32BufferAttribute: At,
  FloatType: Ds,
  Fog: V_,
  FogExp2: I_,
  FramebufferTexture: FD,
  FrontSide: Vl,
  Frustum: dp,
  FrustumArray: X_,
  GLBufferAttribute: sw,
  GLSL1: wC,
  GLSL3: EE,
  GreaterCompare: GA,
  GreaterDepth: X0,
  GreaterEqualCompare: qA,
  GreaterEqualDepth: G0,
  GreaterEqualStencilFunc: xC,
  GreaterStencilFunc: _C,
  GridHelper: yw,
  Group: Qd,
  HalfFloatType: hp,
  HemisphereLight: zR,
  HemisphereLightHelper: gw,
  IcosahedronGeometry: Q_,
  ImageBitmapLoader: z3,
  ImageLoader: eg,
  ImageUtils: ZA,
  IncrementStencilOp: cC,
  IncrementWrapStencilOp: hC,
  InstancedBufferAttribute: lp,
  InstancedBufferGeometry: XR,
  InstancedInterleavedBuffer: aw,
  InstancedMesh: aR,
  Int16BufferAttribute: yD,
  Int32BufferAttribute: _D,
  Int8BufferAttribute: mD,
  IntType: D_,
  InterleavedBuffer: F_,
  InterleavedBufferAttribute: bf,
  Interpolant: ug,
  InterpolateDiscrete: Xv,
  InterpolateLinear: g_,
  InterpolateSmooth: N0,
  InterpolationSamplingMode: OC,
  InterpolationSamplingType: NC,
  InvertStencilOp: pC,
  KeepStencilOp: pf,
  KeyframeTrack: wr,
  LOD: nR,
  LatheGeometry: k_,
  Layers: rp,
  LessCompare: VA,
  LessDepth: V0,
  LessEqualCompare: QE,
  LessEqualDepth: Mf,
  LessEqualStencilFunc: yC,
  LessStencilFunc: vC,
  Light: Ju,
  LightProbe: GR,
  Line: Zu,
  Line3: hw,
  LineBasicMaterial: fs,
  LineCurve: lM,
  LineCurve3: dR,
  LineDashedMaterial: CR,
  LineLoop: rR,
  LineSegments: Ko,
  LinearFilter: na,
  LinearInterpolant: vM,
  LinearMipMapLinearFilter: tC,
  LinearMipMapNearestFilter: eC,
  LinearMipmapLinearFilter: Xo,
  LinearMipmapNearestFilter: Dv,
  LinearSRGBColorSpace: ju,
  LinearToneMapping: AA,
  LinearTransfer: Yv,
  Loader: ws,
  LoaderUtils: RE,
  LoadingManager: yM,
  LoopOnce: OA,
  LoopPingPong: zA,
  LoopRepeat: LA,
  MOUSE: hf,
  Material: Xa,
  MaterialLoader: aS,
  MathUtils: QC,
  Matrix2: TM,
  Matrix3: en,
  Matrix4: qt,
  MaxEquation: cA,
  Mesh: Xi,
  MeshBasicMaterial: Qu,
  MeshDepthMaterial: dM,
  MeshDistanceMaterial: pM,
  MeshLambertMaterial: AR,
  MeshMatcapMaterial: RR,
  MeshNormalMaterial: TR,
  MeshPhongMaterial: MR,
  MeshPhysicalMaterial: ER,
  MeshStandardMaterial: hM,
  MeshToonMaterial: bR,
  MinEquation: uA,
  MirroredRepeatWrapping: Gv,
  MixOperation: bA,
  MultiplyBlending: _E,
  MultiplyOperation: ng,
  NearestFilter: Ca,
  NearestMipMapLinearFilter: $2,
  NearestMipMapNearestFilter: J2,
  NearestMipmapLinearFilter: Zd,
  NearestMipmapNearestFilter: FE,
  NeutralToneMapping: UA,
  NeverCompare: IA,
  NeverDepth: H0,
  NeverStencilFunc: mC,
  NoBlending: Hl,
  NoColorSpace: Bl,
  NoToneMapping: Yo,
  NormalAnimationBlendMode: z_,
  NormalBlending: Sf,
  NotEqualCompare: XA,
  NotEqualDepth: q0,
  NotEqualStencilFunc: SC,
  NumberKeyframeTrack: kv,
  Object3D: Nn,
  ObjectLoader: O3,
  ObjectSpaceNormalMap: HA,
  OctahedronGeometry: og,
  OneFactor: hA,
  OneMinusConstantAlphaFactor: MA,
  OneMinusConstantColorFactor: xA,
  OneMinusDstAlphaFactor: vA,
  OneMinusDstColorFactor: yA,
  OneMinusSrcAlphaFactor: P0,
  OneMinusSrcColorFactor: pA,
  OrthographicCamera: Yu,
  PCFShadowMap: R_,
  PCFSoftShadowMap: Cv,
  PMREMGenerator: UE,
  Path: x_,
  PerspectiveCamera: Ui,
  Plane: zl,
  PlaneGeometry: pp,
  PlaneHelper: bw,
  PointLight: PR,
  PointLightHelper: mw,
  Points: oR,
  PointsMaterial: aM,
  PolarGridHelper: _w,
  PolyhedronGeometry: ku,
  PositionalAudio: F3,
  PropertyBinding: wn,
  PropertyMixer: jR,
  QuadraticBezierCurve: uM,
  QuadraticBezierCurve3: cM,
  Quaternion: Fa,
  QuaternionKeyframeTrack: cg,
  QuaternionLinearInterpolant: OR,
  RED_GREEN_RGTC2_Format: m_,
  RED_RGTC1_Format: ZE,
  REVISION: A_,
  RGBADepthPacking: PA,
  RGBAFormat: Va,
  RGBAIntegerFormat: L_,
  RGBA_ASTC_10x10_Format: u_,
  RGBA_ASTC_10x5_Format: r_,
  RGBA_ASTC_10x6_Format: o_,
  RGBA_ASTC_10x8_Format: l_,
  RGBA_ASTC_12x10_Format: c_,
  RGBA_ASTC_12x12_Format: f_,
  RGBA_ASTC_4x4_Format: J0,
  RGBA_ASTC_5x4_Format: $0,
  RGBA_ASTC_5x5_Format: e_,
  RGBA_ASTC_6x5_Format: t_,
  RGBA_ASTC_6x6_Format: n_,
  RGBA_ASTC_8x5_Format: i_,
  RGBA_ASTC_8x6_Format: a_,
  RGBA_ASTC_8x8_Format: s_,
  RGBA_BPTC_Format: Lv,
  RGBA_ETC2_EAC_Format: k0,
  RGBA_PVRTC_2BPPV1_Format: Z0,
  RGBA_PVRTC_4BPPV1_Format: j0,
  RGBA_S3TC_DXT1_Format: Uv,
  RGBA_S3TC_DXT3_Format: Nv,
  RGBA_S3TC_DXT5_Format: Ov,
  RGBDepthPacking: rC,
  RGBFormat: WE,
  RGBIntegerFormat: nC,
  RGB_BPTC_SIGNED_Format: h_,
  RGB_BPTC_UNSIGNED_Format: d_,
  RGB_ETC1_Format: K0,
  RGB_ETC2_Format: Q0,
  RGB_PVRTC_2BPPV1_Format: W0,
  RGB_PVRTC_4BPPV1_Format: Y0,
  RGB_S3TC_DXT1_Format: wv,
  RGDepthPacking: oC,
  RGFormat: jE,
  RGIntegerFormat: O_,
  RawShaderMaterial: xR,
  Ray: Rf,
  Raycaster: KR,
  RectAreaLight: VR,
  RedFormat: N_,
  RedIntegerFormat: ig,
  ReinhardToneMapping: RA,
  RenderTarget: JE,
  RenderTarget3D: tw,
  RepeatWrapping: Fv,
  ReplaceStencilOp: uC,
  ReverseSubtractEquation: lA,
  RingGeometry: J_,
  SIGNED_RED_GREEN_RGTC2_Format: v_,
  SIGNED_RED_RGTC1_Format: p_,
  SRGBColorSpace: Ia,
  SRGBTransfer: Fn,
  Scene: tM,
  ShaderChunk: cn,
  ShaderLib: so,
  ShaderMaterial: oo,
  ShadowMaterial: SR,
  Shape: Ef,
  ShapeGeometry: $_,
  ShapePath: Rw,
  ShapeUtils: ro,
  ShortType: XE,
  Skeleton: G_,
  SkeletonHelper: pw,
  SkinnedMesh: iR,
  Source: qu,
  Sphere: Da,
  SphereGeometry: lg,
  Spherical: DE,
  SphericalHarmonics3: FR,
  SplineCurve: fM,
  SpotLight: BR,
  SpotLightHelper: dw,
  Sprite: tR,
  SpriteMaterial: nM,
  SrcAlphaFactor: B0,
  SrcAlphaSaturateFactor: _A,
  SrcColorFactor: dA,
  StaticCopyUsage: RC,
  StaticDrawUsage: Wv,
  StaticReadUsage: bC,
  StereoCamera: P3,
  StreamCopyUsage: DC,
  StreamDrawUsage: MC,
  StreamReadUsage: AC,
  StringKeyframeTrack: wf,
  SubtractEquation: oA,
  SubtractiveBlending: yE,
  TOUCH: df,
  TangentSpaceNormalMap: Ku,
  TetrahedronGeometry: eS,
  Texture: Ai,
  TextureLoader: D3,
  TextureUtils: Ow,
  Timer: rw,
  TimestampQuery: UC,
  TorusGeometry: tS,
  TorusKnotGeometry: nS,
  Triangle: Cs,
  TriangleFanDrawMode: sC,
  TriangleStripDrawMode: aC,
  TrianglesDrawMode: iC,
  TubeGeometry: iS,
  UVMapping: C_,
  Uint16BufferAttribute: $E,
  Uint32BufferAttribute: eM,
  Uint8BufferAttribute: vD,
  Uint8ClampedBufferAttribute: gD,
  Uniform: bM,
  UniformsGroup: iw,
  UniformsLib: ht,
  UniformsUtils: kA,
  UnsignedByteType: Dr,
  UnsignedInt248Type: tp,
  UnsignedInt5999Type: qE,
  UnsignedIntType: Gl,
  UnsignedShort4444Type: w_,
  UnsignedShort5551Type: U_,
  UnsignedShortType: ep,
  VSMShadowMap: ao,
  Vector2: ze,
  Vector3: j,
  Vector4: Un,
  VectorKeyframeTrack: Jv,
  VideoFrameTexture: VD,
  VideoTexture: lR,
  WebGL3DRenderTarget: iD,
  WebGLArrayRenderTarget: nD,
  WebGLCoordinateSystem: Ks,
  WebGLCubeRenderTarget: $A,
  WebGLRenderTarget: jo,
  WebGLRenderer: a2,
  WebGLUtils: n2,
  WebGPUCoordinateSystem: ap,
  WebXRController: O0,
  WireframeGeometry: _R,
  WrapAroundEnding: qv,
  ZeroCurvatureEnding: gf,
  ZeroFactor: fA,
  ZeroSlopeEnding: yf,
  ZeroStencilOp: lC,
  createCanvasElement: jA
}, Symbol.toStringTag, { value: "Module" }));
var M0 = { exports: {} }, kx = {}, b0 = { exports: {} }, Jx = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var RT;
function mz() {
  if (RT) return Jx;
  RT = 1;
  var r = ql;
  function e(S, E) {
    return S === E && (S !== 0 || 1 / S === 1 / E) || S !== S && E !== E;
  }
  var t = typeof Object.is == "function" ? Object.is : e, i = r.useState, s = r.useEffect, u = r.useLayoutEffect, f = r.useDebugValue;
  function h(S, E) {
    var x = E(), A = i({ inst: { value: x, getSnapshot: E } }), C = A[0].inst, R = A[1];
    return u(
      function() {
        C.value = x, C.getSnapshot = E, p(C) && R({ inst: C });
      },
      [S, x, E]
    ), s(
      function() {
        return p(C) && R({ inst: C }), S(function() {
          p(C) && R({ inst: C });
        });
      },
      [S]
    ), f(x), x;
  }
  function p(S) {
    var E = S.getSnapshot;
    S = S.value;
    try {
      var x = E();
      return !t(S, x);
    } catch {
      return !0;
    }
  }
  function v(S, E) {
    return E();
  }
  var _ = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? v : h;
  return Jx.useSyncExternalStore = r.useSyncExternalStore !== void 0 ? r.useSyncExternalStore : _, Jx;
}
var $x = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var CT;
function vz() {
  return CT || (CT = 1, process.env.NODE_ENV !== "production" && (function() {
    function r(x, A) {
      return x === A && (x !== 0 || 1 / x === 1 / A) || x !== x && A !== A;
    }
    function e(x, A) {
      _ || s.startTransition === void 0 || (_ = !0, console.error(
        "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
      ));
      var C = A();
      if (!S) {
        var R = A();
        u(C, R) || (console.error(
          "The result of getSnapshot should be cached to avoid an infinite loop"
        ), S = !0);
      }
      R = f({
        inst: { value: C, getSnapshot: A }
      });
      var M = R[0].inst, w = R[1];
      return p(
        function() {
          M.value = C, M.getSnapshot = A, t(M) && w({ inst: M });
        },
        [x, C, A]
      ), h(
        function() {
          return t(M) && w({ inst: M }), x(function() {
            t(M) && w({ inst: M });
          });
        },
        [x]
      ), v(C), C;
    }
    function t(x) {
      var A = x.getSnapshot;
      x = x.value;
      try {
        var C = A();
        return !u(x, C);
      } catch {
        return !0;
      }
    }
    function i(x, A) {
      return A();
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var s = ql, u = typeof Object.is == "function" ? Object.is : r, f = s.useState, h = s.useEffect, p = s.useLayoutEffect, v = s.useDebugValue, _ = !1, S = !1, E = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? i : e;
    $x.useSyncExternalStore = s.useSyncExternalStore !== void 0 ? s.useSyncExternalStore : E, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })()), $x;
}
var DT;
function s2() {
  return DT || (DT = 1, process.env.NODE_ENV === "production" ? b0.exports = mz() : b0.exports = vz()), b0.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var wT;
function gz() {
  if (wT) return kx;
  wT = 1;
  var r = ql, e = s2();
  function t(v, _) {
    return v === _ && (v !== 0 || 1 / v === 1 / _) || v !== v && _ !== _;
  }
  var i = typeof Object.is == "function" ? Object.is : t, s = e.useSyncExternalStore, u = r.useRef, f = r.useEffect, h = r.useMemo, p = r.useDebugValue;
  return kx.useSyncExternalStoreWithSelector = function(v, _, S, E, x) {
    var A = u(null);
    if (A.current === null) {
      var C = { hasValue: !1, value: null };
      A.current = C;
    } else C = A.current;
    A = h(
      function() {
        function M(P) {
          if (!w) {
            if (w = !0, N = P, P = E(P), x !== void 0 && C.hasValue) {
              var X = C.value;
              if (x(X, P))
                return U = X;
            }
            return U = P;
          }
          if (X = U, i(N, P)) return X;
          var Y = E(P);
          return x !== void 0 && x(X, Y) ? (N = P, X) : (N = P, U = Y);
        }
        var w = !1, N, U, I = S === void 0 ? null : S;
        return [
          function() {
            return M(_());
          },
          I === null ? void 0 : function() {
            return M(I());
          }
        ];
      },
      [_, S, E, x]
    );
    var R = s(v, A[0], A[1]);
    return f(
      function() {
        C.hasValue = !0, C.value = R;
      },
      [R]
    ), p(R), R;
  }, kx;
}
var eE = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var UT;
function yz() {
  return UT || (UT = 1, process.env.NODE_ENV !== "production" && (function() {
    function r(v, _) {
      return v === _ && (v !== 0 || 1 / v === 1 / _) || v !== v && _ !== _;
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var e = ql, t = s2(), i = typeof Object.is == "function" ? Object.is : r, s = t.useSyncExternalStore, u = e.useRef, f = e.useEffect, h = e.useMemo, p = e.useDebugValue;
    eE.useSyncExternalStoreWithSelector = function(v, _, S, E, x) {
      var A = u(null);
      if (A.current === null) {
        var C = { hasValue: !1, value: null };
        A.current = C;
      } else C = A.current;
      A = h(
        function() {
          function M(P) {
            if (!w) {
              if (w = !0, N = P, P = E(P), x !== void 0 && C.hasValue) {
                var X = C.value;
                if (x(X, P))
                  return U = X;
              }
              return U = P;
            }
            if (X = U, i(N, P))
              return X;
            var Y = E(P);
            return x !== void 0 && x(X, Y) ? (N = P, X) : (N = P, U = Y);
          }
          var w = !1, N, U, I = S === void 0 ? null : S;
          return [
            function() {
              return M(_());
            },
            I === null ? void 0 : function() {
              return M(I());
            }
          ];
        },
        [_, S, E, x]
      );
      var R = s(v, A[0], A[1]);
      return f(
        function() {
          C.hasValue = !0, C.value = R;
        },
        [R]
      ), p(R), R;
    }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })()), eE;
}
var NT;
function _z() {
  return NT || (NT = 1, process.env.NODE_ENV === "production" ? M0.exports = gz() : M0.exports = yz()), M0.exports;
}
var Sz = _z();
const xz = /* @__PURE__ */ nA(Sz), OT = (r) => {
  let e;
  const t = /* @__PURE__ */ new Set(), i = (v, _) => {
    const S = typeof v == "function" ? v(e) : v;
    if (!Object.is(S, e)) {
      const E = e;
      e = _ ?? (typeof S != "object" || S === null) ? S : Object.assign({}, e, S), t.forEach((x) => x(e, E));
    }
  }, s = () => e, h = { setState: i, getState: s, getInitialState: () => p, subscribe: (v) => (t.add(v), () => t.delete(v)) }, p = e = r(i, s, h);
  return h;
}, Ez = ((r) => r ? OT(r) : OT), { useSyncExternalStoreWithSelector: Mz } = xz, bz = (r) => r;
function Tz(r, e = bz, t) {
  const i = Mz(
    r.subscribe,
    r.getState,
    r.getInitialState,
    e,
    t
  );
  return ql.useDebugValue(i), i;
}
const LT = (r, e) => {
  const t = Ez(r), i = (s, u = e) => Tz(t, s, u);
  return Object.assign(i, t), i;
}, Az = ((r, e) => r ? LT(r, e) : LT);
var T0 = { exports: {} }, tE = { exports: {} }, A0 = { exports: {} }, nE = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var zT;
function Rz() {
  return zT || (zT = 1, (function(r) {
    function e(B, K) {
      var q = B.length;
      B.push(K);
      e: for (; 0 < q; ) {
        var se = q - 1 >>> 1, le = B[se];
        if (0 < s(le, K))
          B[se] = K, B[q] = le, q = se;
        else break e;
      }
    }
    function t(B) {
      return B.length === 0 ? null : B[0];
    }
    function i(B) {
      if (B.length === 0) return null;
      var K = B[0], q = B.pop();
      if (q !== K) {
        B[0] = q;
        e: for (var se = 0, le = B.length, Te = le >>> 1; se < Te; ) {
          var we = 2 * (se + 1) - 1, gt = B[we], $e = we + 1, _e = B[$e];
          if (0 > s(gt, q))
            $e < le && 0 > s(_e, gt) ? (B[se] = _e, B[$e] = q, se = $e) : (B[se] = gt, B[we] = q, se = we);
          else if ($e < le && 0 > s(_e, q))
            B[se] = _e, B[$e] = q, se = $e;
          else break e;
        }
      }
      return K;
    }
    function s(B, K) {
      var q = B.sortIndex - K.sortIndex;
      return q !== 0 ? q : B.id - K.id;
    }
    if (r.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var u = performance;
      r.unstable_now = function() {
        return u.now();
      };
    } else {
      var f = Date, h = f.now();
      r.unstable_now = function() {
        return f.now() - h;
      };
    }
    var p = [], v = [], _ = 1, S = null, E = 3, x = !1, A = !1, C = !1, R = typeof setTimeout == "function" ? setTimeout : null, M = typeof clearTimeout == "function" ? clearTimeout : null, w = typeof setImmediate < "u" ? setImmediate : null;
    function N(B) {
      for (var K = t(v); K !== null; ) {
        if (K.callback === null) i(v);
        else if (K.startTime <= B)
          i(v), K.sortIndex = K.expirationTime, e(p, K);
        else break;
        K = t(v);
      }
    }
    function U(B) {
      if (C = !1, N(B), !A)
        if (t(p) !== null)
          A = !0, oe();
        else {
          var K = t(v);
          K !== null && Se(U, K.startTime - B);
        }
    }
    var I = !1, P = -1, X = 5, Y = -1;
    function z() {
      return !(r.unstable_now() - Y < X);
    }
    function L() {
      if (I) {
        var B = r.unstable_now();
        Y = B;
        var K = !0;
        try {
          e: {
            A = !1, C && (C = !1, M(P), P = -1), x = !0;
            var q = E;
            try {
              t: {
                for (N(B), S = t(p); S !== null && !(S.expirationTime > B && z()); ) {
                  var se = S.callback;
                  if (typeof se == "function") {
                    S.callback = null, E = S.priorityLevel;
                    var le = se(
                      S.expirationTime <= B
                    );
                    if (B = r.unstable_now(), typeof le == "function") {
                      S.callback = le, N(B), K = !0;
                      break t;
                    }
                    S === t(p) && i(p), N(B);
                  } else i(p);
                  S = t(p);
                }
                if (S !== null) K = !0;
                else {
                  var Te = t(v);
                  Te !== null && Se(
                    U,
                    Te.startTime - B
                  ), K = !1;
                }
              }
              break e;
            } finally {
              S = null, E = q, x = !1;
            }
            K = void 0;
          }
        } finally {
          K ? W() : I = !1;
        }
      }
    }
    var W;
    if (typeof w == "function")
      W = function() {
        w(L);
      };
    else if (typeof MessageChannel < "u") {
      var me = new MessageChannel(), Q = me.port2;
      me.port1.onmessage = L, W = function() {
        Q.postMessage(null);
      };
    } else
      W = function() {
        R(L, 0);
      };
    function oe() {
      I || (I = !0, W());
    }
    function Se(B, K) {
      P = R(function() {
        B(r.unstable_now());
      }, K);
    }
    r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function(B) {
      B.callback = null;
    }, r.unstable_continueExecution = function() {
      A || x || (A = !0, oe());
    }, r.unstable_forceFrameRate = function(B) {
      0 > B || 125 < B ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : X = 0 < B ? Math.floor(1e3 / B) : 5;
    }, r.unstable_getCurrentPriorityLevel = function() {
      return E;
    }, r.unstable_getFirstCallbackNode = function() {
      return t(p);
    }, r.unstable_next = function(B) {
      switch (E) {
        case 1:
        case 2:
        case 3:
          var K = 3;
          break;
        default:
          K = E;
      }
      var q = E;
      E = K;
      try {
        return B();
      } finally {
        E = q;
      }
    }, r.unstable_pauseExecution = function() {
    }, r.unstable_requestPaint = function() {
    }, r.unstable_runWithPriority = function(B, K) {
      switch (B) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          B = 3;
      }
      var q = E;
      E = B;
      try {
        return K();
      } finally {
        E = q;
      }
    }, r.unstable_scheduleCallback = function(B, K, q) {
      var se = r.unstable_now();
      switch (typeof q == "object" && q !== null ? (q = q.delay, q = typeof q == "number" && 0 < q ? se + q : se) : q = se, B) {
        case 1:
          var le = -1;
          break;
        case 2:
          le = 250;
          break;
        case 5:
          le = 1073741823;
          break;
        case 4:
          le = 1e4;
          break;
        default:
          le = 5e3;
      }
      return le = q + le, B = {
        id: _++,
        callback: K,
        priorityLevel: B,
        startTime: q,
        expirationTime: le,
        sortIndex: -1
      }, q > se ? (B.sortIndex = q, e(v, B), t(p) === null && B === t(v) && (C ? (M(P), P = -1) : C = !0, Se(U, q - se))) : (B.sortIndex = le, e(p, B), A || x || (A = !0, oe())), B;
    }, r.unstable_shouldYield = z, r.unstable_wrapCallback = function(B) {
      var K = E;
      return function() {
        var q = E;
        E = K;
        try {
          return B.apply(this, arguments);
        } finally {
          E = q;
        }
      };
    };
  })(nE)), nE;
}
var iE = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var BT;
function Cz() {
  return BT || (BT = 1, (function(r) {
    process.env.NODE_ENV !== "production" && (function() {
      function e() {
        if (z) {
          var B = r.unstable_now();
          me = B;
          var K = !0;
          try {
            e: {
              U = !1, I && (I = !1, X(L), L = -1), N = !0;
              var q = w;
              try {
                t: {
                  for (f(B), M = i(A); M !== null && !(M.expirationTime > B && p()); ) {
                    var se = M.callback;
                    if (typeof se == "function") {
                      M.callback = null, w = M.priorityLevel;
                      var le = se(
                        M.expirationTime <= B
                      );
                      if (B = r.unstable_now(), typeof le == "function") {
                        M.callback = le, f(B), K = !0;
                        break t;
                      }
                      M === i(A) && s(A), f(B);
                    } else s(A);
                    M = i(A);
                  }
                  if (M !== null) K = !0;
                  else {
                    var Te = i(C);
                    Te !== null && _(
                      h,
                      Te.startTime - B
                    ), K = !1;
                  }
                }
                break e;
              } finally {
                M = null, w = q, N = !1;
              }
              K = void 0;
            }
          } finally {
            K ? Q() : z = !1;
          }
        }
      }
      function t(B, K) {
        var q = B.length;
        B.push(K);
        e: for (; 0 < q; ) {
          var se = q - 1 >>> 1, le = B[se];
          if (0 < u(le, K))
            B[se] = K, B[q] = le, q = se;
          else break e;
        }
      }
      function i(B) {
        return B.length === 0 ? null : B[0];
      }
      function s(B) {
        if (B.length === 0) return null;
        var K = B[0], q = B.pop();
        if (q !== K) {
          B[0] = q;
          e: for (var se = 0, le = B.length, Te = le >>> 1; se < Te; ) {
            var we = 2 * (se + 1) - 1, gt = B[we], $e = we + 1, _e = B[$e];
            if (0 > u(gt, q))
              $e < le && 0 > u(_e, gt) ? (B[se] = _e, B[$e] = q, se = $e) : (B[se] = gt, B[we] = q, se = we);
            else if ($e < le && 0 > u(_e, q))
              B[se] = _e, B[$e] = q, se = $e;
            else break e;
          }
        }
        return K;
      }
      function u(B, K) {
        var q = B.sortIndex - K.sortIndex;
        return q !== 0 ? q : B.id - K.id;
      }
      function f(B) {
        for (var K = i(C); K !== null; ) {
          if (K.callback === null) s(C);
          else if (K.startTime <= B)
            s(C), K.sortIndex = K.expirationTime, t(A, K);
          else break;
          K = i(C);
        }
      }
      function h(B) {
        if (I = !1, f(B), !U)
          if (i(A) !== null)
            U = !0, v();
          else {
            var K = i(C);
            K !== null && _(
              h,
              K.startTime - B
            );
          }
      }
      function p() {
        return !(r.unstable_now() - me < W);
      }
      function v() {
        z || (z = !0, Q());
      }
      function _(B, K) {
        L = P(function() {
          B(r.unstable_now());
        }, K);
      }
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error()), r.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
        var S = performance;
        r.unstable_now = function() {
          return S.now();
        };
      } else {
        var E = Date, x = E.now();
        r.unstable_now = function() {
          return E.now() - x;
        };
      }
      var A = [], C = [], R = 1, M = null, w = 3, N = !1, U = !1, I = !1, P = typeof setTimeout == "function" ? setTimeout : null, X = typeof clearTimeout == "function" ? clearTimeout : null, Y = typeof setImmediate < "u" ? setImmediate : null, z = !1, L = -1, W = 5, me = -1;
      if (typeof Y == "function")
        var Q = function() {
          Y(e);
        };
      else if (typeof MessageChannel < "u") {
        var oe = new MessageChannel(), Se = oe.port2;
        oe.port1.onmessage = e, Q = function() {
          Se.postMessage(null);
        };
      } else
        Q = function() {
          P(e, 0);
        };
      r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function(B) {
        B.callback = null;
      }, r.unstable_continueExecution = function() {
        U || N || (U = !0, v());
      }, r.unstable_forceFrameRate = function(B) {
        0 > B || 125 < B ? console.error(
          "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
        ) : W = 0 < B ? Math.floor(1e3 / B) : 5;
      }, r.unstable_getCurrentPriorityLevel = function() {
        return w;
      }, r.unstable_getFirstCallbackNode = function() {
        return i(A);
      }, r.unstable_next = function(B) {
        switch (w) {
          case 1:
          case 2:
          case 3:
            var K = 3;
            break;
          default:
            K = w;
        }
        var q = w;
        w = K;
        try {
          return B();
        } finally {
          w = q;
        }
      }, r.unstable_pauseExecution = function() {
      }, r.unstable_requestPaint = function() {
      }, r.unstable_runWithPriority = function(B, K) {
        switch (B) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            B = 3;
        }
        var q = w;
        w = B;
        try {
          return K();
        } finally {
          w = q;
        }
      }, r.unstable_scheduleCallback = function(B, K, q) {
        var se = r.unstable_now();
        switch (typeof q == "object" && q !== null ? (q = q.delay, q = typeof q == "number" && 0 < q ? se + q : se) : q = se, B) {
          case 1:
            var le = -1;
            break;
          case 2:
            le = 250;
            break;
          case 5:
            le = 1073741823;
            break;
          case 4:
            le = 1e4;
            break;
          default:
            le = 5e3;
        }
        return le = q + le, B = {
          id: R++,
          callback: K,
          priorityLevel: B,
          startTime: q,
          expirationTime: le,
          sortIndex: -1
        }, q > se ? (B.sortIndex = q, t(C, B), i(A) === null && B === i(C) && (I ? (X(L), L = -1) : I = !0, _(h, q - se))) : (B.sortIndex = le, t(A, B), U || N || (U = !0, v())), B;
      }, r.unstable_shouldYield = p, r.unstable_wrapCallback = function(B) {
        var K = w;
        return function() {
          var q = w;
          w = K;
          try {
            return B.apply(this, arguments);
          } finally {
            w = q;
          }
        };
      }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  })(iE)), iE;
}
var PT;
function r2() {
  return PT || (PT = 1, process.env.NODE_ENV === "production" ? A0.exports = Rz() : A0.exports = Cz()), A0.exports;
}
/**
 * @license React
 * react-reconciler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var HT;
function Dz() {
  return HT || (HT = 1, (function(r) {
    r.exports = function(e) {
      function t(o, l, d, y) {
        return new Sg(o, l, d, y);
      }
      function i() {
      }
      function s(o) {
        var l = "https://react.dev/errors/" + o;
        if (1 < arguments.length) {
          l += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var d = 2; d < arguments.length; d++)
            l += "&args[]=" + encodeURIComponent(arguments[d]);
        }
        return "Minified React error #" + o + "; visit " + l + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function u(o) {
        return o === null || typeof o != "object" ? null : (o = tm && o[tm] || o["@@iterator"], typeof o == "function" ? o : null);
      }
      function f(o) {
        if (o == null) return null;
        if (typeof o == "function")
          return o.$$typeof === oS ? null : o.displayName || o.name || null;
        if (typeof o == "string") return o;
        switch (o) {
          case sl:
            return "Fragment";
          case ru:
            return "Portal";
          case Mh:
            return "Profiler";
          case Qp:
            return "StrictMode";
          case Th:
            return "Suspense";
          case $p:
            return "SuspenseList";
        }
        if (typeof o == "object")
          switch (o.$$typeof) {
            case Ps:
              return (o.displayName || "Context") + ".Provider";
            case bh:
              return (o._context.displayName || "Context") + ".Consumer";
            case Jp:
              var l = o.render;
              return o = o.displayName, o || (o = l.displayName || l.name || "", o = o !== "" ? "ForwardRef(" + o + ")" : "ForwardRef"), o;
            case Ah:
              return l = o.displayName || null, l !== null ? l : f(o.type) || "Memo";
            case Hr:
              l = o._payload, o = o._init;
              try {
                return f(o(l));
              } catch {
              }
          }
        return null;
      }
      function h(o) {
        if (nm === void 0)
          try {
            throw Error();
          } catch (d) {
            var l = d.stack.trim().match(/\n( *(at )?)/);
            nm = l && l[1] || "", Sa = -1 < d.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < d.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return `
` + nm + o + Sa;
      }
      function p(o, l) {
        if (!o || Rh) return "";
        Rh = !0;
        var d = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          var y = {
            DetermineComponentFrameRoot: function() {
              try {
                if (l) {
                  var mt = function() {
                    throw Error();
                  };
                  if (Object.defineProperty(mt.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  }), typeof Reflect == "object" && Reflect.construct) {
                    try {
                      Reflect.construct(mt, []);
                    } catch (Ot) {
                      var ft = Ot;
                    }
                    Reflect.construct(o, [], mt);
                  } else {
                    try {
                      mt.call();
                    } catch (Ot) {
                      ft = Ot;
                    }
                    o.call(mt.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (Ot) {
                    ft = Ot;
                  }
                  (mt = o()) && typeof mt.catch == "function" && mt.catch(function() {
                  });
                }
              } catch (Ot) {
                if (Ot && ft && typeof Ot.stack == "string")
                  return [Ot.stack, ft.stack];
              }
              return [null, null];
            }
          };
          y.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var T = Object.getOwnPropertyDescriptor(
            y.DetermineComponentFrameRoot,
            "name"
          );
          T && T.configurable && Object.defineProperty(
            y.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var D = y.DetermineComponentFrameRoot(), F = D[0], te = D[1];
          if (F && te) {
            var de = F.split(`
`), Ne = te.split(`
`);
            for (T = y = 0; y < de.length && !de[y].includes("DetermineComponentFrameRoot"); )
              y++;
            for (; T < Ne.length && !Ne[T].includes(
              "DetermineComponentFrameRoot"
            ); )
              T++;
            if (y === de.length || T === Ne.length)
              for (y = de.length - 1, T = Ne.length - 1; 1 <= y && 0 <= T && de[y] !== Ne[T]; )
                T--;
            for (; 1 <= y && 0 <= T; y--, T--)
              if (de[y] !== Ne[T]) {
                if (y !== 1 || T !== 1)
                  do
                    if (y--, T--, 0 > T || de[y] !== Ne[T]) {
                      var nt = `
` + de[y].replace(" at new ", " at ");
                      return o.displayName && nt.includes("<anonymous>") && (nt = nt.replace("<anonymous>", o.displayName)), nt;
                    }
                  while (1 <= y && 0 <= T);
                break;
              }
          }
        } finally {
          Rh = !1, Error.prepareStackTrace = d;
        }
        return (d = o ? o.displayName || o.name : "") ? h(d) : "";
      }
      function v(o) {
        switch (o.tag) {
          case 26:
          case 27:
          case 5:
            return h(o.type);
          case 16:
            return h("Lazy");
          case 13:
            return h("Suspense");
          case 19:
            return h("SuspenseList");
          case 0:
          case 15:
            return o = p(o.type, !1), o;
          case 11:
            return o = p(o.type.render, !1), o;
          case 1:
            return o = p(o.type, !0), o;
          default:
            return "";
        }
      }
      function _(o) {
        try {
          var l = "";
          do
            l += v(o), o = o.return;
          while (o);
          return l;
        } catch (d) {
          return `
Error generating stack: ` + d.message + `
` + d.stack;
        }
      }
      function S(o) {
        var l = o, d = o;
        if (o.alternate) for (; l.return; ) l = l.return;
        else {
          o = l;
          do
            l = o, (l.flags & 4098) !== 0 && (d = l.return), o = l.return;
          while (o);
        }
        return l.tag === 3 ? d : null;
      }
      function E(o) {
        if (S(o) !== o)
          throw Error(s(188));
      }
      function x(o) {
        var l = o.alternate;
        if (!l) {
          if (l = S(o), l === null) throw Error(s(188));
          return l !== o ? null : o;
        }
        for (var d = o, y = l; ; ) {
          var T = d.return;
          if (T === null) break;
          var D = T.alternate;
          if (D === null) {
            if (y = T.return, y !== null) {
              d = y;
              continue;
            }
            break;
          }
          if (T.child === D.child) {
            for (D = T.child; D; ) {
              if (D === d) return E(T), o;
              if (D === y) return E(T), l;
              D = D.sibling;
            }
            throw Error(s(188));
          }
          if (d.return !== y.return) d = T, y = D;
          else {
            for (var F = !1, te = T.child; te; ) {
              if (te === d) {
                F = !0, d = T, y = D;
                break;
              }
              if (te === y) {
                F = !0, y = T, d = D;
                break;
              }
              te = te.sibling;
            }
            if (!F) {
              for (te = D.child; te; ) {
                if (te === d) {
                  F = !0, d = D, y = T;
                  break;
                }
                if (te === y) {
                  F = !0, y = D, d = T;
                  break;
                }
                te = te.sibling;
              }
              if (!F) throw Error(s(189));
            }
          }
          if (d.alternate !== y) throw Error(s(190));
        }
        if (d.tag !== 3) throw Error(s(188));
        return d.stateNode.current === d ? o : l;
      }
      function A(o) {
        var l = o.tag;
        if (l === 5 || l === 26 || l === 27 || l === 6) return o;
        for (o = o.child; o !== null; ) {
          if (l = A(o), l !== null) return l;
          o = o.sibling;
        }
        return null;
      }
      function C(o) {
        var l = o.tag;
        if (l === 5 || l === 26 || l === 27 || l === 6) return o;
        for (o = o.child; o !== null; ) {
          if (o.tag !== 4 && (l = C(o), l !== null))
            return l;
          o = o.sibling;
        }
        return null;
      }
      function R(o) {
        return { current: o };
      }
      function M(o) {
        0 > cr || (o.current = Is[cr], Is[cr] = null, cr--);
      }
      function w(o, l) {
        cr++, Is[cr] = o.current, o.current = l;
      }
      function N(o) {
        return o >>>= 0, o === 0 ? 32 : 31 - (Ih(o) / $a | 0) | 0;
      }
      function U(o) {
        var l = o & 42;
        if (l !== 0) return l;
        switch (o & -o) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return o & 4194176;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return o & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return o;
        }
      }
      function I(o, l) {
        var d = o.pendingLanes;
        if (d === 0) return 0;
        var y = 0, T = o.suspendedLanes, D = o.pingedLanes, F = o.warmLanes;
        o = o.finishedLanes !== 0;
        var te = d & 134217727;
        return te !== 0 ? (d = te & ~T, d !== 0 ? y = U(d) : (D &= te, D !== 0 ? y = U(D) : o || (F = te & ~F, F !== 0 && (y = U(F))))) : (te = d & ~T, te !== 0 ? y = U(te) : D !== 0 ? y = U(D) : o || (F = d & ~F, F !== 0 && (y = U(F)))), y === 0 ? 0 : l !== 0 && l !== y && (l & T) === 0 && (T = y & -y, F = l & -l, T >= F || T === 32 && (F & 4194176) !== 0) ? l : y;
      }
      function P(o, l) {
        return (o.pendingLanes & ~(o.suspendedLanes & ~o.pingedLanes) & l) === 0;
      }
      function X(o, l) {
        switch (o) {
          case 1:
          case 2:
          case 4:
          case 8:
            return l + 250;
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return l + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function Y() {
        var o = bc;
        return bc <<= 1, (bc & 4194176) === 0 && (bc = 128), o;
      }
      function z() {
        var o = Vh;
        return Vh <<= 1, (Vh & 62914560) === 0 && (Vh = 4194304), o;
      }
      function L(o) {
        for (var l = [], d = 0; 31 > d; d++) l.push(o);
        return l;
      }
      function W(o, l) {
        o.pendingLanes |= l, l !== 268435456 && (o.suspendedLanes = 0, o.pingedLanes = 0, o.warmLanes = 0);
      }
      function me(o, l, d, y, T, D) {
        var F = o.pendingLanes;
        o.pendingLanes = d, o.suspendedLanes = 0, o.pingedLanes = 0, o.warmLanes = 0, o.expiredLanes &= d, o.entangledLanes &= d, o.errorRecoveryDisabledLanes &= d, o.shellSuspendCounter = 0;
        var te = o.entanglements, de = o.expirationTimes, Ne = o.hiddenUpdates;
        for (d = F & ~d; 0 < d; ) {
          var nt = 31 - Ea(d), mt = 1 << nt;
          te[nt] = 0, de[nt] = -1;
          var ft = Ne[nt];
          if (ft !== null)
            for (Ne[nt] = null, nt = 0; nt < ft.length; nt++) {
              var Ot = ft[nt];
              Ot !== null && (Ot.lane &= -536870913);
            }
          d &= ~mt;
        }
        y !== 0 && Q(o, y, 0), D !== 0 && T === 0 && o.tag !== 0 && (o.suspendedLanes |= D & ~(F & ~l));
      }
      function Q(o, l, d) {
        o.pendingLanes |= l, o.suspendedLanes &= ~l;
        var y = 31 - Ea(l);
        o.entangledLanes |= l, o.entanglements[y] = o.entanglements[y] | 1073741824 | d & 4194218;
      }
      function oe(o, l) {
        var d = o.entangledLanes |= l;
        for (o = o.entanglements; d; ) {
          var y = 31 - Ea(d), T = 1 << y;
          T & l | o[y] & l && (o[y] |= l), d &= ~T;
        }
      }
      function Se(o) {
        return o &= -o, 2 < o ? 8 < o ? (o & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
      }
      function B(o) {
        if (Na && typeof Na.onCommitFiberRoot == "function")
          try {
            Na.onCommitFiberRoot(
              fl,
              o,
              void 0,
              (o.current.flags & 128) === 128
            );
          } catch {
          }
      }
      function K(o) {
        if (typeof Kg == "function" && Qg(o), Na && typeof Na.setStrictMode == "function")
          try {
            Na.setStrictMode(fl, o);
          } catch {
          }
      }
      function q(o, l) {
        return o === l && (o !== 0 || 1 / o === 1 / l) || o !== o && l !== l;
      }
      function se(o, l) {
        if (typeof o == "object" && o !== null) {
          var d = Gh.get(o);
          return d !== void 0 ? d : (l = {
            value: o,
            source: l,
            stack: _(l)
          }, Gh.set(o, l), l);
        }
        return {
          value: o,
          source: l,
          stack: _(l)
        };
      }
      function le(o, l) {
        Zi[Ki++] = Xh, Zi[Ki++] = Pi, Pi = o, Xh = l;
      }
      function Te(o, l, d) {
        ys[es++] = Yr, ys[es++] = Wr, ys[es++] = _s, _s = o;
        var y = Yr;
        o = Wr;
        var T = 32 - Ea(y) - 1;
        y &= ~(1 << T), d += 1;
        var D = 32 - Ea(l) + T;
        if (30 < D) {
          var F = T - T % 5;
          D = (y & (1 << F) - 1).toString(32), y >>= F, T -= F, Yr = 1 << 32 - Ea(l) + T | d << T | y, Wr = D + o;
        } else
          Yr = 1 << D | d << T | y, Wr = o;
      }
      function we(o) {
        o.return !== null && (le(o, 1), Te(o, 1, 0));
      }
      function gt(o) {
        for (; o === Pi; )
          Pi = Zi[--Ki], Zi[Ki] = null, Xh = Zi[--Ki], Zi[Ki] = null;
        for (; o === _s; )
          _s = ys[--es], ys[es] = null, Wr = ys[--es], ys[es] = null, Yr = ys[--es], ys[es] = null;
      }
      function $e(o, l) {
        w(Co, l), w(Rc, o), w(Qi, null), o = lu(l), M(Qi), w(Qi, o);
      }
      function _e() {
        M(Qi), M(Rc), M(Co);
      }
      function Je(o) {
        o.memoizedState !== null && w(hu, o);
        var l = Qi.current, d = Mg(l, o.type);
        l !== d && (w(Rc, o), w(Qi, d));
      }
      function We(o) {
        Rc.current === o && (M(Qi), M(Rc)), hu.current === o && (M(hu), ur ? Xr._currentValue = ol : Xr._currentValue2 = ol);
      }
      function Mt(o) {
        var l = Error(s(418, ""));
        throw ee(se(l, o)), Cc;
      }
      function yt(o, l) {
        if (!xa) throw Error(s(175));
        _m(
          o.stateNode,
          o.type,
          o.memoizedProps,
          l,
          o
        ) || Mt(o);
      }
      function Ct(o) {
        for (ua = o.return; ua; )
          switch (ua.tag) {
            case 3:
            case 27:
              fr = !0;
              return;
            case 5:
            case 13:
              fr = !1;
              return;
            default:
              ua = ua.return;
          }
      }
      function _n(o) {
        if (!xa || o !== ua) return !1;
        if (!Mn) return Ct(o), Mn = !0, !1;
        var l = !1;
        if (oi ? o.tag !== 3 && o.tag !== 27 && (o.tag !== 5 || Lh(o.type) && !Vr(o.type, o.memoizedProps)) && (l = !0) : o.tag !== 3 && (o.tag !== 5 || Lh(o.type) && !Vr(o.type, o.memoizedProps)) && (l = !0), l && Ri && Mt(o), Ct(o), o.tag === 13) {
          if (!xa) throw Error(s(316));
          if (o = o.memoizedState, o = o !== null ? o.dehydrated : null, !o) throw Error(s(317));
          Ri = Sm(o);
        } else
          Ri = ua ? Ig(o.stateNode) : null;
        return !0;
      }
      function Dt() {
        xa && (Ri = ua = null, Mn = !1);
      }
      function ee(o) {
        Vs === null ? Vs = [o] : Vs.push(o);
      }
      function Be() {
        for (var o = di, l = hr = di = 0; l < o; ) {
          var d = yi[l];
          yi[l++] = null;
          var y = yi[l];
          yi[l++] = null;
          var T = yi[l];
          yi[l++] = null;
          var D = yi[l];
          if (yi[l++] = null, y !== null && T !== null) {
            var F = y.pending;
            F === null ? T.next = T : (T.next = F.next, F.next = T), y.pending = T;
          }
          D !== 0 && et(d, T, D);
        }
      }
      function Ce(o, l, d, y) {
        yi[di++] = o, yi[di++] = l, yi[di++] = d, yi[di++] = y, hr |= y, o.lanes |= y, o = o.alternate, o !== null && (o.lanes |= y);
      }
      function Ie(o, l, d, y) {
        return Ce(o, l, d, y), Ve(o);
      }
      function De(o, l) {
        return Ce(o, null, null, l), Ve(o);
      }
      function et(o, l, d) {
        o.lanes |= d;
        var y = o.alternate;
        y !== null && (y.lanes |= d);
        for (var T = !1, D = o.return; D !== null; )
          D.childLanes |= d, y = D.alternate, y !== null && (y.childLanes |= d), D.tag === 22 && (o = D.stateNode, o === null || o._visibility & 1 || (T = !0)), o = D, D = D.return;
        T && l !== null && o.tag === 3 && (D = o.stateNode, T = 31 - Ea(d), D = D.hiddenUpdates, o = D[T], o === null ? D[T] = [l] : o.push(l), l.lane = d | 536870912);
      }
      function Ve(o) {
        if (50 < Pc)
          throw Pc = 0, Mu = null, Error(s(185));
        for (var l = o.return; l !== null; )
          o = l, l = o.return;
        return o.tag === 3 ? o.stateNode : null;
      }
      function Qe(o) {
        o !== hl && o.next === null && (hl === null ? ba = hl = o : hl = hl.next = o), ki = !0, Cm || (Cm = !0, be(Bt));
      }
      function ut(o, l) {
        if (!jr && ki) {
          jr = !0;
          do
            for (var d = !1, y = ba; y !== null; ) {
              if (o !== 0) {
                var T = y.pendingLanes;
                if (T === 0) var D = 0;
                else {
                  var F = y.suspendedLanes, te = y.pingedLanes;
                  D = (1 << 31 - Ea(42 | o) + 1) - 1, D &= T & ~(F & ~te), D = D & 201326677 ? D & 201326677 | 1 : D ? D | 2 : 0;
                }
                D !== 0 && (d = !0, he(y, D));
              } else
                D = Sn, D = I(
                  y,
                  y === Yn ? D : 0
                ), (D & 3) === 0 || P(y, D) || (d = !0, he(y, D));
              y = y.next;
            }
          while (d);
          jr = !1;
        }
      }
      function Bt() {
        ki = Cm = !1;
        var o = 0;
        du !== 0 && (Tg() && (o = du), du = 0);
        for (var l = gs(), d = null, y = ba; y !== null; ) {
          var T = y.next, D = Z(y, l);
          D === 0 ? (y.next = null, d === null ? ba = T : d.next = T, T === null && (hl = d)) : (d = y, (o !== 0 || (D & 3) !== 0) && (ki = !0)), y = T;
        }
        ut(o);
      }
      function Z(o, l) {
        for (var d = o.suspendedLanes, y = o.pingedLanes, T = o.expirationTimes, D = o.pendingLanes & -62914561; 0 < D; ) {
          var F = 31 - Ea(D), te = 1 << F, de = T[F];
          de === -1 ? ((te & d) === 0 || (te & y) !== 0) && (T[F] = X(te, l)) : de <= l && (o.expiredLanes |= te), D &= ~te;
        }
        if (l = Yn, d = Sn, d = I(
          o,
          o === l ? d : 0
        ), y = o.callbackNode, d === 0 || o === l && Pn === 2 || o.cancelPendingCommit !== null)
          return y !== null && y !== null && Am(y), o.callbackNode = null, o.callbackPriority = 0;
        if ((d & 3) === 0 || P(o, d)) {
          if (l = d & -d, l === o.callbackPriority) return l;
          switch (y !== null && Am(y), Se(d)) {
            case 2:
            case 8:
              d = jg;
              break;
            case 32:
              d = Fh;
              break;
            case 268435456:
              d = Zg;
              break;
            default:
              d = Fh;
          }
          return y = H.bind(null, o), d = Tc(d, y), o.callbackPriority = l, o.callbackNode = d, l;
        }
        return y !== null && y !== null && Am(y), o.callbackPriority = 2, o.callbackNode = null, 2;
      }
      function H(o, l) {
        var d = o.callbackNode;
        if (or() && o.callbackNode !== d)
          return null;
        var y = Sn;
        return y = I(
          o,
          o === Yn ? y : 0
        ), y === 0 ? null : (ph(o, y, l), Z(o, gs()), o.callbackNode != null && o.callbackNode === d ? H.bind(null, o) : null);
      }
      function he(o, l) {
        if (or()) return null;
        ph(o, l, !0);
      }
      function be(o) {
        cS ? qr(function() {
          (Bn & 6) !== 0 ? Tc(Rm, o) : o();
        }) : Tc(Rm, o);
      }
      function He() {
        return du === 0 && (du = Y()), du;
      }
      function Re(o, l) {
        if (Dc === null) {
          var d = Dc = [];
          Dm = 0, pu = He(), dl = {
            status: "pending",
            value: void 0,
            then: function(y) {
              d.push(y);
            }
          };
        }
        return Dm++, l.then(bt, bt), l;
      }
      function bt() {
        if (--Dm === 0 && Dc !== null) {
          dl !== null && (dl.status = "fulfilled");
          var o = Dc;
          Dc = null, pu = 0, dl = null;
          for (var l = 0; l < o.length; l++) (0, o[l])();
        }
      }
      function Xe(o, l) {
        var d = [], y = {
          status: "pending",
          value: null,
          reason: null,
          then: function(T) {
            d.push(T);
          }
        };
        return o.then(
          function() {
            y.status = "fulfilled", y.value = l;
            for (var T = 0; T < d.length; T++) (0, d[T])(l);
          },
          function(T) {
            for (y.status = "rejected", y.reason = T, T = 0; T < d.length; T++)
              (0, d[T])(void 0);
          }
        ), y;
      }
      function ct(o) {
        o.updateQueue = {
          baseState: o.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function _t(o, l) {
        o = o.updateQueue, l.updateQueue === o && (l.updateQueue = {
          baseState: o.baseState,
          firstBaseUpdate: o.firstBaseUpdate,
          lastBaseUpdate: o.lastBaseUpdate,
          shared: o.shared,
          callbacks: null
        });
      }
      function Ge(o) {
        return { lane: o, tag: 0, payload: null, callback: null, next: null };
      }
      function it(o, l, d) {
        var y = o.updateQueue;
        if (y === null) return null;
        if (y = y.shared, (Bn & 2) !== 0) {
          var T = y.pending;
          return T === null ? l.next = l : (l.next = T.next, T.next = l), y.pending = l, l = Ve(o), et(o, null, d), l;
        }
        return Ce(o, y, l, d), Ve(o);
      }
      function Tt(o, l, d) {
        if (l = l.updateQueue, l !== null && (l = l.shared, (d & 4194176) !== 0)) {
          var y = l.lanes;
          y &= o.pendingLanes, d |= y, l.lanes = d, oe(o, d);
        }
      }
      function k(o, l) {
        var d = o.updateQueue, y = o.alternate;
        if (y !== null && (y = y.updateQueue, d === y)) {
          var T = null, D = null;
          if (d = d.firstBaseUpdate, d !== null) {
            do {
              var F = {
                lane: d.lane,
                tag: d.tag,
                payload: d.payload,
                callback: null,
                next: null
              };
              D === null ? T = D = F : D = D.next = F, d = d.next;
            } while (d !== null);
            D === null ? T = D = l : D = D.next = l;
          } else T = D = l;
          d = {
            baseState: y.baseState,
            firstBaseUpdate: T,
            lastBaseUpdate: D,
            shared: y.shared,
            callbacks: y.callbacks
          }, o.updateQueue = d;
          return;
        }
        o = d.lastBaseUpdate, o === null ? d.firstBaseUpdate = l : o.next = l, d.lastBaseUpdate = l;
      }
      function ye() {
        if (qh) {
          var o = dl;
          if (o !== null) throw o;
        }
      }
      function qe(o, l, d, y) {
        qh = !1;
        var T = o.updateQueue;
        Do = !1;
        var D = T.firstBaseUpdate, F = T.lastBaseUpdate, te = T.shared.pending;
        if (te !== null) {
          T.shared.pending = null;
          var de = te, Ne = de.next;
          de.next = null, F === null ? D = Ne : F.next = Ne, F = de;
          var nt = o.alternate;
          nt !== null && (nt = nt.updateQueue, te = nt.lastBaseUpdate, te !== F && (te === null ? nt.firstBaseUpdate = Ne : te.next = Ne, nt.lastBaseUpdate = de));
        }
        if (D !== null) {
          var mt = T.baseState;
          F = 0, nt = Ne = de = null, te = D;
          do {
            var ft = te.lane & -536870913, Ot = ft !== te.lane;
            if (Ot ? (Sn & ft) === ft : (y & ft) === ft) {
              ft !== 0 && ft === pu && (qh = !0), nt !== null && (nt = nt.next = {
                lane: 0,
                tag: te.tag,
                payload: te.payload,
                callback: null,
                next: null
              });
              e: {
                var st = o, La = te;
                ft = l;
                var $i = d;
                switch (La.tag) {
                  case 1:
                    if (st = La.payload, typeof st == "function") {
                      mt = st.call(
                        $i,
                        mt,
                        ft
                      );
                      break e;
                    }
                    mt = st;
                    break e;
                  case 3:
                    st.flags = st.flags & -65537 | 128;
                  case 0:
                    if (st = La.payload, ft = typeof st == "function" ? st.call($i, mt, ft) : st, ft == null) break e;
                    mt = Pr({}, mt, ft);
                    break e;
                  case 2:
                    Do = !0;
                }
              }
              ft = te.callback, ft !== null && (o.flags |= 64, Ot && (o.flags |= 8192), Ot = T.callbacks, Ot === null ? T.callbacks = [ft] : Ot.push(ft));
            } else
              Ot = {
                lane: ft,
                tag: te.tag,
                payload: te.payload,
                callback: te.callback,
                next: null
              }, nt === null ? (Ne = nt = Ot, de = mt) : nt = nt.next = Ot, F |= ft;
            if (te = te.next, te === null) {
              if (te = T.shared.pending, te === null)
                break;
              Ot = te, te = Ot.next, Ot.next = null, T.lastBaseUpdate = Ot, T.shared.pending = null;
            }
          } while (!0);
          nt === null && (de = mt), T.baseState = de, T.firstBaseUpdate = Ne, T.lastBaseUpdate = nt, D === null && (T.shared.lanes = 0), Oo |= F, o.lanes = F, o.memoizedState = mt;
        }
      }
      function J(o, l) {
        if (typeof o != "function")
          throw Error(s(191, o));
        o.call(l);
      }
      function Oe(o, l) {
        var d = o.callbacks;
        if (d !== null)
          for (o.callbacks = null, o = 0; o < d.length; o++)
            J(d[o], l);
      }
      function Ye(o, l) {
        if (Ma(o, l)) return !0;
        if (typeof o != "object" || o === null || typeof l != "object" || l === null)
          return !1;
        var d = Object.keys(o), y = Object.keys(l);
        if (d.length !== y.length) return !1;
        for (y = 0; y < d.length; y++) {
          var T = d[y];
          if (!MS.call(l, T) || !Ma(o[T], l[T]))
            return !1;
        }
        return !0;
      }
      function lt(o) {
        return o = o.status, o === "fulfilled" || o === "rejected";
      }
      function Pe() {
      }
      function Ue(o, l, d) {
        switch (d = o[d], d === void 0 ? o.push(l) : d !== l && (l.then(Pe, Pe), l = d), l.status) {
          case "fulfilled":
            return l.value;
          case "rejected":
            throw o = l.reason, o === dr ? Error(s(483)) : o;
          default:
            if (typeof l.status == "string") l.then(Pe, Pe);
            else {
              if (o = Yn, o !== null && 100 < o.shellSuspendCounter)
                throw Error(s(482));
              o = l, o.status = "pending", o.then(
                function(y) {
                  if (l.status === "pending") {
                    var T = l;
                    T.status = "fulfilled", T.value = y;
                  }
                },
                function(y) {
                  if (l.status === "pending") {
                    var T = l;
                    T.status = "rejected", T.reason = y;
                  }
                }
              );
            }
            switch (l.status) {
              case "fulfilled":
                return l.value;
              case "rejected":
                throw o = l.reason, o === dr ? Error(s(483)) : o;
            }
            throw mu = l, dr;
        }
      }
      function rt() {
        if (mu === null) throw Error(s(459));
        var o = mu;
        return mu = null, o;
      }
      function Rt(o) {
        var l = wc;
        return wc += 1, vu === null && (vu = []), Ue(vu, o, l);
      }
      function Yt(o, l) {
        l = l.props.ref, o.ref = l !== void 0 ? l : null;
      }
      function Ft(o, l) {
        throw l.$$typeof === Qa ? Error(s(525)) : (o = Object.prototype.toString.call(l), Error(
          s(
            31,
            o === "[object Object]" ? "object with keys {" + Object.keys(l).join(", ") + "}" : o
          )
        ));
      }
      function si(o) {
        var l = o._init;
        return l(o._payload);
      }
      function Jn(o) {
        function l(ge, fe) {
          if (o) {
            var xe = ge.deletions;
            xe === null ? (ge.deletions = [fe], ge.flags |= 16) : xe.push(fe);
          }
        }
        function d(ge, fe) {
          if (!o) return null;
          for (; fe !== null; )
            l(ge, fe), fe = fe.sibling;
          return null;
        }
        function y(ge) {
          for (var fe = /* @__PURE__ */ new Map(); ge !== null; )
            ge.key !== null ? fe.set(ge.key, ge) : fe.set(ge.index, ge), ge = ge.sibling;
          return fe;
        }
        function T(ge, fe) {
          return ge = ps(ge, fe), ge.index = 0, ge.sibling = null, ge;
        }
        function D(ge, fe, xe) {
          return ge.index = xe, o ? (xe = ge.alternate, xe !== null ? (xe = xe.index, xe < fe ? (ge.flags |= 33554434, fe) : xe) : (ge.flags |= 33554434, fe)) : (ge.flags |= 1048576, fe);
        }
        function F(ge) {
          return o && ge.alternate === null && (ge.flags |= 33554434), ge;
        }
        function te(ge, fe, xe, Ke) {
          return fe === null || fe.tag !== 6 ? (fe = ms(xe, ge.mode, Ke), fe.return = ge, fe) : (fe = T(fe, xe), fe.return = ge, fe);
        }
        function de(ge, fe, xe, Ke) {
          var wt = xe.type;
          return wt === sl ? nt(
            ge,
            fe,
            xe.props.children,
            Ke,
            xe.key
          ) : fe !== null && (fe.elementType === wt || typeof wt == "object" && wt !== null && wt.$$typeof === Hr && si(wt) === fe.type) ? (fe = T(fe, xe.props), Yt(fe, xe), fe.return = ge, fe) : (fe = Sh(
            xe.type,
            xe.key,
            xe.props,
            null,
            ge.mode,
            Ke
          ), Yt(fe, xe), fe.return = ge, fe);
        }
        function Ne(ge, fe, xe, Ke) {
          return fe === null || fe.tag !== 4 || fe.stateNode.containerInfo !== xe.containerInfo || fe.stateNode.implementation !== xe.implementation ? (fe = xh(xe, ge.mode, Ke), fe.return = ge, fe) : (fe = T(fe, xe.children || []), fe.return = ge, fe);
        }
        function nt(ge, fe, xe, Ke, wt) {
          return fe === null || fe.tag !== 7 ? (fe = il(
            xe,
            ge.mode,
            Ke,
            wt
          ), fe.return = ge, fe) : (fe = T(fe, xe), fe.return = ge, fe);
        }
        function mt(ge, fe, xe) {
          if (typeof fe == "string" && fe !== "" || typeof fe == "number" || typeof fe == "bigint")
            return fe = ms(
              "" + fe,
              ge.mode,
              xe
            ), fe.return = ge, fe;
          if (typeof fe == "object" && fe !== null) {
            switch (fe.$$typeof) {
              case Sc:
                return xe = Sh(
                  fe.type,
                  fe.key,
                  fe.props,
                  null,
                  ge.mode,
                  xe
                ), Yt(xe, fe), xe.return = ge, xe;
              case ru:
                return fe = xh(
                  fe,
                  ge.mode,
                  xe
                ), fe.return = ge, fe;
              case Hr:
                var Ke = fe._init;
                return fe = Ke(fe._payload), mt(ge, fe, xe);
            }
            if (oa(fe) || u(fe))
              return fe = il(
                fe,
                ge.mode,
                xe,
                null
              ), fe.return = ge, fe;
            if (typeof fe.then == "function")
              return mt(ge, Rt(fe), xe);
            if (fe.$$typeof === Ps)
              return mt(
                ge,
                uc(ge, fe),
                xe
              );
            Ft(ge, fe);
          }
          return null;
        }
        function ft(ge, fe, xe, Ke) {
          var wt = fe !== null ? fe.key : null;
          if (typeof xe == "string" && xe !== "" || typeof xe == "number" || typeof xe == "bigint")
            return wt !== null ? null : te(ge, fe, "" + xe, Ke);
          if (typeof xe == "object" && xe !== null) {
            switch (xe.$$typeof) {
              case Sc:
                return xe.key === wt ? de(ge, fe, xe, Ke) : null;
              case ru:
                return xe.key === wt ? Ne(ge, fe, xe, Ke) : null;
              case Hr:
                return wt = xe._init, xe = wt(xe._payload), ft(ge, fe, xe, Ke);
            }
            if (oa(xe) || u(xe))
              return wt !== null ? null : nt(ge, fe, xe, Ke, null);
            if (typeof xe.then == "function")
              return ft(
                ge,
                fe,
                Rt(xe),
                Ke
              );
            if (xe.$$typeof === Ps)
              return ft(
                ge,
                fe,
                uc(ge, xe),
                Ke
              );
            Ft(ge, xe);
          }
          return null;
        }
        function Ot(ge, fe, xe, Ke, wt) {
          if (typeof Ke == "string" && Ke !== "" || typeof Ke == "number" || typeof Ke == "bigint")
            return ge = ge.get(xe) || null, te(fe, ge, "" + Ke, wt);
          if (typeof Ke == "object" && Ke !== null) {
            switch (Ke.$$typeof) {
              case Sc:
                return ge = ge.get(
                  Ke.key === null ? xe : Ke.key
                ) || null, de(fe, ge, Ke, wt);
              case ru:
                return ge = ge.get(
                  Ke.key === null ? xe : Ke.key
                ) || null, Ne(fe, ge, Ke, wt);
              case Hr:
                var Hn = Ke._init;
                return Ke = Hn(Ke._payload), Ot(
                  ge,
                  fe,
                  xe,
                  Ke,
                  wt
                );
            }
            if (oa(Ke) || u(Ke))
              return ge = ge.get(xe) || null, nt(fe, ge, Ke, wt, null);
            if (typeof Ke.then == "function")
              return Ot(
                ge,
                fe,
                xe,
                Rt(Ke),
                wt
              );
            if (Ke.$$typeof === Ps)
              return Ot(
                ge,
                fe,
                xe,
                uc(fe, Ke),
                wt
              );
            Ft(fe, Ke);
          }
          return null;
        }
        function st(ge, fe, xe, Ke) {
          for (var wt = null, Hn = null, Ut = fe, kt = fe = 0, $n = null; Ut !== null && kt < xe.length; kt++) {
            Ut.index > kt ? ($n = Ut, Ut = null) : $n = Ut.sibling;
            var an = ft(
              ge,
              Ut,
              xe[kt],
              Ke
            );
            if (an === null) {
              Ut === null && (Ut = $n);
              break;
            }
            o && Ut && an.alternate === null && l(ge, Ut), fe = D(an, fe, kt), Hn === null ? wt = an : Hn.sibling = an, Hn = an, Ut = $n;
          }
          if (kt === xe.length)
            return d(ge, Ut), Mn && le(ge, kt), wt;
          if (Ut === null) {
            for (; kt < xe.length; kt++)
              Ut = mt(ge, xe[kt], Ke), Ut !== null && (fe = D(
                Ut,
                fe,
                kt
              ), Hn === null ? wt = Ut : Hn.sibling = Ut, Hn = Ut);
            return Mn && le(ge, kt), wt;
          }
          for (Ut = y(Ut); kt < xe.length; kt++)
            $n = Ot(
              Ut,
              ge,
              kt,
              xe[kt],
              Ke
            ), $n !== null && (o && $n.alternate !== null && Ut.delete(
              $n.key === null ? kt : $n.key
            ), fe = D(
              $n,
              fe,
              kt
            ), Hn === null ? wt = $n : Hn.sibling = $n, Hn = $n);
          return o && Ut.forEach(function(fa) {
            return l(ge, fa);
          }), Mn && le(ge, kt), wt;
        }
        function La(ge, fe, xe, Ke) {
          if (xe == null) throw Error(s(151));
          for (var wt = null, Hn = null, Ut = fe, kt = fe = 0, $n = null, an = xe.next(); Ut !== null && !an.done; kt++, an = xe.next()) {
            Ut.index > kt ? ($n = Ut, Ut = null) : $n = Ut.sibling;
            var fa = ft(ge, Ut, an.value, Ke);
            if (fa === null) {
              Ut === null && (Ut = $n);
              break;
            }
            o && Ut && fa.alternate === null && l(ge, Ut), fe = D(fa, fe, kt), Hn === null ? wt = fa : Hn.sibling = fa, Hn = fa, Ut = $n;
          }
          if (an.done)
            return d(ge, Ut), Mn && le(ge, kt), wt;
          if (Ut === null) {
            for (; !an.done; kt++, an = xe.next())
              an = mt(ge, an.value, Ke), an !== null && (fe = D(
                an,
                fe,
                kt
              ), Hn === null ? wt = an : Hn.sibling = an, Hn = an);
            return Mn && le(ge, kt), wt;
          }
          for (Ut = y(Ut); !an.done; kt++, an = xe.next())
            an = Ot(
              Ut,
              ge,
              kt,
              an.value,
              Ke
            ), an !== null && (o && an.alternate !== null && Ut.delete(an.key === null ? kt : an.key), fe = D(an, fe, kt), Hn === null ? wt = an : Hn.sibling = an, Hn = an);
          return o && Ut.forEach(function(Lo) {
            return l(ge, Lo);
          }), Mn && le(ge, kt), wt;
        }
        function $i(ge, fe, xe, Ke) {
          if (typeof xe == "object" && xe !== null && xe.type === sl && xe.key === null && (xe = xe.props.children), typeof xe == "object" && xe !== null) {
            switch (xe.$$typeof) {
              case Sc:
                e: {
                  for (var wt = xe.key; fe !== null; ) {
                    if (fe.key === wt) {
                      if (wt = xe.type, wt === sl) {
                        if (fe.tag === 7) {
                          d(
                            ge,
                            fe.sibling
                          ), Ke = T(
                            fe,
                            xe.props.children
                          ), Ke.return = ge, ge = Ke;
                          break e;
                        }
                      } else if (fe.elementType === wt || typeof wt == "object" && wt !== null && wt.$$typeof === Hr && si(wt) === fe.type) {
                        d(
                          ge,
                          fe.sibling
                        ), Ke = T(fe, xe.props), Yt(Ke, xe), Ke.return = ge, ge = Ke;
                        break e;
                      }
                      d(ge, fe);
                      break;
                    } else l(ge, fe);
                    fe = fe.sibling;
                  }
                  xe.type === sl ? (Ke = il(
                    xe.props.children,
                    ge.mode,
                    Ke,
                    xe.key
                  ), Ke.return = ge, ge = Ke) : (Ke = Sh(
                    xe.type,
                    xe.key,
                    xe.props,
                    null,
                    ge.mode,
                    Ke
                  ), Yt(Ke, xe), Ke.return = ge, ge = Ke);
                }
                return F(ge);
              case ru:
                e: {
                  for (wt = xe.key; fe !== null; ) {
                    if (fe.key === wt)
                      if (fe.tag === 4 && fe.stateNode.containerInfo === xe.containerInfo && fe.stateNode.implementation === xe.implementation) {
                        d(
                          ge,
                          fe.sibling
                        ), Ke = T(
                          fe,
                          xe.children || []
                        ), Ke.return = ge, ge = Ke;
                        break e;
                      } else {
                        d(ge, fe);
                        break;
                      }
                    else l(ge, fe);
                    fe = fe.sibling;
                  }
                  Ke = xh(xe, ge.mode, Ke), Ke.return = ge, ge = Ke;
                }
                return F(ge);
              case Hr:
                return wt = xe._init, xe = wt(xe._payload), $i(
                  ge,
                  fe,
                  xe,
                  Ke
                );
            }
            if (oa(xe))
              return st(
                ge,
                fe,
                xe,
                Ke
              );
            if (u(xe)) {
              if (wt = u(xe), typeof wt != "function")
                throw Error(s(150));
              return xe = wt.call(xe), La(
                ge,
                fe,
                xe,
                Ke
              );
            }
            if (typeof xe.then == "function")
              return $i(
                ge,
                fe,
                Rt(xe),
                Ke
              );
            if (xe.$$typeof === Ps)
              return $i(
                ge,
                fe,
                uc(ge, xe),
                Ke
              );
            Ft(ge, xe);
          }
          return typeof xe == "string" && xe !== "" || typeof xe == "number" || typeof xe == "bigint" ? (xe = "" + xe, fe !== null && fe.tag === 6 ? (d(ge, fe.sibling), Ke = T(fe, xe), Ke.return = ge, ge = Ke) : (d(ge, fe), Ke = ms(xe, ge.mode, Ke), Ke.return = ge, ge = Ke), F(ge)) : d(ge, fe);
        }
        return function(ge, fe, xe, Ke) {
          try {
            wc = 0;
            var wt = $i(
              ge,
              fe,
              xe,
              Ke
            );
            return vu = null, wt;
          } catch (Ut) {
            if (Ut === dr) throw Ut;
            var Hn = t(29, Ut, null, ge.mode);
            return Hn.lanes = Ke, Hn.return = ge, Hn;
          } finally {
          }
        };
      }
      function qa(o, l) {
        o = yr, w(Wh, o), w(gu, l), yr = o | l.baseLanes;
      }
      function ma() {
        w(Wh, yr), w(gu, gu.current);
      }
      function Ur() {
        yr = Wh.current, M(gu), M(Wh);
      }
      function Ya(o) {
        var l = o.alternate;
        w(Ci, Ci.current & 1), w(ca, o), pr === null && (l === null || gu.current !== null || l.memoizedState !== null) && (pr = o);
      }
      function uo(o) {
        if (o.tag === 22) {
          if (w(Ci, Ci.current), w(ca, o), pr === null) {
            var l = o.alternate;
            l !== null && l.memoizedState !== null && (pr = o);
          }
        } else $();
      }
      function $() {
        w(Ci, Ci.current), w(ca, ca.current);
      }
      function Fe(o) {
        M(ca), pr === o && (pr = null), M(Ci);
      }
      function at(o) {
        for (var l = o; l !== null; ) {
          if (l.tag === 13) {
            var d = l.memoizedState;
            if (d !== null && (d = d.dehydrated, d === null || Ec(d) || Nh(d)))
              return l;
          } else if (l.tag === 19 && l.memoizedProps.revealOrder !== void 0) {
            if ((l.flags & 128) !== 0) return l;
          } else if (l.child !== null) {
            l.child.return = l, l = l.child;
            continue;
          }
          if (l === o) break;
          for (; l.sibling === null; ) {
            if (l.return === null || l.return === o) return null;
            l = l.return;
          }
          l.sibling.return = l.return, l = l.sibling;
        }
        return null;
      }
      function dt() {
        throw Error(s(321));
      }
      function Qt(o, l) {
        if (l === null) return !1;
        for (var d = 0; d < l.length && d < o.length; d++)
          if (!Ma(o[d], l[d])) return !1;
        return !0;
      }
      function En(o, l, d, y, T, D) {
        return wo = D, ln = l, l.memoizedState = null, l.updateQueue = null, l.lanes = 0, Gt.H = o === null || o.memoizedState === null ? ml : Uo, pl = !1, D = d(y, T), pl = !1, yu && (D = Wt(
          l,
          d,
          y,
          T
        )), tn(o), D;
      }
      function tn(o) {
        Gt.H = mr;
        var l = zn !== null && zn.next !== null;
        if (wo = 0, _i = zn = ln = null, jh = !1, Uc = 0, _u = null, l) throw Error(s(300));
        o === null || Hi || (o = o.dependencies, o !== null && Wf(o) && (Hi = !0));
      }
      function Wt(o, l, d, y) {
        ln = o;
        var T = 0;
        do {
          if (yu && (_u = null), Uc = 0, yu = !1, 25 <= T) throw Error(s(301));
          if (T += 1, _i = zn = null, o.updateQueue != null) {
            var D = o.updateQueue;
            D.lastEffect = null, D.events = null, D.stores = null, D.memoCache != null && (D.memoCache.index = 0);
          }
          Gt.H = vl, D = l(d, y);
        } while (yu);
        return D;
      }
      function ti() {
        var o = Gt.H, l = o.useState()[0];
        return l = typeof l.then == "function" ? pe(l) : l, o = o.useState()[0], (zn !== null ? zn.memoizedState : null) !== o && (ln.flags |= 1024), l;
      }
      function Rn() {
        var o = Zh !== 0;
        return Zh = 0, o;
      }
      function Vn(o, l, d) {
        l.updateQueue = o.updateQueue, l.flags &= -2053, o.lanes &= ~d;
      }
      function V(o) {
        if (jh) {
          for (o = o.memoizedState; o !== null; ) {
            var l = o.queue;
            l !== null && (l.pending = null), o = o.next;
          }
          jh = !1;
        }
        wo = 0, _i = zn = ln = null, yu = !1, Uc = Zh = 0, _u = null;
      }
      function ae() {
        var o = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return _i === null ? ln.memoizedState = _i = o : _i = _i.next = o, _i;
      }
      function ve() {
        if (zn === null) {
          var o = ln.alternate;
          o = o !== null ? o.memoizedState : null;
        } else o = zn.next;
        var l = _i === null ? ln.memoizedState : _i.next;
        if (l !== null)
          _i = l, zn = o;
        else {
          if (o === null)
            throw ln.alternate === null ? Error(s(467)) : Error(s(310));
          zn = o, o = {
            memoizedState: zn.memoizedState,
            baseState: zn.baseState,
            baseQueue: zn.baseQueue,
            queue: zn.queue,
            next: null
          }, _i === null ? ln.memoizedState = _i = o : _i = _i.next = o;
        }
        return _i;
      }
      function pe(o) {
        var l = Uc;
        return Uc += 1, _u === null && (_u = []), o = Ue(_u, o, l), l = ln, (_i === null ? l.memoizedState : _i.next) === null && (l = l.alternate, Gt.H = l === null || l.memoizedState === null ? ml : Uo), o;
      }
      function ce(o) {
        if (o !== null && typeof o == "object") {
          if (typeof o.then == "function") return pe(o);
          if (o.$$typeof === Ps) return Yi(o);
        }
        throw Error(s(438, String(o)));
      }
      function Ze(o) {
        var l = null, d = ln.updateQueue;
        if (d !== null && (l = d.memoCache), l == null) {
          var y = ln.alternate;
          y !== null && (y = y.updateQueue, y !== null && (y = y.memoCache, y != null && (l = {
            data: y.data.map(function(T) {
              return T.slice();
            }),
            index: 0
          })));
        }
        if (l == null && (l = { data: [], index: 0 }), d === null && (d = wm(), ln.updateQueue = d), d.memoCache = l, d = l.data[l.index], d === void 0)
          for (d = l.data[l.index] = Array(o), y = 0; y < o; y++)
            d[y] = em;
        return l.index++, d;
      }
      function tt(o, l) {
        return typeof l == "function" ? l(o) : l;
      }
      function St(o) {
        var l = ve();
        return pt(l, zn, o);
      }
      function pt(o, l, d) {
        var y = o.queue;
        if (y === null) throw Error(s(311));
        y.lastRenderedReducer = d;
        var T = o.baseQueue, D = y.pending;
        if (D !== null) {
          if (T !== null) {
            var F = T.next;
            T.next = D.next, D.next = F;
          }
          l.baseQueue = T = D, y.pending = null;
        }
        if (D = o.baseState, T === null) o.memoizedState = D;
        else {
          l = T.next;
          var te = F = null, de = null, Ne = l, nt = !1;
          do {
            var mt = Ne.lane & -536870913;
            if (mt !== Ne.lane ? (Sn & mt) === mt : (wo & mt) === mt) {
              var ft = Ne.revertLane;
              if (ft === 0)
                de !== null && (de = de.next = {
                  lane: 0,
                  revertLane: 0,
                  action: Ne.action,
                  hasEagerState: Ne.hasEagerState,
                  eagerState: Ne.eagerState,
                  next: null
                }), mt === pu && (nt = !0);
              else if ((wo & ft) === ft) {
                Ne = Ne.next, ft === pu && (nt = !0);
                continue;
              } else
                mt = {
                  lane: 0,
                  revertLane: Ne.revertLane,
                  action: Ne.action,
                  hasEagerState: Ne.hasEagerState,
                  eagerState: Ne.eagerState,
                  next: null
                }, de === null ? (te = de = mt, F = D) : de = de.next = mt, ln.lanes |= ft, Oo |= ft;
              mt = Ne.action, pl && d(D, mt), D = Ne.hasEagerState ? Ne.eagerState : d(D, mt);
            } else
              ft = {
                lane: mt,
                revertLane: Ne.revertLane,
                action: Ne.action,
                hasEagerState: Ne.hasEagerState,
                eagerState: Ne.eagerState,
                next: null
              }, de === null ? (te = de = ft, F = D) : de = de.next = ft, ln.lanes |= mt, Oo |= mt;
            Ne = Ne.next;
          } while (Ne !== null && Ne !== l);
          if (de === null ? F = D : de.next = te, !Ma(D, o.memoizedState) && (Hi = !0, nt && (d = dl, d !== null)))
            throw d;
          o.memoizedState = D, o.baseState = F, o.baseQueue = de, y.lastRenderedState = D;
        }
        return T === null && (y.lanes = 0), [o.memoizedState, y.dispatch];
      }
      function Lt(o) {
        var l = ve(), d = l.queue;
        if (d === null) throw Error(s(311));
        d.lastRenderedReducer = o;
        var y = d.dispatch, T = d.pending, D = l.memoizedState;
        if (T !== null) {
          d.pending = null;
          var F = T = T.next;
          do
            D = o(D, F.action), F = F.next;
          while (F !== T);
          Ma(D, l.memoizedState) || (Hi = !0), l.memoizedState = D, l.baseQueue === null && (l.baseState = D), d.lastRenderedState = D;
        }
        return [D, y];
      }
      function Pt(o, l, d) {
        var y = ln, T = ve(), D = Mn;
        if (D) {
          if (d === void 0)
            throw Error(s(407));
          d = d();
        } else d = l();
        var F = !Ma(
          (zn || T).memoizedState,
          d
        );
        if (F && (T.memoizedState = d, Hi = !0), T = T.queue, Uf(nn.bind(null, y, T, o), [
          o
        ]), T.getSnapshot !== l || F || _i !== null && _i.memoizedState.tag & 1) {
          if (y.flags |= 2048, fi(
            9,
            It.bind(
              null,
              y,
              T,
              d,
              l
            ),
            { destroy: void 0 },
            null
          ), Yn === null) throw Error(s(349));
          D || (wo & 60) !== 0 || Nt(y, l, d);
        }
        return d;
      }
      function Nt(o, l, d) {
        o.flags |= 16384, o = { getSnapshot: l, value: d }, l = ln.updateQueue, l === null ? (l = wm(), ln.updateQueue = l, l.stores = [o]) : (d = l.stores, d === null ? l.stores = [o] : d.push(o));
      }
      function It(o, l, d, y) {
        l.value = d, l.getSnapshot = y, Ln(l) && dn(o);
      }
      function nn(o, l, d) {
        return d(function() {
          Ln(l) && dn(o);
        });
      }
      function Ln(o) {
        var l = o.getSnapshot;
        o = o.value;
        try {
          var d = l();
          return !Ma(o, d);
        } catch {
          return !0;
        }
      }
      function dn(o) {
        var l = De(o, 2);
        l !== null && Wi(l, o, 2);
      }
      function vn(o) {
        var l = ae();
        if (typeof o == "function") {
          var d = o;
          if (o = d(), pl) {
            K(!0);
            try {
              d();
            } finally {
              K(!1);
            }
          }
        }
        return l.memoizedState = l.baseState = o, l.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: tt,
          lastRenderedState: o
        }, l;
      }
      function zt(o, l, d, y) {
        return o.baseState = d, pt(
          o,
          zn,
          typeof y == "function" ? y : tt
        );
      }
      function Gn(o, l, d, y, T) {
        if (Ql(o)) throw Error(s(485));
        if (o = l.action, o !== null) {
          var D = {
            payload: T,
            action: o,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(F) {
              D.listeners.push(F);
            }
          };
          Gt.T !== null ? d(!0) : D.isTransition = !1, y(D), d = l.pending, d === null ? (D.next = l.pending = D, gn(l, D)) : (D.next = d.next, l.pending = d.next = D);
        }
      }
      function gn(o, l) {
        var d = l.action, y = l.payload, T = o.state;
        if (l.isTransition) {
          var D = Gt.T, F = {};
          Gt.T = F;
          try {
            var te = d(T, y), de = Gt.S;
            de !== null && de(F, te), qi(o, l, te);
          } catch (Ne) {
            Ni(o, l, Ne);
          } finally {
            Gt.T = D;
          }
        } else
          try {
            D = d(T, y), qi(o, l, D);
          } catch (Ne) {
            Ni(o, l, Ne);
          }
      }
      function qi(o, l, d) {
        d !== null && typeof d == "object" && typeof d.then == "function" ? d.then(
          function(y) {
            Us(o, l, y);
          },
          function(y) {
            return Ni(o, l, y);
          }
        ) : Us(o, l, d);
      }
      function Us(o, l, d) {
        l.status = "fulfilled", l.value = d, Js(l), o.state = d, l = o.pending, l !== null && (d = l.next, d === l ? o.pending = null : (d = d.next, l.next = d, gn(o, d)));
      }
      function Ni(o, l, d) {
        var y = o.pending;
        if (o.pending = null, y !== null) {
          y = y.next;
          do
            l.status = "rejected", l.reason = d, Js(l), l = l.next;
          while (l !== y);
        }
        o.action = null;
      }
      function Js(o) {
        o = o.listeners;
        for (var l = 0; l < o.length; l++) (0, o[l])();
      }
      function Xn(o, l) {
        return l;
      }
      function sa(o, l) {
        if (Mn) {
          var d = Yn.formState;
          if (d !== null) {
            e: {
              var y = ln;
              if (Mn) {
                if (Ri) {
                  var T = Mc(
                    Ri,
                    fr
                  );
                  if (T) {
                    Ri = Ig(T), y = gS(T);
                    break e;
                  }
                }
                Mt(y);
              }
              y = !1;
            }
            y && (l = d[0]);
          }
        }
        d = ae(), d.memoizedState = d.baseState = l, y = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: Xn,
          lastRenderedState: l
        }, d.queue = y, d = xp.bind(
          null,
          ln,
          y
        ), y.dispatch = d, y = vn(!1);
        var D = ic.bind(
          null,
          ln,
          !1,
          y.queue
        );
        return y = ae(), T = {
          state: l,
          dispatch: null,
          action: o,
          pending: null
        }, y.queue = T, d = Gn.bind(
          null,
          ln,
          T,
          D,
          d
        ), T.dispatch = d, y.memoizedState = o, [l, d, !1];
      }
      function va(o) {
        var l = ve();
        return vi(l, zn, o);
      }
      function vi(o, l, d) {
        l = pt(
          o,
          l,
          Xn
        )[0], o = St(tt)[0], l = typeof l == "object" && l !== null && typeof l.then == "function" ? pe(l) : l;
        var y = ve(), T = y.queue, D = T.dispatch;
        return d !== y.memoizedState && (ln.flags |= 2048, fi(
          9,
          Oi.bind(null, T, d),
          { destroy: void 0 },
          null
        )), [l, D, o];
      }
      function Oi(o, l) {
        o.action = l;
      }
      function Wa(o) {
        var l = ve(), d = zn;
        if (d !== null)
          return vi(l, d, o);
        ve(), l = l.memoizedState, d = ve();
        var y = d.queue.dispatch;
        return d.memoizedState = o, [l, y, !1];
      }
      function fi(o, l, d, y) {
        return o = { tag: o, create: l, inst: d, deps: y, next: null }, l = ln.updateQueue, l === null && (l = wm(), ln.updateQueue = l), d = l.lastEffect, d === null ? l.lastEffect = o.next = o : (y = d.next, d.next = o, o.next = y, l.lastEffect = o), o;
      }
      function Yl() {
        return ve().memoizedState;
      }
      function Qo(o, l, d, y) {
        var T = ae();
        ln.flags |= o, T.memoizedState = fi(
          1 | l,
          d,
          { destroy: void 0 },
          y === void 0 ? null : y
        );
      }
      function co(o, l, d, y) {
        var T = ve();
        y = y === void 0 ? null : y;
        var D = T.memoizedState.inst;
        zn !== null && y !== null && Qt(y, zn.memoizedState.deps) ? T.memoizedState = fi(l, d, D, y) : (ln.flags |= o, T.memoizedState = fi(1 | l, d, D, y));
      }
      function Wl(o, l) {
        Qo(8390656, 8, o, l);
      }
      function Uf(o, l) {
        co(2048, 8, o, l);
      }
      function hg(o, l) {
        return co(4, 2, o, l);
      }
      function gp(o, l) {
        return co(4, 4, o, l);
      }
      function $u(o, l) {
        if (typeof l == "function") {
          o = o();
          var d = l(o);
          return function() {
            typeof d == "function" ? d() : l(null);
          };
        }
        if (l != null)
          return o = o(), l.current = o, function() {
            l.current = null;
          };
      }
      function yp(o, l, d) {
        d = d != null ? d.concat([o]) : null, co(
          4,
          4,
          $u.bind(null, l, o),
          d
        );
      }
      function Nf() {
      }
      function ec(o, l) {
        var d = ve();
        l = l === void 0 ? null : l;
        var y = d.memoizedState;
        return l !== null && Qt(l, y[1]) ? y[0] : (d.memoizedState = [o, l], o);
      }
      function _p(o, l) {
        var d = ve();
        l = l === void 0 ? null : l;
        var y = d.memoizedState;
        if (l !== null && Qt(l, y[1]))
          return y[0];
        if (y = o(), pl) {
          K(!0);
          try {
            o();
          } finally {
            K(!1);
          }
        }
        return d.memoizedState = [y, l], y;
      }
      function Of(o, l, d) {
        return d === void 0 || (wo & 1073741824) !== 0 ? o.memoizedState = l : (o.memoizedState = d, o = Bp(), ln.lanes |= o, Oo |= o, d);
      }
      function Sp(o, l, d, y) {
        return Ma(d, l) ? d : gu.current !== null ? (o = Of(o, d, y), Ma(o, l) || (Hi = !0), o) : (wo & 42) === 0 ? (Hi = !0, o.memoizedState = d) : (o = Bp(), ln.lanes |= o, Oo |= o, l);
      }
      function Li(o, l, d, y, T) {
        var D = Gr();
        la(
          D !== 0 && 8 > D ? D : 8
        );
        var F = Gt.T, te = {};
        Gt.T = te, ic(o, !1, l, d);
        try {
          var de = T(), Ne = Gt.S;
          if (Ne !== null && Ne(te, de), de !== null && typeof de == "object" && typeof de.then == "function") {
            var nt = Xe(
              de,
              y
            );
            Kl(
              o,
              l,
              nt,
              _a(o)
            );
          } else
            Kl(
              o,
              l,
              y,
              _a(o)
            );
        } catch (mt) {
          Kl(
            o,
            l,
            { then: function() {
            }, status: "rejected", reason: mt },
            _a()
          );
        } finally {
          la(D), Gt.T = F;
        }
      }
      function tc(o) {
        var l = o.memoizedState;
        if (l !== null) return l;
        l = {
          memoizedState: ol,
          baseState: ol,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: tt,
            lastRenderedState: ol
          },
          next: null
        };
        var d = {};
        return l.next = {
          memoizedState: d,
          baseState: d,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: tt,
            lastRenderedState: d
          },
          next: null
        }, o.memoizedState = l, o = o.alternate, o !== null && (o.memoizedState = l), l;
      }
      function jl() {
        return Yi(Xr);
      }
      function Zl() {
        return ve().memoizedState;
      }
      function nc() {
        return ve().memoizedState;
      }
      function Lf(o) {
        for (var l = o.return; l !== null; ) {
          switch (l.tag) {
            case 24:
            case 3:
              var d = _a();
              o = Ge(d);
              var y = it(l, o, d);
              y !== null && (Wi(y, l, d), Tt(y, l, d)), l = { cache: Zf() }, o.payload = l;
              return;
          }
          l = l.return;
        }
      }
      function zf(o, l, d) {
        var y = _a();
        d = {
          lane: y,
          revertLane: 0,
          action: d,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, Ql(o) ? Nr(l, d) : (d = Ie(o, l, d, y), d !== null && (Wi(d, o, y), Ep(d, l, y)));
      }
      function xp(o, l, d) {
        var y = _a();
        Kl(o, l, d, y);
      }
      function Kl(o, l, d, y) {
        var T = {
          lane: y,
          revertLane: 0,
          action: d,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (Ql(o)) Nr(l, T);
        else {
          var D = o.alternate;
          if (o.lanes === 0 && (D === null || D.lanes === 0) && (D = l.lastRenderedReducer, D !== null))
            try {
              var F = l.lastRenderedState, te = D(F, d);
              if (T.hasEagerState = !0, T.eagerState = te, Ma(te, F))
                return Ce(o, l, T, 0), Yn === null && Be(), !1;
            } catch {
            } finally {
            }
          if (d = Ie(o, l, T, y), d !== null)
            return Wi(d, o, y), Ep(d, l, y), !0;
        }
        return !1;
      }
      function ic(o, l, d, y) {
        if (y = {
          lane: 2,
          revertLane: He(),
          action: y,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, Ql(o)) {
          if (l) throw Error(s(479));
        } else
          l = Ie(
            o,
            d,
            y,
            2
          ), l !== null && Wi(l, o, 2);
      }
      function Ql(o) {
        var l = o.alternate;
        return o === ln || l !== null && l === ln;
      }
      function Nr(o, l) {
        yu = jh = !0;
        var d = o.pending;
        d === null ? l.next = l : (l.next = d.next, d.next = l), o.pending = l;
      }
      function Ep(o, l, d) {
        if ((d & 4194176) !== 0) {
          var y = l.lanes;
          y &= o.pendingLanes, d |= y, l.lanes = d, oe(o, d);
        }
      }
      function $s(o, l, d, y) {
        l = o.memoizedState, d = d(y, l), d = d == null ? l : Pr({}, l, d), o.memoizedState = d, o.lanes === 0 && (o.updateQueue.baseState = d);
      }
      function er(o, l, d, y, T, D, F) {
        return o = o.stateNode, typeof o.shouldComponentUpdate == "function" ? o.shouldComponentUpdate(y, D, F) : l.prototype && l.prototype.isPureReactComponent ? !Ye(d, y) || !Ye(T, D) : !0;
      }
      function ac(o, l, d, y) {
        o = l.state, typeof l.componentWillReceiveProps == "function" && l.componentWillReceiveProps(d, y), typeof l.UNSAFE_componentWillReceiveProps == "function" && l.UNSAFE_componentWillReceiveProps(d, y), l.state !== o && Um.enqueueReplaceState(l, l.state, null);
      }
      function jt(o, l) {
        var d = l;
        if ("ref" in l) {
          d = {};
          for (var y in l)
            y !== "ref" && (d[y] = l[y]);
        }
        if (o = o.defaultProps) {
          d === l && (d = Pr({}, d));
          for (var T in o)
            d[T] === void 0 && (d[T] = o[T]);
        }
        return d;
      }
      function je(o, l) {
        try {
          var d = o.onUncaughtError;
          d(l.value, { componentStack: l.stack });
        } catch (y) {
          setTimeout(function() {
            throw y;
          });
        }
      }
      function ko(o, l, d) {
        try {
          var y = o.onCaughtError;
          y(d.value, {
            componentStack: d.stack,
            errorBoundary: l.tag === 1 ? l.stateNode : null
          });
        } catch (T) {
          setTimeout(function() {
            throw T;
          });
        }
      }
      function kl(o, l, d) {
        return d = Ge(d), d.tag = 3, d.payload = { element: null }, d.callback = function() {
          je(o, l);
        }, d;
      }
      function ri(o) {
        return o = Ge(o), o.tag = 3, o;
      }
      function Bf(o, l, d, y) {
        var T = d.type.getDerivedStateFromError;
        if (typeof T == "function") {
          var D = y.value;
          o.payload = function() {
            return T(D);
          }, o.callback = function() {
            ko(l, d, y);
          };
        }
        var F = d.stateNode;
        F !== null && typeof F.componentDidCatch == "function" && (o.callback = function() {
          ko(l, d, y), typeof T != "function" && (_r === null ? _r = /* @__PURE__ */ new Set([this]) : _r.add(this));
          var te = y.stack;
          this.componentDidCatch(y.value, {
            componentStack: te !== null ? te : ""
          });
        });
      }
      function Mp(o, l, d, y, T) {
        if (d.flags |= 32768, y !== null && typeof y == "object" && typeof y.then == "function") {
          if (l = d.alternate, l !== null && $l(
            l,
            d,
            T,
            !0
          ), d = ca.current, d !== null) {
            switch (d.tag) {
              case 13:
                return pr === null ? Bs() : d.alternate === null && ii === 0 && (ii = 3), d.flags &= -257, d.flags |= 65536, d.lanes = T, y === Yh ? d.flags |= 16384 : (l = d.updateQueue, l === null ? d.updateQueue = /* @__PURE__ */ new Set([y]) : l.add(y), _h(o, y, T)), !1;
              case 22:
                return d.flags |= 65536, y === Yh ? d.flags |= 16384 : (l = d.updateQueue, l === null ? (l = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([y])
                }, d.updateQueue = l) : (d = l.retryQueue, d === null ? l.retryQueue = /* @__PURE__ */ new Set([y]) : d.add(y)), _h(o, y, T)), !1;
            }
            throw Error(s(435, d.tag));
          }
          return _h(o, y, T), Bs(), !1;
        }
        if (Mn)
          return l = ca.current, l !== null ? ((l.flags & 65536) === 0 && (l.flags |= 256), l.flags |= 65536, l.lanes = T, y !== Cc && (o = Error(s(422), { cause: y }), ee(
            se(o, d)
          ))) : (y !== Cc && (l = Error(s(423), {
            cause: y
          }), ee(
            se(l, d)
          )), o = o.current.alternate, o.flags |= 65536, T &= -T, o.lanes |= T, y = se(y, d), T = kl(
            o.stateNode,
            y,
            T
          ), k(o, T), ii !== 4 && (ii = 2)), !1;
        var D = Error(s(520), { cause: y });
        if (D = se(D, d), xi === null ? xi = [D] : xi.push(D), ii !== 4 && (ii = 2), l === null) return !0;
        y = se(y, d), d = l;
        do {
          switch (d.tag) {
            case 3:
              return d.flags |= 65536, o = T & -T, d.lanes |= o, o = kl(d.stateNode, y, o), k(d, o), !1;
            case 1:
              if (l = d.type, D = d.stateNode, (d.flags & 128) === 0 && (typeof l.getDerivedStateFromError == "function" || D !== null && typeof D.componentDidCatch == "function" && (_r === null || !_r.has(
                D
              ))))
                return d.flags |= 65536, T &= -T, d.lanes |= T, T = ri(T), Bf(
                  T,
                  o,
                  d,
                  y
                ), k(d, T), !1;
          }
          d = d.return;
        } while (d !== null);
        return !1;
      }
      function zi(o, l, d, y) {
        l.child = o === null ? kg(l, null, d, y) : Ss(
          l,
          o.child,
          d,
          y
        );
      }
      function Pf(o, l, d, y, T) {
        d = d.render;
        var D = l.ref;
        if ("ref" in y) {
          var F = {};
          for (var te in y)
            te !== "ref" && (F[te] = y[te]);
        } else F = y;
        return ho(l), y = En(
          o,
          l,
          d,
          F,
          D,
          T
        ), te = Rn(), o !== null && !Hi ? (Vn(o, l, T), tr(o, l, T)) : (Mn && te && we(l), l.flags |= 1, zi(o, l, y, T), l.child);
      }
      function dg(o, l, d, y, T) {
        if (o === null) {
          var D = d.type;
          return typeof D == "function" && !au(D) && D.defaultProps === void 0 && d.compare === null ? (l.tag = 15, l.type = D, Hf(
            o,
            l,
            D,
            y,
            T
          )) : (o = Sh(
            d.type,
            null,
            y,
            l,
            l.mode,
            T
          ), o.ref = l.ref, o.return = l, l.child = o);
        }
        if (D = o.child, !Gf(o, T)) {
          var F = D.memoizedProps;
          if (d = d.compare, d = d !== null ? d : Ye, d(F, y) && o.ref === l.ref)
            return tr(
              o,
              l,
              T
            );
        }
        return l.flags |= 1, o = ps(D, y), o.ref = l.ref, o.return = l, l.child = o;
      }
      function Hf(o, l, d, y, T) {
        if (o !== null) {
          var D = o.memoizedProps;
          if (Ye(D, y) && o.ref === l.ref)
            if (Hi = !1, l.pendingProps = y = D, Gf(o, T))
              (o.flags & 131072) !== 0 && (Hi = !0);
            else
              return l.lanes = o.lanes, tr(o, l, T);
        }
        return Cn(
          o,
          l,
          d,
          y,
          T
        );
      }
      function If(o, l, d) {
        var y = l.pendingProps, T = y.children, D = (l.stateNode._pendingVisibility & 2) !== 0, F = o !== null ? o.memoizedState : null;
        if (Bi(o, l), y.mode === "hidden" || D) {
          if ((l.flags & 128) !== 0) {
            if (y = F !== null ? F.baseLanes | d : d, o !== null) {
              for (T = l.child = o.child, D = 0; T !== null; )
                D = D | T.lanes | T.childLanes, T = T.sibling;
              l.childLanes = D & ~y;
            } else l.childLanes = 0, l.child = null;
            return Vf(
              o,
              l,
              y,
              d
            );
          }
          if ((d & 536870912) !== 0)
            l.memoizedState = { baseLanes: 0, cachePool: null }, o !== null && el(
              l,
              F !== null ? F.cachePool : null
            ), F !== null ? qa(l, F) : ma(), uo(l);
          else
            return l.lanes = l.childLanes = 536870912, Vf(
              o,
              l,
              F !== null ? F.baseLanes | d : d,
              d
            );
        } else
          F !== null ? (el(l, F.cachePool), qa(l, F), $(), l.memoizedState = null) : (o !== null && el(l, null), ma(), $());
        return zi(o, l, T, d), l.child;
      }
      function Vf(o, l, d, y) {
        var T = po();
        return T = T === null ? null : {
          parent: ur ? li._currentValue : li._currentValue2,
          pool: T
        }, l.memoizedState = {
          baseLanes: d,
          cachePool: T
        }, o !== null && el(l, null), ma(), uo(l), o !== null && $l(o, l, y, !0), null;
      }
      function Bi(o, l) {
        var d = l.ref;
        if (d === null)
          o !== null && o.ref !== null && (l.flags |= 2097664);
        else {
          if (typeof d != "function" && typeof d != "object")
            throw Error(s(284));
          (o === null || o.ref !== d) && (l.flags |= 2097664);
        }
      }
      function Cn(o, l, d, y, T) {
        return ho(l), d = En(
          o,
          l,
          d,
          y,
          void 0,
          T
        ), y = Rn(), o !== null && !Hi ? (Vn(o, l, T), tr(o, l, T)) : (Mn && y && we(l), l.flags |= 1, zi(o, l, d, T), l.child);
      }
      function Jl(o, l, d, y, T, D) {
        return ho(l), l.updateQueue = null, d = Wt(
          l,
          y,
          d,
          T
        ), tn(o), y = Rn(), o !== null && !Hi ? (Vn(o, l, D), tr(o, l, D)) : (Mn && y && we(l), l.flags |= 1, zi(o, l, d, D), l.child);
      }
      function Or(o, l, d, y, T) {
        if (ho(l), l.stateNode === null) {
          var D = Ro, F = d.contextType;
          typeof F == "object" && F !== null && (D = Yi(F)), D = new d(y, D), l.memoizedState = D.state !== null && D.state !== void 0 ? D.state : null, D.updater = Um, l.stateNode = D, D._reactInternals = l, D = l.stateNode, D.props = y, D.state = l.memoizedState, D.refs = {}, ct(l), F = d.contextType, D.context = typeof F == "object" && F !== null ? Yi(F) : Ro, D.state = l.memoizedState, F = d.getDerivedStateFromProps, typeof F == "function" && ($s(
            l,
            d,
            F,
            y
          ), D.state = l.memoizedState), typeof d.getDerivedStateFromProps == "function" || typeof D.getSnapshotBeforeUpdate == "function" || typeof D.UNSAFE_componentWillMount != "function" && typeof D.componentWillMount != "function" || (F = D.state, typeof D.componentWillMount == "function" && D.componentWillMount(), typeof D.UNSAFE_componentWillMount == "function" && D.UNSAFE_componentWillMount(), F !== D.state && Um.enqueueReplaceState(
            D,
            D.state,
            null
          ), qe(l, y, D, T), ye(), D.state = l.memoizedState), typeof D.componentDidMount == "function" && (l.flags |= 4194308), y = !0;
        } else if (o === null) {
          D = l.stateNode;
          var te = l.memoizedProps, de = jt(d, te);
          D.props = de;
          var Ne = D.context, nt = d.contextType;
          F = Ro, typeof nt == "object" && nt !== null && (F = Yi(nt));
          var mt = d.getDerivedStateFromProps;
          nt = typeof mt == "function" || typeof D.getSnapshotBeforeUpdate == "function", te = l.pendingProps !== te, nt || typeof D.UNSAFE_componentWillReceiveProps != "function" && typeof D.componentWillReceiveProps != "function" || (te || Ne !== F) && ac(
            l,
            D,
            y,
            F
          ), Do = !1;
          var ft = l.memoizedState;
          D.state = ft, qe(l, y, D, T), ye(), Ne = l.memoizedState, te || ft !== Ne || Do ? (typeof mt == "function" && ($s(
            l,
            d,
            mt,
            y
          ), Ne = l.memoizedState), (de = Do || er(
            l,
            d,
            de,
            y,
            ft,
            Ne,
            F
          )) ? (nt || typeof D.UNSAFE_componentWillMount != "function" && typeof D.componentWillMount != "function" || (typeof D.componentWillMount == "function" && D.componentWillMount(), typeof D.UNSAFE_componentWillMount == "function" && D.UNSAFE_componentWillMount()), typeof D.componentDidMount == "function" && (l.flags |= 4194308)) : (typeof D.componentDidMount == "function" && (l.flags |= 4194308), l.memoizedProps = y, l.memoizedState = Ne), D.props = y, D.state = Ne, D.context = F, y = de) : (typeof D.componentDidMount == "function" && (l.flags |= 4194308), y = !1);
        } else {
          D = l.stateNode, _t(o, l), F = l.memoizedProps, nt = jt(d, F), D.props = nt, mt = l.pendingProps, ft = D.context, Ne = d.contextType, de = Ro, typeof Ne == "object" && Ne !== null && (de = Yi(Ne)), te = d.getDerivedStateFromProps, (Ne = typeof te == "function" || typeof D.getSnapshotBeforeUpdate == "function") || typeof D.UNSAFE_componentWillReceiveProps != "function" && typeof D.componentWillReceiveProps != "function" || (F !== mt || ft !== de) && ac(
            l,
            D,
            y,
            de
          ), Do = !1, ft = l.memoizedState, D.state = ft, qe(l, y, D, T), ye();
          var Ot = l.memoizedState;
          F !== mt || ft !== Ot || Do || o !== null && o.dependencies !== null && Wf(o.dependencies) ? (typeof te == "function" && ($s(
            l,
            d,
            te,
            y
          ), Ot = l.memoizedState), (nt = Do || er(
            l,
            d,
            nt,
            y,
            ft,
            Ot,
            de
          ) || o !== null && o.dependencies !== null && Wf(o.dependencies)) ? (Ne || typeof D.UNSAFE_componentWillUpdate != "function" && typeof D.componentWillUpdate != "function" || (typeof D.componentWillUpdate == "function" && D.componentWillUpdate(y, Ot, de), typeof D.UNSAFE_componentWillUpdate == "function" && D.UNSAFE_componentWillUpdate(
            y,
            Ot,
            de
          )), typeof D.componentDidUpdate == "function" && (l.flags |= 4), typeof D.getSnapshotBeforeUpdate == "function" && (l.flags |= 1024)) : (typeof D.componentDidUpdate != "function" || F === o.memoizedProps && ft === o.memoizedState || (l.flags |= 4), typeof D.getSnapshotBeforeUpdate != "function" || F === o.memoizedProps && ft === o.memoizedState || (l.flags |= 1024), l.memoizedProps = y, l.memoizedState = Ot), D.props = y, D.state = Ot, D.context = de, y = nt) : (typeof D.componentDidUpdate != "function" || F === o.memoizedProps && ft === o.memoizedState || (l.flags |= 4), typeof D.getSnapshotBeforeUpdate != "function" || F === o.memoizedProps && ft === o.memoizedState || (l.flags |= 1024), y = !1);
        }
        return D = y, Bi(o, l), y = (l.flags & 128) !== 0, D || y ? (D = l.stateNode, d = y && typeof d.getDerivedStateFromError != "function" ? null : D.render(), l.flags |= 1, o !== null && y ? (l.child = Ss(
          l,
          o.child,
          null,
          T
        ), l.child = Ss(
          l,
          null,
          d,
          T
        )) : zi(o, l, d, T), l.memoizedState = D.state, o = l.child) : o = tr(
          o,
          l,
          T
        ), o;
      }
      function fo(o, l, d, y) {
        return Dt(), l.flags |= 256, zi(o, l, d, y), l.child;
      }
      function ja(o) {
        return { baseLanes: o, cachePool: Tp() };
      }
      function sc(o, l, d) {
        return o = o !== null ? o.childLanes & ~d : 0, l && (o |= ns), o;
      }
      function Jo(o, l, d) {
        var y = l.pendingProps, T = !1, D = (l.flags & 128) !== 0, F;
        if ((F = D) || (F = o !== null && o.memoizedState === null ? !1 : (Ci.current & 2) !== 0), F && (T = !0, l.flags &= -129), F = (l.flags & 32) !== 0, l.flags &= -33, o === null) {
          if (Mn) {
            if (T ? Ya(l) : $(), Mn) {
              var te = Ri, de;
              (de = te) && (te = yS(
                te,
                fr
              ), te !== null ? (l.memoizedState = {
                dehydrated: te,
                treeContext: _s !== null ? { id: Yr, overflow: Wr } : null,
                retryLane: 536870912
              }, de = t(18, null, null, 0), de.stateNode = te, de.return = l, l.child = de, ua = l, Ri = null, de = !0) : de = !1), de || Mt(l);
            }
            if (te = l.memoizedState, te !== null && (te = te.dehydrated, te !== null))
              return Nh(te) ? l.lanes = 16 : l.lanes = 536870912, null;
            Fe(l);
          }
          return te = y.children, y = y.fallback, T ? ($(), T = l.mode, te = $o(
            { mode: "hidden", children: te },
            T
          ), y = il(
            y,
            T,
            d,
            null
          ), te.return = l, y.return = l, te.sibling = y, l.child = te, T = l.child, T.memoizedState = ja(d), T.childLanes = sc(
            o,
            F,
            d
          ), l.memoizedState = Kh, y) : (Ya(l), rc(l, te));
        }
        if (de = o.memoizedState, de !== null && (te = de.dehydrated, te !== null)) {
          if (D)
            l.flags & 256 ? (Ya(l), l.flags &= -257, l = oc(
              o,
              l,
              d
            )) : l.memoizedState !== null ? ($(), l.child = o.child, l.flags |= 128, l = null) : ($(), T = y.fallback, te = l.mode, y = $o(
              { mode: "visible", children: y.children },
              te
            ), T = il(
              T,
              te,
              d,
              null
            ), T.flags |= 2, y.return = l, T.return = l, y.sibling = T, l.child = y, Ss(
              l,
              o.child,
              null,
              d
            ), y = l.child, y.memoizedState = ja(d), y.childLanes = sc(
              o,
              F,
              d
            ), l.memoizedState = Kh, l = T);
          else if (Ya(l), Nh(te))
            F = Pg(te).digest, y = Error(s(419)), y.stack = "", y.digest = F, ee({ value: y, source: null, stack: null }), l = oc(
              o,
              l,
              d
            );
          else if (Hi || $l(
            o,
            l,
            d,
            !1
          ), F = (d & o.childLanes) !== 0, Hi || F) {
            if (F = Yn, F !== null) {
              if (y = d & -d, (y & 42) !== 0) y = 1;
              else
                switch (y) {
                  case 2:
                    y = 1;
                    break;
                  case 8:
                    y = 4;
                    break;
                  case 32:
                    y = 16;
                    break;
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                    y = 64;
                    break;
                  case 268435456:
                    y = 134217728;
                    break;
                  default:
                    y = 0;
                }
              if (y = (y & (F.suspendedLanes | d)) !== 0 ? 0 : y, y !== 0 && y !== de.retryLane)
                throw de.retryLane = y, De(o, y), Wi(F, o, y), Om;
            }
            Ec(te) || Bs(), l = oc(
              o,
              l,
              d
            );
          } else
            Ec(te) ? (l.flags |= 128, l.child = o.child, l = _g.bind(
              null,
              o
            ), Hg(te, l), l = null) : (o = de.treeContext, xa && (Ri = Vg(te), ua = l, Mn = !0, Vs = null, fr = !1, o !== null && (ys[es++] = Yr, ys[es++] = Wr, ys[es++] = _s, Yr = o.id, Wr = o.overflow, _s = l)), l = rc(
              l,
              y.children
            ), l.flags |= 4096);
          return l;
        }
        return T ? ($(), T = y.fallback, te = l.mode, de = o.child, D = de.sibling, y = ps(de, {
          mode: "hidden",
          children: y.children
        }), y.subtreeFlags = de.subtreeFlags & 31457280, D !== null ? T = ps(D, T) : (T = il(
          T,
          te,
          d,
          null
        ), T.flags |= 2), T.return = l, y.return = l, y.sibling = T, l.child = y, y = T, T = l.child, te = o.child.memoizedState, te === null ? te = ja(d) : (de = te.cachePool, de !== null ? (D = ur ? li._currentValue : li._currentValue2, de = de.parent !== D ? { parent: D, pool: D } : de) : de = Tp(), te = {
          baseLanes: te.baseLanes | d,
          cachePool: de
        }), T.memoizedState = te, T.childLanes = sc(
          o,
          F,
          d
        ), l.memoizedState = Kh, y) : (Ya(l), d = o.child, o = d.sibling, d = ps(d, {
          mode: "visible",
          children: y.children
        }), d.return = l, d.sibling = null, o !== null && (F = l.deletions, F === null ? (l.deletions = [o], l.flags |= 16) : F.push(o)), l.child = d, l.memoizedState = null, d);
      }
      function rc(o, l) {
        return l = $o(
          { mode: "visible", children: l },
          o.mode
        ), l.return = o, o.child = l;
      }
      function $o(o, l) {
        return Yp(o, l, 0, null);
      }
      function oc(o, l, d) {
        return Ss(l, o.child, null, d), o = rc(
          l,
          l.pendingProps.children
        ), o.flags |= 2, l.memoizedState = null, o;
      }
      function lc(o, l, d) {
        o.lanes |= l;
        var y = o.alternate;
        y !== null && (y.lanes |= l), qf(o.return, l, d);
      }
      function Ff(o, l, d, y, T) {
        var D = o.memoizedState;
        D === null ? o.memoizedState = {
          isBackwards: l,
          rendering: null,
          renderingStartTime: 0,
          last: y,
          tail: d,
          tailMode: T
        } : (D.isBackwards = l, D.rendering = null, D.renderingStartTime = 0, D.last = y, D.tail = d, D.tailMode = T);
      }
      function bp(o, l, d) {
        var y = l.pendingProps, T = y.revealOrder, D = y.tail;
        if (zi(o, l, y.children, d), y = Ci.current, (y & 2) !== 0)
          y = y & 1 | 2, l.flags |= 128;
        else {
          if (o !== null && (o.flags & 128) !== 0)
            e: for (o = l.child; o !== null; ) {
              if (o.tag === 13)
                o.memoizedState !== null && lc(o, d, l);
              else if (o.tag === 19)
                lc(o, d, l);
              else if (o.child !== null) {
                o.child.return = o, o = o.child;
                continue;
              }
              if (o === l) break e;
              for (; o.sibling === null; ) {
                if (o.return === null || o.return === l)
                  break e;
                o = o.return;
              }
              o.sibling.return = o.return, o = o.sibling;
            }
          y &= 1;
        }
        switch (w(Ci, y), T) {
          case "forwards":
            for (d = l.child, T = null; d !== null; )
              o = d.alternate, o !== null && at(o) === null && (T = d), d = d.sibling;
            d = T, d === null ? (T = l.child, l.child = null) : (T = d.sibling, d.sibling = null), Ff(
              l,
              !1,
              T,
              d,
              D
            );
            break;
          case "backwards":
            for (d = null, T = l.child, l.child = null; T !== null; ) {
              if (o = T.alternate, o !== null && at(o) === null) {
                l.child = T;
                break;
              }
              o = T.sibling, T.sibling = d, d = T, T = o;
            }
            Ff(
              l,
              !0,
              d,
              null,
              D
            );
            break;
          case "together":
            Ff(l, !1, null, null, void 0);
            break;
          default:
            l.memoizedState = null;
        }
        return l.child;
      }
      function tr(o, l, d) {
        if (o !== null && (l.dependencies = o.dependencies), Oo |= l.lanes, (d & l.childLanes) === 0)
          if (o !== null) {
            if ($l(
              o,
              l,
              d,
              !1
            ), (d & l.childLanes) === 0)
              return null;
          } else return null;
        if (o !== null && l.child !== o.child)
          throw Error(s(153));
        if (l.child !== null) {
          for (o = l.child, d = ps(o, o.pendingProps), l.child = d, d.return = l; o.sibling !== null; )
            o = o.sibling, d = d.sibling = ps(o, o.pendingProps), d.return = l;
          d.sibling = null;
        }
        return l.child;
      }
      function Gf(o, l) {
        return (o.lanes & l) !== 0 ? !0 : (o = o.dependencies, !!(o !== null && Wf(o)));
      }
      function pg(o, l, d) {
        switch (l.tag) {
          case 3:
            $e(
              l,
              l.stateNode.containerInfo
            ), nr(l, li, o.memoizedState.cache), Dt();
            break;
          case 27:
          case 5:
            Je(l);
            break;
          case 4:
            $e(
              l,
              l.stateNode.containerInfo
            );
            break;
          case 10:
            nr(
              l,
              l.type,
              l.memoizedProps.value
            );
            break;
          case 13:
            var y = l.memoizedState;
            if (y !== null)
              return y.dehydrated !== null ? (Ya(l), l.flags |= 128, null) : (d & l.child.childLanes) !== 0 ? Jo(
                o,
                l,
                d
              ) : (Ya(l), o = tr(
                o,
                l,
                d
              ), o !== null ? o.sibling : null);
            Ya(l);
            break;
          case 19:
            var T = (o.flags & 128) !== 0;
            if (y = (d & l.childLanes) !== 0, y || ($l(
              o,
              l,
              d,
              !1
            ), y = (d & l.childLanes) !== 0), T) {
              if (y)
                return bp(
                  o,
                  l,
                  d
                );
              l.flags |= 128;
            }
            if (T = l.memoizedState, T !== null && (T.rendering = null, T.tail = null, T.lastEffect = null), w(Ci, Ci.current), y) break;
            return null;
          case 22:
          case 23:
            return l.lanes = 0, If(o, l, d);
          case 24:
            nr(l, li, o.memoizedState.cache);
        }
        return tr(o, l, d);
      }
      function Xf(o, l, d) {
        if (o !== null)
          if (o.memoizedProps !== l.pendingProps)
            Hi = !0;
          else {
            if (!Gf(o, d) && (l.flags & 128) === 0)
              return Hi = !1, pg(
                o,
                l,
                d
              );
            Hi = (o.flags & 131072) !== 0;
          }
        else
          Hi = !1, Mn && (l.flags & 1048576) !== 0 && Te(l, Xh, l.index);
        switch (l.lanes = 0, l.tag) {
          case 16:
            e: {
              o = l.pendingProps;
              var y = l.elementType, T = y._init;
              if (y = T(y._payload), l.type = y, typeof y == "function")
                au(y) ? (o = jt(y, o), l.tag = 1, l = Or(
                  null,
                  l,
                  y,
                  o,
                  d
                )) : (l.tag = 0, l = Cn(
                  null,
                  l,
                  y,
                  o,
                  d
                ));
              else {
                if (y != null) {
                  if (T = y.$$typeof, T === Jp) {
                    l.tag = 11, l = Pf(
                      null,
                      l,
                      y,
                      o,
                      d
                    );
                    break e;
                  } else if (T === Ah) {
                    l.tag = 14, l = dg(
                      null,
                      l,
                      y,
                      o,
                      d
                    );
                    break e;
                  }
                }
                throw l = f(y) || y, Error(s(306, l, ""));
              }
            }
            return l;
          case 0:
            return Cn(
              o,
              l,
              l.type,
              l.pendingProps,
              d
            );
          case 1:
            return y = l.type, T = jt(
              y,
              l.pendingProps
            ), Or(
              o,
              l,
              y,
              T,
              d
            );
          case 3:
            e: {
              if ($e(
                l,
                l.stateNode.containerInfo
              ), o === null) throw Error(s(387));
              var D = l.pendingProps;
              T = l.memoizedState, y = T.element, _t(o, l), qe(l, D, null, d);
              var F = l.memoizedState;
              if (D = F.cache, nr(l, li, D), D !== T.cache && Yf(
                l,
                [li],
                d,
                !0
              ), ye(), D = F.element, xa && T.isDehydrated)
                if (T = {
                  element: D,
                  isDehydrated: !1,
                  cache: F.cache
                }, l.updateQueue.baseState = T, l.memoizedState = T, l.flags & 256) {
                  l = fo(
                    o,
                    l,
                    D,
                    d
                  );
                  break e;
                } else if (D !== y) {
                  y = se(
                    Error(s(424)),
                    l
                  ), ee(y), l = fo(
                    o,
                    l,
                    D,
                    d
                  );
                  break e;
                } else
                  for (xa && (Ri = gm(
                    l.stateNode.containerInfo
                  ), ua = l, Mn = !0, Vs = null, fr = !0), d = kg(
                    l,
                    null,
                    D,
                    d
                  ), l.child = d; d; )
                    d.flags = d.flags & -3 | 4096, d = d.sibling;
              else {
                if (Dt(), D === y) {
                  l = tr(
                    o,
                    l,
                    d
                  );
                  break e;
                }
                zi(o, l, D, d);
              }
              l = l.child;
            }
            return l;
          case 26:
            if (Ja)
              return Bi(o, l), o === null ? (d = Mm(
                l.type,
                null,
                l.pendingProps,
                null
              )) ? l.memoizedState = d : Mn || (l.stateNode = xS(
                l.type,
                l.pendingProps,
                Co.current,
                l
              )) : l.memoizedState = Mm(
                l.type,
                o.memoizedProps,
                l.pendingProps,
                o.memoizedState
              ), null;
          case 27:
            if (oi)
              return Je(l), o === null && oi && Mn && (y = l.stateNode = cl(
                l.type,
                l.pendingProps,
                Co.current,
                Qi.current,
                !1
              ), ua = l, fr = !0, Ri = To(y)), y = l.pendingProps.children, o !== null || Mn ? zi(
                o,
                l,
                y,
                d
              ) : l.child = Ss(
                l,
                null,
                y,
                d
              ), Bi(o, l), l.child;
          case 5:
            return o === null && Mn && (_S(
              l.type,
              l.pendingProps,
              Qi.current
            ), (T = y = Ri) && (y = Fg(
              y,
              l.type,
              l.pendingProps,
              fr
            ), y !== null ? (l.stateNode = y, ua = l, Ri = To(y), fr = !1, T = !0) : T = !1), T || Mt(l)), Je(l), T = l.type, D = l.pendingProps, F = o !== null ? o.memoizedProps : null, y = D.children, Vr(T, D) ? y = null : F !== null && Vr(T, F) && (l.flags |= 32), l.memoizedState !== null && (T = En(
              o,
              l,
              ti,
              null,
              null,
              d
            ), ur ? Xr._currentValue = T : Xr._currentValue2 = T), Bi(o, l), zi(o, l, y, d), l.child;
          case 6:
            return o === null && Mn && (qg(
              l.pendingProps,
              Qi.current
            ), (o = d = Ri) && (d = ym(
              d,
              l.pendingProps,
              fr
            ), d !== null ? (l.stateNode = d, ua = l, Ri = null, o = !0) : o = !1), o || Mt(l)), null;
          case 13:
            return Jo(o, l, d);
          case 4:
            return $e(
              l,
              l.stateNode.containerInfo
            ), y = l.pendingProps, o === null ? l.child = Ss(
              l,
              null,
              y,
              d
            ) : zi(
              o,
              l,
              y,
              d
            ), l.child;
          case 11:
            return Pf(
              o,
              l,
              l.type,
              l.pendingProps,
              d
            );
          case 7:
            return zi(
              o,
              l,
              l.pendingProps,
              d
            ), l.child;
          case 8:
            return zi(
              o,
              l,
              l.pendingProps.children,
              d
            ), l.child;
          case 12:
            return zi(
              o,
              l,
              l.pendingProps.children,
              d
            ), l.child;
          case 10:
            return y = l.pendingProps, nr(
              l,
              l.type,
              y.value
            ), zi(
              o,
              l,
              y.children,
              d
            ), l.child;
          case 9:
            return T = l.type._context, y = l.pendingProps.children, ho(l), T = Yi(T), y = y(T), l.flags |= 1, zi(
              o,
              l,
              y,
              d
            ), l.child;
          case 14:
            return dg(
              o,
              l,
              l.type,
              l.pendingProps,
              d
            );
          case 15:
            return Hf(
              o,
              l,
              l.type,
              l.pendingProps,
              d
            );
          case 19:
            return bp(
              o,
              l,
              d
            );
          case 22:
            return If(o, l, d);
          case 24:
            return ho(l), y = Yi(li), o === null ? (T = po(), T === null && (T = Yn, D = Zf(), T.pooledCache = D, D.refCount++, D !== null && (T.pooledCacheLanes |= d), T = D), l.memoizedState = {
              parent: y,
              cache: T
            }, ct(l), nr(l, li, T)) : ((o.lanes & d) !== 0 && (_t(o, l), qe(l, null, null, d), ye()), T = o.memoizedState, D = l.memoizedState, T.parent !== y ? (T = { parent: y, cache: y }, l.memoizedState = T, l.lanes === 0 && (l.memoizedState = l.updateQueue.baseState = T), nr(l, li, y)) : (y = D.cache, nr(l, li, y), y !== T.cache && Yf(
              l,
              [li],
              d,
              !0
            ))), zi(
              o,
              l,
              l.pendingProps.children,
              d
            ), l.child;
          case 29:
            throw l.pendingProps;
        }
        throw Error(s(156, l.tag));
      }
      function nr(o, l, d) {
        ur ? (w(Nc, l._currentValue), l._currentValue = d) : (w(Nc, l._currentValue2), l._currentValue2 = d);
      }
      function Ns(o) {
        var l = Nc.current;
        ur ? o._currentValue = l : o._currentValue2 = l, M(Nc);
      }
      function qf(o, l, d) {
        for (; o !== null; ) {
          var y = o.alternate;
          if ((o.childLanes & l) !== l ? (o.childLanes |= l, y !== null && (y.childLanes |= l)) : y !== null && (y.childLanes & l) !== l && (y.childLanes |= l), o === d) break;
          o = o.return;
        }
      }
      function Yf(o, l, d, y) {
        var T = o.child;
        for (T !== null && (T.return = o); T !== null; ) {
          var D = T.dependencies;
          if (D !== null) {
            var F = T.child;
            D = D.firstContext;
            e: for (; D !== null; ) {
              var te = D;
              D = T;
              for (var de = 0; de < l.length; de++)
                if (te.context === l[de]) {
                  D.lanes |= d, te = D.alternate, te !== null && (te.lanes |= d), qf(
                    D.return,
                    d,
                    o
                  ), y || (F = null);
                  break e;
                }
              D = te.next;
            }
          } else if (T.tag === 18) {
            if (F = T.return, F === null) throw Error(s(341));
            F.lanes |= d, D = F.alternate, D !== null && (D.lanes |= d), qf(F, d, o), F = null;
          } else F = T.child;
          if (F !== null) F.return = T;
          else
            for (F = T; F !== null; ) {
              if (F === o) {
                F = null;
                break;
              }
              if (T = F.sibling, T !== null) {
                T.return = F.return, F = T;
                break;
              }
              F = F.return;
            }
          T = F;
        }
      }
      function $l(o, l, d, y) {
        o = null;
        for (var T = l, D = !1; T !== null; ) {
          if (!D) {
            if ((T.flags & 524288) !== 0) D = !0;
            else if ((T.flags & 262144) !== 0) break;
          }
          if (T.tag === 10) {
            var F = T.alternate;
            if (F === null) throw Error(s(387));
            if (F = F.memoizedProps, F !== null) {
              var te = T.type;
              Ma(T.pendingProps.value, F.value) || (o !== null ? o.push(te) : o = [te]);
            }
          } else if (T === hu.current) {
            if (F = T.alternate, F === null) throw Error(s(387));
            F.memoizedState.memoizedState !== T.memoizedState.memoizedState && (o !== null ? o.push(Xr) : o = [Xr]);
          }
          T = T.return;
        }
        o !== null && Yf(
          l,
          o,
          d,
          y
        ), l.flags |= 262144;
      }
      function Wf(o) {
        for (o = o.firstContext; o !== null; ) {
          var l = o.context;
          if (!Ma(
            ur ? l._currentValue : l._currentValue2,
            o.memoizedValue
          ))
            return !0;
          o = o.next;
        }
        return !1;
      }
      function ho(o) {
        No = o, Fs = null, o = o.dependencies, o !== null && (o.firstContext = null);
      }
      function Yi(o) {
        return jf(No, o);
      }
      function uc(o, l) {
        return No === null && ho(o), jf(o, l);
      }
      function jf(o, l) {
        var d = ur ? l._currentValue : l._currentValue2;
        if (l = { context: l, memoizedValue: d, next: null }, Fs === null) {
          if (o === null) throw Error(s(308));
          Fs = l, o.dependencies = { lanes: 0, firstContext: l }, o.flags |= 524288;
        } else Fs = Fs.next = l;
        return d;
      }
      function Zf() {
        return {
          controller: new Lm(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function eu(o) {
        o.refCount--, o.refCount === 0 && bS(TS, function() {
          o.controller.abort();
        });
      }
      function po() {
        var o = Kr.current;
        return o !== null ? o : Yn.pooledCache;
      }
      function el(o, l) {
        l === null ? w(Kr, Kr.current) : w(Kr, l.pool);
      }
      function Tp() {
        var o = po();
        return o === null ? null : {
          parent: ur ? li._currentValue : li._currentValue2,
          pool: o
        };
      }
      function Za(o) {
        o.flags |= 4;
      }
      function cc(o, l) {
        if (o !== null && o.child === l.child) return !1;
        if ((l.flags & 16) !== 0) return !0;
        for (o = l.child; o !== null; ) {
          if ((o.flags & 13878) !== 0 || (o.subtreeFlags & 13878) !== 0)
            return !0;
          o = o.sibling;
        }
        return !1;
      }
      function mo(o, l, d, y) {
        if (gi)
          for (d = l.child; d !== null; ) {
            if (d.tag === 5 || d.tag === 6)
              lr(o, d.stateNode);
            else if (!(d.tag === 4 || oi && d.tag === 27) && d.child !== null) {
              d.child.return = d, d = d.child;
              continue;
            }
            if (d === l) break;
            for (; d.sibling === null; ) {
              if (d.return === null || d.return === l)
                return;
              d = d.return;
            }
            d.sibling.return = d.return, d = d.sibling;
          }
        else if (Fr)
          for (var T = l.child; T !== null; ) {
            if (T.tag === 5) {
              var D = T.stateNode;
              d && y && (D = zg(
                D,
                T.type,
                T.memoizedProps
              )), lr(o, D);
            } else if (T.tag === 6)
              D = T.stateNode, d && y && (D = Bg(
                D,
                T.memoizedProps
              )), lr(o, D);
            else if (T.tag !== 4) {
              if (T.tag === 22 && T.memoizedState !== null)
                D = T.child, D !== null && (D.return = T), mo(o, T, !0, !0);
              else if (T.child !== null) {
                T.child.return = T, T = T.child;
                continue;
              }
            }
            if (T === l) break;
            for (; T.sibling === null; ) {
              if (T.return === null || T.return === l)
                return;
              T = T.return;
            }
            T.sibling.return = T.return, T = T.sibling;
          }
      }
      function Kf(o, l, d, y) {
        if (Fr)
          for (var T = l.child; T !== null; ) {
            if (T.tag === 5) {
              var D = T.stateNode;
              d && y && (D = zg(
                D,
                T.type,
                T.memoizedProps
              )), Uh(o, D);
            } else if (T.tag === 6)
              D = T.stateNode, d && y && (D = Bg(
                D,
                T.memoizedProps
              )), Uh(o, D);
            else if (T.tag !== 4) {
              if (T.tag === 22 && T.memoizedState !== null)
                D = T.child, D !== null && (D.return = T), Kf(
                  o,
                  T,
                  !(T.memoizedProps !== null && T.memoizedProps.mode === "manual"),
                  !0
                );
              else if (T.child !== null) {
                T.child.return = T, T = T.child;
                continue;
              }
            }
            if (T === l) break;
            for (; T.sibling === null; ) {
              if (T.return === null || T.return === l) return;
              T = T.return;
            }
            T.sibling.return = T.return, T = T.sibling;
          }
      }
      function vo(o, l) {
        if (Fr && cc(o, l)) {
          o = l.stateNode;
          var d = o.containerInfo, y = Dn();
          Kf(y, l, !1, !1), o.pendingChildren = y, Za(l), vS(d, y);
        }
      }
      function ra(o, l, d, y) {
        if (gi)
          o.memoizedProps !== y && Za(l);
        else if (Fr) {
          var T = o.stateNode, D = o.memoizedProps;
          if ((o = cc(o, l)) || D !== y) {
            var F = Qi.current;
            D = Lg(
              T,
              d,
              D,
              y,
              !o,
              null
            ), D === T ? l.stateNode = T : (sm(
              D,
              d,
              y,
              F
            ) && Za(l), l.stateNode = D, o ? mo(D, l, !1, !1) : Za(l));
          } else l.stateNode = T;
        }
      }
      function tu(o, l, d) {
        if (uS(l, d)) {
          if (o.flags |= 16777216, !um(l, d))
            if (mh()) o.flags |= 8192;
            else
              throw mu = Yh, Zr;
        } else o.flags &= -16777217;
      }
      function Qf(o, l) {
        if (ji(l)) {
          if (o.flags |= 16777216, !Wg(l))
            if (mh()) o.flags |= 8192;
            else
              throw mu = Yh, Zr;
        } else o.flags &= -16777217;
      }
      function fc(o, l) {
        l !== null && (o.flags |= 4), o.flags & 16384 && (l = o.tag !== 22 ? z() : 536870912, o.lanes |= l, xu |= l);
      }
      function tl(o, l) {
        if (!Mn)
          switch (o.tailMode) {
            case "hidden":
              l = o.tail;
              for (var d = null; l !== null; )
                l.alternate !== null && (d = l), l = l.sibling;
              d === null ? o.tail = null : d.sibling = null;
              break;
            case "collapsed":
              d = o.tail;
              for (var y = null; d !== null; )
                d.alternate !== null && (y = d), d = d.sibling;
              y === null ? l || o.tail === null ? o.tail = null : o.tail.sibling = null : y.sibling = null;
          }
      }
      function qn(o) {
        var l = o.alternate !== null && o.alternate.child === o.child, d = 0, y = 0;
        if (l)
          for (var T = o.child; T !== null; )
            d |= T.lanes | T.childLanes, y |= T.subtreeFlags & 31457280, y |= T.flags & 31457280, T.return = o, T = T.sibling;
        else
          for (T = o.child; T !== null; )
            d |= T.lanes | T.childLanes, y |= T.subtreeFlags, y |= T.flags, T.return = o, T = T.sibling;
        return o.subtreeFlags |= y, o.childLanes = d, l;
      }
      function Ap(o, l, d) {
        var y = l.pendingProps;
        switch (gt(l), l.tag) {
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return qn(l), null;
          case 1:
            return qn(l), null;
          case 3:
            return d = l.stateNode, y = null, o !== null && (y = o.memoizedState.cache), l.memoizedState.cache !== y && (l.flags |= 2048), Ns(li), _e(), d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null), (o === null || o.child === null) && (_n(l) ? Za(l) : o === null || o.memoizedState.isDehydrated && (l.flags & 256) === 0 || (l.flags |= 1024, Vs !== null && (pc(Vs), Vs = null))), vo(o, l), qn(l), null;
          case 26:
            if (Ja) {
              d = l.type;
              var T = l.memoizedState;
              return o === null ? (Za(l), T !== null ? (qn(l), Qf(
                l,
                T
              )) : (qn(l), tu(
                l,
                d,
                y
              ))) : T ? T !== o.memoizedState ? (Za(l), qn(l), Qf(
                l,
                T
              )) : (qn(l), l.flags &= -16777217) : (gi ? o.memoizedProps !== y && Za(l) : ra(
                o,
                l,
                d,
                y
              ), qn(l), tu(
                l,
                d,
                y
              )), null;
            }
          case 27:
            if (oi) {
              if (We(l), d = Co.current, T = l.type, o !== null && l.stateNode != null)
                gi ? o.memoizedProps !== y && Za(l) : ra(
                  o,
                  l,
                  T,
                  y
                );
              else {
                if (!y) {
                  if (l.stateNode === null)
                    throw Error(s(166));
                  return qn(l), null;
                }
                o = Qi.current, _n(l) ? yt(l, o) : (o = cl(
                  T,
                  y,
                  d,
                  o,
                  !0
                ), l.stateNode = o, Za(l));
              }
              return qn(l), null;
            }
          case 5:
            if (We(l), d = l.type, o !== null && l.stateNode != null)
              ra(o, l, d, y);
            else {
              if (!y) {
                if (l.stateNode === null)
                  throw Error(s(166));
                return qn(l), null;
              }
              o = Qi.current, _n(l) ? yt(l, o) : (T = am(
                d,
                y,
                Co.current,
                o,
                l
              ), mo(T, l, !1, !1), l.stateNode = T, sm(
                T,
                d,
                y,
                o
              ) && Za(l));
            }
            return qn(l), tu(
              l,
              l.type,
              l.pendingProps
            ), null;
          case 6:
            if (o && l.stateNode != null)
              d = o.memoizedProps, gi ? d !== y && Za(l) : Fr && (d !== y ? (l.stateNode = rm(
                y,
                Co.current,
                Qi.current,
                l
              ), Za(l)) : l.stateNode = o.stateNode);
            else {
              if (typeof y != "string" && l.stateNode === null)
                throw Error(s(166));
              if (o = Co.current, d = Qi.current, _n(l)) {
                if (!xa) throw Error(s(176));
                if (o = l.stateNode, d = l.memoizedProps, y = null, T = ua, T !== null)
                  switch (T.tag) {
                    case 27:
                    case 5:
                      y = T.memoizedProps;
                  }
                Ao(
                  o,
                  d,
                  l,
                  y
                ) || Mt(l);
              } else
                l.stateNode = rm(
                  y,
                  o,
                  d,
                  l
                );
            }
            return qn(l), null;
          case 13:
            if (y = l.memoizedState, o === null || o.memoizedState !== null && o.memoizedState.dehydrated !== null) {
              if (T = _n(l), y !== null && y.dehydrated !== null) {
                if (o === null) {
                  if (!T) throw Error(s(318));
                  if (!xa) throw Error(s(344));
                  if (T = l.memoizedState, T = T !== null ? T.dehydrated : null, !T) throw Error(s(317));
                  Gg(T, l);
                } else
                  Dt(), (l.flags & 128) === 0 && (l.memoizedState = null), l.flags |= 4;
                qn(l), T = !1;
              } else
                Vs !== null && (pc(Vs), Vs = null), T = !0;
              if (!T)
                return l.flags & 256 ? (Fe(l), l) : (Fe(l), null);
            }
            if (Fe(l), (l.flags & 128) !== 0)
              return l.lanes = d, l;
            if (d = y !== null, o = o !== null && o.memoizedState !== null, d) {
              y = l.child, T = null, y.alternate !== null && y.alternate.memoizedState !== null && y.alternate.memoizedState.cachePool !== null && (T = y.alternate.memoizedState.cachePool.pool);
              var D = null;
              y.memoizedState !== null && y.memoizedState.cachePool !== null && (D = y.memoizedState.cachePool.pool), D !== T && (y.flags |= 2048);
            }
            return d !== o && d && (l.child.flags |= 8192), fc(l, l.updateQueue), qn(l), null;
          case 4:
            return _e(), vo(o, l), o === null && bg(l.stateNode.containerInfo), qn(l), null;
          case 10:
            return Ns(l.type), qn(l), null;
          case 19:
            if (M(Ci), T = l.memoizedState, T === null)
              return qn(l), null;
            if (y = (l.flags & 128) !== 0, D = T.rendering, D === null)
              if (y) tl(T, !1);
              else {
                if (ii !== 0 || o !== null && (o.flags & 128) !== 0)
                  for (o = l.child; o !== null; ) {
                    if (D = at(o), D !== null) {
                      for (l.flags |= 128, tl(T, !1), o = D.updateQueue, l.updateQueue = o, fc(l, o), l.subtreeFlags = 0, o = d, d = l.child; d !== null; )
                        Kn(d, o), d = d.sibling;
                      return w(
                        Ci,
                        Ci.current & 1 | 2
                      ), l.child;
                    }
                    o = o.sibling;
                  }
                T.tail !== null && gs() > zc && (l.flags |= 128, y = !0, tl(T, !1), l.lanes = 4194304);
              }
            else {
              if (!y)
                if (o = at(D), o !== null) {
                  if (l.flags |= 128, y = !0, o = o.updateQueue, l.updateQueue = o, fc(l, o), tl(T, !0), T.tail === null && T.tailMode === "hidden" && !D.alternate && !Mn)
                    return qn(l), null;
                } else
                  2 * gs() - T.renderingStartTime > zc && d !== 536870912 && (l.flags |= 128, y = !0, tl(T, !1), l.lanes = 4194304);
              T.isBackwards ? (D.sibling = l.child, l.child = D) : (o = T.last, o !== null ? o.sibling = D : l.child = D, T.last = D);
            }
            return T.tail !== null ? (l = T.tail, T.rendering = l, T.tail = l.sibling, T.renderingStartTime = gs(), l.sibling = null, o = Ci.current, w(
              Ci,
              y ? o & 1 | 2 : o & 1
            ), l) : (qn(l), null);
          case 22:
          case 23:
            return Fe(l), Ur(), y = l.memoizedState !== null, o !== null ? o.memoizedState !== null !== y && (l.flags |= 8192) : y && (l.flags |= 8192), y ? (d & 536870912) !== 0 && (l.flags & 128) === 0 && (qn(l), l.subtreeFlags & 6 && (l.flags |= 8192)) : qn(l), d = l.updateQueue, d !== null && fc(l, d.retryQueue), d = null, o !== null && o.memoizedState !== null && o.memoizedState.cachePool !== null && (d = o.memoizedState.cachePool.pool), y = null, l.memoizedState !== null && l.memoizedState.cachePool !== null && (y = l.memoizedState.cachePool.pool), y !== d && (l.flags |= 2048), o !== null && M(Kr), null;
          case 24:
            return d = null, o !== null && (d = o.memoizedState.cache), l.memoizedState.cache !== d && (l.flags |= 2048), Ns(li), qn(l), null;
          case 25:
            return null;
        }
        throw Error(s(156, l.tag));
      }
      function kf(o, l) {
        switch (gt(l), l.tag) {
          case 1:
            return o = l.flags, o & 65536 ? (l.flags = o & -65537 | 128, l) : null;
          case 3:
            return Ns(li), _e(), o = l.flags, (o & 65536) !== 0 && (o & 128) === 0 ? (l.flags = o & -65537 | 128, l) : null;
          case 26:
          case 27:
          case 5:
            return We(l), null;
          case 13:
            if (Fe(l), o = l.memoizedState, o !== null && o.dehydrated !== null) {
              if (l.alternate === null)
                throw Error(s(340));
              Dt();
            }
            return o = l.flags, o & 65536 ? (l.flags = o & -65537 | 128, l) : null;
          case 19:
            return M(Ci), null;
          case 4:
            return _e(), null;
          case 10:
            return Ns(l.type), null;
          case 22:
          case 23:
            return Fe(l), Ur(), o !== null && M(Kr), o = l.flags, o & 65536 ? (l.flags = o & -65537 | 128, l) : null;
          case 24:
            return Ns(li), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function Jf(o, l) {
        switch (gt(l), l.tag) {
          case 3:
            Ns(li), _e();
            break;
          case 26:
          case 27:
          case 5:
            We(l);
            break;
          case 4:
            _e();
            break;
          case 13:
            Fe(l);
            break;
          case 19:
            M(Ci);
            break;
          case 10:
            Ns(l.type);
            break;
          case 22:
          case 23:
            Fe(l), Ur(), o !== null && M(Kr);
            break;
          case 24:
            Ns(li);
        }
      }
      function go(o, l) {
        try {
          var d = l.updateQueue, y = d !== null ? d.lastEffect : null;
          if (y !== null) {
            var T = y.next;
            d = T;
            do {
              if ((d.tag & o) === o) {
                y = void 0;
                var D = d.create, F = d.inst;
                y = D(), F.destroy = y;
              }
              d = d.next;
            } while (d !== T);
          }
        } catch (te) {
          Jt(l, l.return, te);
        }
      }
      function ir(o, l, d) {
        try {
          var y = l.updateQueue, T = y !== null ? y.lastEffect : null;
          if (T !== null) {
            var D = T.next;
            y = D;
            do {
              if ((y.tag & o) === o) {
                var F = y.inst, te = F.destroy;
                if (te !== void 0) {
                  F.destroy = void 0, T = l;
                  var de = d;
                  try {
                    te();
                  } catch (Ne) {
                    Jt(
                      T,
                      de,
                      Ne
                    );
                  }
                }
              }
              y = y.next;
            } while (y !== D);
          }
        } catch (Ne) {
          Jt(l, l.return, Ne);
        }
      }
      function Rp(o) {
        var l = o.updateQueue;
        if (l !== null) {
          var d = o.stateNode;
          try {
            Oe(l, d);
          } catch (y) {
            Jt(o, o.return, y);
          }
        }
      }
      function Cp(o, l, d) {
        d.props = jt(
          o.type,
          o.memoizedProps
        ), d.state = o.memoizedState;
        try {
          d.componentWillUnmount();
        } catch (y) {
          Jt(o, l, y);
        }
      }
      function Lr(o, l) {
        try {
          var d = o.ref;
          if (d !== null) {
            var y = o.stateNode;
            switch (o.tag) {
              case 26:
              case 27:
              case 5:
                var T = ou(y);
                break;
              default:
                T = y;
            }
            typeof d == "function" ? o.refCleanup = d(T) : d.current = T;
          }
        } catch (D) {
          Jt(o, l, D);
        }
      }
      function wa(o, l) {
        var d = o.ref, y = o.refCleanup;
        if (d !== null)
          if (typeof y == "function")
            try {
              y();
            } catch (T) {
              Jt(o, l, T);
            } finally {
              o.refCleanup = null, o = o.alternate, o != null && (o.refCleanup = null);
            }
          else if (typeof d == "function")
            try {
              d(null);
            } catch (T) {
              Jt(o, l, T);
            }
          else d.current = null;
      }
      function Dp(o) {
        var l = o.type, d = o.memoizedProps, y = o.stateNode;
        try {
          hS(y, l, d, o);
        } catch (T) {
          Jt(o, o.return, T);
        }
      }
      function wp(o, l, d) {
        try {
          Ug(
            o.stateNode,
            o.type,
            d,
            l,
            o
          );
        } catch (y) {
          Jt(o, o.return, y);
        }
      }
      function $f(o) {
        return o.tag === 5 || o.tag === 3 || (Ja ? o.tag === 26 : !1) || (oi ? o.tag === 27 : !1) || o.tag === 4;
      }
      function eh(o) {
        e: for (; ; ) {
          for (; o.sibling === null; ) {
            if (o.return === null || $f(o.return)) return null;
            o = o.return;
          }
          for (o.sibling.return = o.return, o = o.sibling; o.tag !== 5 && o.tag !== 6 && (!oi || o.tag !== 27) && o.tag !== 18; ) {
            if (o.flags & 2 || o.child === null || o.tag === 4) continue e;
            o.child.return = o, o = o.child;
          }
          if (!(o.flags & 2)) return o.stateNode;
        }
      }
      function th(o, l, d) {
        var y = o.tag;
        if (y === 5 || y === 6)
          o = o.stateNode, l ? dS(d, o, l) : wg(d, o);
        else if (!(y === 4 || oi && y === 27) && (o = o.child, o !== null))
          for (th(o, l, d), o = o.sibling; o !== null; )
            th(o, l, d), o = o.sibling;
      }
      function ar(o, l, d) {
        var y = o.tag;
        if (y === 5 || y === 6)
          o = o.stateNode, l ? Ng(d, o, l) : dm(d, o);
        else if (!(y === 4 || oi && y === 27) && (o = o.child, o !== null))
          for (ar(o, l, d), o = o.sibling; o !== null; )
            ar(o, l, d), o = o.sibling;
      }
      function nh(o, l, d) {
        o = o.containerInfo;
        try {
          vm(o, d);
        } catch (y) {
          Jt(l, l.return, y);
        }
      }
      function Up(o, l) {
        for (Ir(o.containerInfo), Ii = l; Ii !== null; )
          if (o = Ii, l = o.child, (o.subtreeFlags & 1028) !== 0 && l !== null)
            l.return = o, Ii = l;
          else
            for (; Ii !== null; ) {
              o = Ii;
              var d = o.alternate;
              switch (l = o.flags, o.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if ((l & 1024) !== 0 && d !== null) {
                    l = void 0;
                    var y = o, T = d.memoizedProps;
                    d = d.memoizedState;
                    var D = y.stateNode;
                    try {
                      var F = jt(
                        y.type,
                        T,
                        y.elementType === y.type
                      );
                      l = D.getSnapshotBeforeUpdate(
                        F,
                        d
                      ), D.__reactInternalSnapshotBeforeUpdate = l;
                    } catch (te) {
                      Jt(
                        y,
                        y.return,
                        te
                      );
                    }
                  }
                  break;
                case 3:
                  (l & 1024) !== 0 && gi && bo(o.stateNode.containerInfo);
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if ((l & 1024) !== 0)
                    throw Error(s(163));
              }
              if (l = o.sibling, l !== null) {
                l.return = o.return, Ii = l;
                break;
              }
              Ii = o.return;
            }
        return F = ty, ty = !1, F;
      }
      function mg(o, l, d) {
        var y = d.flags;
        switch (d.tag) {
          case 0:
          case 11:
          case 15:
            sr(o, d), y & 4 && go(5, d);
            break;
          case 1:
            if (sr(o, d), y & 4)
              if (o = d.stateNode, l === null)
                try {
                  o.componentDidMount();
                } catch (te) {
                  Jt(d, d.return, te);
                }
              else {
                var T = jt(
                  d.type,
                  l.memoizedProps
                );
                l = l.memoizedState;
                try {
                  o.componentDidUpdate(
                    T,
                    l,
                    o.__reactInternalSnapshotBeforeUpdate
                  );
                } catch (te) {
                  Jt(
                    d,
                    d.return,
                    te
                  );
                }
              }
            y & 64 && Rp(d), y & 512 && Lr(d, d.return);
            break;
          case 3:
            if (sr(o, d), y & 64 && (y = d.updateQueue, y !== null)) {
              if (o = null, d.child !== null)
                switch (d.child.tag) {
                  case 27:
                  case 5:
                    o = ou(d.child.stateNode);
                    break;
                  case 1:
                    o = d.child.stateNode;
                }
              try {
                Oe(y, o);
              } catch (te) {
                Jt(d, d.return, te);
              }
            }
            break;
          case 26:
            if (Ja) {
              sr(o, d), y & 512 && Lr(d, d.return);
              break;
            }
          case 27:
          case 5:
            sr(o, d), l === null && y & 4 && Dp(d), y & 512 && Lr(d, d.return);
            break;
          case 12:
            sr(o, d);
            break;
          case 13:
            sr(o, d), y & 4 && ih(o, d);
            break;
          case 22:
            if (T = d.memoizedState !== null || vr, !T) {
              l = l !== null && l.memoizedState !== null || ui;
              var D = vr, F = ui;
              vr = T, (ui = l) && !F ? Os(
                o,
                d,
                (d.subtreeFlags & 8772) !== 0
              ) : sr(o, d), vr = D, ui = F;
            }
            y & 512 && (d.memoizedProps.mode === "manual" ? Lr(d, d.return) : wa(d, d.return));
            break;
          default:
            sr(o, d);
        }
      }
      function vg(o) {
        var l = o.alternate;
        l !== null && (o.alternate = null, vg(l)), o.child = null, o.deletions = null, o.sibling = null, o.tag === 5 && (l = o.stateNode, l !== null && Dh(l)), o.stateNode = null, o.return = null, o.dependencies = null, o.memoizedProps = null, o.memoizedState = null, o.pendingProps = null, o.stateNode = null, o.updateQueue = null;
      }
      function hs(o, l, d) {
        for (d = d.child; d !== null; )
          nl(
            o,
            l,
            d
          ), d = d.sibling;
      }
      function nl(o, l, d) {
        if (Na && typeof Na.onCommitFiberUnmount == "function")
          try {
            Na.onCommitFiberUnmount(fl, d);
          } catch {
          }
        switch (d.tag) {
          case 26:
            if (Ja) {
              ui || wa(d, l), hs(
                o,
                l,
                d
              ), d.memoizedState ? Bh(d.memoizedState) : d.stateNode && fn(d.stateNode);
              break;
            }
          case 27:
            if (oi) {
              ui || wa(d, l);
              var y = Si, T = ts;
              Si = d.stateNode, hs(
                o,
                l,
                d
              ), ES(d.stateNode), Si = y, ts = T;
              break;
            }
          case 5:
            ui || wa(d, l);
          case 6:
            if (gi) {
              if (y = Si, T = ts, Si = null, hs(
                o,
                l,
                d
              ), Si = y, ts = T, Si !== null)
                if (ts)
                  try {
                    wh(Si, d.stateNode);
                  } catch (D) {
                    Jt(
                      d,
                      l,
                      D
                    );
                  }
                else
                  try {
                    fu(Si, d.stateNode);
                  } catch (D) {
                    Jt(
                      d,
                      l,
                      D
                    );
                  }
            } else
              hs(
                o,
                l,
                d
              );
            break;
          case 18:
            gi && Si !== null && (ts ? xm(
              Si,
              d.stateNode
            ) : Xg(Si, d.stateNode));
            break;
          case 4:
            gi ? (y = Si, T = ts, Si = d.stateNode.containerInfo, ts = !0, hs(
              o,
              l,
              d
            ), Si = y, ts = T) : (Fr && nh(
              d.stateNode,
              d,
              Dn()
            ), hs(
              o,
              l,
              d
            ));
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            ui || ir(2, d, l), ui || ir(4, d, l), hs(
              o,
              l,
              d
            );
            break;
          case 1:
            ui || (wa(d, l), y = d.stateNode, typeof y.componentWillUnmount == "function" && Cp(
              d,
              l,
              y
            )), hs(
              o,
              l,
              d
            );
            break;
          case 21:
            hs(
              o,
              l,
              d
            );
            break;
          case 22:
            ui || wa(d, l), ui = (y = ui) || d.memoizedState !== null, hs(
              o,
              l,
              d
            ), ui = y;
            break;
          default:
            hs(
              o,
              l,
              d
            );
        }
      }
      function ih(o, l) {
        if (xa && l.memoizedState === null && (o = l.alternate, o !== null && (o = o.memoizedState, o !== null && (o = o.dehydrated, o !== null))))
          try {
            ll(o);
          } catch (d) {
            Jt(l, l.return, d);
          }
      }
      function ah(o) {
        switch (o.tag) {
          case 13:
          case 19:
            var l = o.stateNode;
            return l === null && (l = o.stateNode = new ey()), l;
          case 22:
            return o = o.stateNode, l = o._retryCache, l === null && (l = o._retryCache = new ey()), l;
          default:
            throw Error(s(435, o.tag));
        }
      }
      function sh(o, l) {
        var d = ah(o);
        l.forEach(function(y) {
          var T = Xp.bind(null, o, y);
          d.has(y) || (d.add(y), y.then(T, T));
        });
      }
      function ga(o, l) {
        var d = l.deletions;
        if (d !== null)
          for (var y = 0; y < d.length; y++) {
            var T = d[y], D = o, F = l;
            if (gi) {
              var te = F;
              e: for (; te !== null; ) {
                switch (te.tag) {
                  case 27:
                  case 5:
                    Si = te.stateNode, ts = !1;
                    break e;
                  case 3:
                    Si = te.stateNode.containerInfo, ts = !0;
                    break e;
                  case 4:
                    Si = te.stateNode.containerInfo, ts = !0;
                    break e;
                }
                te = te.return;
              }
              if (Si === null) throw Error(s(160));
              nl(D, F, T), Si = null, ts = !1;
            } else nl(D, F, T);
            D = T.alternate, D !== null && (D.return = null), T.return = null;
          }
        if (l.subtreeFlags & 13878)
          for (l = l.child; l !== null; )
            rh(l, o), l = l.sibling;
      }
      function rh(o, l) {
        var d = o.alternate, y = o.flags;
        switch (o.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            ga(l, o), ya(o), y & 4 && (ir(3, o, o.return), go(3, o), ir(5, o, o.return));
            break;
          case 1:
            ga(l, o), ya(o), y & 512 && (ui || d === null || wa(d, d.return)), y & 64 && vr && (o = o.updateQueue, o !== null && (y = o.callbacks, y !== null && (d = o.shared.hiddenCallbacks, o.shared.hiddenCallbacks = d === null ? y : d.concat(y))));
            break;
          case 26:
            if (Ja) {
              var T = Gs;
              ga(l, o), ya(o), y & 512 && (ui || d === null || wa(d, d.return)), y & 4 && (y = d !== null ? d.memoizedState : null, l = o.memoizedState, d === null ? l === null ? o.stateNode === null ? o.stateNode = SS(
                T,
                o.type,
                o.memoizedProps,
                o
              ) : Yg(
                T,
                o.type,
                o.stateNode
              ) : o.stateNode = bm(
                T,
                l,
                o.memoizedProps
              ) : y !== l ? (y === null ? d.stateNode !== null && fn(d.stateNode) : Bh(y), l === null ? Yg(
                T,
                o.type,
                o.stateNode
              ) : bm(
                T,
                l,
                o.memoizedProps
              )) : l === null && o.stateNode !== null && wp(
                o,
                o.memoizedProps,
                d.memoizedProps
              ));
              break;
            }
          case 27:
            if (oi && y & 4 && o.alternate === null) {
              T = o.stateNode;
              var D = o.memoizedProps;
              try {
                Ph(T), Tm(
                  o.type,
                  D,
                  T,
                  o
                );
              } catch (nt) {
                Jt(o, o.return, nt);
              }
            }
          case 5:
            if (ga(l, o), ya(o), y & 512 && (ui || d === null || wa(d, d.return)), gi) {
              if (o.flags & 32) {
                l = o.stateNode;
                try {
                  pm(l);
                } catch (nt) {
                  Jt(o, o.return, nt);
                }
              }
              y & 4 && o.stateNode != null && (l = o.memoizedProps, wp(
                o,
                l,
                d !== null ? d.memoizedProps : l
              )), y & 1024 && (zm = !0);
            }
            break;
          case 6:
            if (ga(l, o), ya(o), y & 4 && gi) {
              if (o.stateNode === null)
                throw Error(s(162));
              y = o.memoizedProps, d = d !== null ? d.memoizedProps : y, l = o.stateNode;
              try {
                fS(l, d, y);
              } catch (nt) {
                Jt(o, o.return, nt);
              }
            }
            break;
          case 3:
            if (Ja ? (Ua(), T = Gs, Gs = zh(l.containerInfo), ga(l, o), Gs = T) : ga(l, o), ya(o), y & 4) {
              if (gi && xa && d !== null && d.memoizedState.isDehydrated)
                try {
                  Oh(l.containerInfo);
                } catch (nt) {
                  Jt(o, o.return, nt);
                }
              if (Fr) {
                y = l.containerInfo, d = l.pendingChildren;
                try {
                  vm(y, d);
                } catch (nt) {
                  Jt(o, o.return, nt);
                }
              }
            }
            zm && (zm = !1, Np(o));
            break;
          case 4:
            Ja ? (d = Gs, Gs = zh(
              o.stateNode.containerInfo
            ), ga(l, o), ya(o), Gs = d) : (ga(l, o), ya(o)), y & 4 && Fr && nh(
              o.stateNode,
              o,
              o.stateNode.pendingChildren
            );
            break;
          case 12:
            ga(l, o), ya(o);
            break;
          case 13:
            ga(l, o), ya(o), o.child.flags & 8192 && o.memoizedState !== null != (d !== null && d.memoizedState !== null) && (Im = gs()), y & 4 && (y = o.updateQueue, y !== null && (o.updateQueue = null, sh(o, y)));
            break;
          case 22:
            y & 512 && (ui || d === null || wa(d, d.return)), T = o.memoizedState !== null;
            var F = d !== null && d.memoizedState !== null, te = vr, de = ui;
            if (vr = te || T, ui = de || F, ga(l, o), ui = de, vr = te, ya(o), l = o.stateNode, l._current = o, l._visibility &= -3, l._visibility |= l._pendingVisibility & 2, y & 8192 && (l._visibility = T ? l._visibility & -2 : l._visibility | 1, T && (l = vr || ui, d === null || F || l || ds(o)), gi && (o.memoizedProps === null || o.memoizedProps.mode !== "manual"))) {
              e: if (d = null, gi)
                for (l = o; ; ) {
                  if (l.tag === 5 || Ja && l.tag === 26 || oi && l.tag === 27) {
                    if (d === null) {
                      F = d = l;
                      try {
                        D = F.stateNode, T ? mm(D) : mS(
                          F.stateNode,
                          F.memoizedProps
                        );
                      } catch (nt) {
                        Jt(F, F.return, nt);
                      }
                    }
                  } else if (l.tag === 6) {
                    if (d === null) {
                      F = l;
                      try {
                        var Ne = F.stateNode;
                        T ? pS(Ne) : Og(Ne, F.memoizedProps);
                      } catch (nt) {
                        Jt(F, F.return, nt);
                      }
                    }
                  } else if ((l.tag !== 22 && l.tag !== 23 || l.memoizedState === null || l === o) && l.child !== null) {
                    l.child.return = l, l = l.child;
                    continue;
                  }
                  if (l === o) break e;
                  for (; l.sibling === null; ) {
                    if (l.return === null || l.return === o)
                      break e;
                    d === l && (d = null), l = l.return;
                  }
                  d === l && (d = null), l.sibling.return = l.return, l = l.sibling;
                }
            }
            y & 4 && (y = o.updateQueue, y !== null && (d = y.retryQueue, d !== null && (y.retryQueue = null, sh(o, d))));
            break;
          case 19:
            ga(l, o), ya(o), y & 4 && (y = o.updateQueue, y !== null && (o.updateQueue = null, sh(o, y)));
            break;
          case 21:
            break;
          default:
            ga(l, o), ya(o);
        }
      }
      function ya(o) {
        var l = o.flags;
        if (l & 2) {
          try {
            if (gi && (!oi || o.tag !== 27)) {
              e: {
                for (var d = o.return; d !== null; ) {
                  if ($f(d)) {
                    var y = d;
                    break e;
                  }
                  d = d.return;
                }
                throw Error(s(160));
              }
              switch (y.tag) {
                case 27:
                  if (oi) {
                    var T = y.stateNode, D = eh(o);
                    ar(
                      o,
                      D,
                      T
                    );
                    break;
                  }
                case 5:
                  var F = y.stateNode;
                  y.flags & 32 && (pm(F), y.flags &= -33);
                  var te = eh(o);
                  ar(o, te, F);
                  break;
                case 3:
                case 4:
                  var de = y.stateNode.containerInfo, Ne = eh(o);
                  th(
                    o,
                    Ne,
                    de
                  );
                  break;
                default:
                  throw Error(s(161));
              }
            }
          } catch (nt) {
            Jt(o, o.return, nt);
          }
          o.flags &= -3;
        }
        l & 4096 && (o.flags &= -4097);
      }
      function Np(o) {
        if (o.subtreeFlags & 1024)
          for (o = o.child; o !== null; ) {
            var l = o;
            Np(l), l.tag === 5 && l.flags & 1024 && Ag(l.stateNode), o = o.sibling;
          }
      }
      function sr(o, l) {
        if (l.subtreeFlags & 8772)
          for (l = l.child; l !== null; )
            mg(o, l.alternate, l), l = l.sibling;
      }
      function ds(o) {
        for (o = o.child; o !== null; ) {
          var l = o;
          switch (l.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              ir(4, l, l.return), ds(l);
              break;
            case 1:
              wa(l, l.return);
              var d = l.stateNode;
              typeof d.componentWillUnmount == "function" && Cp(
                l,
                l.return,
                d
              ), ds(l);
              break;
            case 26:
            case 27:
            case 5:
              wa(l, l.return), ds(l);
              break;
            case 22:
              wa(l, l.return), l.memoizedState === null && ds(l);
              break;
            default:
              ds(l);
          }
          o = o.sibling;
        }
      }
      function Os(o, l, d) {
        for (d = d && (l.subtreeFlags & 8772) !== 0, l = l.child; l !== null; ) {
          var y = l.alternate, T = o, D = l, F = D.flags;
          switch (D.tag) {
            case 0:
            case 11:
            case 15:
              Os(
                T,
                D,
                d
              ), go(4, D);
              break;
            case 1:
              if (Os(
                T,
                D,
                d
              ), y = D, T = y.stateNode, typeof T.componentDidMount == "function")
                try {
                  T.componentDidMount();
                } catch (Ne) {
                  Jt(y, y.return, Ne);
                }
              if (y = D, T = y.updateQueue, T !== null) {
                var te = y.stateNode;
                try {
                  var de = T.shared.hiddenCallbacks;
                  if (de !== null)
                    for (T.shared.hiddenCallbacks = null, T = 0; T < de.length; T++)
                      J(de[T], te);
                } catch (Ne) {
                  Jt(y, y.return, Ne);
                }
              }
              d && F & 64 && Rp(D), Lr(D, D.return);
              break;
            case 26:
            case 27:
            case 5:
              Os(
                T,
                D,
                d
              ), d && y === null && F & 4 && Dp(D), Lr(D, D.return);
              break;
            case 12:
              Os(
                T,
                D,
                d
              );
              break;
            case 13:
              Os(
                T,
                D,
                d
              ), d && F & 4 && ih(T, D);
              break;
            case 22:
              D.memoizedState === null && Os(
                T,
                D,
                d
              ), Lr(D, D.return);
              break;
            default:
              Os(
                T,
                D,
                d
              );
          }
          l = l.sibling;
        }
      }
      function oh(o, l) {
        var d = null;
        o !== null && o.memoizedState !== null && o.memoizedState.cachePool !== null && (d = o.memoizedState.cachePool.pool), o = null, l.memoizedState !== null && l.memoizedState.cachePool !== null && (o = l.memoizedState.cachePool.pool), o !== d && (o != null && o.refCount++, d != null && eu(d));
      }
      function hc(o, l) {
        o = null, l.alternate !== null && (o = l.alternate.memoizedState.cache), l = l.memoizedState.cache, l !== o && (l.refCount++, o != null && eu(o));
      }
      function rr(o, l, d, y) {
        if (l.subtreeFlags & 10256)
          for (l = l.child; l !== null; )
            lh(
              o,
              l,
              d,
              y
            ), l = l.sibling;
      }
      function lh(o, l, d, y) {
        var T = l.flags;
        switch (l.tag) {
          case 0:
          case 11:
          case 15:
            rr(
              o,
              l,
              d,
              y
            ), T & 2048 && go(9, l);
            break;
          case 3:
            rr(
              o,
              l,
              d,
              y
            ), T & 2048 && (o = null, l.alternate !== null && (o = l.alternate.memoizedState.cache), l = l.memoizedState.cache, l !== o && (l.refCount++, o != null && eu(o)));
            break;
          case 12:
            if (T & 2048) {
              rr(
                o,
                l,
                d,
                y
              ), o = l.stateNode;
              try {
                var D = l.memoizedProps, F = D.id, te = D.onPostCommit;
                typeof te == "function" && te(
                  F,
                  l.alternate === null ? "mount" : "update",
                  o.passiveEffectDuration,
                  -0
                );
              } catch (de) {
                Jt(l, l.return, de);
              }
            } else
              rr(
                o,
                l,
                d,
                y
              );
            break;
          case 23:
            break;
          case 22:
            D = l.stateNode, l.memoizedState !== null ? D._visibility & 4 ? rr(
              o,
              l,
              d,
              y
            ) : hi(
              o,
              l
            ) : D._visibility & 4 ? rr(
              o,
              l,
              d,
              y
            ) : (D._visibility |= 4, nu(
              o,
              l,
              d,
              y,
              (l.subtreeFlags & 10256) !== 0
            )), T & 2048 && oh(
              l.alternate,
              l
            );
            break;
          case 24:
            rr(
              o,
              l,
              d,
              y
            ), T & 2048 && hc(l.alternate, l);
            break;
          default:
            rr(
              o,
              l,
              d,
              y
            );
        }
      }
      function nu(o, l, d, y, T) {
        for (T = T && (l.subtreeFlags & 10256) !== 0, l = l.child; l !== null; ) {
          var D = o, F = l, te = d, de = y, Ne = F.flags;
          switch (F.tag) {
            case 0:
            case 11:
            case 15:
              nu(
                D,
                F,
                te,
                de,
                T
              ), go(8, F);
              break;
            case 23:
              break;
            case 22:
              var nt = F.stateNode;
              F.memoizedState !== null ? nt._visibility & 4 ? nu(
                D,
                F,
                te,
                de,
                T
              ) : hi(
                D,
                F
              ) : (nt._visibility |= 4, nu(
                D,
                F,
                te,
                de,
                T
              )), T && Ne & 2048 && oh(
                F.alternate,
                F
              );
              break;
            case 24:
              nu(
                D,
                F,
                te,
                de,
                T
              ), T && Ne & 2048 && hc(F.alternate, F);
              break;
            default:
              nu(
                D,
                F,
                te,
                de,
                T
              );
          }
          l = l.sibling;
        }
      }
      function hi(o, l) {
        if (l.subtreeFlags & 10256)
          for (l = l.child; l !== null; ) {
            var d = o, y = l, T = y.flags;
            switch (y.tag) {
              case 22:
                hi(d, y), T & 2048 && oh(
                  y.alternate,
                  y
                );
                break;
              case 24:
                hi(d, y), T & 2048 && hc(
                  y.alternate,
                  y
                );
                break;
              default:
                hi(d, y);
            }
            l = l.sibling;
          }
      }
      function yo(o) {
        if (o.subtreeFlags & gl)
          for (o = o.child; o !== null; )
            Op(o), o = o.sibling;
      }
      function Op(o) {
        switch (o.tag) {
          case 26:
            yo(o), o.flags & gl && (o.memoizedState !== null ? ul(
              Gs,
              o.memoizedState,
              o.memoizedProps
            ) : cm(o.type, o.memoizedProps));
            break;
          case 5:
            yo(o), o.flags & gl && cm(o.type, o.memoizedProps);
            break;
          case 3:
          case 4:
            if (Ja) {
              var l = Gs;
              Gs = zh(
                o.stateNode.containerInfo
              ), yo(o), Gs = l;
            } else yo(o);
            break;
          case 22:
            o.memoizedState === null && (l = o.alternate, l !== null && l.memoizedState !== null ? (l = gl, gl = 16777216, yo(o), gl = l) : yo(o));
            break;
          default:
            yo(o);
        }
      }
      function Lp(o) {
        var l = o.alternate;
        if (l !== null && (o = l.child, o !== null)) {
          l.child = null;
          do
            l = o.sibling, o.sibling = null, o = l;
          while (o !== null);
        }
      }
      function iu(o) {
        var l = o.deletions;
        if ((o.flags & 16) !== 0) {
          if (l !== null)
            for (var d = 0; d < l.length; d++) {
              var y = l[d];
              Ii = y, uh(
                y,
                o
              );
            }
          Lp(o);
        }
        if (o.subtreeFlags & 10256)
          for (o = o.child; o !== null; )
            zp(o), o = o.sibling;
      }
      function zp(o) {
        switch (o.tag) {
          case 0:
          case 11:
          case 15:
            iu(o), o.flags & 2048 && ir(9, o, o.return);
            break;
          case 3:
            iu(o);
            break;
          case 12:
            iu(o);
            break;
          case 22:
            var l = o.stateNode;
            o.memoizedState !== null && l._visibility & 4 && (o.return === null || o.return.tag !== 13) ? (l._visibility &= -5, _o(o)) : iu(o);
            break;
          default:
            iu(o);
        }
      }
      function _o(o) {
        var l = o.deletions;
        if ((o.flags & 16) !== 0) {
          if (l !== null)
            for (var d = 0; d < l.length; d++) {
              var y = l[d];
              Ii = y, uh(
                y,
                o
              );
            }
          Lp(o);
        }
        for (o = o.child; o !== null; ) {
          switch (l = o, l.tag) {
            case 0:
            case 11:
            case 15:
              ir(8, l, l.return), _o(l);
              break;
            case 22:
              d = l.stateNode, d._visibility & 4 && (d._visibility &= -5, _o(l));
              break;
            default:
              _o(l);
          }
          o = o.sibling;
        }
      }
      function uh(o, l) {
        for (; Ii !== null; ) {
          var d = Ii;
          switch (d.tag) {
            case 0:
            case 11:
            case 15:
              ir(8, d, l);
              break;
            case 23:
            case 22:
              if (d.memoizedState !== null && d.memoizedState.cachePool !== null) {
                var y = d.memoizedState.cachePool.pool;
                y != null && y.refCount++;
              }
              break;
            case 24:
              eu(d.memoizedState.cache);
          }
          if (y = d.child, y !== null) y.return = d, Ii = y;
          else
            e: for (d = o; Ii !== null; ) {
              y = Ii;
              var T = y.sibling, D = y.return;
              if (vg(y), y === d) {
                Ii = null;
                break e;
              }
              if (T !== null) {
                T.return = D, Ii = T;
                break e;
              }
              Ii = D;
            }
        }
      }
      function ch(o) {
        var l = om(o);
        if (l != null) {
          if (typeof l.memoizedProps["data-testname"] != "string")
            throw Error(s(364));
          return l;
        }
        if (o = fm(o), o === null) throw Error(s(362));
        return o.stateNode.current;
      }
      function fh(o, l) {
        var d = o.tag;
        switch (l.$$typeof) {
          case Qh:
            if (o.type === l.value) return !0;
            break;
          case kh:
            e: {
              for (l = l.value, o = [o, 0], d = 0; d < o.length; ) {
                var y = o[d++], T = y.tag, D = o[d++], F = l[D];
                if (T !== 5 && T !== 26 && T !== 27 || !cu(y)) {
                  for (; F != null && fh(y, F); )
                    D++, F = l[D];
                  if (D === l.length) {
                    l = !0;
                    break e;
                  } else
                    for (y = y.child; y !== null; )
                      o.push(y, D), y = y.sibling;
                }
              }
              l = !1;
            }
            return l;
          case Jh:
            if ((d === 5 || d === 26 || d === 27) && Cg(o.stateNode, l.value))
              return !0;
            break;
          case Lc:
            if ((d === 5 || d === 6 || d === 26 || d === 27) && (o = Rg(o), o !== null && 0 <= o.indexOf(l.value)))
              return !0;
            break;
          case Oc:
            if ((d === 5 || d === 26 || d === 27) && (o = o.memoizedProps["data-testname"], typeof o == "string" && o.toLowerCase() === l.value.toLowerCase()))
              return !0;
            break;
          default:
            throw Error(s(365));
        }
        return !1;
      }
      function hh(o) {
        switch (o.$$typeof) {
          case Qh:
            return "<" + (f(o.value) || "Unknown") + ">";
          case kh:
            return ":has(" + (hh(o) || "") + ")";
          case Jh:
            return '[role="' + o.value + '"]';
          case Lc:
            return '"' + o.value + '"';
          case Oc:
            return '[data-testname="' + o.value + '"]';
          default:
            throw Error(s(365));
        }
      }
      function dh(o, l) {
        var d = [];
        o = [o, 0];
        for (var y = 0; y < o.length; ) {
          var T = o[y++], D = T.tag, F = o[y++], te = l[F];
          if (D !== 5 && D !== 26 && D !== 27 || !cu(T)) {
            for (; te != null && fh(T, te); )
              F++, te = l[F];
            if (F === l.length) d.push(T);
            else
              for (T = T.child; T !== null; )
                o.push(T, F), T = T.sibling;
          }
        }
        return d;
      }
      function dc(o, l) {
        if (!Mo) throw Error(s(363));
        o = ch(o), o = dh(o, l), l = [], o = Array.from(o);
        for (var d = 0; d < o.length; ) {
          var y = o[d++], T = y.tag;
          if (T === 5 || T === 26 || T === 27)
            cu(y) || l.push(y.stateNode);
          else
            for (y = y.child; y !== null; )
              o.push(y), y = y.sibling;
        }
        return l;
      }
      function _a() {
        if ((Bn & 2) !== 0 && Sn !== 0)
          return Sn & -Sn;
        if (Gt.T !== null) {
          var o = pu;
          return o !== 0 ? o : He();
        }
        return lm();
      }
      function Bp() {
        ns === 0 && (ns = (Sn & 536870912) === 0 || Mn ? Y() : 536870912);
        var o = ca.current;
        return o !== null && (o.flags |= 32), ns;
      }
      function Wi(o, l, d) {
        (o === Yn && Pn === 2 || o.cancelPendingCommit !== null) && (So(o, 0), Ls(
          o,
          Sn,
          ns,
          !1
        )), W(o, d), ((Bn & 2) === 0 || o !== Yn) && (o === Yn && ((Bn & 2) === 0 && (_l |= d), ii === 4 && Ls(
          o,
          Sn,
          ns,
          !1
        )), Qe(o));
      }
      function ph(o, l, d) {
        if ((Bn & 6) !== 0) throw Error(s(327));
        var y = !d && (l & 60) === 0 && (l & o.expiredLanes) === 0 || P(o, l), T = y ? gc(o, l) : vc(o, l, !0), D = y;
        do {
          if (T === 0) {
            yl && !y && Ls(o, l, 0, !1);
            break;
          } else if (T === 6)
            Ls(
              o,
              l,
              0,
              !gr
            );
          else {
            if (d = o.current.alternate, D && !gg(d)) {
              T = vc(o, l, !1), D = !1;
              continue;
            }
            if (T === 2) {
              if (D = l, o.errorRecoveryDisabledLanes & D)
                var F = 0;
              else
                F = o.pendingLanes & -536870913, F = F !== 0 ? F : F & 536870912 ? 536870912 : 0;
              if (F !== 0) {
                l = F;
                e: {
                  var te = o;
                  T = xi;
                  var de = xa && te.current.memoizedState.isDehydrated;
                  if (de && (So(te, F).flags |= 256), F = vc(
                    te,
                    F,
                    !1
                  ), F !== 2) {
                    if (Bm && !de) {
                      te.errorRecoveryDisabledLanes |= D, _l |= D, T = 4;
                      break e;
                    }
                    D = Xs, Xs = T, D !== null && pc(D);
                  }
                  T = F;
                }
                if (D = !1, T !== 2) continue;
              }
            }
            if (T === 1) {
              So(o, 0), Ls(o, l, 0, !0);
              break;
            }
            e: {
              switch (y = o, T) {
                case 0:
                case 1:
                  throw Error(s(345));
                case 4:
                  if ((l & 4194176) === l) {
                    Ls(
                      y,
                      l,
                      ns,
                      !gr
                    );
                    break e;
                  }
                  break;
                case 2:
                  Xs = null;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  throw Error(s(329));
              }
              if (y.finishedWork = d, y.finishedLanes = l, (l & 62914560) === l && (D = Im + 300 - gs(), 10 < D)) {
                if (Ls(
                  y,
                  l,
                  ns,
                  !gr
                ), I(y, 0) !== 0) break e;
                y.timeoutHandle = xc(
                  Pp.bind(
                    null,
                    y,
                    d,
                    Xs,
                    Bc,
                    Hm,
                    l,
                    ns,
                    _l,
                    xu,
                    gr,
                    2,
                    -0,
                    0
                  ),
                  D
                );
                break e;
              }
              Pp(
                y,
                d,
                Xs,
                Bc,
                Hm,
                l,
                ns,
                _l,
                xu,
                gr,
                0,
                -0,
                0
              );
            }
          }
          break;
        } while (!0);
        Qe(o);
      }
      function pc(o) {
        Xs === null ? Xs = o : Xs.push.apply(
          Xs,
          o
        );
      }
      function Pp(o, l, d, y, T, D, F, te, de, Ne, nt, mt, ft) {
        var Ot = l.subtreeFlags;
        if ((Ot & 8192 || (Ot & 16785408) === 16785408) && (ka(), Op(l), l = ni(), l !== null)) {
          o.cancelPendingCommit = l(
            Eo.bind(
              null,
              o,
              d,
              y,
              T,
              F,
              te,
              de,
              1,
              mt,
              ft
            )
          ), Ls(o, D, F, !Ne);
          return;
        }
        Eo(
          o,
          d,
          y,
          T,
          F,
          te,
          de,
          nt,
          mt,
          ft
        );
      }
      function gg(o) {
        for (var l = o; ; ) {
          var d = l.tag;
          if ((d === 0 || d === 11 || d === 15) && l.flags & 16384 && (d = l.updateQueue, d !== null && (d = d.stores, d !== null)))
            for (var y = 0; y < d.length; y++) {
              var T = d[y], D = T.getSnapshot;
              T = T.value;
              try {
                if (!Ma(D(), T)) return !1;
              } catch {
                return !1;
              }
            }
          if (d = l.child, l.subtreeFlags & 16384 && d !== null)
            d.return = l, l = d;
          else {
            if (l === o) break;
            for (; l.sibling === null; ) {
              if (l.return === null || l.return === o) return !0;
              l = l.return;
            }
            l.sibling.return = l.return, l = l.sibling;
          }
        }
        return !0;
      }
      function Ls(o, l, d, y) {
        l &= ~Pm, l &= ~_l, o.suspendedLanes |= l, o.pingedLanes &= ~l, y && (o.warmLanes |= l), y = o.expirationTimes;
        for (var T = l; 0 < T; ) {
          var D = 31 - Ea(T), F = 1 << D;
          y[D] = -1, T &= ~F;
        }
        d !== 0 && Q(o, d, l);
      }
      function Hp() {
        return (Bn & 6) === 0 ? (ut(0), !1) : !0;
      }
      function zs() {
        if (Vt !== null) {
          if (Pn === 0)
            var o = Vt.return;
          else
            o = Vt, Fs = No = null, V(o), vu = null, wc = 0, o = Vt;
          for (; o !== null; )
            Jf(o.alternate, o), o = o.return;
          Vt = null;
        }
      }
      function So(o, l) {
        o.finishedWork = null, o.finishedLanes = 0;
        var d = o.timeoutHandle;
        d !== Ch && (o.timeoutHandle = Ch, rl(d)), d = o.cancelPendingCommit, d !== null && (o.cancelPendingCommit = null, d()), zs(), Yn = o, Vt = d = ps(o.current, null), Sn = l, Pn = 0, Oa = null, gr = !1, yl = P(o, l), Bm = !1, xu = ns = Pm = _l = Oo = ii = 0, Xs = xi = null, Hm = !1, (l & 8) !== 0 && (l |= l & 32);
        var y = o.entangledLanes;
        if (y !== 0)
          for (o = o.entanglements, y &= l; 0 < y; ) {
            var T = 31 - Ea(y), D = 1 << T;
            l |= o[T], y &= ~D;
          }
        return yr = l, Be(), d;
      }
      function yg(o, l) {
        ln = null, Gt.H = mr, l === dr ? (l = rt(), Pn = 3) : l === Zr ? (l = rt(), Pn = 4) : Pn = l === Om ? 8 : l !== null && typeof l == "object" && typeof l.then == "function" ? 6 : 1, Oa = l, Vt === null && (ii = 1, je(
          o,
          se(l, o.current)
        ));
      }
      function mh() {
        var o = ca.current;
        return o === null ? !0 : (Sn & 4194176) === Sn ? pr === null : (Sn & 62914560) === Sn || (Sn & 536870912) !== 0 ? o === pr : !1;
      }
      function mc() {
        var o = Gt.H;
        return Gt.H = mr, o === null ? mr : o;
      }
      function zr() {
        var o = Gt.A;
        return Gt.A = AS, o;
      }
      function Bs() {
        ii = 4, gr || (Sn & 4194176) !== Sn && ca.current !== null || (yl = !0), (Oo & 134217727) === 0 && (_l & 134217727) === 0 || Yn === null || Ls(
          Yn,
          Sn,
          ns,
          !1
        );
      }
      function vc(o, l, d) {
        var y = Bn;
        Bn |= 2;
        var T = mc(), D = zr();
        (Yn !== o || Sn !== l) && (Bc = null, So(o, l)), l = !1;
        var F = ii;
        e: do
          try {
            if (Pn !== 0 && Vt !== null) {
              var te = Vt, de = Oa;
              switch (Pn) {
                case 8:
                  zs(), F = 6;
                  break e;
                case 3:
                case 2:
                case 6:
                  ca.current === null && (l = !0);
                  var Ne = Pn;
                  if (Pn = 0, Oa = null, Br(o, te, de, Ne), d && yl) {
                    F = 0;
                    break e;
                  }
                  break;
                default:
                  Ne = Pn, Pn = 0, Oa = null, Br(o, te, de, Ne);
              }
            }
            Ip(), F = ii;
            break;
          } catch (nt) {
            yg(o, nt);
          }
        while (!0);
        return l && o.shellSuspendCounter++, Fs = No = null, Bn = y, Gt.H = T, Gt.A = D, Vt === null && (Yn = null, Sn = 0, Be()), F;
      }
      function Ip() {
        for (; Vt !== null; ) xo(Vt);
      }
      function gc(o, l) {
        var d = Bn;
        Bn |= 2;
        var y = mc(), T = zr();
        Yn !== o || Sn !== l ? (Bc = null, zc = gs() + 500, So(o, l)) : yl = P(
          o,
          l
        );
        e: do
          try {
            if (Pn !== 0 && Vt !== null) {
              l = Vt;
              var D = Oa;
              t: switch (Pn) {
                case 1:
                  Pn = 0, Oa = null, Br(o, l, D, 1);
                  break;
                case 2:
                  if (lt(D)) {
                    Pn = 0, Oa = null, Zn(l);
                    break;
                  }
                  l = function() {
                    Pn === 2 && Yn === o && (Pn = 7), Qe(o);
                  }, D.then(l, l);
                  break e;
                case 3:
                  Pn = 7;
                  break e;
                case 4:
                  Pn = 5;
                  break e;
                case 7:
                  lt(D) ? (Pn = 0, Oa = null, Zn(l)) : (Pn = 0, Oa = null, Br(o, l, D, 7));
                  break;
                case 5:
                  var F = null;
                  switch (Vt.tag) {
                    case 26:
                      F = Vt.memoizedState;
                    case 5:
                    case 27:
                      var te = Vt, de = te.type, Ne = te.pendingProps;
                      if (F ? Wg(F) : um(de, Ne)) {
                        Pn = 0, Oa = null;
                        var nt = te.sibling;
                        if (nt !== null) Vt = nt;
                        else {
                          var mt = te.return;
                          mt !== null ? (Vt = mt, yc(mt)) : Vt = null;
                        }
                        break t;
                      }
                  }
                  Pn = 0, Oa = null, Br(o, l, D, 5);
                  break;
                case 6:
                  Pn = 0, Oa = null, Br(o, l, D, 6);
                  break;
                case 8:
                  zs(), ii = 6;
                  break e;
                default:
                  throw Error(s(462));
              }
            }
            vh();
            break;
          } catch (ft) {
            yg(o, ft);
          }
        while (!0);
        return Fs = No = null, Gt.H = y, Gt.A = T, Bn = d, Vt !== null ? 0 : (Yn = null, Sn = 0, Be(), ii);
      }
      function vh() {
        for (; Vt !== null && !Me(); )
          xo(Vt);
      }
      function xo(o) {
        var l = Xf(
          o.alternate,
          o,
          yr
        );
        o.memoizedProps = o.pendingProps, l === null ? yc(o) : Vt = l;
      }
      function Zn(o) {
        var l = o, d = l.alternate;
        switch (l.tag) {
          case 15:
          case 0:
            l = Jl(
              d,
              l,
              l.pendingProps,
              l.type,
              void 0,
              Sn
            );
            break;
          case 11:
            l = Jl(
              d,
              l,
              l.pendingProps,
              l.type.render,
              l.ref,
              Sn
            );
            break;
          case 5:
            V(l);
          default:
            Jf(d, l), l = Vt = Kn(l, yr), l = Xf(d, l, yr);
        }
        o.memoizedProps = o.pendingProps, l === null ? yc(o) : Vt = l;
      }
      function Br(o, l, d, y) {
        Fs = No = null, V(l), vu = null, wc = 0;
        var T = l.return;
        try {
          if (Mp(
            o,
            T,
            l,
            d,
            Sn
          )) {
            ii = 1, je(
              o,
              se(d, o.current)
            ), Vt = null;
            return;
          }
        } catch (D) {
          if (T !== null) throw Vt = T, D;
          ii = 1, je(
            o,
            se(d, o.current)
          ), Vt = null;
          return;
        }
        l.flags & 32768 ? (Mn || y === 1 ? o = !0 : yl || (Sn & 536870912) !== 0 ? o = !1 : (gr = o = !0, (y === 2 || y === 3 || y === 6) && (y = ca.current, y !== null && y.tag === 13 && (y.flags |= 16384))), gh(l, o)) : yc(l);
      }
      function yc(o) {
        var l = o;
        do {
          if ((l.flags & 32768) !== 0) {
            gh(
              l,
              gr
            );
            return;
          }
          o = l.return;
          var d = Ap(
            l.alternate,
            l,
            yr
          );
          if (d !== null) {
            Vt = d;
            return;
          }
          if (l = l.sibling, l !== null) {
            Vt = l;
            return;
          }
          Vt = l = o;
        } while (l !== null);
        ii === 0 && (ii = 5);
      }
      function gh(o, l) {
        do {
          var d = kf(o.alternate, o);
          if (d !== null) {
            d.flags &= 32767, Vt = d;
            return;
          }
          if (d = o.return, d !== null && (d.flags |= 32768, d.subtreeFlags = 0, d.deletions = null), !l && (o = o.sibling, o !== null)) {
            Vt = o;
            return;
          }
          Vt = o = d;
        } while (o !== null);
        ii = 6, Vt = null;
      }
      function Eo(o, l, d, y, T, D, F, te, de, Ne) {
        var nt = Gt.T, mt = Gr();
        try {
          la(2), Gt.T = null, _c(
            o,
            l,
            d,
            y,
            mt,
            T,
            D,
            F,
            te,
            de,
            Ne
          );
        } finally {
          Gt.T = nt, la(mt);
        }
      }
      function _c(o, l, d, y, T, D, F, te) {
        do
          or();
        while (Ta !== null);
        if ((Bn & 6) !== 0) throw Error(s(327));
        var de = o.finishedWork;
        if (y = o.finishedLanes, de === null) return null;
        if (o.finishedWork = null, o.finishedLanes = 0, de === o.current) throw Error(s(177));
        o.callbackNode = null, o.callbackPriority = 0, o.cancelPendingCommit = null;
        var Ne = de.lanes | de.childLanes;
        if (Ne |= hr, me(
          o,
          y,
          Ne,
          D,
          F,
          te
        ), o === Yn && (Vt = Yn = null, Sn = 0), (de.subtreeFlags & 10256) === 0 && (de.flags & 10256) === 0 || Eu || (Eu = !0, Ji = Ne, Vm = d, qp(Fh, function() {
          return or(), null;
        })), d = (de.flags & 15990) !== 0, (de.subtreeFlags & 15990) !== 0 || d ? (d = Gt.T, Gt.T = null, D = Gr(), la(2), F = Bn, Bn |= 4, Up(o, de), rh(de, o), im(o.containerInfo), o.current = de, mg(o, de.alternate, de), Ac(), Bn = F, la(D), Gt.T = d) : o.current = de, Eu ? (Eu = !1, Ta = o, xs = y) : yh(o, Ne), Ne = o.pendingLanes, Ne === 0 && (_r = null), B(de.stateNode), Qe(o), l !== null)
          for (T = o.onRecoverableError, de = 0; de < l.length; de++)
            Ne = l[de], T(Ne.value, {
              componentStack: Ne.stack
            });
        return (xs & 3) !== 0 && or(), Ne = o.pendingLanes, (y & 4194218) !== 0 && (Ne & 42) !== 0 ? o === Mu ? Pc++ : (Pc = 0, Mu = o) : Pc = 0, ut(0), null;
      }
      function yh(o, l) {
        (o.pooledCacheLanes &= l) === 0 && (l = o.pooledCache, l != null && (o.pooledCache = null, eu(l)));
      }
      function or() {
        if (Ta !== null) {
          var o = Ta, l = Ji;
          Ji = 0;
          var d = Se(xs), y = 32 > d ? 32 : d;
          d = Gt.T;
          var T = Gr();
          try {
            if (la(y), Gt.T = null, Ta === null)
              var D = !1;
            else {
              y = Vm, Vm = null;
              var F = Ta, te = xs;
              if (Ta = null, xs = 0, (Bn & 6) !== 0)
                throw Error(s(331));
              var de = Bn;
              if (Bn |= 4, zp(F.current), lh(
                F,
                F.current,
                te,
                y
              ), Bn = de, ut(0, !1), Na && typeof Na.onPostCommitFiberRoot == "function")
                try {
                  Na.onPostCommitFiberRoot(fl, F);
                } catch {
                }
              D = !0;
            }
            return D;
          } finally {
            la(T), Gt.T = d, yh(o, l);
          }
        }
        return !1;
      }
      function Vp(o, l, d) {
        l = se(d, l), l = kl(o.stateNode, l, 2), o = it(o, l, 2), o !== null && (W(o, 2), Qe(o));
      }
      function Jt(o, l, d) {
        if (o.tag === 3)
          Vp(o, o, d);
        else
          for (; l !== null; ) {
            if (l.tag === 3) {
              Vp(
                l,
                o,
                d
              );
              break;
            } else if (l.tag === 1) {
              var y = l.stateNode;
              if (typeof l.type.getDerivedStateFromError == "function" || typeof y.componentDidCatch == "function" && (_r === null || !_r.has(y))) {
                o = se(d, o), d = ri(2), y = it(l, d, 2), y !== null && (Bf(
                  d,
                  y,
                  l,
                  o
                ), W(y, 2), Qe(y));
                break;
              }
            }
            l = l.return;
          }
      }
      function _h(o, l, d) {
        var y = o.pingCache;
        if (y === null) {
          y = o.pingCache = new ny();
          var T = /* @__PURE__ */ new Set();
          y.set(l, T);
        } else
          T = y.get(l), T === void 0 && (T = /* @__PURE__ */ new Set(), y.set(l, T));
        T.has(d) || (Bm = !0, T.add(d), o = Fp.bind(null, o, l, d), l.then(o, o));
      }
      function Fp(o, l, d) {
        var y = o.pingCache;
        y !== null && y.delete(l), o.pingedLanes |= o.suspendedLanes & d, o.warmLanes &= ~d, Yn === o && (Sn & d) === d && (ii === 4 || ii === 3 && (Sn & 62914560) === Sn && 300 > gs() - Im ? (Bn & 2) === 0 && So(o, 0) : Pm |= d, xu === Sn && (xu = 0)), Qe(o);
      }
      function Gp(o, l) {
        l === 0 && (l = z()), o = De(o, l), o !== null && (W(o, l), Qe(o));
      }
      function _g(o) {
        var l = o.memoizedState, d = 0;
        l !== null && (d = l.retryLane), Gp(o, d);
      }
      function Xp(o, l) {
        var d = 0;
        switch (o.tag) {
          case 13:
            var y = o.stateNode, T = o.memoizedState;
            T !== null && (d = T.retryLane);
            break;
          case 19:
            y = o.stateNode;
            break;
          case 22:
            y = o.stateNode._retryCache;
            break;
          default:
            throw Error(s(314));
        }
        y !== null && y.delete(l), Gp(o, d);
      }
      function qp(o, l) {
        return Tc(o, l);
      }
      function Sg(o, l, d, y) {
        this.tag = o, this.key = d, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = l, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = y, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
      }
      function au(o) {
        return o = o.prototype, !(!o || !o.isReactComponent);
      }
      function ps(o, l) {
        var d = o.alternate;
        return d === null ? (d = t(
          o.tag,
          l,
          o.key,
          o.mode
        ), d.elementType = o.elementType, d.type = o.type, d.stateNode = o.stateNode, d.alternate = o, o.alternate = d) : (d.pendingProps = l, d.type = o.type, d.flags = 0, d.subtreeFlags = 0, d.deletions = null), d.flags = o.flags & 31457280, d.childLanes = o.childLanes, d.lanes = o.lanes, d.child = o.child, d.memoizedProps = o.memoizedProps, d.memoizedState = o.memoizedState, d.updateQueue = o.updateQueue, l = o.dependencies, d.dependencies = l === null ? null : {
          lanes: l.lanes,
          firstContext: l.firstContext
        }, d.sibling = o.sibling, d.index = o.index, d.ref = o.ref, d.refCleanup = o.refCleanup, d;
      }
      function Kn(o, l) {
        o.flags &= 31457282;
        var d = o.alternate;
        return d === null ? (o.childLanes = 0, o.lanes = l, o.child = null, o.subtreeFlags = 0, o.memoizedProps = null, o.memoizedState = null, o.updateQueue = null, o.dependencies = null, o.stateNode = null) : (o.childLanes = d.childLanes, o.lanes = d.lanes, o.child = d.child, o.subtreeFlags = 0, o.deletions = null, o.memoizedProps = d.memoizedProps, o.memoizedState = d.memoizedState, o.updateQueue = d.updateQueue, o.type = d.type, l = d.dependencies, o.dependencies = l === null ? null : {
          lanes: l.lanes,
          firstContext: l.firstContext
        }), o;
      }
      function Sh(o, l, d, y, T, D) {
        var F = 0;
        if (y = o, typeof o == "function") au(o) && (F = 1);
        else if (typeof o == "string")
          F = Ja && oi ? Em(o, d, Qi.current) ? 26 : Hh(o) ? 27 : 5 : Ja ? Em(
            o,
            d,
            Qi.current
          ) ? 26 : 5 : oi && Hh(o) ? 27 : 5;
        else
          e: switch (o) {
            case sl:
              return il(
                d.children,
                T,
                D,
                l
              );
            case Qp:
              F = 8, T |= 24;
              break;
            case Mh:
              return o = t(12, d, l, T | 2), o.elementType = Mh, o.lanes = D, o;
            case Th:
              return o = t(13, d, l, T), o.elementType = Th, o.lanes = D, o;
            case $p:
              return o = t(19, d, l, T), o.elementType = $p, o.lanes = D, o;
            case vs:
              return Yp(d, T, D, l);
            default:
              if (typeof o == "object" && o !== null)
                switch (o.$$typeof) {
                  case kp:
                  case Ps:
                    F = 10;
                    break e;
                  case bh:
                    F = 9;
                    break e;
                  case Jp:
                    F = 11;
                    break e;
                  case Ah:
                    F = 14;
                    break e;
                  case Hr:
                    F = 16, y = null;
                    break e;
                }
              F = 29, d = Error(
                s(
                  130,
                  o === null ? "null" : typeof o,
                  ""
                )
              ), y = null;
          }
        return l = t(F, d, l, T), l.elementType = o, l.type = y, l.lanes = D, l;
      }
      function il(o, l, d, y) {
        return o = t(7, o, y, l), o.lanes = d, o;
      }
      function Yp(o, l, d, y) {
        o = t(22, o, y, l), o.elementType = vs, o.lanes = d;
        var T = {
          _visibility: 1,
          _pendingVisibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            var D = T._current;
            if (D === null) throw Error(s(456));
            if ((T._pendingVisibility & 2) === 0) {
              var F = De(D, 2);
              F !== null && (T._pendingVisibility |= 2, Wi(F, D, 2));
            }
          },
          attach: function() {
            var D = T._current;
            if (D === null) throw Error(s(456));
            if ((T._pendingVisibility & 2) !== 0) {
              var F = De(D, 2);
              F !== null && (T._pendingVisibility &= -3, Wi(F, D, 2));
            }
          }
        };
        return o.stateNode = T, o;
      }
      function ms(o, l, d) {
        return o = t(6, o, null, l), o.lanes = d, o;
      }
      function xh(o, l, d) {
        return l = t(
          4,
          o.children !== null ? o.children : [],
          o.key,
          l
        ), l.lanes = d, l.stateNode = {
          containerInfo: o.containerInfo,
          pendingChildren: null,
          implementation: o.implementation
        }, l;
      }
      function Wp(o, l, d, y, T, D, F, te) {
        this.tag = 1, this.containerInfo = o, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Ch, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = L(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = L(0), this.hiddenUpdates = L(null), this.identifierPrefix = y, this.onUncaughtError = T, this.onCaughtError = D, this.onRecoverableError = F, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = te, this.incompleteTransitions = /* @__PURE__ */ new Map();
      }
      function su(o, l, d, y, T, D, F, te, de, Ne, nt, mt) {
        return o = new Wp(
          o,
          l,
          d,
          F,
          te,
          de,
          Ne,
          mt
        ), l = 1, D === !0 && (l |= 24), D = t(3, null, null, l), o.current = D, D.stateNode = o, l = Zf(), l.refCount++, o.pooledCache = l, l.refCount++, D.memoizedState = {
          element: y,
          isDehydrated: d,
          cache: l
        }, ct(D), o;
      }
      function al(o) {
        return o ? (o = Ro, o) : Ro;
      }
      function jp(o) {
        var l = o._reactInternals;
        if (l === void 0)
          throw typeof o.render == "function" ? Error(s(188)) : (o = Object.keys(o).join(","), Error(s(268, o)));
        return o = x(l), o = o !== null ? A(o) : null, o === null ? null : ou(o.stateNode);
      }
      function Eh(o, l, d, y, T, D) {
        T = al(T), y.context === null ? y.context = T : y.pendingContext = T, y = Ge(l), y.payload = { element: d }, D = D === void 0 ? null : D, D !== null && (y.callback = D), d = it(o, y, l), d !== null && (Wi(d, o, l), Tt(d, o, l));
      }
      function Zp(o, l) {
        if (o = o.memoizedState, o !== null && o.dehydrated !== null) {
          var d = o.retryLane;
          o.retryLane = d !== 0 && d < l ? d : l;
        }
      }
      function Kp(o, l) {
        Zp(o, l), (o = o.alternate) && Zp(o, l);
      }
      var pn = {}, xg = ql, Ka = r2(), Pr = Object.assign, Qa = Symbol.for("react.element"), Sc = Symbol.for("react.transitional.element"), ru = Symbol.for("react.portal"), sl = Symbol.for("react.fragment"), Qp = Symbol.for("react.strict_mode"), Mh = Symbol.for("react.profiler"), kp = Symbol.for("react.provider"), bh = Symbol.for("react.consumer"), Ps = Symbol.for("react.context"), Jp = Symbol.for("react.forward_ref"), Th = Symbol.for("react.suspense"), $p = Symbol.for("react.suspense_list"), Ah = Symbol.for("react.memo"), Hr = Symbol.for("react.lazy"), vs = Symbol.for("react.offscreen"), em = Symbol.for("react.memo_cache_sentinel"), tm = Symbol.iterator, oS = Symbol.for("react.client.reference"), Gt = xg.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, nm, Sa, Rh = !1, oa = Array.isArray, Eg = e.rendererVersion, lS = e.rendererPackageName, Hs = e.extraDevToolsConfig, ou = e.getPublicInstance, lu = e.getRootHostContext, Mg = e.getChildHostContext, Ir = e.prepareForCommit, im = e.resetAfterCommit, am = e.createInstance, lr = e.appendInitialChild, sm = e.finalizeInitialChildren, Vr = e.shouldSetTextContent, rm = e.createTextInstance, xc = e.scheduleTimeout, rl = e.cancelTimeout, Ch = e.noTimeout, ur = e.isPrimaryRenderer;
      e.warnsIfNotActing;
      var gi = e.supportsMutation, Fr = e.supportsPersistence, xa = e.supportsHydration, om = e.getInstanceFromNode;
      e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
      var bg = e.preparePortalMount;
      e.prepareScopeUpdate, e.getInstanceFromScope;
      var la = e.setCurrentUpdatePriority, Gr = e.getCurrentUpdatePriority, lm = e.resolveUpdatePriority;
      e.resolveEventType, e.resolveEventTimeStamp;
      var Tg = e.shouldAttemptEagerTransition, Dh = e.detachDeletedInstance;
      e.requestPostPaintCallback;
      var uS = e.maySuspendCommit, um = e.preloadInstance, ka = e.startSuspendingCommit, cm = e.suspendInstance, ni = e.waitForCommitToBeReady, ol = e.NotPendingTransition, Xr = e.HostTransitionContext, Ag = e.resetFormInstance;
      e.bindToConsole;
      var cS = e.supportsMicrotasks, qr = e.scheduleMicrotask, Mo = e.supportsTestSelectors, fm = e.findFiberRoot, uu = e.getBoundingRect, Rg = e.getTextContent, cu = e.isHiddenSubtree, Cg = e.matchAccessibilityRole, Dg = e.setFocusIfFocusable, hm = e.setupIntersectionObserver, dm = e.appendChild, wg = e.appendChildToContainer, fS = e.commitTextUpdate, hS = e.commitMount, Ug = e.commitUpdate, Ng = e.insertBefore, dS = e.insertInContainerBefore, fu = e.removeChild, wh = e.removeChildFromContainer, pm = e.resetTextContent, mm = e.hideInstance, pS = e.hideTextInstance, mS = e.unhideInstance, Og = e.unhideTextInstance, bo = e.clearContainer, Lg = e.cloneInstance, Dn = e.createContainerChildSet, Uh = e.appendChildToContainerChildSet, vS = e.finalizeContainerChildren, vm = e.replaceContainerChildren, zg = e.cloneHiddenInstance, Bg = e.cloneHiddenTextInstance, Ec = e.isSuspenseInstancePending, Nh = e.isSuspenseInstanceFallback, Pg = e.getSuspenseInstanceFallbackErrorDetails, Hg = e.registerSuspenseInstanceRetry, Mc = e.canHydrateFormStateMarker, gS = e.isFormStateMarkerMatching, Ig = e.getNextHydratableSibling, To = e.getFirstHydratableChild, gm = e.getFirstHydratableChildWithinContainer, Vg = e.getFirstHydratableChildWithinSuspenseInstance, Fg = e.canHydrateInstance, ym = e.canHydrateTextInstance, yS = e.canHydrateSuspenseInstance, _m = e.hydrateInstance, Ao = e.hydrateTextInstance, Gg = e.hydrateSuspenseInstance, Sm = e.getNextHydratableInstanceAfterSuspenseInstance, Oh = e.commitHydratedContainer, ll = e.commitHydratedSuspenseInstance, Xg = e.clearSuspenseBoundary, xm = e.clearSuspenseBoundaryFromContainer, Lh = e.shouldDeleteUnhydratedTailInstances;
      e.diffHydratedPropsForDevWarnings, e.diffHydratedTextForDevWarnings, e.describeHydratableInstanceForDevWarnings;
      var _S = e.validateHydratableInstance, qg = e.validateHydratableTextInstance, Ja = e.supportsResources, Em = e.isHostHoistableType, zh = e.getHoistableRoot, Mm = e.getResource, bm = e.acquireResource, Bh = e.releaseResource, SS = e.hydrateHoistable, Yg = e.mountHoistable, fn = e.unmountHoistable, xS = e.createHoistableInstance, Ua = e.prepareToCommitHoistables, ji = e.mayResourceSuspendCommit, Wg = e.preloadResource, ul = e.suspendResource, oi = e.supportsSingletons, cl = e.resolveSingletonInstance, Ph = e.clearSingleton, Tm = e.acquireSingletonInstance, ES = e.releaseSingletonInstance, Hh = e.isHostSingletonType, Is = [], cr = -1, Ro = {}, Ea = Math.clz32 ? Math.clz32 : N, Ih = Math.log, $a = Math.LN2, bc = 128, Vh = 4194304, Tc = Ka.unstable_scheduleCallback, Am = Ka.unstable_cancelCallback, Me = Ka.unstable_shouldYield, Ac = Ka.unstable_requestPaint, gs = Ka.unstable_now, Rm = Ka.unstable_ImmediatePriority, jg = Ka.unstable_UserBlockingPriority, Fh = Ka.unstable_NormalPriority, Zg = Ka.unstable_IdlePriority, Kg = Ka.log, Qg = Ka.unstable_setDisableYieldValue, fl = null, Na = null, Ma = typeof Object.is == "function" ? Object.is : q, Gh = /* @__PURE__ */ new WeakMap(), Zi = [], Ki = 0, Pi = null, Xh = 0, ys = [], es = 0, _s = null, Yr = 1, Wr = "", Qi = R(null), Rc = R(null), Co = R(null), hu = R(null), ua = null, Ri = null, Mn = !1, Vs = null, fr = !1, Cc = Error(s(519)), yi = [], di = 0, hr = 0, ba = null, hl = null, Cm = !1, ki = !1, jr = !1, du = 0, Dc = null, Dm = 0, pu = 0, dl = null, Do = !1, qh = !1, MS = Object.prototype.hasOwnProperty, dr = Error(s(460)), Zr = Error(s(474)), Yh = { then: function() {
      } }, mu = null, vu = null, wc = 0, Ss = Jn(!0), kg = Jn(!1), gu = R(null), Wh = R(0), ca = R(null), pr = null, Ci = R(0), wo = 0, ln = null, zn = null, _i = null, jh = !1, yu = !1, pl = !1, Zh = 0, Uc = 0, _u = null, Jg = 0, wm = function() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }, mr = {
        readContext: Yi,
        use: ce,
        useCallback: dt,
        useContext: dt,
        useEffect: dt,
        useImperativeHandle: dt,
        useLayoutEffect: dt,
        useInsertionEffect: dt,
        useMemo: dt,
        useReducer: dt,
        useRef: dt,
        useState: dt,
        useDebugValue: dt,
        useDeferredValue: dt,
        useTransition: dt,
        useSyncExternalStore: dt,
        useId: dt
      };
      mr.useCacheRefresh = dt, mr.useMemoCache = dt, mr.useHostTransitionStatus = dt, mr.useFormState = dt, mr.useActionState = dt, mr.useOptimistic = dt;
      var ml = {
        readContext: Yi,
        use: ce,
        useCallback: function(o, l) {
          return ae().memoizedState = [
            o,
            l === void 0 ? null : l
          ], o;
        },
        useContext: Yi,
        useEffect: Wl,
        useImperativeHandle: function(o, l, d) {
          d = d != null ? d.concat([o]) : null, Qo(
            4194308,
            4,
            $u.bind(null, l, o),
            d
          );
        },
        useLayoutEffect: function(o, l) {
          return Qo(4194308, 4, o, l);
        },
        useInsertionEffect: function(o, l) {
          Qo(4, 2, o, l);
        },
        useMemo: function(o, l) {
          var d = ae();
          l = l === void 0 ? null : l;
          var y = o();
          if (pl) {
            K(!0);
            try {
              o();
            } finally {
              K(!1);
            }
          }
          return d.memoizedState = [y, l], y;
        },
        useReducer: function(o, l, d) {
          var y = ae();
          if (d !== void 0) {
            var T = d(l);
            if (pl) {
              K(!0);
              try {
                d(l);
              } finally {
                K(!1);
              }
            }
          } else T = l;
          return y.memoizedState = y.baseState = T, o = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: o,
            lastRenderedState: T
          }, y.queue = o, o = o.dispatch = zf.bind(
            null,
            ln,
            o
          ), [y.memoizedState, o];
        },
        useRef: function(o) {
          var l = ae();
          return o = { current: o }, l.memoizedState = o;
        },
        useState: function(o) {
          o = vn(o);
          var l = o.queue, d = xp.bind(
            null,
            ln,
            l
          );
          return l.dispatch = d, [o.memoizedState, d];
        },
        useDebugValue: Nf,
        useDeferredValue: function(o, l) {
          var d = ae();
          return Of(d, o, l);
        },
        useTransition: function() {
          var o = vn(!1);
          return o = Li.bind(
            null,
            ln,
            o.queue,
            !0,
            !1
          ), ae().memoizedState = o, [!1, o];
        },
        useSyncExternalStore: function(o, l, d) {
          var y = ln, T = ae();
          if (Mn) {
            if (d === void 0)
              throw Error(s(407));
            d = d();
          } else {
            if (d = l(), Yn === null)
              throw Error(s(349));
            (Sn & 60) !== 0 || Nt(y, l, d);
          }
          T.memoizedState = d;
          var D = { value: d, getSnapshot: l };
          return T.queue = D, Wl(nn.bind(null, y, D, o), [
            o
          ]), y.flags |= 2048, fi(
            9,
            It.bind(
              null,
              y,
              D,
              d,
              l
            ),
            { destroy: void 0 },
            null
          ), d;
        },
        useId: function() {
          var o = ae(), l = Yn.identifierPrefix;
          if (Mn) {
            var d = Wr, y = Yr;
            d = (y & ~(1 << 32 - Ea(y) - 1)).toString(32) + d, l = ":" + l + "R" + d, d = Zh++, 0 < d && (l += "H" + d.toString(32)), l += ":";
          } else
            d = Jg++, l = ":" + l + "r" + d.toString(32) + ":";
          return o.memoizedState = l;
        },
        useCacheRefresh: function() {
          return ae().memoizedState = Lf.bind(
            null,
            ln
          );
        }
      };
      ml.useMemoCache = Ze, ml.useHostTransitionStatus = jl, ml.useFormState = sa, ml.useActionState = sa, ml.useOptimistic = function(o) {
        var l = ae();
        l.memoizedState = l.baseState = o;
        var d = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        return l.queue = d, l = ic.bind(
          null,
          ln,
          !0,
          d
        ), d.dispatch = l, [o, l];
      };
      var Uo = {
        readContext: Yi,
        use: ce,
        useCallback: ec,
        useContext: Yi,
        useEffect: Uf,
        useImperativeHandle: yp,
        useInsertionEffect: hg,
        useLayoutEffect: gp,
        useMemo: _p,
        useReducer: St,
        useRef: Yl,
        useState: function() {
          return St(tt);
        },
        useDebugValue: Nf,
        useDeferredValue: function(o, l) {
          var d = ve();
          return Sp(
            d,
            zn.memoizedState,
            o,
            l
          );
        },
        useTransition: function() {
          var o = St(tt)[0], l = ve().memoizedState;
          return [
            typeof o == "boolean" ? o : pe(o),
            l
          ];
        },
        useSyncExternalStore: Pt,
        useId: Zl
      };
      Uo.useCacheRefresh = nc, Uo.useMemoCache = Ze, Uo.useHostTransitionStatus = jl, Uo.useFormState = va, Uo.useActionState = va, Uo.useOptimistic = function(o, l) {
        var d = ve();
        return zt(d, zn, o, l);
      };
      var vl = {
        readContext: Yi,
        use: ce,
        useCallback: ec,
        useContext: Yi,
        useEffect: Uf,
        useImperativeHandle: yp,
        useInsertionEffect: hg,
        useLayoutEffect: gp,
        useMemo: _p,
        useReducer: Lt,
        useRef: Yl,
        useState: function() {
          return Lt(tt);
        },
        useDebugValue: Nf,
        useDeferredValue: function(o, l) {
          var d = ve();
          return zn === null ? Of(d, o, l) : Sp(
            d,
            zn.memoizedState,
            o,
            l
          );
        },
        useTransition: function() {
          var o = Lt(tt)[0], l = ve().memoizedState;
          return [
            typeof o == "boolean" ? o : pe(o),
            l
          ];
        },
        useSyncExternalStore: Pt,
        useId: Zl
      };
      vl.useCacheRefresh = nc, vl.useMemoCache = Ze, vl.useHostTransitionStatus = jl, vl.useFormState = Wa, vl.useActionState = Wa, vl.useOptimistic = function(o, l) {
        var d = ve();
        return zn !== null ? zt(d, zn, o, l) : (d.baseState = o, [o, d.queue.dispatch]);
      };
      var Um = {
        isMounted: function(o) {
          return (o = o._reactInternals) ? S(o) === o : !1;
        },
        enqueueSetState: function(o, l, d) {
          o = o._reactInternals;
          var y = _a(), T = Ge(y);
          T.payload = l, d != null && (T.callback = d), l = it(o, T, y), l !== null && (Wi(l, o, y), Tt(l, o, y));
        },
        enqueueReplaceState: function(o, l, d) {
          o = o._reactInternals;
          var y = _a(), T = Ge(y);
          T.tag = 1, T.payload = l, d != null && (T.callback = d), l = it(o, T, y), l !== null && (Wi(l, o, y), Tt(l, o, y));
        },
        enqueueForceUpdate: function(o, l) {
          o = o._reactInternals;
          var d = _a(), y = Ge(d);
          y.tag = 2, l != null && (y.callback = l), l = it(o, y, d), l !== null && (Wi(l, o, d), Tt(l, o, d));
        }
      }, Nm = typeof reportError == "function" ? reportError : function(o) {
        if (typeof window == "object" && typeof window.ErrorEvent == "function") {
          var l = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: typeof o == "object" && o !== null && typeof o.message == "string" ? String(o.message) : String(o),
            error: o
          });
          if (!window.dispatchEvent(l)) return;
        } else if (typeof process == "object" && typeof process.emit == "function") {
          process.emit("uncaughtException", o);
          return;
        }
        console.error(o);
      }, Om = Error(s(461)), Hi = !1, Kh = { dehydrated: null, treeContext: null, retryLane: 0 }, Nc = R(null), No = null, Fs = null, Lm = typeof AbortController < "u" ? AbortController : function() {
        var o = [], l = this.signal = {
          aborted: !1,
          addEventListener: function(d, y) {
            o.push(y);
          }
        };
        this.abort = function() {
          l.aborted = !0, o.forEach(function(d) {
            return d();
          });
        };
      }, bS = Ka.unstable_scheduleCallback, TS = Ka.unstable_NormalPriority, li = {
        $$typeof: Ps,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      }, $g = Gt.S;
      Gt.S = function(o, l) {
        typeof l == "object" && l !== null && typeof l.then == "function" && Re(o, l), $g !== null && $g(o, l);
      };
      var Kr = R(null), vr = !1, ui = !1, zm = !1, ey = typeof WeakSet == "function" ? WeakSet : Set, Ii = null, ty = !1, Si = null, ts = !1, Gs = null, gl = 8192, AS = {
        getCacheForType: function(o) {
          var l = Yi(li), d = l.data.get(o);
          return d === void 0 && (d = o(), l.data.set(o, d)), d;
        }
      }, Qh = 0, kh = 1, Jh = 2, Oc = 3, Lc = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var Su = Symbol.for;
        Qh = Su("selector.component"), kh = Su("selector.has_pseudo_class"), Jh = Su("selector.role"), Oc = Su("selector.test_id"), Lc = Su("selector.text");
      }
      var ny = typeof WeakMap == "function" ? WeakMap : Map, Bn = 0, Yn = null, Vt = null, Sn = 0, Pn = 0, Oa = null, gr = !1, yl = !1, Bm = !1, yr = 0, ii = 0, Oo = 0, _l = 0, Pm = 0, ns = 0, xu = 0, xi = null, Xs = null, Hm = !1, Im = 0, zc = 1 / 0, Bc = null, _r = null, Eu = !1, Ta = null, xs = 0, Ji = 0, Vm = null, Pc = 0, Mu = null;
      return pn.attemptContinuousHydration = function(o) {
        if (o.tag === 13) {
          var l = De(o, 67108864);
          l !== null && Wi(l, o, 67108864), Kp(o, 67108864);
        }
      }, pn.attemptHydrationAtCurrentPriority = function(o) {
        if (o.tag === 13) {
          var l = _a(), d = De(o, l);
          d !== null && Wi(d, o, l), Kp(o, l);
        }
      }, pn.attemptSynchronousHydration = function(o) {
        switch (o.tag) {
          case 3:
            if (o = o.stateNode, o.current.memoizedState.isDehydrated) {
              var l = U(o.pendingLanes);
              if (l !== 0) {
                for (o.pendingLanes |= 2, o.entangledLanes |= 2; l; ) {
                  var d = 1 << 31 - Ea(l);
                  o.entanglements[1] |= d, l &= ~d;
                }
                Qe(o), (Bn & 6) === 0 && (zc = gs() + 500, ut(0));
              }
            }
            break;
          case 13:
            l = De(o, 2), l !== null && Wi(l, o, 2), Hp(), Kp(o, 2);
        }
      }, pn.batchedUpdates = function(o, l) {
        return o(l);
      }, pn.createComponentSelector = function(o) {
        return { $$typeof: Qh, value: o };
      }, pn.createContainer = function(o, l, d, y, T, D, F, te, de, Ne) {
        return su(
          o,
          l,
          !1,
          null,
          d,
          y,
          D,
          F,
          te,
          de,
          Ne,
          null
        );
      }, pn.createHasPseudoClassSelector = function(o) {
        return { $$typeof: kh, value: o };
      }, pn.createHydrationContainer = function(o, l, d, y, T, D, F, te, de, Ne, nt, mt, ft) {
        return o = su(
          d,
          y,
          !0,
          o,
          T,
          D,
          te,
          de,
          Ne,
          nt,
          mt,
          ft
        ), o.context = al(null), d = o.current, y = _a(), T = Ge(y), T.callback = l ?? null, it(d, T, y), o.current.lanes = y, W(o, y), Qe(o), o;
      }, pn.createPortal = function(o, l, d) {
        var y = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return {
          $$typeof: ru,
          key: y == null ? null : "" + y,
          children: o,
          containerInfo: l,
          implementation: d
        };
      }, pn.createRoleSelector = function(o) {
        return { $$typeof: Jh, value: o };
      }, pn.createTestNameSelector = function(o) {
        return { $$typeof: Oc, value: o };
      }, pn.createTextSelector = function(o) {
        return { $$typeof: Lc, value: o };
      }, pn.defaultOnCaughtError = function(o) {
        console.error(o);
      }, pn.defaultOnRecoverableError = function(o) {
        Nm(o);
      }, pn.defaultOnUncaughtError = function(o) {
        Nm(o);
      }, pn.deferredUpdates = function(o) {
        var l = Gt.T, d = Gr();
        try {
          return la(32), Gt.T = null, o();
        } finally {
          la(d), Gt.T = l;
        }
      }, pn.discreteUpdates = function(o, l, d, y, T) {
        var D = Gt.T, F = Gr();
        try {
          return la(2), Gt.T = null, o(l, d, y, T);
        } finally {
          la(F), Gt.T = D, Bn === 0 && (zc = gs() + 500);
        }
      }, pn.findAllNodes = dc, pn.findBoundingRects = function(o, l) {
        if (!Mo) throw Error(s(363));
        l = dc(o, l), o = [];
        for (var d = 0; d < l.length; d++)
          o.push(uu(l[d]));
        for (l = o.length - 1; 0 < l; l--) {
          d = o[l];
          for (var y = d.x, T = y + d.width, D = d.y, F = D + d.height, te = l - 1; 0 <= te; te--)
            if (l !== te) {
              var de = o[te], Ne = de.x, nt = Ne + de.width, mt = de.y, ft = mt + de.height;
              if (y >= Ne && D >= mt && T <= nt && F <= ft) {
                o.splice(l, 1);
                break;
              } else if (y !== Ne || d.width !== de.width || ft < D || mt > F) {
                if (!(D !== mt || d.height !== de.height || nt < y || Ne > T)) {
                  Ne > y && (de.width += Ne - y, de.x = y), nt < T && (de.width = T - Ne), o.splice(l, 1);
                  break;
                }
              } else {
                mt > D && (de.height += mt - D, de.y = D), ft < F && (de.height = F - mt), o.splice(l, 1);
                break;
              }
            }
        }
        return o;
      }, pn.findHostInstance = jp, pn.findHostInstanceWithNoPortals = function(o) {
        return o = x(o), o = o !== null ? C(o) : null, o === null ? null : ou(o.stateNode);
      }, pn.findHostInstanceWithWarning = function(o) {
        return jp(o);
      }, pn.flushPassiveEffects = or, pn.flushSyncFromReconciler = function(o) {
        var l = Bn;
        Bn |= 1;
        var d = Gt.T, y = Gr();
        try {
          if (la(2), Gt.T = null, o)
            return o();
        } finally {
          la(y), Gt.T = d, Bn = l, (Bn & 6) === 0 && ut(0);
        }
      }, pn.flushSyncWork = Hp, pn.focusWithin = function(o, l) {
        if (!Mo) throw Error(s(363));
        for (o = ch(o), l = dh(o, l), l = Array.from(l), o = 0; o < l.length; ) {
          var d = l[o++], y = d.tag;
          if (!cu(d)) {
            if ((y === 5 || y === 26 || y === 27) && Dg(d.stateNode))
              return !0;
            for (d = d.child; d !== null; )
              l.push(d), d = d.sibling;
          }
        }
        return !1;
      }, pn.getFindAllNodesFailureDescription = function(o, l) {
        if (!Mo) throw Error(s(363));
        var d = 0, y = [];
        o = [ch(o), 0];
        for (var T = 0; T < o.length; ) {
          var D = o[T++], F = D.tag, te = o[T++], de = l[te];
          if ((F !== 5 && F !== 26 && F !== 27 || !cu(D)) && (fh(D, de) && (y.push(hh(de)), te++, te > d && (d = te)), te < l.length))
            for (D = D.child; D !== null; )
              o.push(D, te), D = D.sibling;
        }
        if (d < l.length) {
          for (o = []; d < l.length; d++)
            o.push(hh(l[d]));
          return `findAllNodes was able to match part of the selector:
  ` + (y.join(" > ") + `

No matching component was found for:
  `) + o.join(" > ");
        }
        return null;
      }, pn.getPublicRootInstance = function(o) {
        if (o = o.current, !o.child) return null;
        switch (o.child.tag) {
          case 27:
          case 5:
            return ou(o.child.stateNode);
          default:
            return o.child.stateNode;
        }
      }, pn.injectIntoDevTools = function() {
        var o = {
          bundleType: 0,
          version: Eg,
          rendererPackageName: lS,
          currentDispatcherRef: Gt,
          findFiberByHostInstance: om,
          reconcilerVersion: "19.0.0"
        };
        if (Hs !== null && (o.rendererConfig = Hs), typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") o = !1;
        else {
          var l = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (l.isDisabled || !l.supportsFiber) o = !0;
          else {
            try {
              fl = l.inject(o), Na = l;
            } catch {
            }
            o = !!l.checkDCE;
          }
        }
        return o;
      }, pn.isAlreadyRendering = function() {
        return !1;
      }, pn.observeVisibleRects = function(o, l, d, y) {
        if (!Mo) throw Error(s(363));
        o = dc(o, l);
        var T = hm(
          o,
          d,
          y
        ).disconnect;
        return {
          disconnect: function() {
            T();
          }
        };
      }, pn.shouldError = function() {
        return null;
      }, pn.shouldSuspend = function() {
        return !1;
      }, pn.startHostTransition = function(o, l, d, y) {
        if (o.tag !== 5) throw Error(s(476));
        var T = tc(o).queue;
        Li(
          o,
          T,
          l,
          ol,
          d === null ? i : function() {
            var D = tc(o).next.queue;
            return Kl(
              o,
              D,
              {},
              _a()
            ), d(y);
          }
        );
      }, pn.updateContainer = function(o, l, d, y) {
        var T = l.current, D = _a();
        return Eh(
          T,
          D,
          o,
          l,
          d,
          y
        ), D;
      }, pn.updateContainerSync = function(o, l, d, y) {
        return l.tag === 0 && or(), Eh(
          l.current,
          2,
          o,
          l,
          d,
          y
        ), 2;
      }, pn;
    }, r.exports.default = r.exports, Object.defineProperty(r.exports, "__esModule", { value: !0 });
  })(tE)), tE.exports;
}
var aE = { exports: {} };
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var IT;
function wz() {
  return IT || (IT = 1, (function(r) {
    process.env.NODE_ENV !== "production" && (r.exports = function(e) {
      function t(n, a) {
        for (n = n.memoizedState; n !== null && 0 < a; )
          n = n.next, a--;
        return n;
      }
      function i(n, a, c, m) {
        if (c >= a.length) return m;
        var g = a[c], b = Pi(n) ? n.slice() : ji({}, n);
        return b[g] = i(n[g], a, c + 1, m), b;
      }
      function s(n, a, c) {
        if (a.length !== c.length)
          console.warn("copyWithRename() expects paths of the same length");
        else {
          for (var m = 0; m < c.length - 1; m++)
            if (a[m] !== c[m]) {
              console.warn(
                "copyWithRename() expects paths to be the same except for the deepest key"
              );
              return;
            }
          return u(n, a, c, 0);
        }
      }
      function u(n, a, c, m) {
        var g = a[m], b = Pi(n) ? n.slice() : ji({}, n);
        return m + 1 === a.length ? (b[c[m]] = b[g], Pi(b) ? b.splice(g, 1) : delete b[g]) : b[g] = u(
          n[g],
          a,
          c,
          m + 1
        ), b;
      }
      function f(n, a, c) {
        var m = a[c], g = Pi(n) ? n.slice() : ji({}, n);
        return c + 1 === a.length ? (Pi(g) ? g.splice(m, 1) : delete g[m], g) : (g[m] = f(n[m], a, c + 1), g);
      }
      function h() {
        return !1;
      }
      function p() {
        return null;
      }
      function v(n, a, c, m) {
        return new yS(n, a, c, m);
      }
      function _(n, a) {
        n.context === xs && (zh(a, n, null, null), Mo());
      }
      function S(n, a) {
        if (Ar !== null) {
          var c = a.staleFamilies;
          a = a.updatedFamilies, bo(), ym(
            n.current,
            a,
            c
          ), Mo();
        }
      }
      function E(n) {
        Ar = n;
      }
      function x() {
        console.error(
          "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
        );
      }
      function A() {
        console.error(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        );
      }
      function C() {
      }
      function R() {
      }
      function M(n) {
        var a = [];
        return n.forEach(function(c) {
          a.push(c);
        }), a.sort().join(", ");
      }
      function w(n) {
        return n === null || typeof n != "object" ? null : (n = Tc && n[Tc] || n["@@iterator"], typeof n == "function" ? n : null);
      }
      function N(n) {
        if (n == null) return null;
        if (typeof n == "function")
          return n.$$typeof === Am ? null : n.displayName || n.name || null;
        if (typeof n == "string") return n;
        switch (n) {
          case cl:
            return "Fragment";
          case oi:
            return "Portal";
          case Tm:
            return "Profiler";
          case Ph:
            return "StrictMode";
          case Ro:
            return "Suspense";
          case Ea:
            return "SuspenseList";
        }
        if (typeof n == "object")
          switch (typeof n.tag == "number" && console.error(
            "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
          ), n.$$typeof) {
            case Is:
              return (n.displayName || "Context") + ".Provider";
            case Hh:
              return (n._context.displayName || "Context") + ".Consumer";
            case cr:
              var a = n.render;
              return n = n.displayName, n || (n = a.displayName || a.name || "", n = n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef"), n;
            case Ih:
              return a = n.displayName || null, a !== null ? a : N(n.type) || "Memo";
            case $a:
              a = n._payload, n = n._init;
              try {
                return N(n(a));
              } catch {
              }
          }
        return null;
      }
      function U(n) {
        var a = n.type;
        switch (n.tag) {
          case 24:
            return "Cache";
          case 9:
            return (a._context.displayName || "Context") + ".Consumer";
          case 10:
            return (a.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return n = a.render, n = n.displayName || n.name || "", a.displayName || (n !== "" ? "ForwardRef(" + n + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 26:
          case 27:
          case 5:
            return a;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return N(a);
          case 8:
            return a === Ph ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 14:
          case 15:
            if (typeof a == "function")
              return a.displayName || a.name || null;
            if (typeof a == "string") return a;
            break;
          case 29:
            if (a = n._debugInfo, a != null) {
              for (var c = a.length - 1; 0 <= c; c--)
                if (typeof a[c].name == "string") return a[c].name;
            }
            if (n.return !== null)
              return U(n.return);
        }
        return null;
      }
      function I() {
      }
      function P() {
        if (Ac === 0) {
          gs = console.log, Rm = console.info, jg = console.warn, Fh = console.error, Zg = console.group, Kg = console.groupCollapsed, Qg = console.groupEnd;
          var n = {
            configurable: !0,
            enumerable: !0,
            value: I,
            writable: !0
          };
          Object.defineProperties(console, {
            info: n,
            log: n,
            warn: n,
            error: n,
            group: n,
            groupCollapsed: n,
            groupEnd: n
          });
        }
        Ac++;
      }
      function X() {
        if (Ac--, Ac === 0) {
          var n = { configurable: !0, enumerable: !0, writable: !0 };
          Object.defineProperties(console, {
            log: ji({}, n, { value: gs }),
            info: ji({}, n, { value: Rm }),
            warn: ji({}, n, { value: jg }),
            error: ji({}, n, { value: Fh }),
            group: ji({}, n, { value: Zg }),
            groupCollapsed: ji({}, n, { value: Kg }),
            groupEnd: ji({}, n, { value: Qg })
          });
        }
        0 > Ac && console.error(
          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
        );
      }
      function Y(n) {
        if (fl === void 0)
          try {
            throw Error();
          } catch (c) {
            var a = c.stack.trim().match(/\n( *(at )?)/);
            fl = a && a[1] || "", Na = -1 < c.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < c.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return `
` + fl + n + Na;
      }
      function z(n, a) {
        if (!n || Ma) return "";
        var c = Gh.get(n);
        if (c !== void 0) return c;
        Ma = !0, c = Error.prepareStackTrace, Error.prepareStackTrace = void 0;
        var m = null;
        m = Me.H, Me.H = null, P();
        try {
          var g = {
            DetermineComponentFrameRoot: function() {
              try {
                if (a) {
                  var vt = function() {
                    throw Error();
                  };
                  if (Object.defineProperty(vt.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  }), typeof Reflect == "object" && Reflect.construct) {
                    try {
                      Reflect.construct(vt, []);
                    } catch (On) {
                      var xn = On;
                    }
                    Reflect.construct(n, [], vt);
                  } else {
                    try {
                      vt.call();
                    } catch (On) {
                      xn = On;
                    }
                    n.call(vt.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (On) {
                    xn = On;
                  }
                  (vt = n()) && typeof vt.catch == "function" && vt.catch(function() {
                  });
                }
              } catch (On) {
                if (On && xn && typeof On.stack == "string")
                  return [On.stack, xn.stack];
              }
              return [null, null];
            }
          };
          g.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var b = Object.getOwnPropertyDescriptor(
            g.DetermineComponentFrameRoot,
            "name"
          );
          b && b.configurable && Object.defineProperty(
            g.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var O = g.DetermineComponentFrameRoot(), G = O[0], re = O[1];
          if (G && re) {
            var Ee = G.split(`
`), ke = re.split(`
`);
            for (O = b = 0; b < Ee.length && !Ee[b].includes(
              "DetermineComponentFrameRoot"
            ); )
              b++;
            for (; O < ke.length && !ke[O].includes(
              "DetermineComponentFrameRoot"
            ); )
              O++;
            if (b === Ee.length || O === ke.length)
              for (b = Ee.length - 1, O = ke.length - 1; 1 <= b && 0 <= O && Ee[b] !== ke[O]; )
                O--;
            for (; 1 <= b && 0 <= O; b--, O--)
              if (Ee[b] !== ke[O]) {
                if (b !== 1 || O !== 1)
                  do
                    if (b--, O--, 0 > O || Ee[b] !== ke[O]) {
                      var ot = `
` + Ee[b].replace(
                        " at new ",
                        " at "
                      );
                      return n.displayName && ot.includes("<anonymous>") && (ot = ot.replace("<anonymous>", n.displayName)), typeof n == "function" && Gh.set(n, ot), ot;
                    }
                  while (1 <= b && 0 <= O);
                break;
              }
          }
        } finally {
          Ma = !1, Me.H = m, X(), Error.prepareStackTrace = c;
        }
        return Ee = (Ee = n ? n.displayName || n.name : "") ? Y(Ee) : "", typeof n == "function" && Gh.set(n, Ee), Ee;
      }
      function L(n) {
        switch (n.tag) {
          case 26:
          case 27:
          case 5:
            return Y(n.type);
          case 16:
            return Y("Lazy");
          case 13:
            return Y("Suspense");
          case 19:
            return Y("SuspenseList");
          case 0:
          case 15:
            return n = z(n.type, !1), n;
          case 11:
            return n = z(n.type.render, !1), n;
          case 1:
            return n = z(n.type, !0), n;
          default:
            return "";
        }
      }
      function W(n) {
        try {
          var a = "";
          do {
            a += L(n);
            var c = n._debugInfo;
            if (c)
              for (var m = c.length - 1; 0 <= m; m--) {
                var g = c[m];
                if (typeof g.name == "string") {
                  var b = a, O = g.env, G = Y(
                    g.name + (O ? " [" + O + "]" : "")
                  );
                  a = b + G;
                }
              }
            n = n.return;
          } while (n);
          return a;
        } catch (re) {
          return `
Error generating stack: ` + re.message + `
` + re.stack;
        }
      }
      function me() {
        return Zi === null ? "" : W(Zi);
      }
      function Q(n, a, c, m, g, b, O) {
        var G = Zi;
        Me.getCurrentStack = n === null ? null : me, Ki = !1, Zi = n;
        try {
          return a(c, m, g, b, O);
        } finally {
          Zi = G;
        }
        throw Error(
          "runWithFiberInDEV should never be called in production. This is a bug in React."
        );
      }
      function oe(n) {
        var a = n, c = n;
        if (n.alternate) for (; a.return; ) a = a.return;
        else {
          n = a;
          do
            a = n, (a.flags & 4098) !== 0 && (c = a.return), n = a.return;
          while (n);
        }
        return a.tag === 3 ? c : null;
      }
      function Se(n) {
        if (oe(n) !== n)
          throw Error("Unable to find node on an unmounted component.");
      }
      function B(n) {
        var a = n.alternate;
        if (!a) {
          if (a = oe(n), a === null)
            throw Error("Unable to find node on an unmounted component.");
          return a !== n ? null : n;
        }
        for (var c = n, m = a; ; ) {
          var g = c.return;
          if (g === null) break;
          var b = g.alternate;
          if (b === null) {
            if (m = g.return, m !== null) {
              c = m;
              continue;
            }
            break;
          }
          if (g.child === b.child) {
            for (b = g.child; b; ) {
              if (b === c) return Se(g), n;
              if (b === m) return Se(g), a;
              b = b.sibling;
            }
            throw Error("Unable to find node on an unmounted component.");
          }
          if (c.return !== m.return) c = g, m = b;
          else {
            for (var O = !1, G = g.child; G; ) {
              if (G === c) {
                O = !0, c = g, m = b;
                break;
              }
              if (G === m) {
                O = !0, m = g, c = b;
                break;
              }
              G = G.sibling;
            }
            if (!O) {
              for (G = b.child; G; ) {
                if (G === c) {
                  O = !0, c = b, m = g;
                  break;
                }
                if (G === m) {
                  O = !0, m = b, c = g;
                  break;
                }
                G = G.sibling;
              }
              if (!O)
                throw Error(
                  "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
                );
            }
          }
          if (c.alternate !== m)
            throw Error(
              "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
            );
        }
        if (c.tag !== 3)
          throw Error("Unable to find node on an unmounted component.");
        return c.stateNode.current === c ? n : a;
      }
      function K(n) {
        return n = B(n), n !== null ? q(n) : null;
      }
      function q(n) {
        var a = n.tag;
        if (a === 5 || a === 26 || a === 27 || a === 6) return n;
        for (n = n.child; n !== null; ) {
          if (a = q(n), a !== null) return a;
          n = n.sibling;
        }
        return null;
      }
      function se(n) {
        var a = n.tag;
        if (a === 5 || a === 26 || a === 27 || a === 6) return n;
        for (n = n.child; n !== null; ) {
          if (n.tag !== 4 && (a = se(n), a !== null))
            return a;
          n = n.sibling;
        }
        return null;
      }
      function le(n) {
        return { current: n };
      }
      function Te(n, a) {
        0 > Ta ? console.error("Unexpected pop.") : (a !== Eu[Ta] && console.error("Unexpected Fiber popped."), n.current = _r[Ta], _r[Ta] = null, Eu[Ta] = null, Ta--);
      }
      function we(n, a, c) {
        Ta++, _r[Ta] = n.current, Eu[Ta] = c, n.current = a;
      }
      function gt(n) {
        return n >>>= 0, n === 0 ? 32 : 31 - (Vm(n) / Pc | 0) | 0;
      }
      function $e(n) {
        if (n & 1) return "SyncHydrationLane";
        if (n & 2) return "Sync";
        if (n & 4) return "InputContinuousHydration";
        if (n & 8) return "InputContinuous";
        if (n & 16) return "DefaultHydration";
        if (n & 32) return "Default";
        if (n & 64) return "TransitionHydration";
        if (n & 4194176) return "Transition";
        if (n & 62914560) return "Retry";
        if (n & 67108864) return "SelectiveHydration";
        if (n & 134217728) return "IdleHydration";
        if (n & 268435456) return "Idle";
        if (n & 536870912) return "Offscreen";
        if (n & 1073741824) return "Deferred";
      }
      function _e(n) {
        var a = n & 42;
        if (a !== 0) return a;
        switch (n & -n) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return n & 4194176;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return n & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return console.error(
              "Should have found matching lanes. This is a bug in React."
            ), n;
        }
      }
      function Je(n, a) {
        var c = n.pendingLanes;
        if (c === 0) return 0;
        var m = 0, g = n.suspendedLanes, b = n.pingedLanes, O = n.warmLanes;
        n = n.finishedLanes !== 0;
        var G = c & 134217727;
        return G !== 0 ? (c = G & ~g, c !== 0 ? m = _e(c) : (b &= G, b !== 0 ? m = _e(b) : n || (O = G & ~O, O !== 0 && (m = _e(O))))) : (G = c & ~g, G !== 0 ? m = _e(G) : b !== 0 ? m = _e(b) : n || (O = c & ~O, O !== 0 && (m = _e(O)))), m === 0 ? 0 : a !== 0 && a !== m && (a & g) === 0 && (g = m & -m, O = a & -a, g >= O || g === 32 && (O & 4194176) !== 0) ? a : m;
      }
      function We(n, a) {
        return (n.pendingLanes & ~(n.suspendedLanes & ~n.pingedLanes) & a) === 0;
      }
      function Mt(n, a) {
        switch (n) {
          case 1:
          case 2:
          case 4:
          case 8:
            return a + 250;
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return console.error(
              "Should have found matching lanes. This is a bug in React."
            ), -1;
        }
      }
      function yt() {
        var n = Mu;
        return Mu <<= 1, (Mu & 4194176) === 0 && (Mu = 128), n;
      }
      function Ct() {
        var n = o;
        return o <<= 1, (o & 62914560) === 0 && (o = 4194304), n;
      }
      function _n(n) {
        for (var a = [], c = 0; 31 > c; c++) a.push(n);
        return a;
      }
      function Dt(n, a) {
        n.pendingLanes |= a, a !== 268435456 && (n.suspendedLanes = 0, n.pingedLanes = 0, n.warmLanes = 0);
      }
      function ee(n, a, c, m, g, b) {
        var O = n.pendingLanes;
        n.pendingLanes = c, n.suspendedLanes = 0, n.pingedLanes = 0, n.warmLanes = 0, n.expiredLanes &= c, n.entangledLanes &= c, n.errorRecoveryDisabledLanes &= c, n.shellSuspendCounter = 0;
        var G = n.entanglements, re = n.expirationTimes, Ee = n.hiddenUpdates;
        for (c = O & ~c; 0 < c; ) {
          var ke = 31 - Ji(c), ot = 1 << ke;
          G[ke] = 0, re[ke] = -1;
          var vt = Ee[ke];
          if (vt !== null)
            for (Ee[ke] = null, ke = 0; ke < vt.length; ke++) {
              var xn = vt[ke];
              xn !== null && (xn.lane &= -536870913);
            }
          c &= ~ot;
        }
        m !== 0 && Be(n, m, 0), b !== 0 && g === 0 && n.tag !== 0 && (n.suspendedLanes |= b & ~(O & ~a));
      }
      function Be(n, a, c) {
        n.pendingLanes |= a, n.suspendedLanes &= ~a;
        var m = 31 - Ji(a);
        n.entangledLanes |= a, n.entanglements[m] = n.entanglements[m] | 1073741824 | c & 4194218;
      }
      function Ce(n, a) {
        var c = n.entangledLanes |= a;
        for (n = n.entanglements; c; ) {
          var m = 31 - Ji(c), g = 1 << m;
          g & a | n[m] & a && (n[m] |= a), c &= ~g;
        }
      }
      function Ie(n, a, c) {
        if ($i)
          for (n = n.pendingUpdatersLaneMap; 0 < c; ) {
            var m = 31 - Ji(c), g = 1 << m;
            n[m].add(a), c &= ~g;
          }
      }
      function De(n, a) {
        if ($i)
          for (var c = n.pendingUpdatersLaneMap, m = n.memoizedUpdaters; 0 < a; ) {
            var g = 31 - Ji(a);
            n = 1 << g, g = c[g], 0 < g.size && (g.forEach(function(b) {
              var O = b.alternate;
              O !== null && m.has(O) || m.add(b);
            }), g.clear()), a &= ~n;
          }
      }
      function et(n) {
        return n &= -n, 2 < n ? 8 < n ? (n & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
      }
      function Ve(n) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") return !1;
        var a = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (a.isDisabled) return !0;
        if (!a.supportsFiber)
          return console.error(
            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
          ), !0;
        try {
          ft = a.inject(n), Ot = a;
        } catch (c) {
          console.error("React instrumentation encountered an error: %s.", c);
        }
        return !!a.checkDCE;
      }
      function Qe(n, a) {
        if (Ot && typeof Ot.onCommitFiberRoot == "function")
          try {
            var c = (n.current.flags & 128) === 128;
            switch (a) {
              case 2:
                var m = F;
                break;
              case 8:
                m = te;
                break;
              case 32:
                m = de;
                break;
              case 268435456:
                m = Ne;
                break;
              default:
                m = de;
            }
            Ot.onCommitFiberRoot(
              ft,
              n,
              m,
              c
            );
          } catch (g) {
            La || (La = !0, console.error(
              "React instrumentation encountered an error: %s",
              g
            ));
          }
      }
      function ut(n) {
        if (typeof nt == "function" && mt(n), Ot && typeof Ot.setStrictMode == "function")
          try {
            Ot.setStrictMode(ft, n);
          } catch (a) {
            La || (La = !0, console.error(
              "React instrumentation encountered an error: %s",
              a
            ));
          }
      }
      function Bt(n) {
        st = n;
      }
      function Z() {
        st !== null && typeof st.markCommitStopped == "function" && st.markCommitStopped();
      }
      function H(n) {
        st !== null && typeof st.markComponentRenderStarted == "function" && st.markComponentRenderStarted(n);
      }
      function he() {
        st !== null && typeof st.markComponentRenderStopped == "function" && st.markComponentRenderStopped();
      }
      function be(n) {
        st !== null && typeof st.markRenderStarted == "function" && st.markRenderStarted(n);
      }
      function He() {
        st !== null && typeof st.markRenderStopped == "function" && st.markRenderStopped();
      }
      function Re(n, a) {
        st !== null && typeof st.markStateUpdateScheduled == "function" && st.markStateUpdateScheduled(n, a);
      }
      function bt(n, a) {
        return n === a && (n !== 0 || 1 / n === 1 / a) || n !== n && a !== a;
      }
      function Xe(n, a) {
        if (typeof n == "object" && n !== null) {
          var c = fe.get(n);
          return c !== void 0 ? c : (a = {
            value: n,
            source: a,
            stack: W(a)
          }, fe.set(n, a), a);
        }
        return {
          value: n,
          source: a,
          stack: W(a)
        };
      }
      function ct(n, a) {
        Tt(), xe[Ke++] = Hn, xe[Ke++] = wt, wt = n, Hn = a;
      }
      function _t(n, a, c) {
        Tt(), Ut[kt++] = an, Ut[kt++] = fa, Ut[kt++] = $n, $n = n;
        var m = an;
        n = fa;
        var g = 32 - Ji(m) - 1;
        m &= ~(1 << g), c += 1;
        var b = 32 - Ji(a) + g;
        if (30 < b) {
          var O = g - g % 5;
          b = (m & (1 << O) - 1).toString(32), m >>= O, g -= O, an = 1 << 32 - Ji(a) + g | c << g | m, fa = b + n;
        } else
          an = 1 << b | c << g | m, fa = n;
      }
      function Ge(n) {
        Tt(), n.return !== null && (ct(n, 1), _t(n, 1, 0));
      }
      function it(n) {
        for (; n === wt; )
          wt = xe[--Ke], xe[Ke] = null, Hn = xe[--Ke], xe[Ke] = null;
        for (; n === $n; )
          $n = Ut[--kt], Ut[kt] = null, fa = Ut[--kt], Ut[kt] = null, an = Ut[--kt], Ut[kt] = null;
      }
      function Tt() {
        bn || console.error(
          "Expected to be hydrating. This is a bug in React. Please file an issue."
        );
      }
      function k(n) {
        return n === null && console.error(
          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
        ), n;
      }
      function ye(n, a) {
        we(bu, a, n), we(Fm, n, n), we(Lo, null, n), a = Yr(a), Te(Lo, n), we(Lo, a, n);
      }
      function qe(n) {
        Te(Lo, n), Te(Fm, n), Te(bu, n);
      }
      function J() {
        return k(Lo.current);
      }
      function Oe(n) {
        n.memoizedState !== null && we(iy, n, n);
        var a = k(Lo.current), c = Wr(a, n.type);
        a !== c && (we(Fm, n, n), we(Lo, c, n));
      }
      function Ye(n) {
        Fm.current === n && (Te(Lo, n), Te(Fm, n)), iy.current === n && (Te(iy, n), yi ? Zr._currentValue = dr : Zr._currentValue2 = dr);
      }
      function lt(n, a) {
        return n.serverProps === void 0 && n.serverTail.length === 0 && n.children.length === 1 && 3 < n.distanceFromLeaf && n.distanceFromLeaf > 15 - a ? lt(n.children[0], a) : n;
      }
      function Pe(n) {
        return "  " + "  ".repeat(n);
      }
      function Ue(n) {
        return "+ " + "  ".repeat(n);
      }
      function rt(n) {
        return "- " + "  ".repeat(n);
      }
      function Rt(n) {
        switch (n.tag) {
          case 26:
          case 27:
          case 5:
            return n.type;
          case 16:
            return "Lazy";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 0:
          case 15:
            return n = n.type, n.displayName || n.name || null;
          case 11:
            return n = n.type.render, n.displayName || n.name || null;
          case 1:
            return n = n.type, n.displayName || n.name || null;
          default:
            return null;
        }
      }
      function Yt(n, a) {
        return wM.test(n) ? (n = JSON.stringify(n), n.length > a - 2 ? 8 > a ? '{"..."}' : "{" + n.slice(0, a - 7) + '..."}' : "{" + n + "}") : n.length > a ? 5 > a ? '{"..."}' : n.slice(0, a - 3) + "..." : n;
      }
      function Ft(n, a, c) {
        var m = 120 - 2 * c;
        if (a === null)
          return Ue(c) + Yt(n, m) + `
`;
        if (typeof a == "string") {
          for (var g = 0; g < a.length && g < n.length && a.charCodeAt(g) === n.charCodeAt(g); g++) ;
          return g > m - 8 && 10 < g && (n = "..." + n.slice(g - 8), a = "..." + a.slice(g - 8)), Ue(c) + Yt(n, m) + `
` + rt(c) + Yt(a, m) + `
`;
        }
        return Pe(c) + Yt(n, m) + `
`;
      }
      function si(n) {
        return Object.prototype.toString.call(n).replace(/^\[object (.*)\]$/, function(a, c) {
          return c;
        });
      }
      function Jn(n, a) {
        switch (typeof n) {
          case "string":
            return n = JSON.stringify(n), n.length > a ? 5 > a ? '"..."' : n.slice(0, a - 4) + '..."' : n;
          case "object":
            if (n === null) return "null";
            if (Pi(n)) return "[...]";
            if (n.$$typeof === ul)
              return (a = N(n.type)) ? "<" + a + ">" : "<...>";
            var c = si(n);
            if (c === "Object") {
              c = "", a -= 2;
              for (var m in n)
                if (n.hasOwnProperty(m)) {
                  var g = JSON.stringify(m);
                  if (g !== '"' + m + '"' && (m = g), a -= m.length - 2, g = Jn(
                    n[m],
                    15 > a ? a : 15
                  ), a -= g.length, 0 > a) {
                    c += c === "" ? "..." : ", ...";
                    break;
                  }
                  c += (c === "" ? "" : ",") + m + ":" + g;
                }
              return "{" + c + "}";
            }
            return c;
          case "function":
            return (a = n.displayName || n.name) ? "function " + a : "function";
          default:
            return String(n);
        }
      }
      function qa(n, a) {
        return typeof n != "string" || wM.test(n) ? "{" + Jn(n, a - 2) + "}" : n.length > a - 2 ? 5 > a ? '"..."' : '"' + n.slice(0, a - 5) + '..."' : '"' + n + '"';
      }
      function ma(n, a, c) {
        var m = 120 - c.length - n.length, g = [], b;
        for (b in a)
          if (a.hasOwnProperty(b) && b !== "children") {
            var O = qa(
              a[b],
              120 - c.length - b.length - 1
            );
            m -= b.length + O.length + 2, g.push(b + "=" + O);
          }
        return g.length === 0 ? c + "<" + n + `>
` : 0 < m ? c + "<" + n + " " + g.join(" ") + `>
` : c + "<" + n + `
` + c + "  " + g.join(`
` + c + "  ") + `
` + c + `>
`;
      }
      function Ur(n, a, c) {
        var m = "", g = ji({}, a), b;
        for (b in n)
          if (n.hasOwnProperty(b)) {
            delete g[b];
            var O = 120 - 2 * c - b.length - 2, G = Jn(n[b], O);
            a.hasOwnProperty(b) ? (O = Jn(a[b], O), m += Ue(c) + b + ": " + G + `
`, m += rt(c) + b + ": " + O + `
`) : m += Ue(c) + b + ": " + G + `
`;
          }
        for (var re in g)
          g.hasOwnProperty(re) && (n = Jn(
            g[re],
            120 - 2 * c - re.length - 2
          ), m += rt(c) + re + ": " + n + `
`);
        return m;
      }
      function Ya(n, a, c, m) {
        var g = "", b = /* @__PURE__ */ new Map();
        for (Ee in c)
          c.hasOwnProperty(Ee) && b.set(
            Ee.toLowerCase(),
            Ee
          );
        if (b.size === 1 && b.has("children"))
          g += ma(
            n,
            a,
            Pe(m)
          );
        else {
          for (var O in a)
            if (a.hasOwnProperty(O) && O !== "children") {
              var G = 120 - 2 * (m + 1) - O.length - 1, re = b.get(O.toLowerCase());
              if (re !== void 0) {
                b.delete(O.toLowerCase());
                var Ee = a[O];
                re = c[re];
                var ke = qa(
                  Ee,
                  G
                );
                G = qa(
                  re,
                  G
                ), typeof Ee == "object" && Ee !== null && typeof re == "object" && re !== null && si(Ee) === "Object" && si(re) === "Object" && (2 < Object.keys(Ee).length || 2 < Object.keys(re).length || -1 < ke.indexOf("...") || -1 < G.indexOf("...")) ? g += Pe(m + 1) + O + `={{
` + Ur(
                  Ee,
                  re,
                  m + 2
                ) + Pe(m + 1) + `}}
` : (g += Ue(m + 1) + O + "=" + ke + `
`, g += rt(m + 1) + O + "=" + G + `
`);
              } else
                g += Pe(m + 1) + O + "=" + qa(a[O], G) + `
`;
            }
          b.forEach(function(ot) {
            if (ot !== "children") {
              var vt = 120 - 2 * (m + 1) - ot.length - 1;
              g += rt(m + 1) + ot + "=" + qa(c[ot], vt) + `
`;
            }
          }), g = g === "" ? Pe(m) + "<" + n + `>
` : Pe(m) + "<" + n + `
` + g + Pe(m) + `>
`;
        }
        return n = c.children, a = a.children, typeof n == "string" || typeof n == "number" || typeof n == "bigint" ? (b = "", (typeof a == "string" || typeof a == "number" || typeof a == "bigint") && (b = "" + a), g += Ft(b, "" + n, m + 1)) : (typeof a == "string" || typeof a == "number" || typeof a == "bigint") && (g = n == null ? g + Ft("" + a, null, m + 1) : g + Ft("" + a, void 0, m + 1)), g;
      }
      function uo(n, a) {
        var c = Rt(n);
        if (c === null) {
          for (c = "", n = n.child; n; )
            c += uo(n, a), n = n.sibling;
          return c;
        }
        return Pe(a) + "<" + c + `>
`;
      }
      function $(n, a) {
        var c = lt(n, a);
        if (c !== n && (n.children.length !== 1 || n.children[0] !== c))
          return Pe(a) + `...
` + $(c, a + 1);
        c = "";
        var m = n.fiber._debugInfo;
        if (m)
          for (var g = 0; g < m.length; g++) {
            var b = m[g].name;
            typeof b == "string" && (c += Pe(a) + "<" + b + `>
`, a++);
          }
        if (m = "", g = n.fiber.pendingProps, n.fiber.tag === 6)
          m = Ft(g, n.serverProps, a), a++;
        else if (b = Rt(n.fiber), b !== null)
          if (n.serverProps === void 0) {
            m = a;
            var O = 120 - 2 * m - b.length - 2, G = "";
            for (Ee in g)
              if (g.hasOwnProperty(Ee) && Ee !== "children") {
                var re = qa(g[Ee], 15);
                if (O -= Ee.length + re.length + 2, 0 > O) {
                  G += " ...";
                  break;
                }
                G += " " + Ee + "=" + re;
              }
            m = Pe(m) + "<" + b + G + `>
`, a++;
          } else
            n.serverProps === null ? (m = ma(
              b,
              g,
              Ue(a)
            ), a++) : typeof n.serverProps == "string" ? console.error(
              "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
            ) : (m = Ya(
              b,
              g,
              n.serverProps,
              a
            ), a++);
        var Ee = "";
        for (g = n.fiber.child, b = 0; g && b < n.children.length; )
          O = n.children[b], O.fiber === g ? (Ee += $(O, a), b++) : Ee += uo(g, a), g = g.sibling;
        for (g && 0 < n.children.length && (Ee += Pe(a) + `...
`), g = n.serverTail, n.serverProps === null && a--, n = 0; n < g.length; n++)
          b = g[n], Ee = typeof b == "string" ? Ee + (rt(a) + Yt(b, 120 - 2 * a) + `
`) : Ee + ma(
            b.type,
            b.props,
            rt(a)
          );
        return c + m + Ee;
      }
      function Fe(n) {
        try {
          return `

` + $(n, 0);
        } catch {
          return "";
        }
      }
      function at(n, a) {
        if (n.return === null) {
          if (Sr === null)
            Sr = {
              fiber: n,
              children: [],
              serverProps: void 0,
              serverTail: [],
              distanceFromLeaf: a
            };
          else {
            if (Sr.fiber !== n)
              throw Error(
                "Saw multiple hydration diff roots in a pass. This is a bug in React."
              );
            Sr.distanceFromLeaf > a && (Sr.distanceFromLeaf = a);
          }
          return Sr;
        }
        var c = at(
          n.return,
          a + 1
        ).children;
        return 0 < c.length && c[c.length - 1].fiber === n ? (c = c[c.length - 1], c.distanceFromLeaf > a && (c.distanceFromLeaf = a), c) : (a = {
          fiber: n,
          children: [],
          serverProps: void 0,
          serverTail: [],
          distanceFromLeaf: a
        }, c.push(a), a);
      }
      function dt(n, a) {
        Sl || (n = at(n, 0), n.serverProps = null, a !== null && (a = ny(a), n.serverTail.push(a)));
      }
      function Qt(n) {
        var a = "", c = Sr;
        throw c !== null && (Sr = null, a = Fe(c)), Rn(
          Xe(
            Error(
              `Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:

- A server/client branch \`if (typeof window !== 'undefined')\`.
- Variable input such as \`Date.now()\` or \`Math.random()\` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

https://react.dev/link/hydration-mismatch` + a
            ),
            n
          )
        ), RS;
      }
      function En(n, a) {
        if (!ba)
          throw Error(
            "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
          );
        Si(
          n.stateNode,
          n.type,
          n.memoizedProps,
          a,
          n
        ) || Qt(n);
      }
      function tn(n) {
        for (is = n.return; is; )
          switch (is.tag) {
            case 3:
            case 27:
              zo = !0;
              return;
            case 5:
            case 13:
              zo = !1;
              return;
            default:
              is = is.return;
          }
      }
      function Wt(n) {
        if (!ba || n !== is) return !1;
        if (!bn)
          return tn(n), bn = !0, !1;
        var a = !1;
        if (xi ? n.tag !== 3 && n.tag !== 27 && (n.tag !== 5 || Oc(n.type) && !Ri(n.type, n.memoizedProps)) && (a = !0) : n.tag !== 3 && (n.tag !== 5 || Oc(n.type) && !Ri(n.type, n.memoizedProps)) && (a = !0), a && Aa) {
          for (a = Aa; a; ) {
            var c = at(n, 0), m = ny(a);
            c.serverTail.push(m), a = m.type === "Suspense" ? gl(a) : Kr(a);
          }
          Qt(n);
        }
        if (tn(n), n.tag === 13) {
          if (!ba)
            throw Error(
              "Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
            );
          if (n = n.memoizedState, n = n !== null ? n.dehydrated : null, !n)
            throw Error(
              "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
            );
          Aa = gl(n);
        } else
          Aa = is ? Kr(n.stateNode) : null;
        return !0;
      }
      function ti() {
        ba && (Aa = is = null, Sl = bn = !1);
      }
      function Rn(n) {
        Qr === null ? Qr = [n] : Qr.push(n);
      }
      function Vn() {
        var n = Sr;
        n !== null && (Sr = null, n = Fe(n), console.error(
          `A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:

- A server/client branch \`if (typeof window !== 'undefined')\`.
- Variable input such as \`Date.now()\` or \`Math.random()\` which changes each time it's called.
- Date formatting in a user's locale which doesn't match the server.
- External changing data without sending a snapshot of it along with the HTML.
- Invalid HTML tag nesting.

It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.

%s%s`,
          "https://react.dev/link/hydration-mismatch",
          n
        ));
      }
      function V() {
        for (var n = $h, a = CS = $h = 0; a < n; ) {
          var c = xr[a];
          xr[a++] = null;
          var m = xr[a];
          xr[a++] = null;
          var g = xr[a];
          xr[a++] = null;
          var b = xr[a];
          if (xr[a++] = null, m !== null && g !== null) {
            var O = m.pending;
            O === null ? g.next = g : (g.next = O.next, O.next = g), m.pending = g;
          }
          b !== 0 && ce(c, g, b);
        }
      }
      function ae(n, a, c, m) {
        xr[$h++] = n, xr[$h++] = a, xr[$h++] = c, xr[$h++] = m, CS |= m, n.lanes |= m, n = n.alternate, n !== null && (n.lanes |= m);
      }
      function ve(n, a, c, m) {
        return ae(n, a, c, m), Ze(n);
      }
      function pe(n, a) {
        return ae(n, null, null, a), Ze(n);
      }
      function ce(n, a, c) {
        n.lanes |= c;
        var m = n.alternate;
        m !== null && (m.lanes |= c);
        for (var g = !1, b = n.return; b !== null; )
          b.childLanes |= c, m = b.alternate, m !== null && (m.childLanes |= c), b.tag === 22 && (n = b.stateNode, n === null || n._visibility & 1 || (g = !0)), n = b, b = b.return;
        g && a !== null && n.tag === 3 && (b = n.stateNode, g = 31 - Ji(c), b = b.hiddenUpdates, n = b[g], n === null ? b[g] = [a] : n.push(a), a.lane = c | 536870912);
      }
      function Ze(n) {
        if (lv > P2)
          throw Qc = lv = 0, uv = sx = null, Error(
            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
          );
        Qc > H2 && (Qc = 0, uv = null, console.error(
          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
        )), n.alternate === null && (n.flags & 4098) !== 0 && Hg(n);
        for (var a = n, c = a.return; c !== null; )
          a.alternate === null && (a.flags & 4098) !== 0 && Hg(n), a = c, c = a.return;
        return a.tag === 3 ? a.stateNode : null;
      }
      function tt() {
        var n = Hc;
        return Hc = 0, n;
      }
      function St(n) {
        var a = Hc;
        return Hc = n, a;
      }
      function pt(n) {
        var a = Hc;
        return Hc += n, a;
      }
      function Lt(n) {
        Es = ed(), 0 > n.actualStartTime && (n.actualStartTime = Es);
      }
      function Pt(n) {
        if (0 <= Es) {
          var a = ed() - Es;
          n.actualDuration += a, n.selfBaseDuration = a, Es = -1;
        }
      }
      function Nt(n) {
        if (0 <= Es) {
          var a = ed() - Es;
          n.actualDuration += a, Es = -1;
        }
      }
      function It() {
        if (0 <= Es) {
          var n = ed() - Es;
          Es = -1, Hc += n;
        }
      }
      function nn() {
        Es = ed();
      }
      function Ln(n) {
        for (var a = n.child; a; )
          n.actualDuration += a.actualDuration, a = a.sibling;
      }
      function dn(n) {
        n !== td && n.next === null && (td === null ? oy = td = n : td = td.next = n), ly = !0, Me.actQueue !== null ? wS || (wS = !0, Ni(zt)) : DS || (DS = !0, Ni(zt));
      }
      function vn(n, a) {
        if (!US && ly) {
          US = !0;
          do
            for (var c = !1, m = oy; m !== null; ) {
              if (n !== 0) {
                var g = m.pendingLanes;
                if (g === 0) var b = 0;
                else {
                  var O = m.suspendedLanes, G = m.pingedLanes;
                  b = (1 << 31 - Ji(42 | n) + 1) - 1, b &= g & ~(O & ~G), b = b & 201326677 ? b & 201326677 | 1 : b ? b | 2 : 0;
                }
                b !== 0 && (c = !0, qi(m, b));
              } else
                b = yn, b = Je(
                  m,
                  m === Qn ? b : 0
                ), (b & 3) === 0 || We(m, b) || (c = !0, qi(m, b));
              m = m.next;
            }
          while (c);
          US = !1;
        }
      }
      function zt() {
        ly = wS = DS = !1;
        var n = 0;
        nd !== 0 && (Dc() && (n = nd), nd = 0);
        for (var a = D(), c = null, m = oy; m !== null; ) {
          var g = m.next, b = Gn(m, a);
          b === 0 ? (m.next = null, c === null ? oy = g : c.next = g, g === null && (td = c)) : (c = m, (n !== 0 || (b & 3) !== 0) && (ly = !0)), m = g;
        }
        vn(n);
      }
      function Gn(n, a) {
        for (var c = n.suspendedLanes, m = n.pingedLanes, g = n.expirationTimes, b = n.pendingLanes & -62914561; 0 < b; ) {
          var O = 31 - Ji(b), G = 1 << O, re = g[O];
          re === -1 ? ((G & c) === 0 || (G & m) !== 0) && (g[O] = Mt(G, a)) : re <= a && (n.expiredLanes |= G), b &= ~G;
        }
        if (a = Qn, c = yn, c = Je(
          n,
          n === a ? c : 0
        ), m = n.callbackNode, c === 0 || n === a && kn === jc || n.cancelPendingCommit !== null)
          return m !== null && Us(m), n.callbackNode = null, n.callbackPriority = 0;
        if ((c & 3) === 0 || We(n, c)) {
          if (a = c & -c, a !== n.callbackPriority || Me.actQueue !== null && m !== NS)
            Us(m);
          else return a;
          switch (et(c)) {
            case 2:
            case 8:
              c = te;
              break;
            case 32:
              c = de;
              break;
            case 268435456:
              c = Ne;
              break;
            default:
              c = de;
          }
          return m = gn.bind(null, n), Me.actQueue !== null ? (Me.actQueue.push(m), c = NS) : c = l(c, m), n.callbackPriority = a, n.callbackNode = c, a;
        }
        return m !== null && Us(m), n.callbackPriority = 2, n.callbackNode = null, 2;
      }
      function gn(n, a) {
        ry = sy = !1;
        var c = n.callbackNode;
        if (bo() && n.callbackNode !== c)
          return null;
        var m = yn;
        return m = Je(
          n,
          n === Qn ? m : 0
        ), m === 0 ? null : (ol(
          n,
          m,
          a
        ), Gn(n, D()), n.callbackNode != null && n.callbackNode === c ? gn.bind(null, n) : null);
      }
      function qi(n, a) {
        if (bo()) return null;
        sy = ry, ry = !1, ol(n, a, !0);
      }
      function Us(n) {
        n !== NS && n !== null && d(n);
      }
      function Ni(n) {
        Me.actQueue !== null && Me.actQueue.push(function() {
          return n(), null;
        }), vu ? wc(function() {
          (In & (za | Ho)) !== rs ? l(F, n) : n();
        }) : l(F, n);
      }
      function Js() {
        return nd === 0 && (nd = yt()), nd;
      }
      function Xn(n, a) {
        if (Gm === null) {
          var c = Gm = [];
          OS = 0, Ic = Js(), id = {
            status: "pending",
            value: void 0,
            then: function(m) {
              c.push(m);
            }
          };
        }
        return OS++, a.then(sa, sa), a;
      }
      function sa() {
        if (--OS === 0 && Gm !== null) {
          id !== null && (id.status = "fulfilled");
          var n = Gm;
          Gm = null, Ic = 0, id = null;
          for (var a = 0; a < n.length; a++) (0, n[a])();
        }
      }
      function va(n, a) {
        var c = [], m = {
          status: "pending",
          value: null,
          reason: null,
          then: function(g) {
            c.push(g);
          }
        };
        return n.then(
          function() {
            m.status = "fulfilled", m.value = a;
            for (var g = 0; g < c.length; g++) (0, c[g])(a);
          },
          function(g) {
            for (m.status = "rejected", m.reason = g, g = 0; g < c.length; g++)
              (0, c[g])(void 0);
          }
        ), m;
      }
      function vi(n) {
        n.updateQueue = {
          baseState: n.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function Oi(n, a) {
        n = n.updateQueue, a.updateQueue === n && (a.updateQueue = {
          baseState: n.baseState,
          firstBaseUpdate: n.firstBaseUpdate,
          lastBaseUpdate: n.lastBaseUpdate,
          shared: n.shared,
          callbacks: null
        });
      }
      function Wa(n) {
        return {
          lane: n,
          tag: UM,
          payload: null,
          callback: null,
          next: null
        };
      }
      function fi(n, a, c) {
        var m = n.updateQueue;
        if (m === null) return null;
        if (m = m.shared, zS === m && !LM) {
          var g = U(n);
          console.error(
            `An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.

Please update the following component: %s`,
            g
          ), LM = !0;
        }
        return (In & za) !== rs ? (g = m.pending, g === null ? a.next = a : (a.next = g.next, g.next = a), m.pending = a, a = Ze(n), ce(n, null, c), a) : (ae(n, m, a, c), Ze(n));
      }
      function Yl(n, a, c) {
        if (a = a.updateQueue, a !== null && (a = a.shared, (c & 4194176) !== 0)) {
          var m = a.lanes;
          m &= n.pendingLanes, c |= m, a.lanes = c, Ce(n, c);
        }
      }
      function Qo(n, a) {
        var c = n.updateQueue, m = n.alternate;
        if (m !== null && (m = m.updateQueue, c === m)) {
          var g = null, b = null;
          if (c = c.firstBaseUpdate, c !== null) {
            do {
              var O = {
                lane: c.lane,
                tag: c.tag,
                payload: c.payload,
                callback: null,
                next: null
              };
              b === null ? g = b = O : b = b.next = O, c = c.next;
            } while (c !== null);
            b === null ? g = b = a : b = b.next = a;
          } else g = b = a;
          c = {
            baseState: m.baseState,
            firstBaseUpdate: g,
            lastBaseUpdate: b,
            shared: m.shared,
            callbacks: m.callbacks
          }, n.updateQueue = c;
          return;
        }
        n = c.lastBaseUpdate, n === null ? c.firstBaseUpdate = a : n.next = a, c.lastBaseUpdate = a;
      }
      function co() {
        if (BS) {
          var n = id;
          if (n !== null) throw n;
        }
      }
      function Wl(n, a, c, m) {
        BS = !1;
        var g = n.updateQueue;
        Tu = !1, zS = g.shared;
        var b = g.firstBaseUpdate, O = g.lastBaseUpdate, G = g.shared.pending;
        if (G !== null) {
          g.shared.pending = null;
          var re = G, Ee = re.next;
          re.next = null, O === null ? b = Ee : O.next = Ee, O = re;
          var ke = n.alternate;
          ke !== null && (ke = ke.updateQueue, G = ke.lastBaseUpdate, G !== O && (G === null ? ke.firstBaseUpdate = Ee : G.next = Ee, ke.lastBaseUpdate = re));
        }
        if (b !== null) {
          var ot = g.baseState;
          O = 0, ke = Ee = re = null, G = b;
          do {
            var vt = G.lane & -536870913, xn = vt !== G.lane;
            if (xn ? (yn & vt) === vt : (m & vt) === vt) {
              vt !== 0 && vt === Ic && (BS = !0), ke !== null && (ke = ke.next = {
                lane: 0,
                tag: G.tag,
                payload: G.payload,
                callback: null,
                next: null
              });
              e: {
                vt = n;
                var On = G, Ed = a, Md = c;
                switch (On.tag) {
                  case NM:
                    if (On = On.payload, typeof On == "function") {
                      dd = !0;
                      var eo = On.call(
                        Md,
                        ot,
                        Ed
                      );
                      if (vt.mode & 8) {
                        ut(!0);
                        try {
                          On.call(Md, ot, Ed);
                        } finally {
                          ut(!1);
                        }
                      }
                      dd = !1, ot = eo;
                      break e;
                    }
                    ot = On;
                    break e;
                  case LS:
                    vt.flags = vt.flags & -65537 | 128;
                  case UM:
                    if (eo = On.payload, typeof eo == "function") {
                      if (dd = !0, On = eo.call(
                        Md,
                        ot,
                        Ed
                      ), vt.mode & 8) {
                        ut(!0);
                        try {
                          eo.call(Md, ot, Ed);
                        } finally {
                          ut(!1);
                        }
                      }
                      dd = !1;
                    } else On = eo;
                    if (On == null) break e;
                    ot = ji({}, ot, On);
                    break e;
                  case OM:
                    Tu = !0;
                }
              }
              vt = G.callback, vt !== null && (n.flags |= 64, xn && (n.flags |= 8192), xn = g.callbacks, xn === null ? g.callbacks = [vt] : xn.push(vt));
            } else
              xn = {
                lane: vt,
                tag: G.tag,
                payload: G.payload,
                callback: G.callback,
                next: null
              }, ke === null ? (Ee = ke = xn, re = ot) : ke = ke.next = xn, O |= vt;
            if (G = G.next, G === null) {
              if (G = g.shared.pending, G === null)
                break;
              xn = G, G = xn.next, xn.next = null, g.lastBaseUpdate = xn, g.shared.pending = null;
            }
          } while (!0);
          ke === null && (re = ot), g.baseState = re, g.firstBaseUpdate = Ee, g.lastBaseUpdate = ke, b === null && (g.shared.lanes = 0), Uu |= O, n.lanes = O, n.memoizedState = ot;
        }
        zS = null;
      }
      function Uf(n, a) {
        if (typeof n != "function")
          throw Error(
            "Invalid argument passed as callback. Expected a function. Instead received: " + n
          );
        n.call(a);
      }
      function hg(n, a) {
        var c = n.shared.hiddenCallbacks;
        if (c !== null)
          for (n.shared.hiddenCallbacks = null, n = 0; n < c.length; n++)
            Uf(c[n], a);
      }
      function gp(n, a) {
        var c = n.callbacks;
        if (c !== null)
          for (n.callbacks = null, n = 0; n < c.length; n++)
            Uf(c[n], a);
      }
      function $u(n, a) {
        if (ge(n, a)) return !0;
        if (typeof n != "object" || n === null || typeof a != "object" || a === null)
          return !1;
        var c = Object.keys(n), m = Object.keys(a);
        if (c.length !== m.length) return !1;
        for (m = 0; m < c.length; m++) {
          var g = c[m];
          if (!A2.call(a, g) || !ge(n[g], a[g]))
            return !1;
        }
        return !0;
      }
      function yp() {
        return { didWarnAboutUncachedPromise: !1, thenables: [] };
      }
      function Nf(n) {
        return n = n.status, n === "fulfilled" || n === "rejected";
      }
      function ec() {
      }
      function _p(n, a, c) {
        Me.actQueue !== null && (Me.didUsePromise = !0);
        var m = n.thenables;
        switch (c = m[c], c === void 0 ? m.push(a) : c !== a && (n.didWarnAboutUncachedPromise || (n.didWarnAboutUncachedPromise = !0, console.error(
          "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
        )), a.then(ec, ec), a = c), a.status) {
          case "fulfilled":
            return a.value;
          case "rejected":
            throw n = a.reason, Sp(n), n;
          default:
            if (typeof a.status == "string")
              a.then(ec, ec);
            else {
              if (n = Qn, n !== null && 100 < n.shellSuspendCounter)
                throw Error(
                  "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
                );
              n = a, n.status = "pending", n.then(
                function(g) {
                  if (a.status === "pending") {
                    var b = a;
                    b.status = "fulfilled", b.value = g;
                  }
                },
                function(g) {
                  if (a.status === "pending") {
                    var b = a;
                    b.status = "rejected", b.reason = g;
                  }
                }
              );
            }
            switch (a.status) {
              case "fulfilled":
                return a.value;
              case "rejected":
                throw n = a.reason, Sp(n), n;
            }
            throw ad = a, hy = !0, cy;
        }
      }
      function Of() {
        if (ad === null)
          throw Error(
            "Expected a suspended thenable. This is a bug in React. Please file an issue."
          );
        var n = ad;
        return ad = null, hy = !1, n;
      }
      function Sp(n) {
        if (n === cy)
          throw Error(
            "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
          );
      }
      function Li(n) {
        var a = un;
        return n != null && (un = a === null ? n : a.concat(n)), a;
      }
      function tc(n, a, c) {
        for (var m = Object.keys(n.props), g = 0; g < m.length; g++) {
          var b = m[g];
          if (b !== "children" && b !== "key") {
            a === null && (a = Oh(n, c.mode, 0), a._debugInfo = un, a.return = c), Q(
              a,
              function(O) {
                console.error(
                  "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
                  O
                );
              },
              b
            );
            break;
          }
        }
      }
      function jl(n) {
        var a = Km;
        return Km += 1, sd === null && (sd = yp()), _p(sd, n, a);
      }
      function Zl(n, a) {
        a = a.props.ref, n.ref = a !== void 0 ? a : null;
      }
      function nc(n, a) {
        throw a.$$typeof === Wg ? Error(
          `A React Element from an older version of React was rendered. This is not supported. It can happen if:
- Multiple copies of the "react" package is used.
- A library pre-bundled an old copy of "react" or "react/jsx-runtime".
- A compiler tries to "inline" JSX instead of using the runtime.`
        ) : (n = Object.prototype.toString.call(a), Error(
          "Objects are not valid as a React child (found: " + (n === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : n) + "). If you meant to render a collection of children, use an array instead."
        ));
      }
      function Lf(n, a) {
        var c = U(n) || "Component";
        QM[c] || (QM[c] = !0, a = a.displayName || a.name || "Component", n.tag === 3 ? console.error(
          `Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.
  root.render(%s)`,
          a,
          a,
          a
        ) : console.error(
          `Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.
  <%s>{%s}</%s>`,
          a,
          a,
          c,
          a,
          c
        ));
      }
      function zf(n, a) {
        var c = U(n) || "Component";
        kM[c] || (kM[c] = !0, a = String(a), n.tag === 3 ? console.error(
          `Symbols are not valid as a React child.
  root.render(%s)`,
          a
        ) : console.error(
          `Symbols are not valid as a React child.
  <%s>%s</%s>`,
          c,
          a,
          c
        ));
      }
      function xp(n) {
        function a(ie, ne) {
          if (n) {
            var ue = ie.deletions;
            ue === null ? (ie.deletions = [ne], ie.flags |= 16) : ue.push(ne);
          }
        }
        function c(ie, ne) {
          if (!n) return null;
          for (; ne !== null; )
            a(ie, ne), ne = ne.sibling;
          return null;
        }
        function m(ie) {
          for (var ne = /* @__PURE__ */ new Map(); ie !== null; )
            ie.key !== null ? ne.set(ie.key, ie) : ne.set(ie.index, ie), ie = ie.sibling;
          return ne;
        }
        function g(ie, ne) {
          return ie = Ao(ie, ne), ie.index = 0, ie.sibling = null, ie;
        }
        function b(ie, ne, ue) {
          return ie.index = ue, n ? (ue = ie.alternate, ue !== null ? (ue = ue.index, ue < ne ? (ie.flags |= 33554434, ne) : ue) : (ie.flags |= 33554434, ne)) : (ie.flags |= 1048576, ne);
        }
        function O(ie) {
          return n && ie.alternate === null && (ie.flags |= 33554434), ie;
        }
        function G(ie, ne, ue, Le) {
          return ne === null || ne.tag !== 6 ? (ne = xm(
            ue,
            ie.mode,
            Le
          ), ne.return = ie, ne._debugOwner = ie, ne._debugInfo = un, ne) : (ne = g(ne, ue), ne.return = ie, ne._debugInfo = un, ne);
        }
        function re(ie, ne, ue, Le) {
          var xt = ue.type;
          return xt === cl ? (ne = ke(
            ie,
            ne,
            ue.props.children,
            Le,
            ue.key
          ), tc(ue, ne, ie), ne) : ne !== null && (ne.elementType === xt || Vg(ne, ue) || typeof xt == "object" && xt !== null && xt.$$typeof === $a && Au(xt) === ne.type) ? (ne = g(ne, ue.props), Zl(ne, ue), ne.return = ie, ne._debugOwner = ue._owner, ne._debugInfo = un, ne) : (ne = Oh(ue, ie.mode, Le), Zl(ne, ue), ne.return = ie, ne._debugInfo = un, ne);
        }
        function Ee(ie, ne, ue, Le) {
          return ne === null || ne.tag !== 4 || ne.stateNode.containerInfo !== ue.containerInfo || ne.stateNode.implementation !== ue.implementation ? (ne = Lh(ue, ie.mode, Le), ne.return = ie, ne._debugInfo = un, ne) : (ne = g(ne, ue.children || []), ne.return = ie, ne._debugInfo = un, ne);
        }
        function ke(ie, ne, ue, Le, xt) {
          return ne === null || ne.tag !== 7 ? (ne = ll(
            ue,
            ie.mode,
            Le,
            xt
          ), ne.return = ie, ne._debugOwner = ie, ne._debugInfo = un, ne) : (ne = g(ne, ue), ne.return = ie, ne._debugInfo = un, ne);
        }
        function ot(ie, ne, ue) {
          if (typeof ne == "string" && ne !== "" || typeof ne == "number" || typeof ne == "bigint")
            return ne = xm(
              "" + ne,
              ie.mode,
              ue
            ), ne.return = ie, ne._debugOwner = ie, ne._debugInfo = un, ne;
          if (typeof ne == "object" && ne !== null) {
            switch (ne.$$typeof) {
              case ul:
                return ue = Oh(
                  ne,
                  ie.mode,
                  ue
                ), Zl(ue, ne), ue.return = ie, ie = Li(ne._debugInfo), ue._debugInfo = un, un = ie, ue;
              case oi:
                return ne = Lh(
                  ne,
                  ie.mode,
                  ue
                ), ne.return = ie, ne._debugInfo = un, ne;
              case $a:
                var Le = Li(ne._debugInfo);
                return ne = Au(ne), ie = ot(ie, ne, ue), un = Le, ie;
            }
            if (Pi(ne) || w(ne))
              return ue = ll(
                ne,
                ie.mode,
                ue,
                null
              ), ue.return = ie, ue._debugOwner = ie, ie = Li(ne._debugInfo), ue._debugInfo = un, un = ie, ue;
            if (typeof ne.then == "function")
              return Le = Li(ne._debugInfo), ie = ot(
                ie,
                jl(ne),
                ue
              ), un = Le, ie;
            if (ne.$$typeof === Is)
              return ot(
                ie,
                Br(ie, ne),
                ue
              );
            nc(ie, ne);
          }
          return typeof ne == "function" && Lf(ie, ne), typeof ne == "symbol" && zf(ie, ne), null;
        }
        function vt(ie, ne, ue, Le) {
          var xt = ne !== null ? ne.key : null;
          if (typeof ue == "string" && ue !== "" || typeof ue == "number" || typeof ue == "bigint")
            return xt !== null ? null : G(ie, ne, "" + ue, Le);
          if (typeof ue == "object" && ue !== null) {
            switch (ue.$$typeof) {
              case ul:
                return ue.key === xt ? (xt = Li(ue._debugInfo), ie = re(
                  ie,
                  ne,
                  ue,
                  Le
                ), un = xt, ie) : null;
              case oi:
                return ue.key === xt ? Ee(ie, ne, ue, Le) : null;
              case $a:
                return xt = Li(ue._debugInfo), ue = Au(ue), ie = vt(
                  ie,
                  ne,
                  ue,
                  Le
                ), un = xt, ie;
            }
            if (Pi(ue) || w(ue))
              return xt !== null ? null : (xt = Li(ue._debugInfo), ie = ke(
                ie,
                ne,
                ue,
                Le,
                null
              ), un = xt, ie);
            if (typeof ue.then == "function")
              return xt = Li(ue._debugInfo), ie = vt(
                ie,
                ne,
                jl(ue),
                Le
              ), un = xt, ie;
            if (ue.$$typeof === Is)
              return vt(
                ie,
                ne,
                Br(ie, ue),
                Le
              );
            nc(ie, ue);
          }
          return typeof ue == "function" && Lf(ie, ue), typeof ue == "symbol" && zf(ie, ue), null;
        }
        function xn(ie, ne, ue, Le, xt) {
          if (typeof Le == "string" && Le !== "" || typeof Le == "number" || typeof Le == "bigint")
            return ie = ie.get(ue) || null, G(ne, ie, "" + Le, xt);
          if (typeof Le == "object" && Le !== null) {
            switch (Le.$$typeof) {
              case ul:
                return ue = ie.get(
                  Le.key === null ? ue : Le.key
                ) || null, ie = Li(Le._debugInfo), ne = re(
                  ne,
                  ue,
                  Le,
                  xt
                ), un = ie, ne;
              case oi:
                return ie = ie.get(
                  Le.key === null ? ue : Le.key
                ) || null, Ee(ne, ie, Le, xt);
              case $a:
                var Tn = Li(Le._debugInfo);
                return Le = Au(Le), ne = xn(
                  ie,
                  ne,
                  ue,
                  Le,
                  xt
                ), un = Tn, ne;
            }
            if (Pi(Le) || w(Le))
              return ue = ie.get(ue) || null, ie = Li(Le._debugInfo), ne = ke(
                ne,
                ue,
                Le,
                xt,
                null
              ), un = ie, ne;
            if (typeof Le.then == "function")
              return Tn = Li(Le._debugInfo), ne = xn(
                ie,
                ne,
                ue,
                jl(Le),
                xt
              ), un = Tn, ne;
            if (Le.$$typeof === Is)
              return xn(
                ie,
                ne,
                ue,
                Br(ne, Le),
                xt
              );
            nc(ne, Le);
          }
          return typeof Le == "function" && Lf(ne, Le), typeof Le == "symbol" && zf(ne, Le), null;
        }
        function On(ie, ne, ue, Le) {
          if (typeof ue != "object" || ue === null) return Le;
          switch (ue.$$typeof) {
            case ul:
            case oi:
              R(ie, ne, ue);
              var xt = ue.key;
              if (typeof xt != "string") break;
              if (Le === null) {
                Le = /* @__PURE__ */ new Set(), Le.add(xt);
                break;
              }
              if (!Le.has(xt)) {
                Le.add(xt);
                break;
              }
              Q(ne, function() {
                console.error(
                  "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.",
                  xt
                );
              });
              break;
            case $a:
              ue = Au(ue), On(ie, ne, ue, Le);
          }
          return Le;
        }
        function Ed(ie, ne, ue, Le) {
          for (var xt = null, Tn = null, Kt = null, $t = ne, sn = ne = 0, ai = null; $t !== null && sn < ue.length; sn++) {
            $t.index > sn ? (ai = $t, $t = null) : ai = $t.sibling;
            var Di = vt(
              ie,
              $t,
              ue[sn],
              Le
            );
            if (Di === null) {
              $t === null && ($t = ai);
              break;
            }
            xt = On(
              ie,
              Di,
              ue[sn],
              xt
            ), n && $t && Di.alternate === null && a(ie, $t), ne = b(Di, ne, sn), Kt === null ? Tn = Di : Kt.sibling = Di, Kt = Di, $t = ai;
          }
          if (sn === ue.length)
            return c(ie, $t), bn && ct(ie, sn), Tn;
          if ($t === null) {
            for (; sn < ue.length; sn++)
              $t = ot(ie, ue[sn], Le), $t !== null && (xt = On(
                ie,
                $t,
                ue[sn],
                xt
              ), ne = b(
                $t,
                ne,
                sn
              ), Kt === null ? Tn = $t : Kt.sibling = $t, Kt = $t);
            return bn && ct(ie, sn), Tn;
          }
          for ($t = m($t); sn < ue.length; sn++)
            ai = xn(
              $t,
              ie,
              sn,
              ue[sn],
              Le
            ), ai !== null && (xt = On(
              ie,
              ai,
              ue[sn],
              xt
            ), n && ai.alternate !== null && $t.delete(
              ai.key === null ? sn : ai.key
            ), ne = b(
              ai,
              ne,
              sn
            ), Kt === null ? Tn = ai : Kt.sibling = ai, Kt = ai);
          return n && $t.forEach(function(Al) {
            return a(ie, Al);
          }), bn && ct(ie, sn), Tn;
        }
        function Md(ie, ne, ue, Le) {
          if (ue == null)
            throw Error("An iterable object provided no iterator.");
          for (var xt = null, Tn = null, Kt = ne, $t = ne = 0, sn = null, ai = null, Di = ue.next(); Kt !== null && !Di.done; $t++, Di = ue.next()) {
            Kt.index > $t ? (sn = Kt, Kt = null) : sn = Kt.sibling;
            var Al = vt(ie, Kt, Di.value, Le);
            if (Al === null) {
              Kt === null && (Kt = sn);
              break;
            }
            ai = On(
              ie,
              Al,
              Di.value,
              ai
            ), n && Kt && Al.alternate === null && a(ie, Kt), ne = b(Al, ne, $t), Tn === null ? xt = Al : Tn.sibling = Al, Tn = Al, Kt = sn;
          }
          if (Di.done)
            return c(ie, Kt), bn && ct(ie, $t), xt;
          if (Kt === null) {
            for (; !Di.done; $t++, Di = ue.next())
              Kt = ot(ie, Di.value, Le), Kt !== null && (ai = On(
                ie,
                Kt,
                Di.value,
                ai
              ), ne = b(
                Kt,
                ne,
                $t
              ), Tn === null ? xt = Kt : Tn.sibling = Kt, Tn = Kt);
            return bn && ct(ie, $t), xt;
          }
          for (Kt = m(Kt); !Di.done; $t++, Di = ue.next())
            sn = xn(
              Kt,
              ie,
              $t,
              Di.value,
              Le
            ), sn !== null && (ai = On(
              ie,
              sn,
              Di.value,
              ai
            ), n && sn.alternate !== null && Kt.delete(
              sn.key === null ? $t : sn.key
            ), ne = b(
              sn,
              ne,
              $t
            ), Tn === null ? xt = sn : Tn.sibling = sn, Tn = sn);
          return n && Kt.forEach(function(G2) {
            return a(ie, G2);
          }), bn && ct(ie, $t), xt;
        }
        function eo(ie, ne, ue, Le) {
          if (typeof ue == "object" && ue !== null && ue.type === cl && ue.key === null && (tc(ue, null, ie), ue = ue.props.children), typeof ue == "object" && ue !== null) {
            switch (ue.$$typeof) {
              case ul:
                var xt = Li(ue._debugInfo);
                e: {
                  for (var Tn = ue.key; ne !== null; ) {
                    if (ne.key === Tn) {
                      if (Tn = ue.type, Tn === cl) {
                        if (ne.tag === 7) {
                          c(
                            ie,
                            ne.sibling
                          ), Le = g(
                            ne,
                            ue.props.children
                          ), Le.return = ie, Le._debugOwner = ue._owner, Le._debugInfo = un, tc(ue, Le, ie), ie = Le;
                          break e;
                        }
                      } else if (ne.elementType === Tn || Vg(
                        ne,
                        ue
                      ) || typeof Tn == "object" && Tn !== null && Tn.$$typeof === $a && Au(Tn) === ne.type) {
                        c(
                          ie,
                          ne.sibling
                        ), Le = g(ne, ue.props), Zl(Le, ue), Le.return = ie, Le._debugOwner = ue._owner, Le._debugInfo = un, ie = Le;
                        break e;
                      }
                      c(ie, ne);
                      break;
                    } else a(ie, ne);
                    ne = ne.sibling;
                  }
                  ue.type === cl ? (Le = ll(
                    ue.props.children,
                    ie.mode,
                    Le,
                    ue.key
                  ), Le.return = ie, Le._debugOwner = ie, Le._debugInfo = un, tc(ue, Le, ie), ie = Le) : (Le = Oh(
                    ue,
                    ie.mode,
                    Le
                  ), Zl(Le, ue), Le.return = ie, Le._debugInfo = un, ie = Le);
                }
                return ie = O(ie), un = xt, ie;
              case oi:
                e: {
                  for (xt = ue, ue = xt.key; ne !== null; ) {
                    if (ne.key === ue)
                      if (ne.tag === 4 && ne.stateNode.containerInfo === xt.containerInfo && ne.stateNode.implementation === xt.implementation) {
                        c(
                          ie,
                          ne.sibling
                        ), Le = g(
                          ne,
                          xt.children || []
                        ), Le.return = ie, ie = Le;
                        break e;
                      } else {
                        c(ie, ne);
                        break;
                      }
                    else a(ie, ne);
                    ne = ne.sibling;
                  }
                  Le = Lh(
                    xt,
                    ie.mode,
                    Le
                  ), Le.return = ie, ie = Le;
                }
                return O(ie);
              case $a:
                return xt = Li(ue._debugInfo), ue = Au(ue), ie = eo(
                  ie,
                  ne,
                  ue,
                  Le
                ), un = xt, ie;
            }
            if (Pi(ue))
              return xt = Li(ue._debugInfo), ie = Ed(
                ie,
                ne,
                ue,
                Le
              ), un = xt, ie;
            if (w(ue)) {
              if (xt = Li(ue._debugInfo), Tn = w(ue), typeof Tn != "function")
                throw Error(
                  "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
                );
              var Kt = Tn.call(ue);
              return Kt === ue ? (ie.tag !== 0 || Object.prototype.toString.call(ie.type) !== "[object GeneratorFunction]" || Object.prototype.toString.call(Kt) !== "[object Generator]") && (ZM || console.error(
                "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
              ), ZM = !0) : ue.entries !== Tn || VS || (console.error(
                "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
              ), VS = !0), ie = Md(
                ie,
                ne,
                Kt,
                Le
              ), un = xt, ie;
            }
            if (typeof ue.then == "function")
              return xt = Li(ue._debugInfo), ie = eo(
                ie,
                ne,
                jl(ue),
                Le
              ), un = xt, ie;
            if (ue.$$typeof === Is)
              return eo(
                ie,
                ne,
                Br(ie, ue),
                Le
              );
            nc(ie, ue);
          }
          return typeof ue == "string" && ue !== "" || typeof ue == "number" || typeof ue == "bigint" ? (xt = "" + ue, ne !== null && ne.tag === 6 ? (c(
            ie,
            ne.sibling
          ), Le = g(ne, xt), Le.return = ie, ie = Le) : (c(ie, ne), Le = xm(
            xt,
            ie.mode,
            Le
          ), Le.return = ie, Le._debugOwner = ie, Le._debugInfo = un, ie = Le), O(ie)) : (typeof ue == "function" && Lf(ie, ue), typeof ue == "symbol" && zf(ie, ue), c(ie, ne));
        }
        return function(ie, ne, ue, Le) {
          var xt = un;
          un = null;
          try {
            Km = 0;
            var Tn = eo(
              ie,
              ne,
              ue,
              Le
            );
            return sd = null, Tn;
          } catch (ai) {
            if (ai === cy) throw ai;
            var Kt = v(29, ai, null, ie.mode);
            Kt.lanes = Le, Kt.return = ie;
            var $t = Kt._debugInfo = un;
            if (Kt._debugOwner = ie._debugOwner, $t != null) {
              for (var sn = $t.length - 1; 0 <= sn; sn--)
                if (typeof $t[sn].stack == "string") {
                  Kt._debugOwner = $t[sn];
                  break;
                }
            }
            return Kt;
          } finally {
            un = xt;
          }
        };
      }
      function Kl(n, a) {
        var c = Io;
        we(dy, c, n), we(rd, a, n), Io = c | a.baseLanes;
      }
      function ic(n) {
        we(dy, Io, n), we(
          rd,
          rd.current,
          n
        );
      }
      function Ql(n) {
        Io = dy.current, Te(rd, n), Te(dy, n);
      }
      function Nr(n) {
        var a = n.alternate;
        we(
          ea,
          ea.current & od,
          n
        ), we(Er, n, n), Bo === null && (a === null || rd.current !== null || a.memoizedState !== null) && (Bo = n);
      }
      function Ep(n) {
        if (n.tag === 22) {
          if (we(ea, ea.current, n), we(Er, n, n), Bo === null) {
            var a = n.alternate;
            a !== null && a.memoizedState !== null && (Bo = n);
          }
        } else $s(n);
      }
      function $s(n) {
        we(ea, ea.current, n), we(
          Er,
          Er.current,
          n
        );
      }
      function er(n) {
        Te(Er, n), Bo === n && (Bo = null), Te(ea, n);
      }
      function ac(n) {
        for (var a = n; a !== null; ) {
          if (a.tag === 13) {
            var c = a.memoizedState;
            if (c !== null && (c = c.dehydrated, c === null || Fs(c) || Lm(c)))
              return a;
          } else if (a.tag === 19 && a.memoizedProps.revealOrder !== void 0) {
            if ((a.flags & 128) !== 0) return a;
          } else if (a.child !== null) {
            a.child.return = a, a = a.child;
            continue;
          }
          if (a === n) break;
          for (; a.sibling === null; ) {
            if (a.return === null || a.return === n) return null;
            a = a.return;
          }
          a.sibling.return = a.return, a = a.sibling;
        }
        return null;
      }
      function jt() {
        var n = Ae;
        Tr === null ? Tr = [n] : Tr.push(n);
      }
      function je() {
        var n = Ae;
        if (Tr !== null && (El++, Tr[El] !== n)) {
          var a = U(
            Zt
          );
          if (!$M.has(a) && ($M.add(a), Tr !== null)) {
            for (var c = "", m = 0; m <= El; m++) {
              var g = Tr[m], b = m === El ? n : g;
              for (g = m + 1 + ". " + g; 30 > g.length; )
                g += " ";
              g += b + `
`, c += g;
            }
            console.error(
              `React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`,
              a,
              c
            );
          }
        }
      }
      function ko(n) {
        n == null || Pi(n) || console.error(
          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
          Ae,
          typeof n
        );
      }
      function kl() {
        var n = U(Zt);
        tb.has(n) || (tb.add(n), console.error(
          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
          n
        ));
      }
      function ri() {
        throw Error(
          `Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.`
        );
      }
      function Bf(n, a) {
        if (Jm) return !1;
        if (a === null)
          return console.error(
            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
            Ae
          ), !1;
        n.length !== a.length && console.error(
          `The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`,
          Ae,
          "[" + a.join(", ") + "]",
          "[" + n.join(", ") + "]"
        );
        for (var c = 0; c < a.length && c < n.length; c++)
          if (!ge(n[c], a[c])) return !1;
        return !0;
      }
      function Mp(n, a, c, m, g, b) {
        Ru = b, Zt = a, Tr = n !== null ? n._debugHookTypes : null, El = -1, Jm = n !== null && n.type !== a.type, (Object.prototype.toString.call(c) === "[object AsyncFunction]" || Object.prototype.toString.call(c) === "[object AsyncGeneratorFunction]") && (b = U(
          Zt
        ), FS.has(b) || (FS.add(b), console.error(
          "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
        ))), a.memoizedState = null, a.updateQueue = null, a.lanes = 0, Me.H = n !== null && n.memoizedState !== null ? Du : Tr !== null ? Xc : Cu, Gc = b = (a.mode & 8) !== ei;
        var O = HS(c, m, g);
        if (Gc = !1, ud && (O = Pf(
          a,
          c,
          m,
          g
        )), b) {
          ut(!0);
          try {
            O = Pf(
              a,
              c,
              m,
              g
            );
          } finally {
            ut(!1);
          }
        }
        return zi(n, a), O;
      }
      function zi(n, a) {
        a._debugHookTypes = Tr, a.dependencies === null ? xl !== null && (a.dependencies = {
          lanes: 0,
          firstContext: null,
          _debugThenableState: xl
        }) : a.dependencies._debugThenableState = xl, Me.H = Po;
        var c = Wn !== null && Wn.next !== null;
        if (Ru = 0, Tr = Ae = Vi = Wn = Zt = null, El = -1, n !== null && (n.flags & 31457280) !== (a.flags & 31457280) && console.error(
          "Internal React error: Expected static flag was missing. Please notify the React team."
        ), py = !1, km = 0, xl = null, c)
          throw Error(
            "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
          );
        n === null || ha || (n = n.dependencies, n !== null && vh(n) && (ha = !0)), hy ? (hy = !1, n = !0) : n = !1, n && (a = U(a) || "Unknown", eb.has(a) || FS.has(a) || (eb.add(a), console.error(
          "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
        )));
      }
      function Pf(n, a, c, m) {
        Zt = n;
        var g = 0;
        do {
          if (ud && (xl = null), km = 0, ud = !1, g >= U2)
            throw Error(
              "Too many re-renders. React limits the number of renders to prevent an infinite loop."
            );
          if (g += 1, Jm = !1, Vi = Wn = null, n.updateQueue != null) {
            var b = n.updateQueue;
            b.lastEffect = null, b.events = null, b.stores = null, b.memoCache != null && (b.memoCache.index = 0);
          }
          El = -1, Me.H = qc, b = HS(a, c, m);
        } while (ud);
        return b;
      }
      function dg() {
        var n = Me.H, a = n.useState()[0];
        return a = typeof a.then == "function" ? Jl(a) : a, n = n.useState()[0], (Wn !== null ? Wn.memoizedState : null) !== n && (Zt.flags |= 1024), a;
      }
      function Hf() {
        var n = my !== 0;
        return my = 0, n;
      }
      function If(n, a, c) {
        a.updateQueue = n.updateQueue, a.flags = (a.mode & 16) !== ei ? a.flags & -201328645 : a.flags & -2053, n.lanes &= ~c;
      }
      function Vf(n) {
        if (py) {
          for (n = n.memoizedState; n !== null; ) {
            var a = n.queue;
            a !== null && (a.pending = null), n = n.next;
          }
          py = !1;
        }
        Ru = 0, Tr = Vi = Wn = Zt = null, El = -1, Ae = null, ud = !1, km = my = 0, xl = null;
      }
      function Bi() {
        var n = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return Vi === null ? Zt.memoizedState = Vi = n : Vi = Vi.next = n, Vi;
      }
      function Cn() {
        if (Wn === null) {
          var n = Zt.alternate;
          n = n !== null ? n.memoizedState : null;
        } else n = Wn.next;
        var a = Vi === null ? Zt.memoizedState : Vi.next;
        if (a !== null)
          Vi = a, Wn = n;
        else {
          if (n === null)
            throw Zt.alternate === null ? Error(
              "Update hook called on initial render. This is likely a bug in React. Please file an issue."
            ) : Error("Rendered more hooks than during the previous render.");
          Wn = n, n = {
            memoizedState: Wn.memoizedState,
            baseState: Wn.baseState,
            baseQueue: Wn.baseQueue,
            queue: Wn.queue,
            next: null
          }, Vi === null ? Zt.memoizedState = Vi = n : Vi = Vi.next = n;
        }
        return Vi;
      }
      function Jl(n) {
        var a = km;
        return km += 1, xl === null && (xl = yp()), n = _p(xl, n, a), a = Zt, (Vi === null ? a.memoizedState : Vi.next) === null && (a = a.alternate, Me.H = a !== null && a.memoizedState !== null ? Du : Cu), n;
      }
      function Or(n) {
        if (n !== null && typeof n == "object") {
          if (typeof n.then == "function") return Jl(n);
          if (n.$$typeof === Is) return Zn(n);
        }
        throw Error("An unsupported type was passed to use(): " + String(n));
      }
      function fo(n) {
        var a = null, c = Zt.updateQueue;
        if (c !== null && (a = c.memoCache), a == null) {
          var m = Zt.alternate;
          m !== null && (m = m.updateQueue, m !== null && (m = m.memoCache, m != null && (a = {
            data: m.data.map(function(g) {
              return g.slice();
            }),
            index: 0
          })));
        }
        if (a == null && (a = { data: [], index: 0 }), c === null && (c = GS(), Zt.updateQueue = c), c.memoCache = a, c = a.data[a.index], c === void 0 || Jm)
          for (c = a.data[a.index] = Array(n), m = 0; m < n; m++)
            c[m] = Vh;
        else
          c.length !== n && console.error(
            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
            c.length,
            n
          );
        return a.index++, c;
      }
      function ja(n, a) {
        return typeof a == "function" ? a(n) : a;
      }
      function sc(n, a, c) {
        var m = Bi();
        if (c !== void 0) {
          var g = c(a);
          if (Gc) {
            ut(!0);
            try {
              c(a);
            } finally {
              ut(!1);
            }
          }
        } else g = a;
        return m.memoizedState = m.baseState = g, n = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: n,
          lastRenderedState: g
        }, m.queue = n, n = n.dispatch = vg.bind(
          null,
          Zt,
          n
        ), [m.memoizedState, n];
      }
      function Jo(n) {
        var a = Cn();
        return rc(a, Wn, n);
      }
      function rc(n, a, c) {
        var m = n.queue;
        if (m === null)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        m.lastRenderedReducer = c;
        var g = n.baseQueue, b = m.pending;
        if (b !== null) {
          if (g !== null) {
            var O = g.next;
            g.next = b.next, b.next = O;
          }
          a.baseQueue !== g && console.error(
            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
          ), a.baseQueue = g = b, m.pending = null;
        }
        if (b = n.baseState, g === null) n.memoizedState = b;
        else {
          a = g.next;
          var G = O = null, re = null, Ee = a, ke = !1;
          do {
            var ot = Ee.lane & -536870913;
            if (ot !== Ee.lane ? (yn & ot) === ot : (Ru & ot) === ot) {
              var vt = Ee.revertLane;
              if (vt === 0)
                re !== null && (re = re.next = {
                  lane: 0,
                  revertLane: 0,
                  action: Ee.action,
                  hasEagerState: Ee.hasEagerState,
                  eagerState: Ee.eagerState,
                  next: null
                }), ot === Ic && (ke = !0);
              else if ((Ru & vt) === vt) {
                Ee = Ee.next, vt === Ic && (ke = !0);
                continue;
              } else
                ot = {
                  lane: 0,
                  revertLane: Ee.revertLane,
                  action: Ee.action,
                  hasEagerState: Ee.hasEagerState,
                  eagerState: Ee.eagerState,
                  next: null
                }, re === null ? (G = re = ot, O = b) : re = re.next = ot, Zt.lanes |= vt, Uu |= vt;
              ot = Ee.action, Gc && c(b, ot), b = Ee.hasEagerState ? Ee.eagerState : c(b, ot);
            } else
              vt = {
                lane: ot,
                revertLane: Ee.revertLane,
                action: Ee.action,
                hasEagerState: Ee.hasEagerState,
                eagerState: Ee.eagerState,
                next: null
              }, re === null ? (G = re = vt, O = b) : re = re.next = vt, Zt.lanes |= ot, Uu |= ot;
            Ee = Ee.next;
          } while (Ee !== null && Ee !== a);
          if (re === null ? O = b : re.next = G, !ge(b, n.memoizedState) && (ha = !0, ke && (c = id, c !== null)))
            throw c;
          n.memoizedState = b, n.baseState = O, n.baseQueue = re, m.lastRenderedState = b;
        }
        return g === null && (m.lanes = 0), [n.memoizedState, m.dispatch];
      }
      function $o(n) {
        var a = Cn(), c = a.queue;
        if (c === null)
          throw Error(
            "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
          );
        c.lastRenderedReducer = n;
        var m = c.dispatch, g = c.pending, b = a.memoizedState;
        if (g !== null) {
          c.pending = null;
          var O = g = g.next;
          do
            b = n(b, O.action), O = O.next;
          while (O !== g);
          ge(b, a.memoizedState) || (ha = !0), a.memoizedState = b, a.baseQueue === null && (a.baseState = b), c.lastRenderedState = b;
        }
        return [b, m];
      }
      function oc(n, a, c) {
        var m = Zt, g = Bi();
        if (bn) {
          if (c === void 0)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          var b = c();
          ld || b === c() || (console.error(
            "The result of getServerSnapshot should be cached to avoid an infinite loop"
          ), ld = !0);
        } else {
          if (b = a(), ld || (c = a(), ge(b, c) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), ld = !0)), Qn === null)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          (yn & 60) !== 0 || Ff(m, a, b);
        }
        return g.memoizedState = b, c = { value: b, getSnapshot: a }, g.queue = c, tu(
          tr.bind(null, m, c, n),
          [n]
        ), m.flags |= 2048, mo(
          br | ta,
          bp.bind(
            null,
            m,
            c,
            b,
            a
          ),
          { destroy: void 0 },
          null
        ), b;
      }
      function lc(n, a, c) {
        var m = Zt, g = Cn(), b = bn;
        if (b) {
          if (c === void 0)
            throw Error(
              "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
            );
          c = c();
        } else if (c = a(), !ld) {
          var O = a();
          ge(c, O) || (console.error(
            "The result of getSnapshot should be cached to avoid an infinite loop"
          ), ld = !0);
        }
        (O = !ge(
          (Wn || g).memoizedState,
          c
        )) && (g.memoizedState = c, ha = !0), g = g.queue;
        var G = tr.bind(null, m, g, n);
        if (ra(2048, ta, G, [n]), g.getSnapshot !== a || O || Vi !== null && Vi.memoizedState.tag & br) {
          if (m.flags |= 2048, mo(
            br | ta,
            bp.bind(
              null,
              m,
              g,
              c,
              a
            ),
            { destroy: void 0 },
            null
          ), Qn === null)
            throw Error(
              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
            );
          b || (Ru & 60) !== 0 || Ff(m, a, c);
        }
        return c;
      }
      function Ff(n, a, c) {
        n.flags |= 16384, n = { getSnapshot: a, value: c }, a = Zt.updateQueue, a === null ? (a = GS(), Zt.updateQueue = a, a.stores = [n]) : (c = a.stores, c === null ? a.stores = [n] : c.push(n));
      }
      function bp(n, a, c, m) {
        a.value = c, a.getSnapshot = m, Gf(a) && pg(n);
      }
      function tr(n, a, c) {
        return c(function() {
          Gf(a) && pg(n);
        });
      }
      function Gf(n) {
        var a = n.getSnapshot;
        n = n.value;
        try {
          var c = a();
          return !ge(n, c);
        } catch {
          return !0;
        }
      }
      function pg(n) {
        var a = pe(n, 2);
        a !== null && ni(a, n, 2);
      }
      function Xf(n) {
        var a = Bi();
        if (typeof n == "function") {
          var c = n;
          if (n = c(), Gc) {
            ut(!0);
            try {
              c();
            } finally {
              ut(!1);
            }
          }
        }
        return a.memoizedState = a.baseState = n, a.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: ja,
          lastRenderedState: n
        }, a;
      }
      function nr(n) {
        n = Xf(n);
        var a = n.queue, c = hs.bind(
          null,
          Zt,
          a
        );
        return a.dispatch = c, [n.memoizedState, c];
      }
      function Ns(n) {
        var a = Bi();
        a.memoizedState = a.baseState = n;
        var c = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        return a.queue = c, a = ih.bind(
          null,
          Zt,
          !0,
          c
        ), c.dispatch = a, [n, a];
      }
      function qf(n, a) {
        var c = Cn();
        return Yf(c, Wn, n, a);
      }
      function Yf(n, a, c, m) {
        return n.baseState = c, rc(
          n,
          Wn,
          typeof m == "function" ? m : ja
        );
      }
      function $l(n, a) {
        var c = Cn();
        return Wn !== null ? Yf(c, Wn, n, a) : (c.baseState = n, [n, c.queue.dispatch]);
      }
      function Wf(n, a, c, m, g) {
        if (ah(n))
          throw Error("Cannot update form state while rendering.");
        if (n = a.action, n !== null) {
          var b = {
            payload: g,
            action: n,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(O) {
              b.listeners.push(O);
            }
          };
          Me.T !== null ? c(!0) : b.isTransition = !1, m(b), c = a.pending, c === null ? (b.next = a.pending = b, ho(a, b)) : (b.next = c.next, a.pending = c.next = b);
        }
      }
      function ho(n, a) {
        var c = a.action, m = a.payload, g = n.state;
        if (a.isTransition) {
          var b = Me.T, O = {};
          Me.T = O, Me.T._updatedFibers = /* @__PURE__ */ new Set();
          try {
            var G = c(g, m), re = Me.S;
            re !== null && re(O, G), Yi(n, a, G);
          } catch (Ee) {
            jf(n, a, Ee);
          } finally {
            Me.T = b, b === null && O._updatedFibers && (n = O._updatedFibers.size, O._updatedFibers.clear(), 10 < n && console.warn(
              "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
            ));
          }
        } else
          try {
            O = c(g, m), Yi(n, a, O);
          } catch (Ee) {
            jf(n, a, Ee);
          }
      }
      function Yi(n, a, c) {
        c !== null && typeof c == "object" && typeof c.then == "function" ? (c.then(
          function(m) {
            uc(n, a, m);
          },
          function(m) {
            return jf(n, a, m);
          }
        ), a.isTransition || console.error(
          "An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`"
        )) : uc(n, a, c);
      }
      function uc(n, a, c) {
        a.status = "fulfilled", a.value = c, Zf(a), n.state = c, a = n.pending, a !== null && (c = a.next, c === a ? n.pending = null : (c = c.next, a.next = c, ho(n, c)));
      }
      function jf(n, a, c) {
        var m = n.pending;
        if (n.pending = null, m !== null) {
          m = m.next;
          do
            a.status = "rejected", a.reason = c, Zf(a), a = a.next;
          while (a !== m);
        }
        n.action = null;
      }
      function Zf(n) {
        n = n.listeners;
        for (var a = 0; a < n.length; a++) (0, n[a])();
      }
      function eu(n, a) {
        return a;
      }
      function po(n, a) {
        if (bn) {
          var c = Qn.formState;
          if (c !== null) {
            e: {
              var m = Zt;
              if (bn) {
                if (Aa) {
                  var g = li(
                    Aa,
                    zo
                  );
                  if (g) {
                    Aa = Kr(g), m = $g(g);
                    break e;
                  }
                }
                Qt(m);
              }
              m = !1;
            }
            m && (a = c[0]);
          }
        }
        c = Bi(), c.memoizedState = c.baseState = a, m = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: eu,
          lastRenderedState: a
        }, c.queue = m, c = hs.bind(
          null,
          Zt,
          m
        ), m.dispatch = c, m = Xf(!1);
        var b = ih.bind(
          null,
          Zt,
          !1,
          m.queue
        );
        return m = Bi(), g = {
          state: a,
          dispatch: null,
          action: n,
          pending: null
        }, m.queue = g, c = Wf.bind(
          null,
          Zt,
          g,
          b,
          c
        ), g.dispatch = c, m.memoizedState = n, [a, c, !1];
      }
      function el(n) {
        var a = Cn();
        return Tp(a, Wn, n);
      }
      function Tp(n, a, c) {
        a = rc(
          n,
          a,
          eu
        )[0], n = Jo(ja)[0], a = typeof a == "object" && a !== null && typeof a.then == "function" ? Jl(a) : a;
        var m = Cn(), g = m.queue, b = g.dispatch;
        return c !== m.memoizedState && (Zt.flags |= 2048, mo(
          br | ta,
          Za.bind(null, g, c),
          { destroy: void 0 },
          null
        )), [a, b, n];
      }
      function Za(n, a) {
        n.action = a;
      }
      function cc(n) {
        var a = Cn(), c = Wn;
        if (c !== null)
          return Tp(a, c, n);
        Cn(), a = a.memoizedState, c = Cn();
        var m = c.queue.dispatch;
        return c.memoizedState = n, [a, m, !1];
      }
      function mo(n, a, c, m) {
        return n = { tag: n, create: a, inst: c, deps: m, next: null }, a = Zt.updateQueue, a === null && (a = GS(), Zt.updateQueue = a), c = a.lastEffect, c === null ? a.lastEffect = n.next = n : (m = c.next, c.next = n, n.next = m, a.lastEffect = n), n;
      }
      function Kf(n) {
        var a = Bi();
        return n = { current: n }, a.memoizedState = n;
      }
      function vo(n, a, c, m) {
        var g = Bi();
        Zt.flags |= n, g.memoizedState = mo(
          br | a,
          c,
          { destroy: void 0 },
          m === void 0 ? null : m
        );
      }
      function ra(n, a, c, m) {
        var g = Cn();
        m = m === void 0 ? null : m;
        var b = g.memoizedState.inst;
        Wn !== null && m !== null && Bf(m, Wn.memoizedState.deps) ? g.memoizedState = mo(a, c, b, m) : (Zt.flags |= n, g.memoizedState = mo(
          br | a,
          c,
          b,
          m
        ));
      }
      function tu(n, a) {
        (Zt.mode & 16) !== ei && (Zt.mode & 64) === ei ? vo(142608384, ta, n, a) : vo(8390656, ta, n, a);
      }
      function Qf(n, a) {
        var c = 4194308;
        return (Zt.mode & 16) !== ei && (c |= 67108864), vo(c, Ra, n, a);
      }
      function fc(n, a) {
        if (typeof a == "function") {
          n = n();
          var c = a(n);
          return function() {
            typeof c == "function" ? c() : a(null);
          };
        }
        if (a != null)
          return a.hasOwnProperty("current") || console.error(
            "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
            "an object with keys {" + Object.keys(a).join(", ") + "}"
          ), n = n(), a.current = n, function() {
            a.current = null;
          };
      }
      function tl(n, a, c) {
        typeof a != "function" && console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          a !== null ? typeof a : "null"
        ), c = c != null ? c.concat([n]) : null;
        var m = 4194308;
        (Zt.mode & 16) !== ei && (m |= 67108864), vo(
          m,
          Ra,
          fc.bind(null, a, n),
          c
        );
      }
      function qn(n, a, c) {
        typeof a != "function" && console.error(
          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
          a !== null ? typeof a : "null"
        ), c = c != null ? c.concat([n]) : null, ra(
          4,
          Ra,
          fc.bind(null, a, n),
          c
        );
      }
      function Ap(n, a) {
        return Bi().memoizedState = [
          n,
          a === void 0 ? null : a
        ], n;
      }
      function kf(n, a) {
        var c = Cn();
        a = a === void 0 ? null : a;
        var m = c.memoizedState;
        return a !== null && Bf(a, m[1]) ? m[0] : (c.memoizedState = [n, a], n);
      }
      function Jf(n, a) {
        var c = Bi();
        a = a === void 0 ? null : a;
        var m = n();
        if (Gc) {
          ut(!0);
          try {
            n();
          } finally {
            ut(!1);
          }
        }
        return c.memoizedState = [m, a], m;
      }
      function go(n, a) {
        var c = Cn();
        a = a === void 0 ? null : a;
        var m = c.memoizedState;
        if (a !== null && Bf(a, m[1]))
          return m[0];
        if (m = n(), Gc) {
          ut(!0);
          try {
            n();
          } finally {
            ut(!1);
          }
        }
        return c.memoizedState = [m, a], m;
      }
      function ir(n, a) {
        var c = Bi();
        return Lr(c, n, a);
      }
      function Rp(n, a) {
        var c = Cn();
        return wa(
          c,
          Wn.memoizedState,
          n,
          a
        );
      }
      function Cp(n, a) {
        var c = Cn();
        return Wn === null ? Lr(c, n, a) : wa(
          c,
          Wn.memoizedState,
          n,
          a
        );
      }
      function Lr(n, a, c) {
        return c === void 0 || (Ru & 1073741824) !== 0 ? n.memoizedState = a : (n.memoizedState = c, n = cm(), Zt.lanes |= n, Uu |= n, c);
      }
      function wa(n, a, c, m) {
        return ge(c, a) ? c : rd.current !== null ? (n = Lr(n, c, m), ge(n, a) || (ha = !0), n) : (Ru & 42) === 0 ? (ha = !0, n.memoizedState = c) : (n = cm(), Zt.lanes |= n, Uu |= n, a);
      }
      function Dp(n, a, c, m, g) {
        var b = jr();
        ki(
          b !== 0 && 8 > b ? b : 8
        );
        var O = Me.T, G = {};
        Me.T = G, ih(n, !1, a, c), G._updatedFibers = /* @__PURE__ */ new Set();
        try {
          var re = g(), Ee = Me.S;
          if (Ee !== null && Ee(G, re), re !== null && typeof re == "object" && typeof re.then == "function") {
            var ke = va(
              re,
              m
            );
            nl(
              n,
              a,
              ke,
              ka(n)
            );
          } else
            nl(
              n,
              a,
              m,
              ka(n)
            );
        } catch (ot) {
          nl(
            n,
            a,
            { then: function() {
            }, status: "rejected", reason: ot },
            ka(n)
          );
        } finally {
          ki(b), Me.T = O, O === null && G._updatedFibers && (n = G._updatedFibers.size, G._updatedFibers.clear(), 10 < n && console.warn(
            "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
          ));
        }
      }
      function wp(n) {
        var a = n.memoizedState;
        if (a !== null) return a;
        a = {
          memoizedState: dr,
          baseState: dr,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: ja,
            lastRenderedState: dr
          },
          next: null
        };
        var c = {};
        return a.next = {
          memoizedState: c,
          baseState: c,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: ja,
            lastRenderedState: c
          },
          next: null
        }, n.memoizedState = a, n = n.alternate, n !== null && (n.memoizedState = a), a;
      }
      function $f() {
        var n = Xf(!1);
        return n = Dp.bind(
          null,
          Zt,
          n.queue,
          !0,
          !1
        ), Bi().memoizedState = n, [!1, n];
      }
      function eh() {
        var n = Jo(ja)[0], a = Cn().memoizedState;
        return [
          typeof n == "boolean" ? n : Jl(n),
          a
        ];
      }
      function th() {
        var n = $o(ja)[0], a = Cn().memoizedState;
        return [
          typeof n == "boolean" ? n : Jl(n),
          a
        ];
      }
      function ar() {
        return Zn(Zr);
      }
      function nh() {
        var n = Bi(), a = Qn.identifierPrefix;
        if (bn) {
          var c = fa, m = an;
          c = (m & ~(1 << 32 - Ji(m) - 1)).toString(32) + c, a = ":" + a + "R" + c, c = my++, 0 < c && (a += "H" + c.toString(32)), a += ":";
        } else
          c = w2++, a = ":" + a + "r" + c.toString(32) + ":";
        return n.memoizedState = a;
      }
      function Up() {
        return Bi().memoizedState = mg.bind(
          null,
          Zt
        );
      }
      function mg(n, a) {
        for (var c = n.return; c !== null; ) {
          switch (c.tag) {
            case 24:
            case 3:
              var m = ka(c);
              n = Wa(m);
              var g = fi(c, n, m);
              g !== null && (ni(g, c, m), Yl(g, c, m)), c = gh(), a != null && g !== null && console.error(
                "The seed argument is not enabled outside experimental channels."
              ), n.payload = { cache: c };
              return;
          }
          c = c.return;
        }
      }
      function vg(n, a, c, m) {
        typeof m == "function" && console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        ), m = ka(n), c = {
          lane: m,
          revertLane: 0,
          action: c,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, ah(n) ? sh(a, c) : (c = ve(
          n,
          a,
          c,
          m
        ), c !== null && (ni(
          c,
          n,
          m
        ), ga(
          c,
          a,
          m
        ))), Re(n, m);
      }
      function hs(n, a, c, m) {
        typeof m == "function" && console.error(
          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
        ), m = ka(n), nl(
          n,
          a,
          c,
          m
        ), Re(n, m);
      }
      function nl(n, a, c, m) {
        var g = {
          lane: m,
          revertLane: 0,
          action: c,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (ah(n)) sh(a, g);
        else {
          var b = n.alternate;
          if (n.lanes === 0 && (b === null || b.lanes === 0) && (b = a.lastRenderedReducer, b !== null)) {
            var O = Me.H;
            Me.H = ss;
            try {
              var G = a.lastRenderedState, re = b(G, c);
              if (g.hasEagerState = !0, g.eagerState = re, ge(re, G))
                return ae(n, a, g, 0), Qn === null && V(), !1;
            } catch {
            } finally {
              Me.H = O;
            }
          }
          if (c = ve(n, a, g, m), c !== null)
            return ni(c, n, m), ga(c, a, m), !0;
        }
        return !1;
      }
      function ih(n, a, c, m) {
        if (Me.T === null && Ic === 0 && console.error(
          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
        ), m = {
          lane: 2,
          revertLane: Js(),
          action: m,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, ah(n)) {
          if (a)
            throw Error("Cannot update optimistic state while rendering.");
          console.error("Cannot call startTransition while rendering.");
        } else
          a = ve(
            n,
            c,
            m,
            2
          ), a !== null && ni(a, n, 2);
        Re(n, 2);
      }
      function ah(n) {
        var a = n.alternate;
        return n === Zt || a !== null && a === Zt;
      }
      function sh(n, a) {
        ud = py = !0;
        var c = n.pending;
        c === null ? a.next = a : (a.next = c.next, c.next = a), n.pending = a;
      }
      function ga(n, a, c) {
        if ((c & 4194176) !== 0) {
          var m = a.lanes;
          m &= n.pendingLanes, c |= m, a.lanes = c, Ce(n, c);
        }
      }
      function rh(n) {
        if (n !== null && typeof n != "function") {
          var a = String(n);
          hb.has(a) || (hb.add(a), console.error(
            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
            n
          ));
        }
      }
      function ya(n, a, c, m) {
        var g = n.memoizedState, b = c(m, g);
        if (n.mode & 8) {
          ut(!0);
          try {
            b = c(m, g);
          } finally {
            ut(!1);
          }
        }
        b === void 0 && (a = N(a) || "Component", lb.has(a) || (lb.add(a), console.error(
          "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
          a
        ))), g = b == null ? g : ji({}, g, b), n.memoizedState = g, n.lanes === 0 && (n.updateQueue.baseState = g);
      }
      function Np(n, a, c, m, g, b, O) {
        var G = n.stateNode;
        if (typeof G.shouldComponentUpdate == "function") {
          if (c = G.shouldComponentUpdate(
            m,
            b,
            O
          ), n.mode & 8) {
            ut(!0);
            try {
              c = G.shouldComponentUpdate(
                m,
                b,
                O
              );
            } finally {
              ut(!1);
            }
          }
          return c === void 0 && console.error(
            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
            N(a) || "Component"
          ), c;
        }
        return a.prototype && a.prototype.isPureReactComponent ? !$u(c, m) || !$u(g, b) : !0;
      }
      function sr(n, a, c, m) {
        var g = a.state;
        typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(c, m), typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(c, m), a.state !== g && (n = U(n) || "Component", ib.has(n) || (ib.add(n), console.error(
          "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
          n
        )), XS.enqueueReplaceState(
          a,
          a.state,
          null
        ));
      }
      function ds(n, a) {
        var c = a;
        if ("ref" in a) {
          c = {};
          for (var m in a)
            m !== "ref" && (c[m] = a[m]);
        }
        if (n = n.defaultProps) {
          c === a && (c = ji({}, c));
          for (var g in n)
            c[g] === void 0 && (c[g] = n[g]);
        }
        return c;
      }
      function Os(n, a) {
        try {
          cd = a.source ? U(a.source) : null, qS = null;
          var c = a.value;
          if (Me.actQueue !== null)
            Me.thrownErrors.push(c);
          else {
            var m = n.onUncaughtError;
            m(c, { componentStack: a.stack });
          }
        } catch (g) {
          setTimeout(function() {
            throw g;
          });
        }
      }
      function oh(n, a, c) {
        try {
          cd = c.source ? U(c.source) : null, qS = U(a);
          var m = n.onCaughtError;
          m(c.value, {
            componentStack: c.stack,
            errorBoundary: a.tag === 1 ? a.stateNode : null
          });
        } catch (g) {
          setTimeout(function() {
            throw g;
          });
        }
      }
      function hc(n, a, c) {
        return c = Wa(c), c.tag = LS, c.payload = { element: null }, c.callback = function() {
          Q(a.source, Os, n, a);
        }, c;
      }
      function rr(n) {
        return n = Wa(n), n.tag = LS, n;
      }
      function lh(n, a, c, m) {
        var g = c.type.getDerivedStateFromError;
        if (typeof g == "function") {
          var b = m.value;
          n.payload = function() {
            return g(b);
          }, n.callback = function() {
            Fg(c), Q(
              m.source,
              oh,
              a,
              c,
              m
            );
          };
        }
        var O = c.stateNode;
        O !== null && typeof O.componentDidCatch == "function" && (n.callback = function() {
          Fg(c), Q(
            m.source,
            oh,
            a,
            c,
            m
          ), typeof g != "function" && (Ou === null ? Ou = /* @__PURE__ */ new Set([this]) : Ou.add(this)), R2(this, m), typeof g == "function" || (c.lanes & 2) === 0 && console.error(
            "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
            U(c) || "Unknown"
          );
        });
      }
      function nu(n, a, c, m, g) {
        if (c.flags |= 32768, $i && Mc(n, g), m !== null && typeof m == "object" && typeof m.then == "function") {
          if (a = c.alternate, a !== null && gc(
            a,
            c,
            g,
            !0
          ), bn && (Sl = !0), c = Er.current, c !== null) {
            switch (c.tag) {
              case 13:
                return Bo === null ? hm() : c.alternate === null && bi === bl && (bi = QS), c.flags &= -257, c.flags |= 65536, c.lanes = g, m === fy ? c.flags |= 16384 : (a = c.updateQueue, a === null ? c.updateQueue = /* @__PURE__ */ new Set([m]) : a.add(m), Uh(n, m, g)), !1;
              case 22:
                return c.flags |= 65536, m === fy ? c.flags |= 16384 : (a = c.updateQueue, a === null ? (a = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([m])
                }, c.updateQueue = a) : (c = a.retryQueue, c === null ? a.retryQueue = /* @__PURE__ */ new Set([m]) : c.add(m)), Uh(n, m, g)), !1;
            }
            throw Error(
              "Unexpected Suspense handler tag (" + c.tag + "). This is a bug in React."
            );
          }
          return Uh(n, m, g), hm(), !1;
        }
        if (bn)
          return Sl = !0, a = Er.current, a !== null ? ((a.flags & 65536) === 0 && (a.flags |= 256), a.flags |= 65536, a.lanes = g, m !== RS && Rn(
            Xe(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
                { cause: m }
              ),
              c
            )
          )) : (m !== RS && Rn(
            Xe(
              Error(
                "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
                { cause: m }
              ),
              c
            )
          ), n = n.current.alternate, n.flags |= 65536, g &= -g, n.lanes |= g, m = Xe(m, c), g = hc(
            n.stateNode,
            m,
            g
          ), Qo(n, g), bi !== Wc && (bi = gd)), !1;
        var b = Xe(
          Error(
            "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
            { cause: m }
          ),
          c
        );
        if (av === null ? av = [b] : av.push(b), bi !== Wc && (bi = gd), a === null) return !0;
        m = Xe(m, c), c = a;
        do {
          switch (c.tag) {
            case 3:
              return c.flags |= 65536, n = g & -g, c.lanes |= n, n = hc(
                c.stateNode,
                m,
                n
              ), Qo(c, n), !1;
            case 1:
              if (a = c.type, b = c.stateNode, (c.flags & 128) === 0 && (typeof a.getDerivedStateFromError == "function" || b !== null && typeof b.componentDidCatch == "function" && (Ou === null || !Ou.has(b))))
                return c.flags |= 65536, g &= -g, c.lanes |= g, g = rr(g), lh(
                  g,
                  n,
                  c,
                  m
                ), Qo(c, g), !1;
          }
          c = c.return;
        } while (c !== null);
        return !1;
      }
      function hi(n, a, c, m) {
        a.child = n === null ? JM(a, null, c, m) : Fc(
          a,
          n.child,
          c,
          m
        );
      }
      function yo(n, a, c, m, g) {
        c = c.render;
        var b = a.ref;
        if ("ref" in m) {
          var O = {};
          for (var G in m)
            G !== "ref" && (O[G] = m[G]);
        } else O = m;
        return xo(a), H(a), m = Mp(
          n,
          a,
          c,
          O,
          b,
          g
        ), G = Hf(), he(), n !== null && !ha ? (If(n, a, g), zs(n, a, g)) : (bn && G && Ge(a), a.flags |= 1, hi(n, a, m, g), a.child);
      }
      function Op(n, a, c, m, g) {
        if (n === null) {
          var b = c.type;
          return typeof b == "function" && !_m(b) && b.defaultProps === void 0 && c.compare === null ? (c = To(b), a.tag = 15, a.type = c, dh(a, b), Lp(
            n,
            a,
            c,
            m,
            g
          )) : (n = Sm(
            c.type,
            null,
            m,
            a,
            a.mode,
            g
          ), n.ref = a.ref, n.return = a, a.child = n);
        }
        if (b = n.child, !So(n, g)) {
          var O = b.memoizedProps;
          if (c = c.compare, c = c !== null ? c : $u, c(O, m) && n.ref === a.ref)
            return zs(
              n,
              a,
              g
            );
        }
        return a.flags |= 1, n = Ao(b, m), n.ref = a.ref, n.return = a, a.child = n;
      }
      function Lp(n, a, c, m, g) {
        if (n !== null) {
          var b = n.memoizedProps;
          if ($u(b, m) && n.ref === a.ref && a.type === n.type)
            if (ha = !1, a.pendingProps = m = b, So(n, g))
              (n.flags & 131072) !== 0 && (ha = !0);
            else
              return a.lanes = n.lanes, zs(n, a, g);
        }
        return uh(
          n,
          a,
          c,
          m,
          g
        );
      }
      function iu(n, a, c) {
        var m = a.pendingProps, g = m.children, b = (a.stateNode._pendingVisibility & 2) !== 0, O = n !== null ? n.memoizedState : null;
        if (_o(n, a), m.mode === "hidden" || b) {
          if ((a.flags & 128) !== 0) {
            if (m = O !== null ? O.baseLanes | c : c, n !== null) {
              for (g = a.child = n.child, b = 0; g !== null; )
                b = b | g.lanes | g.childLanes, g = g.sibling;
              a.childLanes = b & ~m;
            } else a.childLanes = 0, a.child = null;
            return zp(
              n,
              a,
              m,
              c
            );
          }
          if ((c & 536870912) !== 0)
            a.memoizedState = { baseLanes: 0, cachePool: null }, n !== null && or(
              a,
              O !== null ? O.cachePool : null
            ), O !== null ? Kl(a, O) : ic(a), Ep(a);
          else
            return a.lanes = a.childLanes = 536870912, zp(
              n,
              a,
              O !== null ? O.baseLanes | c : c,
              c
            );
        } else
          O !== null ? (or(a, O.cachePool), Kl(a, O), $s(a), a.memoizedState = null) : (n !== null && or(a, null), ic(a), $s(a));
        return hi(n, a, g, c), a.child;
      }
      function zp(n, a, c, m) {
        var g = yh();
        return g = g === null ? null : {
          parent: yi ? Ei._currentValue : Ei._currentValue2,
          pool: g
        }, a.memoizedState = {
          baseLanes: c,
          cachePool: g
        }, n !== null && or(a, null), ic(a), Ep(a), n !== null && gc(n, a, m, !0), null;
      }
      function _o(n, a) {
        var c = a.ref;
        if (c === null)
          n !== null && n.ref !== null && (a.flags |= 2097664);
        else {
          if (typeof c != "function" && typeof c != "object")
            throw Error(
              "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
            );
          (n === null || n.ref !== c) && (a.flags |= 2097664);
        }
      }
      function uh(n, a, c, m, g) {
        if (c.prototype && typeof c.prototype.render == "function") {
          var b = N(c) || "Unknown";
          mb[b] || (console.error(
            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
            b,
            b
          ), mb[b] = !0);
        }
        return a.mode & 8 && kr.recordLegacyContextWarning(
          a,
          null
        ), n === null && (dh(a, a.type), c.contextTypes && (b = N(c) || "Unknown", gb[b] || (gb[b] = !0, console.error(
          "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
          b
        )))), xo(a), H(a), c = Mp(
          n,
          a,
          c,
          m,
          void 0,
          g
        ), m = Hf(), he(), n !== null && !ha ? (If(n, a, g), zs(n, a, g)) : (bn && m && Ge(a), a.flags |= 1, hi(n, a, c, g), a.child);
      }
      function ch(n, a, c, m, g, b) {
        return xo(a), H(a), El = -1, Jm = n !== null && n.type !== a.type, a.updateQueue = null, c = Pf(
          a,
          m,
          c,
          g
        ), zi(n, a), m = Hf(), he(), n !== null && !ha ? (If(n, a, b), zs(n, a, b)) : (bn && m && Ge(a), a.flags |= 1, hi(n, a, c, b), a.child);
      }
      function fh(n, a, c, m, g) {
        switch (p(a)) {
          case !1:
            var b = a.stateNode, O = new a.type(
              a.memoizedProps,
              b.context
            ).state;
            b.updater.enqueueSetState(b, O, null);
            break;
          case !0:
            a.flags |= 128, a.flags |= 65536, b = Error("Simulated error coming from DevTools");
            var G = g & -g;
            if (a.lanes |= G, O = Qn, O === null)
              throw Error(
                "Expected a work-in-progress root. This is a bug in React. Please file an issue."
              );
            G = rr(G), lh(
              G,
              O,
              a,
              Xe(b, a)
            ), Qo(a, G);
        }
        if (xo(a), a.stateNode === null) {
          if (O = xs, b = c.contextType, "contextType" in c && b !== null && (b === void 0 || b.$$typeof !== Is) && !fb.has(c) && (fb.add(c), G = b === void 0 ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof b != "object" ? " However, it is set to a " + typeof b + "." : b.$$typeof === Hh ? " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(b).join(", ") + "}.", console.error(
            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
            N(c) || "Component",
            G
          )), typeof b == "object" && b !== null && (O = Zn(b)), b = new c(m, O), a.mode & 8) {
            ut(!0);
            try {
              b = new c(m, O);
            } finally {
              ut(!1);
            }
          }
          if (O = a.memoizedState = b.state !== null && b.state !== void 0 ? b.state : null, b.updater = XS, a.stateNode = b, b._reactInternals = a, b._reactInternalInstance = nb, typeof c.getDerivedStateFromProps == "function" && O === null && (O = N(c) || "Component", ab.has(O) || (ab.add(O), console.error(
            "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
            O,
            b.state === null ? "null" : "undefined",
            O
          ))), typeof c.getDerivedStateFromProps == "function" || typeof b.getSnapshotBeforeUpdate == "function") {
            var re = G = O = null;
            if (typeof b.componentWillMount == "function" && b.componentWillMount.__suppressDeprecationWarning !== !0 ? O = "componentWillMount" : typeof b.UNSAFE_componentWillMount == "function" && (O = "UNSAFE_componentWillMount"), typeof b.componentWillReceiveProps == "function" && b.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? G = "componentWillReceiveProps" : typeof b.UNSAFE_componentWillReceiveProps == "function" && (G = "UNSAFE_componentWillReceiveProps"), typeof b.componentWillUpdate == "function" && b.componentWillUpdate.__suppressDeprecationWarning !== !0 ? re = "componentWillUpdate" : typeof b.UNSAFE_componentWillUpdate == "function" && (re = "UNSAFE_componentWillUpdate"), O !== null || G !== null || re !== null) {
              b = N(c) || "Component";
              var Ee = typeof c.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              rb.has(b) || (rb.add(b), console.error(
                `Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://react.dev/link/unsafe-component-lifecycles`,
                b,
                Ee,
                O !== null ? `
  ` + O : "",
                G !== null ? `
  ` + G : "",
                re !== null ? `
  ` + re : ""
              ));
            }
          }
          b = a.stateNode, O = N(c) || "Component", b.render || (c.prototype && typeof c.prototype.render == "function" ? console.error(
            "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
            O
          ) : console.error(
            "No `render` method found on the %s instance: you may have forgotten to define `render`.",
            O
          )), !b.getInitialState || b.getInitialState.isReactClassApproved || b.state || console.error(
            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
            O
          ), b.getDefaultProps && !b.getDefaultProps.isReactClassApproved && console.error(
            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
            O
          ), b.contextType && console.error(
            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
            O
          ), c.childContextTypes && !cb.has(c) && (cb.add(c), console.error(
            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
            O
          )), c.contextTypes && !ub.has(c) && (ub.add(c), console.error(
            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
            O
          )), typeof b.componentShouldUpdate == "function" && console.error(
            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
            O
          ), c.prototype && c.prototype.isPureReactComponent && typeof b.shouldComponentUpdate < "u" && console.error(
            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
            N(c) || "A pure component"
          ), typeof b.componentDidUnmount == "function" && console.error(
            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
            O
          ), typeof b.componentDidReceiveProps == "function" && console.error(
            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
            O
          ), typeof b.componentWillRecieveProps == "function" && console.error(
            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
            O
          ), typeof b.UNSAFE_componentWillRecieveProps == "function" && console.error(
            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
            O
          ), G = b.props !== m, b.props !== void 0 && G && console.error(
            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
            O
          ), b.defaultProps && console.error(
            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
            O,
            O
          ), typeof b.getSnapshotBeforeUpdate != "function" || typeof b.componentDidUpdate == "function" || sb.has(c) || (sb.add(c), console.error(
            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
            N(c)
          )), typeof b.getDerivedStateFromProps == "function" && console.error(
            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            O
          ), typeof b.getDerivedStateFromError == "function" && console.error(
            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
            O
          ), typeof c.getSnapshotBeforeUpdate == "function" && console.error(
            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
            O
          ), (G = b.state) && (typeof G != "object" || Pi(G)) && console.error("%s.state: must be set to an object or null", O), typeof b.getChildContext == "function" && typeof c.childContextTypes != "object" && console.error(
            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
            O
          ), b = a.stateNode, b.props = m, b.state = a.memoizedState, b.refs = {}, vi(a), O = c.contextType, b.context = typeof O == "object" && O !== null ? Zn(O) : xs, b.state === m && (O = N(c) || "Component", ob.has(O) || (ob.add(O), console.error(
            "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
            O
          ))), a.mode & 8 && kr.recordLegacyContextWarning(
            a,
            b
          ), kr.recordUnsafeLifecycleWarnings(
            a,
            b
          ), b.state = a.memoizedState, O = c.getDerivedStateFromProps, typeof O == "function" && (ya(
            a,
            c,
            O,
            m
          ), b.state = a.memoizedState), typeof c.getDerivedStateFromProps == "function" || typeof b.getSnapshotBeforeUpdate == "function" || typeof b.UNSAFE_componentWillMount != "function" && typeof b.componentWillMount != "function" || (O = b.state, typeof b.componentWillMount == "function" && b.componentWillMount(), typeof b.UNSAFE_componentWillMount == "function" && b.UNSAFE_componentWillMount(), O !== b.state && (console.error(
            "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
            U(a) || "Component"
          ), XS.enqueueReplaceState(
            b,
            b.state,
            null
          )), Wl(a, m, b, g), co(), b.state = a.memoizedState), typeof b.componentDidMount == "function" && (a.flags |= 4194308), (a.mode & 16) !== ei && (a.flags |= 67108864), b = !0;
        } else if (n === null) {
          b = a.stateNode;
          var ke = a.memoizedProps;
          G = ds(c, ke), b.props = G;
          var ot = b.context;
          re = c.contextType, O = xs, typeof re == "object" && re !== null && (O = Zn(re)), Ee = c.getDerivedStateFromProps, re = typeof Ee == "function" || typeof b.getSnapshotBeforeUpdate == "function", ke = a.pendingProps !== ke, re || typeof b.UNSAFE_componentWillReceiveProps != "function" && typeof b.componentWillReceiveProps != "function" || (ke || ot !== O) && sr(
            a,
            b,
            m,
            O
          ), Tu = !1;
          var vt = a.memoizedState;
          b.state = vt, Wl(a, m, b, g), co(), ot = a.memoizedState, ke || vt !== ot || Tu ? (typeof Ee == "function" && (ya(
            a,
            c,
            Ee,
            m
          ), ot = a.memoizedState), (G = Tu || Np(
            a,
            c,
            G,
            m,
            vt,
            ot,
            O
          )) ? (re || typeof b.UNSAFE_componentWillMount != "function" && typeof b.componentWillMount != "function" || (typeof b.componentWillMount == "function" && b.componentWillMount(), typeof b.UNSAFE_componentWillMount == "function" && b.UNSAFE_componentWillMount()), typeof b.componentDidMount == "function" && (a.flags |= 4194308), (a.mode & 16) !== ei && (a.flags |= 67108864)) : (typeof b.componentDidMount == "function" && (a.flags |= 4194308), (a.mode & 16) !== ei && (a.flags |= 67108864), a.memoizedProps = m, a.memoizedState = ot), b.props = m, b.state = ot, b.context = O, b = G) : (typeof b.componentDidMount == "function" && (a.flags |= 4194308), (a.mode & 16) !== ei && (a.flags |= 67108864), b = !1);
        } else {
          b = a.stateNode, Oi(n, a), O = a.memoizedProps, re = ds(c, O), b.props = re, Ee = a.pendingProps, vt = b.context, ot = c.contextType, G = xs, typeof ot == "object" && ot !== null && (G = Zn(ot)), ke = c.getDerivedStateFromProps, (ot = typeof ke == "function" || typeof b.getSnapshotBeforeUpdate == "function") || typeof b.UNSAFE_componentWillReceiveProps != "function" && typeof b.componentWillReceiveProps != "function" || (O !== Ee || vt !== G) && sr(
            a,
            b,
            m,
            G
          ), Tu = !1, vt = a.memoizedState, b.state = vt, Wl(a, m, b, g), co();
          var xn = a.memoizedState;
          O !== Ee || vt !== xn || Tu || n !== null && n.dependencies !== null && vh(n.dependencies) ? (typeof ke == "function" && (ya(
            a,
            c,
            ke,
            m
          ), xn = a.memoizedState), (re = Tu || Np(
            a,
            c,
            re,
            m,
            vt,
            xn,
            G
          ) || n !== null && n.dependencies !== null && vh(n.dependencies)) ? (ot || typeof b.UNSAFE_componentWillUpdate != "function" && typeof b.componentWillUpdate != "function" || (typeof b.componentWillUpdate == "function" && b.componentWillUpdate(m, xn, G), typeof b.UNSAFE_componentWillUpdate == "function" && b.UNSAFE_componentWillUpdate(
            m,
            xn,
            G
          )), typeof b.componentDidUpdate == "function" && (a.flags |= 4), typeof b.getSnapshotBeforeUpdate == "function" && (a.flags |= 1024)) : (typeof b.componentDidUpdate != "function" || O === n.memoizedProps && vt === n.memoizedState || (a.flags |= 4), typeof b.getSnapshotBeforeUpdate != "function" || O === n.memoizedProps && vt === n.memoizedState || (a.flags |= 1024), a.memoizedProps = m, a.memoizedState = xn), b.props = m, b.state = xn, b.context = G, b = re) : (typeof b.componentDidUpdate != "function" || O === n.memoizedProps && vt === n.memoizedState || (a.flags |= 4), typeof b.getSnapshotBeforeUpdate != "function" || O === n.memoizedProps && vt === n.memoizedState || (a.flags |= 1024), b = !1);
        }
        if (G = b, _o(n, a), O = (a.flags & 128) !== 0, G || O) {
          if (G = a.stateNode, Me.getCurrentStack = a === null ? null : me, Ki = !1, Zi = a, O && typeof c.getDerivedStateFromError != "function")
            c = null, Es = -1;
          else {
            if (H(a), c = HM(G), a.mode & 8) {
              ut(!0);
              try {
                HM(G);
              } finally {
                ut(!1);
              }
            }
            he();
          }
          a.flags |= 1, n !== null && O ? (a.child = Fc(
            a,
            n.child,
            null,
            g
          ), a.child = Fc(
            a,
            null,
            c,
            g
          )) : hi(
            n,
            a,
            c,
            g
          ), a.memoizedState = G.state, n = a.child;
        } else
          n = zs(
            n,
            a,
            g
          );
        return g = a.stateNode, b && g.props !== m && (fd || console.error(
          "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
          U(a) || "a component"
        ), fd = !0), n;
      }
      function hh(n, a, c, m) {
        return ti(), a.flags |= 256, hi(n, a, c, m), a.child;
      }
      function dh(n, a) {
        a && a.childContextTypes && console.error(
          `childContextTypes cannot be defined on a function component.
  %s.childContextTypes = ...`,
          a.displayName || a.name || "Component"
        ), typeof a.getDerivedStateFromProps == "function" && (n = N(a) || "Unknown", yb[n] || (console.error(
          "%s: Function components do not support getDerivedStateFromProps.",
          n
        ), yb[n] = !0)), typeof a.contextType == "object" && a.contextType !== null && (a = N(a) || "Unknown", vb[a] || (console.error(
          "%s: Function components do not support contextType.",
          a
        ), vb[a] = !0));
      }
      function dc(n) {
        return { baseLanes: n, cachePool: Vp() };
      }
      function _a(n, a, c) {
        return n = n !== null ? n.childLanes & ~c : 0, a && (n |= Ws), n;
      }
      function Bp(n, a, c) {
        var m = a.pendingProps;
        h(a) && (a.flags |= 128);
        var g = !1, b = (a.flags & 128) !== 0, O;
        if ((O = b) || (O = n !== null && n.memoizedState === null ? !1 : (ea.current & Qm) !== 0), O && (g = !0, a.flags &= -129), O = (a.flags & 32) !== 0, a.flags &= -33, n === null) {
          if (bn) {
            if (g ? Nr(a) : $s(a), bn) {
              var G = Aa, re;
              (re = !G) || (re = ty(
                G,
                zo
              ), re !== null ? (Tt(), a.memoizedState = {
                dehydrated: re,
                treeContext: $n !== null ? { id: an, overflow: fa } : null,
                retryLane: 536870912
              }, b = v(18, null, null, ei), b.stateNode = re, b.return = a, a.child = b, is = a, Aa = null, re = !0) : re = !1, re = !re), re && (dt(a, G), Qt(a));
            }
            if (G = a.memoizedState, G !== null && (G = G.dehydrated, G !== null))
              return Lm(G) ? a.lanes = 16 : a.lanes = 536870912, null;
            er(a);
          }
          return G = m.children, m = m.fallback, g ? ($s(a), g = a.mode, G = ph(
            { mode: "hidden", children: G },
            g
          ), m = ll(
            m,
            g,
            c,
            null
          ), G.return = a, m.return = a, G.sibling = m, a.child = G, g = a.child, g.memoizedState = dc(c), g.childLanes = _a(
            n,
            O,
            c
          ), a.memoizedState = WS, m) : (Nr(a), Wi(a, G));
        }
        if (re = n.memoizedState, re !== null && (G = re.dehydrated, G !== null)) {
          if (b)
            a.flags & 256 ? (Nr(a), a.flags &= -257, a = pc(
              n,
              a,
              c
            )) : a.memoizedState !== null ? ($s(a), a.child = n.child, a.flags |= 128, a = null) : ($s(a), g = m.fallback, G = a.mode, m = ph(
              { mode: "visible", children: m.children },
              G
            ), g = ll(
              g,
              G,
              c,
              null
            ), g.flags |= 2, m.return = a, g.return = a, m.sibling = g, a.child = m, Fc(
              a,
              n.child,
              null,
              c
            ), m = a.child, m.memoizedState = dc(c), m.childLanes = _a(
              n,
              O,
              c
            ), a.memoizedState = WS, a = g);
          else if (Nr(a), bn && console.error(
            "We should not be hydrating here. This is a bug in React. Please file a bug."
          ), Lm(G))
            G = bS(G), O = G.digest, g = G.message, m = G.stack, G = G.componentStack, g = Error(g || "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."), g.stack = m || "", g.digest = O, O = G === void 0 ? null : G, m = {
              value: g,
              source: null,
              stack: O
            }, typeof O == "string" && fe.set(g, m), Rn(m), a = pc(
              n,
              a,
              c
            );
          else if (ha || gc(
            n,
            a,
            c,
            !1
          ), O = (c & n.childLanes) !== 0, ha || O) {
            if (O = Qn, O !== null) {
              if (m = c & -c, (m & 42) !== 0) m = 1;
              else
                switch (m) {
                  case 2:
                    m = 1;
                    break;
                  case 8:
                    m = 4;
                    break;
                  case 32:
                    m = 16;
                    break;
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                    m = 64;
                    break;
                  case 268435456:
                    m = 134217728;
                    break;
                  default:
                    m = 0;
                }
              if (m = (m & (O.suspendedLanes | c)) !== 0 ? 0 : m, m !== 0 && m !== re.retryLane)
                throw re.retryLane = m, pe(n, m), ni(O, n, m), pb;
            }
            Fs(G) || hm(), a = pc(
              n,
              a,
              c
            );
          } else
            Fs(G) ? (a.flags |= 128, a.child = n.child, a = zg.bind(
              null,
              n
            ), TS(G, a), a = null) : (n = re.treeContext, ba && (Aa = zm(G), is = a, bn = !0, Qr = null, Sl = !1, Sr = null, zo = !1, n !== null && (Tt(), Ut[kt++] = an, Ut[kt++] = fa, Ut[kt++] = $n, an = n.id, fa = n.overflow, $n = a)), a = Wi(
              a,
              m.children
            ), a.flags |= 4096);
          return a;
        }
        return g ? ($s(a), g = m.fallback, G = a.mode, re = n.child, b = re.sibling, m = Ao(re, {
          mode: "hidden",
          children: m.children
        }), m.subtreeFlags = re.subtreeFlags & 31457280, b !== null ? g = Ao(b, g) : (g = ll(
          g,
          G,
          c,
          null
        ), g.flags |= 2), g.return = a, m.return = a, m.sibling = g, a.child = m, m = g, g = a.child, G = n.child.memoizedState, G === null ? G = dc(c) : (re = G.cachePool, re !== null ? (b = yi ? Ei._currentValue : Ei._currentValue2, re = re.parent !== b ? { parent: b, pool: b } : re) : re = Vp(), G = {
          baseLanes: G.baseLanes | c,
          cachePool: re
        }), g.memoizedState = G, g.childLanes = _a(
          n,
          O,
          c
        ), a.memoizedState = WS, m) : (Nr(a), c = n.child, n = c.sibling, c = Ao(c, {
          mode: "visible",
          children: m.children
        }), c.return = a, c.sibling = null, n !== null && (O = a.deletions, O === null ? (a.deletions = [n], a.flags |= 16) : O.push(n)), a.child = c, a.memoizedState = null, c);
      }
      function Wi(n, a) {
        return a = ph(
          { mode: "visible", children: a },
          n.mode
        ), a.return = n, n.child = a;
      }
      function ph(n, a) {
        return Xg(n, a, 0, null);
      }
      function pc(n, a, c) {
        return Fc(a, n.child, null, c), n = Wi(
          a,
          a.pendingProps.children
        ), n.flags |= 2, a.memoizedState = null, n;
      }
      function Pp(n, a, c) {
        n.lanes |= a;
        var m = n.alternate;
        m !== null && (m.lanes |= a), vc(
          n.return,
          a,
          c
        );
      }
      function gg(n, a) {
        var c = Pi(n);
        return n = !c && typeof w(n) == "function", c || n ? (c = c ? "array" : "iterable", console.error(
          "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
          c,
          a,
          c
        ), !1) : !0;
      }
      function Ls(n, a, c, m, g) {
        var b = n.memoizedState;
        b === null ? n.memoizedState = {
          isBackwards: a,
          rendering: null,
          renderingStartTime: 0,
          last: m,
          tail: c,
          tailMode: g
        } : (b.isBackwards = a, b.rendering = null, b.renderingStartTime = 0, b.last = m, b.tail = c, b.tailMode = g);
      }
      function Hp(n, a, c) {
        var m = a.pendingProps, g = m.revealOrder, b = m.tail;
        if (m = m.children, g !== void 0 && g !== "forwards" && g !== "backwards" && g !== "together" && !_b[g])
          if (_b[g] = !0, typeof g == "string")
            switch (g.toLowerCase()) {
              case "together":
              case "forwards":
              case "backwards":
                console.error(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
                  g,
                  g.toLowerCase()
                );
                break;
              case "forward":
              case "backward":
                console.error(
                  '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
                  g,
                  g.toLowerCase()
                );
                break;
              default:
                console.error(
                  '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
                  g
                );
            }
          else
            console.error(
              '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
              g
            );
        b === void 0 || YS[b] || (b !== "collapsed" && b !== "hidden" ? (YS[b] = !0, console.error(
          '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
          b
        )) : g !== "forwards" && g !== "backwards" && (YS[b] = !0, console.error(
          '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
          b
        )));
        e: if ((g === "forwards" || g === "backwards") && m !== void 0 && m !== null && m !== !1)
          if (Pi(m)) {
            for (var O = 0; O < m.length; O++)
              if (!gg(m[O], O)) break e;
          } else if (O = w(m), typeof O == "function") {
            if (O = O.call(m))
              for (var G = O.next(), re = 0; !G.done; G = O.next()) {
                if (!gg(G.value, re)) break e;
                re++;
              }
          } else
            console.error(
              'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
              g
            );
        if (hi(n, a, m, c), m = ea.current, (m & Qm) !== 0)
          m = m & od | Qm, a.flags |= 128;
        else {
          if (n !== null && (n.flags & 128) !== 0)
            e: for (n = a.child; n !== null; ) {
              if (n.tag === 13)
                n.memoizedState !== null && Pp(
                  n,
                  c,
                  a
                );
              else if (n.tag === 19)
                Pp(n, c, a);
              else if (n.child !== null) {
                n.child.return = n, n = n.child;
                continue;
              }
              if (n === a) break e;
              for (; n.sibling === null; ) {
                if (n.return === null || n.return === a)
                  break e;
                n = n.return;
              }
              n.sibling.return = n.return, n = n.sibling;
            }
          m &= od;
        }
        switch (we(ea, m, a), g) {
          case "forwards":
            for (c = a.child, g = null; c !== null; )
              n = c.alternate, n !== null && ac(n) === null && (g = c), c = c.sibling;
            c = g, c === null ? (g = a.child, a.child = null) : (g = c.sibling, c.sibling = null), Ls(
              a,
              !1,
              g,
              c,
              b
            );
            break;
          case "backwards":
            for (c = null, g = a.child, a.child = null; g !== null; ) {
              if (n = g.alternate, n !== null && ac(n) === null) {
                a.child = g;
                break;
              }
              n = g.sibling, g.sibling = c, c = g, g = n;
            }
            Ls(
              a,
              !0,
              c,
              null,
              b
            );
            break;
          case "together":
            Ls(a, !1, null, null, void 0);
            break;
          default:
            a.memoizedState = null;
        }
        return a.child;
      }
      function zs(n, a, c) {
        if (n !== null && (a.dependencies = n.dependencies), Es = -1, Uu |= a.lanes, (c & a.childLanes) === 0)
          if (n !== null) {
            if (gc(
              n,
              a,
              c,
              !1
            ), (c & a.childLanes) === 0)
              return null;
          } else return null;
        if (n !== null && a.child !== n.child)
          throw Error("Resuming work not yet implemented.");
        if (a.child !== null) {
          for (n = a.child, c = Ao(n, n.pendingProps), a.child = c, c.return = a; n.sibling !== null; )
            n = n.sibling, c = c.sibling = Ao(n, n.pendingProps), c.return = a;
          c.sibling = null;
        }
        return a.child;
      }
      function So(n, a) {
        return (n.lanes & a) !== 0 ? !0 : (n = n.dependencies, !!(n !== null && vh(n)));
      }
      function yg(n, a, c) {
        switch (a.tag) {
          case 3:
            ye(
              a,
              a.stateNode.containerInfo
            ), zr(
              a,
              Ei,
              n.memoizedState.cache
            ), ti();
            break;
          case 27:
          case 5:
            Oe(a);
            break;
          case 4:
            ye(
              a,
              a.stateNode.containerInfo
            );
            break;
          case 10:
            zr(
              a,
              a.type,
              a.memoizedProps.value
            );
            break;
          case 12:
            (c & a.childLanes) !== 0 && (a.flags |= 4), a.flags |= 2048;
            var m = a.stateNode;
            m.effectDuration = -0, m.passiveEffectDuration = -0;
            break;
          case 13:
            if (m = a.memoizedState, m !== null)
              return m.dehydrated !== null ? (Nr(a), a.flags |= 128, null) : (c & a.child.childLanes) !== 0 ? Bp(
                n,
                a,
                c
              ) : (Nr(a), n = zs(
                n,
                a,
                c
              ), n !== null ? n.sibling : null);
            Nr(a);
            break;
          case 19:
            var g = (n.flags & 128) !== 0;
            if (m = (c & a.childLanes) !== 0, m || (gc(
              n,
              a,
              c,
              !1
            ), m = (c & a.childLanes) !== 0), g) {
              if (m)
                return Hp(
                  n,
                  a,
                  c
                );
              a.flags |= 128;
            }
            if (g = a.memoizedState, g !== null && (g.rendering = null, g.tail = null, g.lastEffect = null), we(
              ea,
              ea.current,
              a
            ), m) break;
            return null;
          case 22:
          case 23:
            return a.lanes = 0, iu(n, a, c);
          case 24:
            zr(
              a,
              Ei,
              n.memoizedState.cache
            );
        }
        return zs(n, a, c);
      }
      function mh(n, a, c) {
        if (a._debugNeedsRemount && n !== null) {
          c = Sm(
            a.type,
            a.key,
            a.pendingProps,
            a._debugOwner || null,
            a.mode,
            a.lanes
          );
          var m = a.return;
          if (m === null) throw Error("Cannot swap the root fiber.");
          if (n.alternate = null, a.alternate = null, c.index = a.index, c.sibling = a.sibling, c.return = a.return, c.ref = a.ref, c._debugInfo = a._debugInfo, a === m.child)
            m.child = c;
          else {
            var g = m.child;
            if (g === null)
              throw Error("Expected parent to have a child.");
            for (; g.sibling !== a; )
              if (g = g.sibling, g === null)
                throw Error("Expected to find the previous sibling.");
            g.sibling = c;
          }
          return a = m.deletions, a === null ? (m.deletions = [n], m.flags |= 16) : a.push(n), c.flags |= 2, c;
        }
        if (n !== null)
          if (n.memoizedProps !== a.pendingProps || a.type !== n.type)
            ha = !0;
          else {
            if (!So(n, c) && (a.flags & 128) === 0)
              return ha = !1, yg(
                n,
                a,
                c
              );
            ha = (n.flags & 131072) !== 0;
          }
        else
          ha = !1, (m = bn) && (Tt(), m = (a.flags & 1048576) !== 0), m && (m = a.index, Tt(), _t(a, Hn, m));
        switch (a.lanes = 0, a.tag) {
          case 16:
            e: if (m = a.pendingProps, n = Au(a.elementType), a.type = n, typeof n == "function")
              _m(n) ? (m = ds(
                n,
                m
              ), a.tag = 1, a.type = n = To(n), a = fh(
                null,
                a,
                n,
                m,
                c
              )) : (a.tag = 0, dh(a, n), a.type = n = To(n), a = uh(
                null,
                a,
                n,
                m,
                c
              ));
            else {
              if (n != null) {
                if (g = n.$$typeof, g === cr) {
                  a.tag = 11, a.type = n = gm(n), a = yo(
                    null,
                    a,
                    n,
                    m,
                    c
                  );
                  break e;
                } else if (g === Ih) {
                  a.tag = 14, a = Op(
                    null,
                    a,
                    n,
                    m,
                    c
                  );
                  break e;
                }
              }
              throw a = "", n !== null && typeof n == "object" && n.$$typeof === $a && (a = " Did you wrap a component in React.lazy() more than once?"), n = N(n) || n, Error(
                "Element type is invalid. Received a promise that resolves to: " + n + ". Lazy element type must resolve to a class or function." + a
              );
            }
            return a;
          case 0:
            return uh(
              n,
              a,
              a.type,
              a.pendingProps,
              c
            );
          case 1:
            return m = a.type, g = ds(
              m,
              a.pendingProps
            ), fh(
              n,
              a,
              m,
              g,
              c
            );
          case 3:
            e: {
              if (ye(
                a,
                a.stateNode.containerInfo
              ), n === null)
                throw Error(
                  "Should have a current fiber. This is a bug in React."
                );
              var b = a.pendingProps;
              g = a.memoizedState, m = g.element, Oi(n, a), Wl(a, b, null, c);
              var O = a.memoizedState;
              if (b = O.cache, zr(a, Ei, b), b !== g.cache && Ip(
                a,
                [Ei],
                c,
                !0
              ), co(), b = O.element, ba && g.isDehydrated)
                if (g = {
                  element: b,
                  isDehydrated: !1,
                  cache: O.cache
                }, a.updateQueue.baseState = g, a.memoizedState = g, a.flags & 256) {
                  a = hh(
                    n,
                    a,
                    b,
                    c
                  );
                  break e;
                } else if (b !== m) {
                  m = Xe(
                    Error(
                      "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
                    ),
                    a
                  ), Rn(m), a = hh(
                    n,
                    a,
                    b,
                    c
                  );
                  break e;
                } else
                  for (ba && (Aa = ui(
                    a.stateNode.containerInfo
                  ), is = a, bn = !0, Qr = null, Sl = !1, Sr = null, zo = !0), n = JM(
                    a,
                    null,
                    b,
                    c
                  ), a.child = n; n; )
                    n.flags = n.flags & -3 | 4096, n = n.sibling;
              else {
                if (ti(), b === m) {
                  a = zs(
                    n,
                    a,
                    c
                  );
                  break e;
                }
                hi(
                  n,
                  a,
                  b,
                  c
                );
              }
              a = a.child;
            }
            return a;
          case 26:
            if (Vt)
              return _o(n, a), n === null ? (n = Oa(
                a.type,
                null,
                a.pendingProps,
                null
              )) ? a.memoizedState = n : bn || (a.stateNode = Oo(
                a.type,
                a.pendingProps,
                k(bu.current),
                a
              )) : a.memoizedState = Oa(
                a.type,
                n.memoizedProps,
                a.pendingProps,
                n.memoizedState
              ), null;
          case 27:
            if (xi)
              return Oe(a), n === null && xi && bn && (g = k(
                bu.current
              ), m = J(), g = a.stateNode = Xs(
                a.type,
                a.pendingProps,
                g,
                m,
                !1
              ), Sl || (m = Lc(
                g,
                a.type,
                a.pendingProps,
                m
              ), m !== null && (at(a, 0).serverProps = m)), is = a, zo = !0, Aa = vr(g)), m = a.pendingProps.children, n !== null || bn ? hi(
                n,
                a,
                m,
                c
              ) : a.child = Fc(
                a,
                null,
                m,
                c
              ), _o(n, a), a.child;
          case 5:
            return n === null && bn && (b = J(), m = Bn(
              a.type,
              a.pendingProps,
              b
            ), g = Aa, (O = !g) || (O = ey(
              g,
              a.type,
              a.pendingProps,
              zo
            ), O !== null ? (a.stateNode = O, Sl || (b = Lc(
              O,
              a.type,
              a.pendingProps,
              b
            ), b !== null && (at(a, 0).serverProps = b)), is = a, Aa = vr(O), zo = !1, b = !0) : b = !1, O = !b), O && (m && dt(a, g), Qt(a))), Oe(a), g = a.type, b = a.pendingProps, O = n !== null ? n.memoizedProps : null, m = b.children, Ri(g, b) ? m = null : O !== null && Ri(g, O) && (a.flags |= 32), a.memoizedState !== null && (g = Mp(
              n,
              a,
              dg,
              null,
              null,
              c
            ), yi ? Zr._currentValue = g : Zr._currentValue2 = g), _o(n, a), hi(
              n,
              a,
              m,
              c
            ), a.child;
          case 6:
            return n === null && bn && (n = a.pendingProps, c = J(), n = Yn(n, c), c = Aa, (m = !c) || (m = Ii(
              c,
              a.pendingProps,
              zo
            ), m !== null ? (a.stateNode = m, is = a, Aa = null, m = !0) : m = !1, m = !m), m && (n && dt(a, c), Qt(a))), null;
          case 13:
            return Bp(n, a, c);
          case 4:
            return ye(
              a,
              a.stateNode.containerInfo
            ), m = a.pendingProps, n === null ? a.child = Fc(
              a,
              null,
              m,
              c
            ) : hi(
              n,
              a,
              m,
              c
            ), a.child;
          case 11:
            return yo(
              n,
              a,
              a.type,
              a.pendingProps,
              c
            );
          case 7:
            return hi(
              n,
              a,
              a.pendingProps,
              c
            ), a.child;
          case 8:
            return hi(
              n,
              a,
              a.pendingProps.children,
              c
            ), a.child;
          case 12:
            return a.flags |= 4, a.flags |= 2048, m = a.stateNode, m.effectDuration = -0, m.passiveEffectDuration = -0, hi(
              n,
              a,
              a.pendingProps.children,
              c
            ), a.child;
          case 10:
            return m = a.type, g = a.pendingProps, b = g.value, "value" in g || Sb || (Sb = !0, console.error(
              "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
            )), zr(a, m, b), hi(
              n,
              a,
              g.children,
              c
            ), a.child;
          case 9:
            return g = a.type._context, m = a.pendingProps.children, typeof m != "function" && console.error(
              "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
            ), xo(a), g = Zn(g), H(a), m = HS(
              m,
              g,
              void 0
            ), he(), a.flags |= 1, hi(
              n,
              a,
              m,
              c
            ), a.child;
          case 14:
            return Op(
              n,
              a,
              a.type,
              a.pendingProps,
              c
            );
          case 15:
            return Lp(
              n,
              a,
              a.type,
              a.pendingProps,
              c
            );
          case 19:
            return Hp(
              n,
              a,
              c
            );
          case 22:
            return iu(n, a, c);
          case 24:
            return xo(a), m = Zn(Ei), n === null ? (g = yh(), g === null && (g = Qn, b = gh(), g.pooledCache = b, Eo(b), b !== null && (g.pooledCacheLanes |= c), g = b), a.memoizedState = {
              parent: m,
              cache: g
            }, vi(a), zr(a, Ei, g)) : ((n.lanes & c) !== 0 && (Oi(n, a), Wl(a, null, null, c), co()), g = n.memoizedState, b = a.memoizedState, g.parent !== m ? (g = {
              parent: m,
              cache: m
            }, a.memoizedState = g, a.lanes === 0 && (a.memoizedState = a.updateQueue.baseState = g), zr(a, Ei, m)) : (m = b.cache, zr(a, Ei, m), m !== g.cache && Ip(
              a,
              [Ei],
              c,
              !0
            ))), hi(
              n,
              a,
              a.pendingProps.children,
              c
            ), a.child;
          case 29:
            throw a.pendingProps;
        }
        throw Error(
          "Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function mc() {
        hd = yy = null, dd = !1;
      }
      function zr(n, a, c) {
        yi ? (we(vy, a._currentValue, n), a._currentValue = c, we(jS, a._currentRenderer, n), a._currentRenderer !== void 0 && a._currentRenderer !== null && a._currentRenderer !== gy && console.error(
          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
        ), a._currentRenderer = gy) : (we(vy, a._currentValue2, n), a._currentValue2 = c, we(ZS, a._currentRenderer2, n), a._currentRenderer2 !== void 0 && a._currentRenderer2 !== null && a._currentRenderer2 !== gy && console.error(
          "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
        ), a._currentRenderer2 = gy);
      }
      function Bs(n, a) {
        var c = vy.current;
        yi ? (n._currentValue = c, c = jS.current, Te(jS, a), n._currentRenderer = c) : (n._currentValue2 = c, c = ZS.current, Te(ZS, a), n._currentRenderer2 = c), Te(vy, a);
      }
      function vc(n, a, c) {
        for (; n !== null; ) {
          var m = n.alternate;
          if ((n.childLanes & a) !== a ? (n.childLanes |= a, m !== null && (m.childLanes |= a)) : m !== null && (m.childLanes & a) !== a && (m.childLanes |= a), n === c) break;
          n = n.return;
        }
        n !== c && console.error(
          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function Ip(n, a, c, m) {
        var g = n.child;
        for (g !== null && (g.return = n); g !== null; ) {
          var b = g.dependencies;
          if (b !== null) {
            var O = g.child;
            b = b.firstContext;
            e: for (; b !== null; ) {
              var G = b;
              b = g;
              for (var re = 0; re < a.length; re++)
                if (G.context === a[re]) {
                  b.lanes |= c, G = b.alternate, G !== null && (G.lanes |= c), vc(
                    b.return,
                    c,
                    n
                  ), m || (O = null);
                  break e;
                }
              b = G.next;
            }
          } else if (g.tag === 18) {
            if (O = g.return, O === null)
              throw Error(
                "We just came from a parent so we must have had a parent. This is a bug in React."
              );
            O.lanes |= c, b = O.alternate, b !== null && (b.lanes |= c), vc(
              O,
              c,
              n
            ), O = null;
          } else O = g.child;
          if (O !== null) O.return = g;
          else
            for (O = g; O !== null; ) {
              if (O === n) {
                O = null;
                break;
              }
              if (g = O.sibling, g !== null) {
                g.return = O.return, O = g;
                break;
              }
              O = O.return;
            }
          g = O;
        }
      }
      function gc(n, a, c, m) {
        n = null;
        for (var g = a, b = !1; g !== null; ) {
          if (!b) {
            if ((g.flags & 524288) !== 0) b = !0;
            else if ((g.flags & 262144) !== 0) break;
          }
          if (g.tag === 10) {
            var O = g.alternate;
            if (O === null)
              throw Error("Should have a current fiber. This is a bug in React.");
            if (O = O.memoizedProps, O !== null) {
              var G = g.type;
              ge(g.pendingProps.value, O.value) || (n !== null ? n.push(G) : n = [G]);
            }
          } else if (g === iy.current) {
            if (O = g.alternate, O === null)
              throw Error("Should have a current fiber. This is a bug in React.");
            O.memoizedState.memoizedState !== g.memoizedState.memoizedState && (n !== null ? n.push(Zr) : n = [Zr]);
          }
          g = g.return;
        }
        n !== null && Ip(
          a,
          n,
          c,
          m
        ), a.flags |= 262144;
      }
      function vh(n) {
        for (n = n.firstContext; n !== null; ) {
          var a = n.context;
          if (!ge(
            yi ? a._currentValue : a._currentValue2,
            n.memoizedValue
          ))
            return !0;
          n = n.next;
        }
        return !1;
      }
      function xo(n) {
        yy = n, hd = null, n = n.dependencies, n !== null && (n.firstContext = null);
      }
      function Zn(n) {
        return dd && console.error(
          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
        ), yc(yy, n);
      }
      function Br(n, a) {
        return yy === null && xo(n), yc(n, a);
      }
      function yc(n, a) {
        var c = yi ? a._currentValue : a._currentValue2;
        if (a = { context: a, memoizedValue: c, next: null }, hd === null) {
          if (n === null)
            throw Error(
              "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
            );
          hd = a, n.dependencies = {
            lanes: 0,
            firstContext: a,
            _debugThenableState: null
          }, n.flags |= 524288;
        } else hd = hd.next = a;
        return c;
      }
      function gh() {
        return {
          controller: new N2(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function Eo(n) {
        n.controller.signal.aborted && console.warn(
          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
        ), n.refCount++;
      }
      function _c(n) {
        n.refCount--, 0 > n.refCount && console.warn(
          "A cache instance was released after it was already freed. This likely indicates a bug in React."
        ), n.refCount === 0 && O2(L2, function() {
          n.controller.abort();
        });
      }
      function yh() {
        var n = Yc.current;
        return n !== null ? n : Qn.pooledCache;
      }
      function or(n, a) {
        a === null ? we(Yc, Yc.current, n) : we(Yc, a.pool, n);
      }
      function Vp() {
        var n = yh();
        return n === null ? null : {
          parent: yi ? Ei._currentValue : Ei._currentValue2,
          pool: n
        };
      }
      function Jt(n) {
        n.flags |= 4;
      }
      function _h(n, a) {
        if (n !== null && n.child === a.child) return !1;
        if ((a.flags & 16) !== 0) return !0;
        for (n = a.child; n !== null; ) {
          if ((n.flags & 13878) !== 0 || (n.subtreeFlags & 13878) !== 0)
            return !0;
          n = n.sibling;
        }
        return !1;
      }
      function Fp(n, a, c, m) {
        if (di)
          for (c = a.child; c !== null; ) {
            if (c.tag === 5 || c.tag === 6)
              hu(n, c.stateNode);
            else if (!(c.tag === 4 || xi && c.tag === 27) && c.child !== null) {
              c.child.return = c, c = c.child;
              continue;
            }
            if (c === a) break;
            for (; c.sibling === null; ) {
              if (c.return === null || c.return === a)
                return;
              c = c.return;
            }
            c.sibling.return = c.return, c = c.sibling;
          }
        else if (hr)
          for (var g = a.child; g !== null; ) {
            if (g.tag === 5) {
              var b = g.stateNode;
              c && m && (b = Nc(
                b,
                g.type,
                g.memoizedProps
              )), hu(n, b);
            } else if (g.tag === 6)
              b = g.stateNode, c && m && (b = No(
                b,
                g.memoizedProps
              )), hu(n, b);
            else if (g.tag !== 4) {
              if (g.tag === 22 && g.memoizedState !== null)
                b = g.child, b !== null && (b.return = g), Fp(n, g, !0, !0);
              else if (g.child !== null) {
                g.child.return = g, g = g.child;
                continue;
              }
            }
            if (g === a) break;
            for (; g.sibling === null; ) {
              if (g.return === null || g.return === a)
                return;
              g = g.return;
            }
            g.sibling.return = g.return, g = g.sibling;
          }
      }
      function Gp(n, a, c, m) {
        if (hr)
          for (var g = a.child; g !== null; ) {
            if (g.tag === 5) {
              var b = g.stateNode;
              c && m && (b = Nc(
                b,
                g.type,
                g.memoizedProps
              )), Om(n, b);
            } else if (g.tag === 6)
              b = g.stateNode, c && m && (b = No(
                b,
                g.memoizedProps
              )), Om(n, b);
            else if (g.tag !== 4) {
              if (g.tag === 22 && g.memoizedState !== null)
                b = g.child, b !== null && (b.return = g), Gp(
                  n,
                  g,
                  !(g.memoizedProps !== null && g.memoizedProps.mode === "manual"),
                  !0
                );
              else if (g.child !== null) {
                g.child.return = g, g = g.child;
                continue;
              }
            }
            if (g === a) break;
            for (; g.sibling === null; ) {
              if (g.return === null || g.return === a) return;
              g = g.return;
            }
            g.sibling.return = g.return, g = g.sibling;
          }
      }
      function _g(n, a) {
        if (hr && _h(n, a)) {
          n = a.stateNode;
          var c = n.containerInfo, m = Nm();
          Gp(m, a, !1, !1), n.pendingChildren = m, Jt(a), Hi(c, m);
        }
      }
      function Xp(n, a, c, m) {
        if (di)
          n.memoizedProps !== m && Jt(a);
        else if (hr) {
          var g = n.stateNode, b = n.memoizedProps;
          if ((n = _h(n, a)) || b !== m) {
            var O = J();
            b = Um(
              g,
              c,
              b,
              m,
              !n,
              null
            ), b === g ? a.stateNode = g : (ua(
              b,
              c,
              m,
              O
            ) && Jt(a), a.stateNode = b, n ? Fp(b, a, !1, !1) : Jt(a));
          } else a.stateNode = g;
        }
      }
      function qp(n, a, c) {
        if (pu(a, c)) {
          if (n.flags |= 16777216, !dl(a, c))
            if (cu()) n.flags |= 8192;
            else
              throw ad = fy, PS;
        } else n.flags &= -16777217;
      }
      function Sg(n, a) {
        if (Pm(a)) {
          if (n.flags |= 16777216, !ns(a))
            if (cu()) n.flags |= 8192;
            else
              throw ad = fy, PS;
        } else n.flags &= -16777217;
      }
      function au(n, a) {
        a !== null && (n.flags |= 4), n.flags & 16384 && (a = n.tag !== 22 ? Ct() : 536870912, n.lanes |= a, Zc |= a);
      }
      function ps(n, a) {
        if (!bn)
          switch (n.tailMode) {
            case "hidden":
              a = n.tail;
              for (var c = null; a !== null; )
                a.alternate !== null && (c = a), a = a.sibling;
              c === null ? n.tail = null : c.sibling = null;
              break;
            case "collapsed":
              c = n.tail;
              for (var m = null; c !== null; )
                c.alternate !== null && (m = c), c = c.sibling;
              m === null ? a || n.tail === null ? n.tail = null : n.tail.sibling = null : m.sibling = null;
          }
      }
      function Kn(n) {
        var a = n.alternate !== null && n.alternate.child === n.child, c = 0, m = 0;
        if (a)
          if ((n.mode & 2) !== ei) {
            for (var g = n.selfBaseDuration, b = n.child; b !== null; )
              c |= b.lanes | b.childLanes, m |= b.subtreeFlags & 31457280, m |= b.flags & 31457280, g += b.treeBaseDuration, b = b.sibling;
            n.treeBaseDuration = g;
          } else
            for (g = n.child; g !== null; )
              c |= g.lanes | g.childLanes, m |= g.subtreeFlags & 31457280, m |= g.flags & 31457280, g.return = n, g = g.sibling;
        else if ((n.mode & 2) !== ei) {
          g = n.actualDuration, b = n.selfBaseDuration;
          for (var O = n.child; O !== null; )
            c |= O.lanes | O.childLanes, m |= O.subtreeFlags, m |= O.flags, g += O.actualDuration, b += O.treeBaseDuration, O = O.sibling;
          n.actualDuration = g, n.treeBaseDuration = b;
        } else
          for (g = n.child; g !== null; )
            c |= g.lanes | g.childLanes, m |= g.subtreeFlags, m |= g.flags, g.return = n, g = g.sibling;
        return n.subtreeFlags |= m, n.childLanes = c, a;
      }
      function Sh(n, a, c) {
        var m = a.pendingProps;
        switch (it(a), a.tag) {
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return Kn(a), null;
          case 1:
            return Kn(a), null;
          case 3:
            return c = a.stateNode, m = null, n !== null && (m = n.memoizedState.cache), a.memoizedState.cache !== m && (a.flags |= 2048), Bs(Ei, a), qe(a), c.pendingContext && (c.context = c.pendingContext, c.pendingContext = null), (n === null || n.child === null) && (Wt(a) ? (Vn(), Jt(a)) : n === null || n.memoizedState.isDehydrated && (a.flags & 256) === 0 || (a.flags |= 1024, Qr !== null && (Xr(Qr), Qr = null))), _g(n, a), Kn(a), null;
          case 26:
            if (Vt) {
              c = a.type;
              var g = a.memoizedState;
              return n === null ? (Jt(a), g !== null ? (Kn(a), Sg(
                a,
                g
              )) : (Kn(a), qp(
                a,
                c,
                m
              ))) : g ? g !== n.memoizedState ? (Jt(a), Kn(a), Sg(
                a,
                g
              )) : (Kn(a), a.flags &= -16777217) : (di ? n.memoizedProps !== m && Jt(a) : Xp(
                n,
                a,
                c,
                m
              ), Kn(a), qp(
                a,
                c,
                m
              )), null;
            }
          case 27:
            if (xi) {
              if (Ye(a), c = k(bu.current), g = a.type, n !== null && a.stateNode != null)
                di ? n.memoizedProps !== m && Jt(a) : Xp(
                  n,
                  a,
                  g,
                  m
                );
              else {
                if (!m) {
                  if (a.stateNode === null)
                    throw Error(
                      "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                    );
                  return Kn(a), null;
                }
                n = J(), Wt(a) ? En(a, n) : (n = Xs(
                  g,
                  m,
                  c,
                  n,
                  !0
                ), a.stateNode = n, Jt(a));
              }
              return Kn(a), null;
            }
          case 5:
            if (Ye(a), c = a.type, n !== null && a.stateNode != null)
              Xp(n, a, c, m);
            else {
              if (!m) {
                if (a.stateNode === null)
                  throw Error(
                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                  );
                return Kn(a), null;
              }
              n = J(), Wt(a) ? En(a, n) : (g = k(
                bu.current
              ), g = Co(
                c,
                m,
                g,
                n,
                a
              ), Fp(g, a, !1, !1), a.stateNode = g, ua(
                g,
                c,
                m,
                n
              ) && Jt(a));
            }
            return Kn(a), qp(
              a,
              a.type,
              a.pendingProps
            ), null;
          case 6:
            if (n && a.stateNode != null)
              c = n.memoizedProps, di ? c !== m && Jt(a) : hr && (c !== m ? (n = k(
                bu.current
              ), c = J(), a.stateNode = Mn(
                m,
                n,
                c,
                a
              ), Jt(a)) : a.stateNode = n.stateNode);
            else {
              if (typeof m != "string" && a.stateNode === null)
                throw Error(
                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
                );
              if (n = k(bu.current), c = J(), Wt(a)) {
                if (!ba)
                  throw Error(
                    "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
                  );
                n = a.stateNode, c = a.memoizedProps, g = !Sl, m = null;
                var b = is;
                if (b !== null)
                  switch (b.tag) {
                    case 3:
                      g && (g = Su(
                        n,
                        c,
                        m
                      ), g !== null && (at(a, 0).serverProps = g));
                      break;
                    case 27:
                    case 5:
                      m = b.memoizedProps, g && (g = Su(
                        n,
                        c,
                        m
                      ), g !== null && (at(
                        a,
                        0
                      ).serverProps = g));
                  }
                ts(
                  n,
                  c,
                  a,
                  m
                ) || Qt(a);
              } else
                a.stateNode = Mn(
                  m,
                  n,
                  c,
                  a
                );
            }
            return Kn(a), null;
          case 13:
            if (m = a.memoizedState, n === null || n.memoizedState !== null && n.memoizedState.dehydrated !== null) {
              if (g = Wt(a), m !== null && m.dehydrated !== null) {
                if (n === null) {
                  if (!g)
                    throw Error(
                      "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
                    );
                  if (!ba)
                    throw Error(
                      "Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
                    );
                  if (g = a.memoizedState, g = g !== null ? g.dehydrated : null, !g)
                    throw Error(
                      "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
                    );
                  Gs(g, a), Kn(a), (a.mode & 2) !== ei && m !== null && (g = a.child, g !== null && (a.treeBaseDuration -= g.treeBaseDuration));
                } else
                  Vn(), ti(), (a.flags & 128) === 0 && (a.memoizedState = null), a.flags |= 4, Kn(a), (a.mode & 2) !== ei && m !== null && (g = a.child, g !== null && (a.treeBaseDuration -= g.treeBaseDuration));
                g = !1;
              } else
                Qr !== null && (Xr(Qr), Qr = null), g = !0;
              if (!g)
                return a.flags & 256 ? (er(a), a) : (er(a), null);
            }
            return er(a), (a.flags & 128) !== 0 ? (a.lanes = c, (a.mode & 2) !== ei && Ln(a), a) : (c = m !== null, n = n !== null && n.memoizedState !== null, c && (m = a.child, g = null, m.alternate !== null && m.alternate.memoizedState !== null && m.alternate.memoizedState.cachePool !== null && (g = m.alternate.memoizedState.cachePool.pool), b = null, m.memoizedState !== null && m.memoizedState.cachePool !== null && (b = m.memoizedState.cachePool.pool), b !== g && (m.flags |= 2048)), c !== n && c && (a.child.flags |= 8192), au(a, a.updateQueue), Kn(a), (a.mode & 2) !== ei && c && (n = a.child, n !== null && (a.treeBaseDuration -= n.treeBaseDuration)), null);
          case 4:
            return qe(a), _g(n, a), n === null && Cm(a.stateNode.containerInfo), Kn(a), null;
          case 10:
            return Bs(a.type, a), Kn(a), null;
          case 19:
            if (Te(ea, a), g = a.memoizedState, g === null)
              return Kn(a), null;
            if (m = (a.flags & 128) !== 0, b = g.rendering, b === null)
              if (m) ps(g, !1);
              else {
                if (bi !== bl || n !== null && (n.flags & 128) !== 0)
                  for (n = a.child; n !== null; ) {
                    if (b = ac(n), b !== null) {
                      for (a.flags |= 128, ps(g, !1), n = b.updateQueue, a.updateQueue = n, au(a, n), a.subtreeFlags = 0, n = c, c = a.child; c !== null; )
                        Gg(c, n), c = c.sibling;
                      return we(
                        ea,
                        ea.current & od | Qm,
                        a
                      ), a.child;
                    }
                    n = n.sibling;
                  }
                g.tail !== null && D() > sv && (a.flags |= 128, m = !0, ps(g, !1), a.lanes = 4194304);
              }
            else {
              if (!m)
                if (n = ac(b), n !== null) {
                  if (a.flags |= 128, m = !0, n = n.updateQueue, a.updateQueue = n, au(a, n), ps(g, !0), g.tail === null && g.tailMode === "hidden" && !b.alternate && !bn)
                    return Kn(a), null;
                } else
                  2 * D() - g.renderingStartTime > sv && c !== 536870912 && (a.flags |= 128, m = !0, ps(g, !1), a.lanes = 4194304);
              g.isBackwards ? (b.sibling = a.child, a.child = b) : (n = g.last, n !== null ? n.sibling = b : a.child = b, g.last = b);
            }
            return g.tail !== null ? (n = g.tail, g.rendering = n, g.tail = n.sibling, g.renderingStartTime = D(), n.sibling = null, c = ea.current, c = m ? c & od | Qm : c & od, we(ea, c, a), n) : (Kn(a), null);
          case 22:
          case 23:
            return er(a), Ql(a), m = a.memoizedState !== null, n !== null ? n.memoizedState !== null !== m && (a.flags |= 8192) : m && (a.flags |= 8192), m ? (c & 536870912) !== 0 && (a.flags & 128) === 0 && (Kn(a), a.subtreeFlags & 6 && (a.flags |= 8192)) : Kn(a), c = a.updateQueue, c !== null && au(a, c.retryQueue), c = null, n !== null && n.memoizedState !== null && n.memoizedState.cachePool !== null && (c = n.memoizedState.cachePool.pool), m = null, a.memoizedState !== null && a.memoizedState.cachePool !== null && (m = a.memoizedState.cachePool.pool), m !== c && (a.flags |= 2048), n !== null && Te(Yc, a), null;
          case 24:
            return c = null, n !== null && (c = n.memoizedState.cache), a.memoizedState.cache !== c && (a.flags |= 2048), Bs(Ei, a), Kn(a), null;
          case 25:
            return null;
        }
        throw Error(
          "Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue."
        );
      }
      function il(n, a) {
        switch (it(a), a.tag) {
          case 1:
            return n = a.flags, n & 65536 ? (a.flags = n & -65537 | 128, (a.mode & 2) !== ei && Ln(a), a) : null;
          case 3:
            return Bs(Ei, a), qe(a), n = a.flags, (n & 65536) !== 0 && (n & 128) === 0 ? (a.flags = n & -65537 | 128, a) : null;
          case 26:
          case 27:
          case 5:
            return Ye(a), null;
          case 13:
            if (er(a), n = a.memoizedState, n !== null && n.dehydrated !== null) {
              if (a.alternate === null)
                throw Error(
                  "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
                );
              ti();
            }
            return n = a.flags, n & 65536 ? (a.flags = n & -65537 | 128, (a.mode & 2) !== ei && Ln(a), a) : null;
          case 19:
            return Te(ea, a), null;
          case 4:
            return qe(a), null;
          case 10:
            return Bs(a.type, a), null;
          case 22:
          case 23:
            return er(a), Ql(a), n !== null && Te(Yc, a), n = a.flags, n & 65536 ? (a.flags = n & -65537 | 128, (a.mode & 2) !== ei && Ln(a), a) : null;
          case 24:
            return Bs(Ei, a), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function Yp(n, a) {
        switch (it(a), a.tag) {
          case 3:
            Bs(Ei, a), qe(a);
            break;
          case 26:
          case 27:
          case 5:
            Ye(a);
            break;
          case 4:
            qe(a);
            break;
          case 13:
            er(a);
            break;
          case 19:
            Te(ea, a);
            break;
          case 10:
            Bs(a.type, a);
            break;
          case 22:
          case 23:
            er(a), Ql(a), n !== null && Te(Yc, a);
            break;
          case 24:
            Bs(Ei, a);
        }
      }
      function ms(n) {
        return (n.mode & 2) !== ei;
      }
      function xh(n, a) {
        ms(n) ? (nn(), su(a, n), It()) : su(a, n);
      }
      function Wp(n, a, c) {
        ms(n) ? (nn(), al(
          c,
          n,
          a
        ), It()) : al(
          c,
          n,
          a
        );
      }
      function su(n, a) {
        try {
          var c = a.updateQueue, m = c !== null ? c.lastEffect : null;
          if (m !== null) {
            var g = m.next;
            c = g;
            do {
              if ((c.tag & n) === n && ((n & ta) !== Mr ? st !== null && typeof st.markComponentPassiveEffectMountStarted == "function" && st.markComponentPassiveEffectMountStarted(
                a
              ) : (n & Ra) !== Mr && st !== null && typeof st.markComponentLayoutEffectMountStarted == "function" && st.markComponentLayoutEffectMountStarted(
                a
              ), m = void 0, (n & as) !== Mr && (Sd = !0), m = Q(
                a,
                C2,
                c
              ), (n & as) !== Mr && (Sd = !1), (n & ta) !== Mr ? st !== null && typeof st.markComponentPassiveEffectMountStopped == "function" && st.markComponentPassiveEffectMountStopped() : (n & Ra) !== Mr && st !== null && typeof st.markComponentLayoutEffectMountStopped == "function" && st.markComponentLayoutEffectMountStopped(), m !== void 0 && typeof m != "function")) {
                var b = void 0;
                b = (c.tag & Ra) !== 0 ? "useLayoutEffect" : (c.tag & as) !== 0 ? "useInsertionEffect" : "useEffect";
                var O = void 0;
                O = m === null ? " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof m.then == "function" ? `

It looks like you wrote ` + b + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + b + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching` : " You returned: " + m, Q(
                  a,
                  function(G, re) {
                    console.error(
                      "%s must not return anything besides a function, which is used for clean-up.%s",
                      G,
                      re
                    );
                  },
                  b,
                  O
                );
              }
              c = c.next;
            } while (c !== g);
          }
        } catch (G) {
          Dn(a, a.return, G);
        }
      }
      function al(n, a, c) {
        try {
          var m = a.updateQueue, g = m !== null ? m.lastEffect : null;
          if (g !== null) {
            var b = g.next;
            m = b;
            do {
              if ((m.tag & n) === n) {
                var O = m.inst, G = O.destroy;
                G !== void 0 && (O.destroy = void 0, (n & ta) !== Mr ? st !== null && typeof st.markComponentPassiveEffectUnmountStarted == "function" && st.markComponentPassiveEffectUnmountStarted(
                  a
                ) : (n & Ra) !== Mr && st !== null && typeof st.markComponentLayoutEffectUnmountStarted == "function" && st.markComponentLayoutEffectUnmountStarted(
                  a
                ), (n & as) !== Mr && (Sd = !0), Q(
                  a,
                  D2,
                  a,
                  c,
                  G
                ), (n & as) !== Mr && (Sd = !1), (n & ta) !== Mr ? st !== null && typeof st.markComponentPassiveEffectUnmountStopped == "function" && st.markComponentPassiveEffectUnmountStopped() : (n & Ra) !== Mr && st !== null && typeof st.markComponentLayoutEffectUnmountStopped == "function" && st.markComponentLayoutEffectUnmountStopped());
              }
              m = m.next;
            } while (m !== b);
          }
        } catch (re) {
          Dn(a, a.return, re);
        }
      }
      function jp(n, a) {
        ms(n) ? (nn(), su(a, n), It()) : su(a, n);
      }
      function Eh(n, a, c) {
        ms(n) ? (nn(), al(
          c,
          n,
          a
        ), It()) : al(
          c,
          n,
          a
        );
      }
      function Zp(n) {
        var a = n.updateQueue;
        if (a !== null) {
          var c = n.stateNode;
          n.type.defaultProps || "ref" in n.memoizedProps || fd || (c.props !== n.memoizedProps && console.error(
            "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
            U(n) || "instance"
          ), c.state !== n.memoizedState && console.error(
            "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
            U(n) || "instance"
          ));
          try {
            Q(
              n,
              gp,
              a,
              c
            );
          } catch (m) {
            Dn(n, n.return, m);
          }
        }
      }
      function Kp(n, a, c) {
        return n.getSnapshotBeforeUpdate(a, c);
      }
      function pn(n, a) {
        var c = a.memoizedProps, m = a.memoizedState;
        a = n.stateNode, n.type.defaultProps || "ref" in n.memoizedProps || fd || (a.props !== n.memoizedProps && console.error(
          "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
          U(n) || "instance"
        ), a.state !== n.memoizedState && console.error(
          "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
          U(n) || "instance"
        ));
        try {
          var g = ds(
            n.type,
            c,
            n.elementType === n.type
          ), b = Q(
            n,
            Kp,
            a,
            g,
            m
          );
          c = Eb, b !== void 0 || c.has(n.type) || (c.add(n.type), Q(n, function() {
            console.error(
              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
              U(n)
            );
          })), a.__reactInternalSnapshotBeforeUpdate = b;
        } catch (O) {
          Dn(n, n.return, O);
        }
      }
      function xg(n, a, c) {
        c.props = ds(
          n.type,
          n.memoizedProps
        ), c.state = n.memoizedState, ms(n) ? (nn(), Q(
          n,
          qM,
          n,
          a,
          c
        ), It()) : Q(
          n,
          qM,
          n,
          a,
          c
        );
      }
      function Ka(n) {
        var a = n.ref;
        if (a !== null) {
          var c = n.stateNode;
          switch (n.tag) {
            case 26:
            case 27:
            case 5:
              c = _s(c);
          }
          if (typeof a == "function")
            if (ms(n))
              try {
                nn(), n.refCleanup = a(c);
              } finally {
                It();
              }
            else n.refCleanup = a(c);
          else
            typeof a == "string" ? console.error("String refs are no longer supported.") : a.hasOwnProperty("current") || console.error(
              "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
              U(n)
            ), a.current = c;
        }
      }
      function Pr(n, a) {
        try {
          Q(n, Ka, n);
        } catch (c) {
          Dn(n, a, c);
        }
      }
      function Qa(n, a) {
        var c = n.ref, m = n.refCleanup;
        if (c !== null)
          if (typeof m == "function")
            try {
              if (ms(n))
                try {
                  nn(), Q(n, m);
                } finally {
                  It(n);
                }
              else Q(n, m);
            } catch (g) {
              Dn(n, a, g);
            } finally {
              n.refCleanup = null, n = n.alternate, n != null && (n.refCleanup = null);
            }
          else if (typeof c == "function")
            try {
              if (ms(n))
                try {
                  nn(), Q(n, c, null);
                } finally {
                  It(n);
                }
              else Q(n, c, null);
            } catch (g) {
              Dn(n, a, g);
            }
          else c.current = null;
      }
      function Sc(n, a, c, m) {
        var g = n.memoizedProps, b = g.id, O = g.onCommit;
        g = g.onRender, a = a === null ? "mount" : "update", sy && (a = "nested-update"), typeof g == "function" && g(
          b,
          a,
          n.actualDuration,
          n.treeBaseDuration,
          n.actualStartTime,
          c
        ), typeof O == "function" && O(
          n.memoizedProps.id,
          a,
          m,
          c
        );
      }
      function ru(n, a, c, m) {
        var g = n.memoizedProps;
        n = g.id, g = g.onPostCommit, a = a === null ? "mount" : "update", sy && (a = "nested-update"), typeof g == "function" && g(
          n,
          a,
          m,
          c
        );
      }
      function sl(n) {
        var a = n.type, c = n.memoizedProps, m = n.stateNode;
        try {
          Q(
            n,
            jh,
            m,
            a,
            c,
            n
          );
        } catch (g) {
          Dn(n, n.return, g);
        }
      }
      function Qp(n, a, c) {
        try {
          Q(
            n,
            yu,
            n.stateNode,
            n.type,
            c,
            a,
            n
          );
        } catch (m) {
          Dn(n, n.return, m);
        }
      }
      function Mh(n) {
        return n.tag === 5 || n.tag === 3 || (Vt ? n.tag === 26 : !1) || (xi ? n.tag === 27 : !1) || n.tag === 4;
      }
      function kp(n) {
        e: for (; ; ) {
          for (; n.sibling === null; ) {
            if (n.return === null || Mh(n.return)) return null;
            n = n.return;
          }
          for (n.sibling.return = n.return, n = n.sibling; n.tag !== 5 && n.tag !== 6 && (!xi || n.tag !== 27) && n.tag !== 18; ) {
            if (n.flags & 2 || n.child === null || n.tag === 4) continue e;
            n.child.return = n, n = n.child;
          }
          if (!(n.flags & 2)) return n.stateNode;
        }
      }
      function bh(n, a, c) {
        var m = n.tag;
        if (m === 5 || m === 6)
          n = n.stateNode, a ? Zh(c, n, a) : zn(c, n);
        else if (!(m === 4 || xi && m === 27) && (n = n.child, n !== null))
          for (bh(n, a, c), n = n.sibling; n !== null; )
            bh(n, a, c), n = n.sibling;
      }
      function Ps(n, a, c) {
        var m = n.tag;
        if (m === 5 || m === 6)
          n = n.stateNode, a ? pl(c, n, a) : ln(c, n);
        else if (!(m === 4 || xi && m === 27) && (n = n.child, n !== null))
          for (Ps(n, a, c), n = n.sibling; n !== null; )
            Ps(n, a, c), n = n.sibling;
      }
      function Jp(n) {
        if (di && (!xi || n.tag !== 27)) {
          e: {
            for (var a = n.return; a !== null; ) {
              if (Mh(a)) {
                var c = a;
                break e;
              }
              a = a.return;
            }
            throw Error(
              "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
            );
          }
          switch (c.tag) {
            case 27:
              if (xi) {
                a = c.stateNode, c = kp(n), Ps(n, c, a);
                break;
              }
            case 5:
              a = c.stateNode, c.flags & 32 && (Jg(a), c.flags &= -33), c = kp(n), Ps(n, c, a);
              break;
            case 3:
            case 4:
              a = c.stateNode.containerInfo, c = kp(n), bh(
                n,
                c,
                a
              );
              break;
            default:
              throw Error(
                "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
              );
          }
        }
      }
      function Th(n, a, c) {
        n = n.containerInfo;
        try {
          Q(
            a,
            Kh,
            n,
            c
          );
        } catch (m) {
          Dn(a, a.return, m);
        }
      }
      function $p(n, a) {
        for (Qi(n.containerInfo), da = a; da !== null; )
          if (n = da, a = n.child, (n.subtreeFlags & 1028) !== 0 && a !== null)
            a.return = n, da = a;
          else
            for (; da !== null; ) {
              a = n = da;
              var c = a.alternate, m = a.flags;
              switch (a.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  (m & 1024) !== 0 && c !== null && pn(a, c);
                  break;
                case 3:
                  (m & 1024) !== 0 && di && vl(a.stateNode.containerInfo);
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if ((m & 1024) !== 0)
                    throw Error(
                      "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
                    );
              }
              if (a = n.sibling, a !== null) {
                a.return = n.return, da = a;
                break;
              }
              da = n.return;
            }
        return n = bb, bb = !1, n;
      }
      function Ah(n, a, c) {
        var m = c.flags;
        switch (c.tag) {
          case 0:
          case 11:
          case 15:
            Hs(n, c), m & 4 && xh(c, Ra | br);
            break;
          case 1:
            if (Hs(n, c), m & 4)
              if (n = c.stateNode, a === null)
                c.type.defaultProps || "ref" in c.memoizedProps || fd || (n.props !== c.memoizedProps && console.error(
                  "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  U(c) || "instance"
                ), n.state !== c.memoizedState && console.error(
                  "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  U(c) || "instance"
                )), ms(c) ? (nn(), Q(
                  c,
                  IS,
                  c,
                  n
                ), It()) : Q(
                  c,
                  IS,
                  c,
                  n
                );
              else {
                var g = ds(
                  c.type,
                  a.memoizedProps
                );
                a = a.memoizedState, c.type.defaultProps || "ref" in c.memoizedProps || fd || (n.props !== c.memoizedProps && console.error(
                  "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
                  U(c) || "instance"
                ), n.state !== c.memoizedState && console.error(
                  "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
                  U(c) || "instance"
                )), ms(c) ? (nn(), Q(
                  c,
                  FM,
                  c,
                  n,
                  g,
                  a,
                  n.__reactInternalSnapshotBeforeUpdate
                ), It()) : Q(
                  c,
                  FM,
                  c,
                  n,
                  g,
                  a,
                  n.__reactInternalSnapshotBeforeUpdate
                );
              }
            m & 64 && Zp(c), m & 512 && Pr(c, c.return);
            break;
          case 3:
            if (a = tt(), Hs(n, c), m & 64 && (m = c.updateQueue, m !== null)) {
              if (g = null, c.child !== null)
                switch (c.child.tag) {
                  case 27:
                  case 5:
                    g = _s(c.child.stateNode);
                    break;
                  case 1:
                    g = c.child.stateNode;
                }
              try {
                Q(
                  c,
                  gp,
                  m,
                  g
                );
              } catch (G) {
                Dn(c, c.return, G);
              }
            }
            n.effectDuration += St(a);
            break;
          case 26:
            if (Vt) {
              Hs(n, c), m & 512 && Pr(c, c.return);
              break;
            }
          case 27:
          case 5:
            Hs(n, c), a === null && m & 4 && sl(c), m & 512 && Pr(c, c.return);
            break;
          case 12:
            if (m & 4) {
              m = tt(), Hs(n, c), n = c.stateNode, n.effectDuration += pt(m);
              try {
                Q(
                  c,
                  Sc,
                  c,
                  a,
                  ay,
                  n.effectDuration
                );
              } catch (G) {
                Dn(c, c.return, G);
              }
            } else Hs(n, c);
            break;
          case 13:
            Hs(n, c), m & 4 && tm(n, c);
            break;
          case 22:
            if (g = c.memoizedState !== null || Ml, !g) {
              a = a !== null && a.memoizedState !== null || Mi;
              var b = Ml, O = Mi;
              Ml = g, (Mi = a) && !O ? Ir(
                n,
                c,
                (c.subtreeFlags & 8772) !== 0
              ) : Hs(n, c), Ml = b, Mi = O;
            }
            m & 512 && (c.memoizedProps.mode === "manual" ? Pr(c, c.return) : Qa(c, c.return));
            break;
          default:
            Hs(n, c);
        }
      }
      function Hr(n) {
        var a = n.alternate;
        a !== null && (n.alternate = null, Hr(a)), n.child = null, n.deletions = null, n.sibling = null, n.tag === 5 && (a = n.stateNode, a !== null && Dm(a)), n.stateNode = null, n._debugOwner = null, n.return = null, n.dependencies = null, n.memoizedProps = null, n.memoizedState = null, n.pendingProps = null, n.stateNode = null, n.updateQueue = null;
      }
      function vs(n, a, c) {
        for (c = c.child; c !== null; )
          em(
            n,
            a,
            c
          ), c = c.sibling;
      }
      function em(n, a, c) {
        if (Ot && typeof Ot.onCommitFiberUnmount == "function")
          try {
            Ot.onCommitFiberUnmount(ft, c);
          } catch (b) {
            La || (La = !0, console.error(
              "React instrumentation encountered an error: %s",
              b
            ));
          }
        switch (c.tag) {
          case 26:
            if (Vt) {
              Mi || Qa(c, a), vs(
                n,
                a,
                c
              ), c.memoizedState ? yl(c.memoizedState) : c.stateNode && ii(c.stateNode);
              break;
            }
          case 27:
            if (xi) {
              Mi || Qa(c, a);
              var m = Fi, g = qs;
              Fi = c.stateNode, vs(
                n,
                a,
                c
              ), zc(c.stateNode), Fi = m, qs = g;
              break;
            }
          case 5:
            Mi || Qa(c, a);
          case 6:
            if (di) {
              if (m = Fi, g = qs, Fi = null, vs(
                n,
                a,
                c
              ), Fi = m, qs = g, Fi !== null)
                if (qs)
                  try {
                    Q(
                      c,
                      _u,
                      Fi,
                      c.stateNode
                    );
                  } catch (b) {
                    Dn(
                      c,
                      a,
                      b
                    );
                  }
                else
                  try {
                    Q(
                      c,
                      Uc,
                      Fi,
                      c.stateNode
                    );
                  } catch (b) {
                    Dn(
                      c,
                      a,
                      b
                    );
                  }
            } else
              vs(
                n,
                a,
                c
              );
            break;
          case 18:
            di && Fi !== null && (qs ? Jh(
              Fi,
              c.stateNode
            ) : kh(Fi, c.stateNode));
            break;
          case 4:
            di ? (m = Fi, g = qs, Fi = c.stateNode.containerInfo, qs = !0, vs(
              n,
              a,
              c
            ), Fi = m, qs = g) : (hr && Th(
              c.stateNode,
              c,
              Nm()
            ), vs(
              n,
              a,
              c
            ));
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            Mi || al(
              as,
              c,
              a
            ), Mi || Wp(
              c,
              a,
              Ra
            ), vs(
              n,
              a,
              c
            );
            break;
          case 1:
            Mi || (Qa(c, a), m = c.stateNode, typeof m.componentWillUnmount == "function" && xg(
              c,
              a,
              m
            )), vs(
              n,
              a,
              c
            );
            break;
          case 21:
            vs(
              n,
              a,
              c
            );
            break;
          case 22:
            Mi || Qa(c, a), Mi = (m = Mi) || c.memoizedState !== null, vs(
              n,
              a,
              c
            ), Mi = m;
            break;
          default:
            vs(
              n,
              a,
              c
            );
        }
      }
      function tm(n, a) {
        if (ba && a.memoizedState === null && (n = a.alternate, n !== null && (n = n.memoizedState, n !== null && (n = n.dehydrated, n !== null))))
          try {
            Q(
              a,
              Qh,
              n
            );
          } catch (c) {
            Dn(a, a.return, c);
          }
      }
      function oS(n) {
        switch (n.tag) {
          case 13:
          case 19:
            var a = n.stateNode;
            return a === null && (a = n.stateNode = new Mb()), a;
          case 22:
            return n = n.stateNode, a = n._retryCache, a === null && (a = n._retryCache = new Mb()), a;
          default:
            throw Error(
              "Unexpected Suspense handler tag (" + n.tag + "). This is a bug in React."
            );
        }
      }
      function Gt(n, a) {
        var c = oS(n);
        a.forEach(function(m) {
          var g = Bg.bind(null, n, m);
          if (!c.has(m)) {
            if (c.add(m), $i)
              if (pd !== null && md !== null)
                Mc(md, pd);
              else
                throw Error(
                  "Expected finished root and lanes to be set. This is a bug in React."
                );
            m.then(g, g);
          }
        });
      }
      function nm(n, a, c) {
        pd = c, md = n, Rh(a, n), md = pd = null;
      }
      function Sa(n, a) {
        var c = a.deletions;
        if (c !== null)
          for (var m = 0; m < c.length; m++) {
            var g = n, b = a, O = c[m];
            if (di) {
              var G = b;
              e: for (; G !== null; ) {
                switch (G.tag) {
                  case 27:
                  case 5:
                    Fi = G.stateNode, qs = !1;
                    break e;
                  case 3:
                    Fi = G.stateNode.containerInfo, qs = !0;
                    break e;
                  case 4:
                    Fi = G.stateNode.containerInfo, qs = !0;
                    break e;
                }
                G = G.return;
              }
              if (Fi === null)
                throw Error(
                  "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
                );
              em(g, b, O), Fi = null, qs = !1;
            } else em(g, b, O);
            g = O, b = g.alternate, b !== null && (b.return = null), g.return = null;
          }
        if (a.subtreeFlags & 13878)
          for (a = a.child; a !== null; )
            Rh(a, n), a = a.sibling;
      }
      function Rh(n, a) {
        var c = n.alternate, m = n.flags;
        switch (n.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Sa(a, n), oa(n), m & 4 && (al(
              as | br,
              n,
              n.return
            ), su(as | br, n), Wp(
              n,
              n.return,
              Ra | br
            ));
            break;
          case 1:
            Sa(a, n), oa(n), m & 512 && (Mi || c === null || Qa(c, c.return)), m & 64 && Ml && (n = n.updateQueue, n !== null && (m = n.callbacks, m !== null && (c = n.shared.hiddenCallbacks, n.shared.hiddenCallbacks = c === null ? m : c.concat(m))));
            break;
          case 26:
            if (Vt) {
              var g = Jr;
              Sa(a, n), oa(n), m & 512 && (Mi || c === null || Qa(c, c.return)), m & 4 && (m = c !== null ? c.memoizedState : null, a = n.memoizedState, c === null ? a === null ? n.stateNode === null ? n.stateNode = Bm(
                g,
                n.type,
                n.memoizedProps,
                n
              ) : yr(
                g,
                n.type,
                n.stateNode
              ) : n.stateNode = gr(
                g,
                a,
                n.memoizedProps
              ) : m !== a ? (m === null ? c.stateNode !== null && ii(c.stateNode) : yl(m), a === null ? yr(
                g,
                n.type,
                n.stateNode
              ) : gr(
                g,
                a,
                n.memoizedProps
              )) : a === null && n.stateNode !== null && Qp(
                n,
                n.memoizedProps,
                c.memoizedProps
              ));
              break;
            }
          case 27:
            if (xi && m & 4 && n.alternate === null) {
              g = n.stateNode;
              var b = n.memoizedProps;
              try {
                Hm(g), Q(
                  n,
                  Im,
                  n.type,
                  b,
                  g,
                  n
                );
              } catch (ke) {
                Dn(n, n.return, ke);
              }
            }
          case 5:
            if (Sa(a, n), oa(n), m & 512 && (Mi || c === null || Qa(c, c.return)), di) {
              if (n.flags & 32) {
                a = n.stateNode;
                try {
                  Q(n, Jg, a);
                } catch (ke) {
                  Dn(
                    n,
                    n.return,
                    ke
                  );
                }
              }
              m & 4 && n.stateNode != null && (a = n.memoizedProps, Qp(
                n,
                a,
                c !== null ? c.memoizedProps : a
              )), m & 1024 && (KS = !0, n.type !== "form" && console.error(
                "Unexpected host component type. Expected a form. This is a bug in React."
              ));
            }
            break;
          case 6:
            if (Sa(a, n), oa(n), m & 4 && di) {
              if (n.stateNode === null)
                throw Error(
                  "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
                );
              m = n.memoizedProps, c = c !== null ? c.memoizedProps : m, a = n.stateNode;
              try {
                Q(
                  n,
                  _i,
                  a,
                  c,
                  m
                );
              } catch (ke) {
                Dn(n, n.return, ke);
              }
            }
            break;
          case 3:
            if (g = tt(), Vt ? (_l(), b = Jr, Jr = Pn(a.containerInfo), Sa(a, n), Jr = b) : Sa(a, n), oa(n), m & 4) {
              if (di && ba && c !== null && c.memoizedState.isDehydrated)
                try {
                  Q(
                    n,
                    AS,
                    a.containerInfo
                  );
                } catch (ke) {
                  Dn(
                    n,
                    n.return,
                    ke
                  );
                }
              if (hr) {
                m = a.containerInfo, c = a.pendingChildren;
                try {
                  Q(
                    n,
                    Kh,
                    m,
                    c
                  );
                } catch (ke) {
                  Dn(
                    n,
                    n.return,
                    ke
                  );
                }
              }
            }
            KS && (KS = !1, Eg(n)), a.effectDuration += St(g);
            break;
          case 4:
            Vt ? (c = Jr, Jr = Pn(
              n.stateNode.containerInfo
            ), Sa(a, n), oa(n), Jr = c) : (Sa(a, n), oa(n)), m & 4 && hr && Th(
              n.stateNode,
              n,
              n.stateNode.pendingChildren
            );
            break;
          case 12:
            m = tt(), Sa(a, n), oa(n), n.stateNode.effectDuration += pt(m);
            break;
          case 13:
            Sa(a, n), oa(n), n.child.flags & 8192 && n.memoizedState !== null != (c !== null && c.memoizedState !== null) && (tx = D()), m & 4 && (m = n.updateQueue, m !== null && (n.updateQueue = null, Gt(n, m)));
            break;
          case 22:
            m & 512 && (Mi || c === null || Qa(c, c.return)), g = n.memoizedState !== null;
            var O = c !== null && c.memoizedState !== null, G = Ml, re = Mi;
            if (Ml = G || g, Mi = re || O, Sa(a, n), Mi = re, Ml = G, oa(n), a = n.stateNode, a._current = n, a._visibility &= -3, a._visibility |= a._pendingVisibility & 2, m & 8192 && (a._visibility = g ? a._visibility & -2 : a._visibility | 1, g && (a = Ml || Mi, c === null || O || a || lu(n)), di && (n.memoizedProps === null || n.memoizedProps.mode !== "manual"))) {
              e: if (c = null, di)
                for (a = n; ; ) {
                  if (a.tag === 5 || Vt && a.tag === 26 || xi && a.tag === 27) {
                    if (c === null) {
                      O = c = a;
                      try {
                        b = O.stateNode, g ? Q(O, wm, b) : Q(
                          O,
                          ml,
                          O.stateNode,
                          O.memoizedProps
                        );
                      } catch (ke) {
                        Dn(
                          O,
                          O.return,
                          ke
                        );
                      }
                    }
                  } else if (a.tag === 6) {
                    if (c === null) {
                      O = a;
                      try {
                        var Ee = O.stateNode;
                        g ? Q(
                          O,
                          mr,
                          Ee
                        ) : Q(
                          O,
                          Uo,
                          Ee,
                          O.memoizedProps
                        );
                      } catch (ke) {
                        Dn(
                          O,
                          O.return,
                          ke
                        );
                      }
                    }
                  } else if ((a.tag !== 22 && a.tag !== 23 || a.memoizedState === null || a === n) && a.child !== null) {
                    a.child.return = a, a = a.child;
                    continue;
                  }
                  if (a === n) break e;
                  for (; a.sibling === null; ) {
                    if (a.return === null || a.return === n)
                      break e;
                    c === a && (c = null), a = a.return;
                  }
                  c === a && (c = null), a.sibling.return = a.return, a = a.sibling;
                }
            }
            m & 4 && (m = n.updateQueue, m !== null && (c = m.retryQueue, c !== null && (m.retryQueue = null, Gt(n, c))));
            break;
          case 19:
            Sa(a, n), oa(n), m & 4 && (m = n.updateQueue, m !== null && (n.updateQueue = null, Gt(n, m)));
            break;
          case 21:
            break;
          default:
            Sa(a, n), oa(n);
        }
      }
      function oa(n) {
        var a = n.flags;
        if (a & 2) {
          try {
            Q(n, Jp, n);
          } catch (c) {
            Dn(n, n.return, c);
          }
          n.flags &= -3;
        }
        a & 4096 && (n.flags &= -4097);
      }
      function Eg(n) {
        if (n.subtreeFlags & 1024)
          for (n = n.child; n !== null; ) {
            var a = n;
            Eg(a), a.tag === 5 && a.flags & 1024 && Yh(a.stateNode), n = n.sibling;
          }
      }
      function lS(n, a, c) {
        pd = c, md = a, Ah(a, n.alternate, n), md = pd = null;
      }
      function Hs(n, a) {
        if (a.subtreeFlags & 8772)
          for (a = a.child; a !== null; )
            Ah(n, a.alternate, a), a = a.sibling;
      }
      function ou(n) {
        switch (n.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            Wp(
              n,
              n.return,
              Ra
            ), lu(n);
            break;
          case 1:
            Qa(n, n.return);
            var a = n.stateNode;
            typeof a.componentWillUnmount == "function" && xg(
              n,
              n.return,
              a
            ), lu(n);
            break;
          case 26:
          case 27:
          case 5:
            Qa(n, n.return), lu(n);
            break;
          case 22:
            Qa(n, n.return), n.memoizedState === null && lu(n);
            break;
          default:
            lu(n);
        }
      }
      function lu(n) {
        for (n = n.child; n !== null; )
          ou(n), n = n.sibling;
      }
      function Mg(n, a, c, m) {
        var g = c.flags;
        switch (c.tag) {
          case 0:
          case 11:
          case 15:
            Ir(
              n,
              c,
              m
            ), xh(c, Ra);
            break;
          case 1:
            if (Ir(
              n,
              c,
              m
            ), a = c.stateNode, typeof a.componentDidMount == "function" && Q(
              c,
              IS,
              c,
              a
            ), a = c.updateQueue, a !== null) {
              n = c.stateNode;
              try {
                Q(
                  c,
                  hg,
                  a,
                  n
                );
              } catch (b) {
                Dn(c, c.return, b);
              }
            }
            m && g & 64 && Zp(c), Pr(c, c.return);
            break;
          case 26:
          case 27:
          case 5:
            Ir(
              n,
              c,
              m
            ), m && a === null && g & 4 && sl(c), Pr(c, c.return);
            break;
          case 12:
            if (m && g & 4) {
              g = tt(), Ir(
                n,
                c,
                m
              ), m = c.stateNode, m.effectDuration += pt(g);
              try {
                Q(
                  c,
                  Sc,
                  c,
                  a,
                  ay,
                  m.effectDuration
                );
              } catch (b) {
                Dn(c, c.return, b);
              }
            } else
              Ir(
                n,
                c,
                m
              );
            break;
          case 13:
            Ir(
              n,
              c,
              m
            ), m && g & 4 && tm(n, c);
            break;
          case 22:
            c.memoizedState === null && Ir(
              n,
              c,
              m
            ), Pr(c, c.return);
            break;
          default:
            Ir(
              n,
              c,
              m
            );
        }
      }
      function Ir(n, a, c) {
        for (c = c && (a.subtreeFlags & 8772) !== 0, a = a.child; a !== null; )
          Mg(
            n,
            a.alternate,
            a,
            c
          ), a = a.sibling;
      }
      function im(n, a) {
        var c = null;
        n !== null && n.memoizedState !== null && n.memoizedState.cachePool !== null && (c = n.memoizedState.cachePool.pool), n = null, a.memoizedState !== null && a.memoizedState.cachePool !== null && (n = a.memoizedState.cachePool.pool), n !== c && (n != null && Eo(n), c != null && _c(c));
      }
      function am(n, a) {
        n = null, a.alternate !== null && (n = a.alternate.memoizedState.cache), a = a.memoizedState.cache, a !== n && (Eo(a), n != null && _c(n));
      }
      function lr(n, a, c, m) {
        if (a.subtreeFlags & 10256)
          for (a = a.child; a !== null; )
            sm(
              n,
              a,
              c,
              m
            ), a = a.sibling;
      }
      function sm(n, a, c, m) {
        var g = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 15:
            lr(
              n,
              a,
              c,
              m
            ), g & 2048 && jp(a, ta | br);
            break;
          case 3:
            var b = tt();
            lr(
              n,
              a,
              c,
              m
            ), g & 2048 && (c = null, a.alternate !== null && (c = a.alternate.memoizedState.cache), a = a.memoizedState.cache, a !== c && (Eo(a), c != null && _c(c))), n.passiveEffectDuration += St(b);
            break;
          case 12:
            if (g & 2048) {
              b = tt(), lr(
                n,
                a,
                c,
                m
              ), n = a.stateNode, n.passiveEffectDuration += pt(b);
              try {
                Q(
                  a,
                  ru,
                  a,
                  a.alternate,
                  ay,
                  n.passiveEffectDuration
                );
              } catch (O) {
                Dn(a, a.return, O);
              }
            } else
              lr(
                n,
                a,
                c,
                m
              );
            break;
          case 23:
            break;
          case 22:
            b = a.stateNode, a.memoizedState !== null ? b._visibility & 4 ? lr(
              n,
              a,
              c,
              m
            ) : xc(
              n,
              a
            ) : b._visibility & 4 ? lr(
              n,
              a,
              c,
              m
            ) : (b._visibility |= 4, Vr(
              n,
              a,
              c,
              m,
              (a.subtreeFlags & 10256) !== 0
            )), g & 2048 && im(
              a.alternate,
              a
            );
            break;
          case 24:
            lr(
              n,
              a,
              c,
              m
            ), g & 2048 && am(a.alternate, a);
            break;
          default:
            lr(
              n,
              a,
              c,
              m
            );
        }
      }
      function Vr(n, a, c, m, g) {
        for (g = g && (a.subtreeFlags & 10256) !== 0, a = a.child; a !== null; )
          rm(
            n,
            a,
            c,
            m,
            g
          ), a = a.sibling;
      }
      function rm(n, a, c, m, g) {
        var b = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 15:
            Vr(
              n,
              a,
              c,
              m,
              g
            ), jp(a, ta);
            break;
          case 23:
            break;
          case 22:
            var O = a.stateNode;
            a.memoizedState !== null ? O._visibility & 4 ? Vr(
              n,
              a,
              c,
              m,
              g
            ) : xc(
              n,
              a
            ) : (O._visibility |= 4, Vr(
              n,
              a,
              c,
              m,
              g
            )), g && b & 2048 && im(
              a.alternate,
              a
            );
            break;
          case 24:
            Vr(
              n,
              a,
              c,
              m,
              g
            ), g && b & 2048 && am(a.alternate, a);
            break;
          default:
            Vr(
              n,
              a,
              c,
              m,
              g
            );
        }
      }
      function xc(n, a) {
        if (a.subtreeFlags & 10256)
          for (a = a.child; a !== null; ) {
            var c = n, m = a, g = m.flags;
            switch (m.tag) {
              case 22:
                xc(
                  c,
                  m
                ), g & 2048 && im(
                  m.alternate,
                  m
                );
                break;
              case 24:
                xc(
                  c,
                  m
                ), g & 2048 && am(
                  m.alternate,
                  m
                );
                break;
              default:
                xc(
                  c,
                  m
                );
            }
            a = a.sibling;
          }
      }
      function rl(n) {
        if (n.subtreeFlags & vd)
          for (n = n.child; n !== null; )
            Ch(n), n = n.sibling;
      }
      function Ch(n) {
        switch (n.tag) {
          case 26:
            rl(n), n.flags & vd && (n.memoizedState !== null ? xu(
              Jr,
              n.memoizedState,
              n.memoizedProps
            ) : qh(n.type, n.memoizedProps));
            break;
          case 5:
            rl(n), n.flags & vd && qh(n.type, n.memoizedProps);
            break;
          case 3:
          case 4:
            if (Vt) {
              var a = Jr;
              Jr = Pn(
                n.stateNode.containerInfo
              ), rl(n), Jr = a;
            } else rl(n);
            break;
          case 22:
            n.memoizedState === null && (a = n.alternate, a !== null && a.memoizedState !== null ? (a = vd, vd = 16777216, rl(n), vd = a) : rl(n));
            break;
          default:
            rl(n);
        }
      }
      function ur(n) {
        var a = n.alternate;
        if (a !== null && (n = a.child, n !== null)) {
          a.child = null;
          do
            a = n.sibling, n.sibling = null, n = a;
          while (n !== null);
        }
      }
      function gi(n) {
        var a = n.deletions;
        if ((n.flags & 16) !== 0) {
          if (a !== null)
            for (var c = 0; c < a.length; c++) {
              var m = a[c];
              da = m, bg(
                m,
                n
              );
            }
          ur(n);
        }
        if (n.subtreeFlags & 10256)
          for (n = n.child; n !== null; )
            Fr(n), n = n.sibling;
      }
      function Fr(n) {
        switch (n.tag) {
          case 0:
          case 11:
          case 15:
            gi(n), n.flags & 2048 && Eh(
              n,
              n.return,
              ta | br
            );
            break;
          case 3:
            var a = tt();
            gi(n), n.stateNode.passiveEffectDuration += St(a);
            break;
          case 12:
            a = tt(), gi(n), n.stateNode.passiveEffectDuration += pt(a);
            break;
          case 22:
            a = n.stateNode, n.memoizedState !== null && a._visibility & 4 && (n.return === null || n.return.tag !== 13) ? (a._visibility &= -5, xa(n)) : gi(n);
            break;
          default:
            gi(n);
        }
      }
      function xa(n) {
        var a = n.deletions;
        if ((n.flags & 16) !== 0) {
          if (a !== null)
            for (var c = 0; c < a.length; c++) {
              var m = a[c];
              da = m, bg(
                m,
                n
              );
            }
          ur(n);
        }
        for (n = n.child; n !== null; )
          om(n), n = n.sibling;
      }
      function om(n) {
        switch (n.tag) {
          case 0:
          case 11:
          case 15:
            Eh(
              n,
              n.return,
              ta
            ), xa(n);
            break;
          case 22:
            var a = n.stateNode;
            a._visibility & 4 && (a._visibility &= -5, xa(n));
            break;
          default:
            xa(n);
        }
      }
      function bg(n, a) {
        for (; da !== null; ) {
          var c = da, m = c;
          switch (m.tag) {
            case 0:
            case 11:
            case 15:
              Eh(
                m,
                a,
                ta
              );
              break;
            case 23:
            case 22:
              m.memoizedState !== null && m.memoizedState.cachePool !== null && (m = m.memoizedState.cachePool.pool, m != null && Eo(m));
              break;
            case 24:
              _c(m.memoizedState.cache);
          }
          if (m = c.child, m !== null) m.return = c, da = m;
          else
            e: for (c = n; da !== null; ) {
              m = da;
              var g = m.sibling, b = m.return;
              if (Hr(m), m === c) {
                da = null;
                break e;
              }
              if (g !== null) {
                g.return = b, da = g;
                break e;
              }
              da = b;
            }
        }
      }
      function la(n) {
        var a = hl(n);
        if (a != null) {
          if (typeof a.memoizedProps["data-testname"] != "string")
            throw Error(
              "Invalid host root specified. Should be either a React container or a node with a testname attribute."
            );
          return a;
        }
        if (n = kg(n), n === null)
          throw Error(
            "Could not find React container within specified host subtree."
          );
        return n.stateNode.current;
      }
      function Gr(n, a) {
        var c = n.tag;
        switch (a.$$typeof) {
          case _y:
            if (n.type === a.value) return !0;
            break;
          case Sy:
            e: {
              for (a = a.value, n = [n, 0], c = 0; c < n.length; ) {
                var m = n[c++], g = m.tag, b = n[c++], O = a[b];
                if (g !== 5 && g !== 26 && g !== 27 || !ca(m)) {
                  for (; O != null && Gr(m, O); )
                    b++, O = a[b];
                  if (b === a.length) {
                    a = !0;
                    break e;
                  } else
                    for (m = m.child; m !== null; )
                      n.push(m, b), m = m.sibling;
                }
              }
              a = !1;
            }
            return a;
          case xy:
            if ((c === 5 || c === 26 || c === 27) && pr(n.stateNode, a.value))
              return !0;
            break;
          case My:
            if ((c === 5 || c === 6 || c === 26 || c === 27) && (n = Wh(n), n !== null && 0 <= n.indexOf(a.value)))
              return !0;
            break;
          case Ey:
            if ((c === 5 || c === 26 || c === 27) && (n = n.memoizedProps["data-testname"], typeof n == "string" && n.toLowerCase() === a.value.toLowerCase()))
              return !0;
            break;
          default:
            throw Error("Invalid selector type specified.");
        }
        return !1;
      }
      function lm(n) {
        switch (n.$$typeof) {
          case _y:
            return "<" + (N(n.value) || "Unknown") + ">";
          case Sy:
            return ":has(" + (lm(n) || "") + ")";
          case xy:
            return '[role="' + n.value + '"]';
          case My:
            return '"' + n.value + '"';
          case Ey:
            return '[data-testname="' + n.value + '"]';
          default:
            throw Error("Invalid selector type specified.");
        }
      }
      function Tg(n, a) {
        var c = [];
        n = [n, 0];
        for (var m = 0; m < n.length; ) {
          var g = n[m++], b = g.tag, O = n[m++], G = a[O];
          if (b !== 5 && b !== 26 && b !== 27 || !ca(g)) {
            for (; G != null && Gr(g, G); )
              O++, G = a[O];
            if (O === a.length) c.push(g);
            else
              for (g = g.child; g !== null; )
                n.push(g, O), g = g.sibling;
          }
        }
        return c;
      }
      function Dh(n, a) {
        if (!Ss)
          throw Error("Test selector API is not supported by this renderer.");
        n = la(n), n = Tg(n, a), a = [], n = Array.from(n);
        for (var c = 0; c < n.length; ) {
          var m = n[c++], g = m.tag;
          if (g === 5 || g === 26 || g === 27)
            ca(m) || a.push(m.stateNode);
          else
            for (m = m.child; m !== null; )
              n.push(m), m = m.sibling;
        }
        return a;
      }
      function uS() {
        Ss && by.forEach(function(n) {
          return n();
        });
      }
      function um() {
        var n = typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0;
        return n || Me.actQueue === null || console.error(
          "The current testing environment is not configured to support act(...)"
        ), n;
      }
      function ka(n) {
        if ((In & za) !== rs && yn !== 0)
          return yn & -yn;
        var a = Me.T;
        return a !== null ? (a._updatedFibers || (a._updatedFibers = /* @__PURE__ */ new Set()), a._updatedFibers.add(n), n = Ic, n !== 0 ? n : Js()) : du();
      }
      function cm() {
        Ws === 0 && (Ws = (yn & 536870912) === 0 || bn ? yt() : 536870912);
        var n = Er.current;
        return n !== null && (n.flags |= 32), Ws;
      }
      function ni(n, a, c) {
        if (Sd && console.error("useInsertionEffect must not schedule updates."), rx && (Cy = !0), (n === Qn && kn === jc || n.cancelPendingCommit !== null) && (uu(n, 0), qr(
          n,
          yn,
          Ws,
          !1
        )), Dt(n, c), (In & za) !== 0 && n === Qn) {
          if (Ki)
            switch (a.tag) {
              case 0:
              case 11:
              case 15:
                n = mn && U(mn) || "Unknown", wb.has(n) || (wb.add(n), a = U(a) || "Unknown", console.error(
                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
                  a,
                  n,
                  n
                ));
                break;
              case 1:
                Db || (console.error(
                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
                ), Db = !0);
            }
        } else
          $i && Ie(n, a, c), Ig(a), n === Qn && ((In & za) === rs && (Nu |= c), bi === Wc && qr(
            n,
            yn,
            Ws,
            !1
          )), dn(n);
      }
      function ol(n, a, c) {
        if ((In & (za | Ho)) !== rs)
          throw Error("Should not already be working.");
        var m = !c && (a & 60) === 0 && (a & n.expiredLanes) === 0 || We(n, a), g = m ? fS(n, a) : dm(n, a, !0), b = m;
        do {
          if (g === bl) {
            _d && !m && qr(n, a, 0, !1);
            break;
          } else if (g === Ty)
            qr(
              n,
              a,
              0,
              !Tl
            );
          else {
            if (c = n.current.alternate, b && !cS(c)) {
              g = dm(n, a, !1), b = !1;
              continue;
            }
            if (g === gd) {
              if (b = a, n.errorRecoveryDisabledLanes & b)
                var O = 0;
              else
                O = n.pendingLanes & -536870913, O = O !== 0 ? O : O & 536870912 ? 536870912 : 0;
              if (O !== 0) {
                a = O;
                e: {
                  g = n;
                  var G = O;
                  O = av;
                  var re = ba && g.current.memoizedState.isDehydrated;
                  if (re && (uu(
                    g,
                    G
                  ).flags |= 256), G = dm(
                    g,
                    G,
                    !1
                  ), G !== gd) {
                    if ($S && !re) {
                      g.errorRecoveryDisabledLanes |= b, Nu |= b, g = Wc;
                      break e;
                    }
                    g = $r, $r = O, g !== null && Xr(g);
                  }
                  g = G;
                }
                if (b = !1, g !== gd) continue;
              }
            }
            if (g === ev) {
              uu(n, 0), qr(n, a, 0, !0);
              break;
            }
            e: {
              switch (m = n, g) {
                case bl:
                case ev:
                  throw Error("Root did not complete. This is a bug in React.");
                case Wc:
                  if ((a & 4194176) === a) {
                    qr(
                      m,
                      a,
                      Ws,
                      !Tl
                    );
                    break e;
                  }
                  break;
                case gd:
                  $r = null;
                  break;
                case QS:
                case Tb:
                  break;
                default:
                  throw Error("Unknown root exit status.");
              }
              if (m.finishedWork = c, m.finishedLanes = a, Me.actQueue !== null)
                mm(
                  m,
                  $r,
                  rv,
                  Ay,
                  Ws,
                  Nu,
                  Zc,
                  Cb,
                  -0,
                  0
                );
              else {
                if ((a & 62914560) === a && (g = tx + Rb - D(), 10 < g)) {
                  if (qr(
                    m,
                    a,
                    Ws,
                    !Tl
                  ), Je(m, 0) !== 0) break e;
                  m.timeoutHandle = Vs(
                    Ag.bind(
                      null,
                      m,
                      c,
                      $r,
                      rv,
                      Ay,
                      a,
                      Ws,
                      Nu,
                      Zc,
                      Tl,
                      V2,
                      -0,
                      0
                    ),
                    g
                  );
                  break e;
                }
                Ag(
                  m,
                  c,
                  $r,
                  rv,
                  Ay,
                  a,
                  Ws,
                  Nu,
                  Zc,
                  Tl,
                  Cb,
                  -0,
                  0
                );
              }
            }
          }
          break;
        } while (!0);
        dn(n);
      }
      function Xr(n) {
        $r === null ? $r = n : $r.push.apply(
          $r,
          n
        );
      }
      function Ag(n, a, c, m, g, b, O, G, re, Ee, ke, ot, vt) {
        var xn = a.subtreeFlags;
        if ((xn & 8192 || (xn & 16785408) === 16785408) && (Do(), Ch(a), a = MS(), a !== null)) {
          n.cancelPendingCommit = a(
            mm.bind(
              null,
              n,
              c,
              m,
              g,
              O,
              G,
              re,
              I2,
              ot,
              vt
            )
          ), qr(
            n,
            b,
            O,
            !Ee
          );
          return;
        }
        mm(
          n,
          c,
          m,
          g,
          O,
          G,
          re,
          ke,
          ot,
          vt
        );
      }
      function cS(n) {
        for (var a = n; ; ) {
          var c = a.tag;
          if ((c === 0 || c === 11 || c === 15) && a.flags & 16384 && (c = a.updateQueue, c !== null && (c = c.stores, c !== null)))
            for (var m = 0; m < c.length; m++) {
              var g = c[m], b = g.getSnapshot;
              g = g.value;
              try {
                if (!ge(b(), g)) return !1;
              } catch {
                return !1;
              }
            }
          if (c = a.child, a.subtreeFlags & 16384 && c !== null)
            c.return = a, a = c;
          else {
            if (a === n) break;
            for (; a.sibling === null; ) {
              if (a.return === null || a.return === n) return !0;
              a = a.return;
            }
            a.sibling.return = a.return, a = a.sibling;
          }
        }
        return !0;
      }
      function qr(n, a, c, m) {
        a &= ~ex, a &= ~Nu, n.suspendedLanes |= a, n.pingedLanes &= ~a, m && (n.warmLanes |= a), m = n.expirationTimes;
        for (var g = a; 0 < g; ) {
          var b = 31 - Ji(g), O = 1 << b;
          m[b] = -1, g &= ~O;
        }
        c !== 0 && Be(n, c, a);
      }
      function Mo() {
        return (In & (za | Ho)) === rs ? (vn(0), !1) : !0;
      }
      function fm() {
        if (mn !== null) {
          if (kn === bs)
            var n = mn.return;
          else
            n = mn, mc(), Vf(n), sd = null, Km = 0, n = mn;
          for (; n !== null; )
            Yp(n.alternate, n), n = n.return;
          mn = null;
        }
      }
      function uu(n, a) {
        n.finishedWork = null, n.finishedLanes = 0;
        var c = n.timeoutHandle;
        c !== Cc && (n.timeoutHandle = Cc, fr(c)), c = n.cancelPendingCommit, c !== null && (n.cancelPendingCommit = null, c()), fm(), Qn = n, mn = c = Ao(n.current, null), yn = a, kn = bs, Ys = null, Tl = !1, _d = We(n, a), $S = !1, bi = bl, Zc = Ws = ex = Nu = Uu = 0, $r = av = null, Ay = !1, (a & 8) !== 0 && (a |= a & 32);
        var m = n.entangledLanes;
        if (m !== 0)
          for (n = n.entanglements, m &= a; 0 < m; ) {
            var g = 31 - Ji(m), b = 1 << g;
            a |= n[g], m &= ~b;
          }
        return Io = a, V(), kr.discardPendingWarnings(), c;
      }
      function Rg(n, a) {
        Zt = null, Me.H = Po, Me.getCurrentStack = null, Ki = !1, Zi = null, a === cy ? (a = Of(), kn = nv) : a === PS ? (a = Of(), kn = Ab) : kn = a === pb ? JS : a !== null && typeof a == "object" && typeof a.then == "function" ? yd : tv, Ys = a;
        var c = mn;
        if (c === null)
          bi = ev, Os(
            n,
            Xe(a, n.current)
          );
        else
          switch (c.mode & 2 && Pt(c), he(), kn) {
            case tv:
              st !== null && typeof st.markComponentErrored == "function" && st.markComponentErrored(
                c,
                a,
                yn
              );
              break;
            case jc:
            case nv:
            case yd:
            case iv:
              st !== null && typeof st.markComponentSuspended == "function" && st.markComponentSuspended(
                c,
                a,
                yn
              );
          }
      }
      function cu() {
        var n = Er.current;
        return n === null ? !0 : (yn & 4194176) === yn ? Bo === null : (yn & 62914560) === yn || (yn & 536870912) !== 0 ? n === Bo : !1;
      }
      function Cg() {
        var n = Me.H;
        return Me.H = Po, n === null ? Po : n;
      }
      function Dg() {
        var n = Me.A;
        return Me.A = z2, n;
      }
      function hm() {
        bi = Wc, Tl || (yn & 4194176) !== yn && Er.current !== null || (_d = !0), (Uu & 134217727) === 0 && (Nu & 134217727) === 0 || Qn === null || qr(
          Qn,
          yn,
          Ws,
          !1
        );
      }
      function dm(n, a, c) {
        var m = In;
        In |= za;
        var g = Cg(), b = Dg();
        if (Qn !== n || yn !== a) {
          if ($i) {
            var O = n.memoizedUpdaters;
            0 < O.size && (Mc(n, yn), O.clear()), De(n, a);
          }
          rv = null, uu(n, a);
        }
        be(a), a = !1, O = bi;
        e: do
          try {
            if (kn !== bs && mn !== null) {
              var G = mn, re = Ys;
              switch (kn) {
                case JS:
                  fm(), O = Ty;
                  break e;
                case nv:
                case jc:
                case yd:
                  Er.current === null && (a = !0);
                  var Ee = kn;
                  if (kn = bs, Ys = null, fu(n, G, re, Ee), c && _d) {
                    O = bl;
                    break e;
                  }
                  break;
                default:
                  Ee = kn, kn = bs, Ys = null, fu(n, G, re, Ee);
              }
            }
            wg(), O = bi;
            break;
          } catch (ke) {
            Rg(n, ke);
          }
        while (!0);
        return a && n.shellSuspendCounter++, mc(), In = m, Me.H = g, Me.A = b, He(), mn === null && (Qn = null, yn = 0, V()), O;
      }
      function wg() {
        for (; mn !== null; ) Ug(mn);
      }
      function fS(n, a) {
        var c = In;
        In |= za;
        var m = Cg(), g = Dg();
        if (Qn !== n || yn !== a) {
          if ($i) {
            var b = n.memoizedUpdaters;
            0 < b.size && (Mc(n, yn), b.clear()), De(n, a);
          }
          rv = null, sv = D() + nx, uu(n, a);
        } else
          _d = We(
            n,
            a
          );
        be(a);
        e: do
          try {
            if (kn !== bs && mn !== null)
              t: switch (a = mn, b = Ys, kn) {
                case tv:
                  kn = bs, Ys = null, fu(
                    n,
                    a,
                    b,
                    tv
                  );
                  break;
                case jc:
                  if (Nf(b)) {
                    kn = bs, Ys = null, Ng(a);
                    break;
                  }
                  a = function() {
                    kn === jc && Qn === n && (kn = iv), dn(n);
                  }, b.then(a, a);
                  break e;
                case nv:
                  kn = iv;
                  break e;
                case Ab:
                  kn = kS;
                  break e;
                case iv:
                  Nf(b) ? (kn = bs, Ys = null, Ng(a)) : (kn = bs, Ys = null, fu(
                    n,
                    a,
                    b,
                    iv
                  ));
                  break;
                case kS:
                  var O = null;
                  switch (mn.tag) {
                    case 26:
                      O = mn.memoizedState;
                    case 5:
                    case 27:
                      var G = mn, re = G.type, Ee = G.pendingProps;
                      if (O ? ns(O) : dl(re, Ee)) {
                        kn = bs, Ys = null;
                        var ke = G.sibling;
                        if (ke !== null) mn = ke;
                        else {
                          var ot = G.return;
                          ot !== null ? (mn = ot, wh(ot)) : mn = null;
                        }
                        break t;
                      }
                      break;
                    default:
                      console.error(
                        "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
                      );
                  }
                  kn = bs, Ys = null, fu(
                    n,
                    a,
                    b,
                    kS
                  );
                  break;
                case yd:
                  kn = bs, Ys = null, fu(
                    n,
                    a,
                    b,
                    yd
                  );
                  break;
                case JS:
                  fm(), bi = Ty;
                  break e;
                default:
                  throw Error(
                    "Unexpected SuspendedReason. This is a bug in React."
                  );
              }
            Me.actQueue !== null ? wg() : hS();
            break;
          } catch (vt) {
            Rg(n, vt);
          }
        while (!0);
        return mc(), Me.H = m, Me.A = g, In = c, mn !== null ? (st !== null && typeof st.markRenderYielded == "function" && st.markRenderYielded(), bl) : (He(), Qn = null, yn = 0, V(), bi);
      }
      function hS() {
        for (; mn !== null && !y(); )
          Ug(mn);
      }
      function Ug(n) {
        var a = n.alternate;
        (n.mode & 2) !== ei ? (Lt(n), a = Q(
          n,
          mh,
          a,
          n,
          Io
        ), Pt(n)) : a = Q(
          n,
          mh,
          a,
          n,
          Io
        ), n.memoizedProps = n.pendingProps, a === null ? wh(n) : mn = a;
      }
      function Ng(n) {
        var a = Q(n, dS, n);
        n.memoizedProps = n.pendingProps, a === null ? wh(n) : mn = a;
      }
      function dS(n) {
        var a = n.alternate, c = (n.mode & 2) !== ei;
        switch (c && Lt(n), n.tag) {
          case 15:
          case 0:
            a = ch(
              a,
              n,
              n.pendingProps,
              n.type,
              void 0,
              yn
            );
            break;
          case 11:
            a = ch(
              a,
              n,
              n.pendingProps,
              n.type.render,
              n.ref,
              yn
            );
            break;
          case 5:
            Vf(n);
          default:
            Yp(a, n), n = mn = Gg(n, Io), a = mh(a, n, Io);
        }
        return c && Pt(n), a;
      }
      function fu(n, a, c, m) {
        mc(), Vf(a), sd = null, Km = 0;
        var g = a.return;
        try {
          if (nu(
            n,
            g,
            a,
            c,
            yn
          )) {
            bi = ev, Os(
              n,
              Xe(c, n.current)
            ), mn = null;
            return;
          }
        } catch (b) {
          if (g !== null) throw mn = g, b;
          bi = ev, Os(
            n,
            Xe(c, n.current)
          ), mn = null;
          return;
        }
        a.flags & 32768 ? (bn || m === tv ? n = !0 : _d || (yn & 536870912) !== 0 ? n = !1 : (Tl = n = !0, (m === jc || m === nv || m === yd) && (m = Er.current, m !== null && m.tag === 13 && (m.flags |= 16384))), pm(a, n)) : wh(a);
      }
      function wh(n) {
        var a = n;
        do {
          if ((a.flags & 32768) !== 0) {
            pm(
              a,
              Tl
            );
            return;
          }
          var c = a.alternate;
          if (n = a.return, Lt(a), c = Q(
            a,
            Sh,
            c,
            a,
            Io
          ), (a.mode & 2) !== ei && Nt(a), c !== null) {
            mn = c;
            return;
          }
          if (a = a.sibling, a !== null) {
            mn = a;
            return;
          }
          mn = a = n;
        } while (a !== null);
        bi === bl && (bi = Tb);
      }
      function pm(n, a) {
        do {
          var c = il(n.alternate, n);
          if (c !== null) {
            c.flags &= 32767, mn = c;
            return;
          }
          if ((n.mode & 2) !== ei) {
            Nt(n), c = n.actualDuration;
            for (var m = n.child; m !== null; )
              c += m.actualDuration, m = m.sibling;
            n.actualDuration = c;
          }
          if (c = n.return, c !== null && (c.flags |= 32768, c.subtreeFlags = 0, c.deletions = null), !a && (n = n.sibling, n !== null)) {
            mn = n;
            return;
          }
          mn = n = c;
        } while (n !== null);
        bi = Ty, mn = null;
      }
      function mm(n, a, c, m, g, b, O, G, re, Ee) {
        var ke = Me.T, ot = jr();
        try {
          ki(2), Me.T = null, pS(
            n,
            a,
            c,
            m,
            ot,
            g,
            b,
            O,
            G,
            re,
            Ee
          );
        } finally {
          Me.T = ke, ki(ot);
        }
      }
      function pS(n, a, c, m, g, b, O, G) {
        do
          bo();
        while (Kc !== null);
        if (kr.flushLegacyContextWarning(), kr.flushPendingUnsafeLifecycleWarnings(), (In & (za | Ho)) !== rs)
          throw Error("Should not already be working.");
        var re = n.finishedWork;
        if (m = n.finishedLanes, st !== null && typeof st.markCommitStarted == "function" && st.markCommitStarted(m), re === null) return Z(), null;
        if (m === 0 && console.error(
          "root.finishedLanes should not be empty during a commit. This is a bug in React."
        ), n.finishedWork = null, n.finishedLanes = 0, re === n.current)
          throw Error(
            "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
          );
        n.callbackNode = null, n.callbackPriority = 0, n.cancelPendingCommit = null;
        var Ee = re.lanes | re.childLanes;
        if (Ee |= CS, ee(
          n,
          m,
          Ee,
          b,
          O,
          G
        ), n === Qn && (mn = Qn = null, yn = 0), (re.subtreeFlags & 10256) === 0 && (re.flags & 10256) === 0 || Ry || (Ry = !0, ix = Ee, ax = c, gS(de, function() {
          return bo(), null;
        })), ay = ed(), c = (re.flags & 15990) !== 0, (re.subtreeFlags & 15990) !== 0 || c ? (c = Me.T, Me.T = null, b = jr(), ki(2), O = In, In |= Ho, $p(n, re), nm(
          n,
          re,
          m
        ), Rc(n.containerInfo), n.current = re, st !== null && typeof st.markLayoutEffectsStarted == "function" && st.markLayoutEffectsStarted(
          m
        ), lS(re, n, m), st !== null && typeof st.markLayoutEffectsStopped == "function" && st.markLayoutEffectsStopped(), T(), In = O, ki(b), Me.T = c) : n.current = re, (c = Ry) ? (Ry = !1, Kc = n, ov = m) : (Og(n, Ee), Qc = 0, uv = null), Ee = n.pendingLanes, Ee === 0 && (Ou = null), c || Pg(n), Qe(re.stateNode, g), $i && n.memoizedUpdaters.clear(), uS(), dn(n), a !== null)
          for (g = n.onRecoverableError, re = 0; re < a.length; re++)
            Ee = a[re], c = mS(Ee.stack), Q(
              Ee.source,
              g,
              Ee.value,
              c
            );
        return (ov & 3) !== 0 && bo(), Ee = n.pendingLanes, (m & 4194218) !== 0 && (Ee & 42) !== 0 ? (ry = !0, n === sx ? lv++ : (lv = 0, sx = n)) : lv = 0, vn(0), Z(), null;
      }
      function mS(n) {
        return n = { componentStack: n }, Object.defineProperty(n, "digest", {
          get: function() {
            console.error(
              'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
            );
          }
        }), n;
      }
      function Og(n, a) {
        (n.pooledCacheLanes &= a) === 0 && (a = n.pooledCache, a != null && (n.pooledCache = null, _c(a)));
      }
      function bo() {
        if (Kc !== null) {
          var n = Kc, a = ix;
          ix = 0;
          var c = et(ov), m = 32 > c ? 32 : c;
          c = Me.T;
          var g = jr();
          try {
            if (ki(m), Me.T = null, Kc === null)
              var b = !1;
            else {
              m = ax, ax = null;
              var O = Kc, G = ov;
              if (Kc = null, ov = 0, (In & (za | Ho)) !== rs)
                throw Error(
                  "Cannot flush passive effects while already rendering."
                );
              rx = !0, Cy = !1, st !== null && typeof st.markPassiveEffectsStarted == "function" && st.markPassiveEffectsStarted(G);
              var re = In;
              if (In |= Ho, Fr(O.current), sm(
                O,
                O.current,
                G,
                m
              ), st !== null && typeof st.markPassiveEffectsStopped == "function" && st.markPassiveEffectsStopped(), Pg(O), In = re, vn(0, !1), Cy ? O === uv ? Qc++ : (Qc = 0, uv = O) : Qc = 0, Cy = rx = !1, Ot && typeof Ot.onPostCommitFiberRoot == "function")
                try {
                  Ot.onPostCommitFiberRoot(ft, O);
                } catch (ke) {
                  La || (La = !0, console.error(
                    "React instrumentation encountered an error: %s",
                    ke
                  ));
                }
              var Ee = O.current.stateNode;
              Ee.effectDuration = 0, Ee.passiveEffectDuration = 0, b = !0;
            }
            return b;
          } finally {
            ki(g), Me.T = c, Og(n, a);
          }
        }
        return !1;
      }
      function Lg(n, a, c) {
        a = Xe(c, a), a = hc(n.stateNode, a, 2), n = fi(n, a, 2), n !== null && (Dt(n, 2), dn(n));
      }
      function Dn(n, a, c) {
        if (Sd = !1, n.tag === 3)
          Lg(n, n, c);
        else {
          for (; a !== null; ) {
            if (a.tag === 3) {
              Lg(
                a,
                n,
                c
              );
              return;
            }
            if (a.tag === 1) {
              var m = a.stateNode;
              if (typeof a.type.getDerivedStateFromError == "function" || typeof m.componentDidCatch == "function" && (Ou === null || !Ou.has(m))) {
                n = Xe(c, n), c = rr(2), m = fi(a, c, 2), m !== null && (lh(
                  c,
                  m,
                  a,
                  n
                ), Dt(m, 2), dn(m));
                return;
              }
            }
            a = a.return;
          }
          console.error(
            `Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`,
            c
          );
        }
      }
      function Uh(n, a, c) {
        var m = n.pingCache;
        if (m === null) {
          m = n.pingCache = new B2();
          var g = /* @__PURE__ */ new Set();
          m.set(a, g);
        } else
          g = m.get(a), g === void 0 && (g = /* @__PURE__ */ new Set(), m.set(a, g));
        g.has(c) || ($S = !0, g.add(c), m = vS.bind(null, n, a, c), $i && Mc(n, c), a.then(m, m));
      }
      function vS(n, a, c) {
        var m = n.pingCache;
        m !== null && m.delete(a), n.pingedLanes |= n.suspendedLanes & c, n.warmLanes &= ~c, um() && Me.actQueue === null && console.error(
          `A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act`
        ), Qn === n && (yn & c) === c && (bi === Wc || bi === QS && (yn & 62914560) === yn && D() - tx < Rb ? (In & za) === rs && uu(n, 0) : ex |= c, Zc === yn && (Zc = 0)), dn(n);
      }
      function vm(n, a) {
        a === 0 && (a = Ct()), n = pe(n, a), n !== null && (Dt(n, a), dn(n));
      }
      function zg(n) {
        var a = n.memoizedState, c = 0;
        a !== null && (c = a.retryLane), vm(n, c);
      }
      function Bg(n, a) {
        var c = 0;
        switch (n.tag) {
          case 13:
            var m = n.stateNode, g = n.memoizedState;
            g !== null && (c = g.retryLane);
            break;
          case 19:
            m = n.stateNode;
            break;
          case 22:
            m = n.stateNode._retryCache;
            break;
          default:
            throw Error(
              "Pinged unknown suspense boundary type. This is probably a bug in React."
            );
        }
        m !== null && m.delete(a), vm(n, c);
      }
      function Ec(n, a, c) {
        if ((a.subtreeFlags & 33562624) !== 0)
          for (a = a.child; a !== null; ) {
            var m = n, g = a, b = g.type === Ph;
            b = c || b, g.tag !== 22 ? g.flags & 33554432 ? b && Q(
              g,
              Nh,
              m,
              g,
              (g.mode & 64) === ei
            ) : Ec(
              m,
              g,
              b
            ) : g.memoizedState === null && (b && g.flags & 8192 ? Q(
              g,
              Nh,
              m,
              g
            ) : g.subtreeFlags & 33554432 && Q(
              g,
              Ec,
              m,
              g,
              b
            )), a = a.sibling;
          }
      }
      function Nh(n, a) {
        var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : !0;
        ut(!0);
        try {
          ou(a), c && om(a), Mg(n, a.alternate, a, !1), c && rm(n, a, 0, null, !1);
        } finally {
          ut(!1);
        }
      }
      function Pg(n) {
        var a = !0;
        n.current.mode & 24 || (a = !1), Ec(
          n,
          n.current,
          a
        );
      }
      function Hg(n) {
        if ((In & za) === rs) {
          var a = n.tag;
          if (a === 3 || a === 1 || a === 0 || a === 11 || a === 14 || a === 15) {
            if (a = U(n) || "ReactComponent", Dy !== null) {
              if (Dy.has(a)) return;
              Dy.add(a);
            } else Dy = /* @__PURE__ */ new Set([a]);
            Q(n, function() {
              console.error(
                "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
              );
            });
          }
        }
      }
      function Mc(n, a) {
        $i && n.memoizedUpdaters.forEach(function(c) {
          Ie(n, c, a);
        });
      }
      function gS(n, a) {
        var c = Me.actQueue;
        return c !== null ? (c.push(a), F2) : l(n, a);
      }
      function Ig(n) {
        um() && Me.actQueue === null && Q(n, function() {
          console.error(
            `An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act`,
            U(n)
          );
        });
      }
      function To(n) {
        if (Ar === null) return n;
        var a = Ar(n);
        return a === void 0 ? n : a.current;
      }
      function gm(n) {
        if (Ar === null) return n;
        var a = Ar(n);
        return a === void 0 ? n != null && typeof n.render == "function" && (a = To(n.render), n.render !== a) ? (a = { $$typeof: cr, render: a }, n.displayName !== void 0 && (a.displayName = n.displayName), a) : n : a.current;
      }
      function Vg(n, a) {
        if (Ar === null) return !1;
        var c = n.elementType;
        a = a.type;
        var m = !1, g = typeof a == "object" && a !== null ? a.$$typeof : null;
        switch (n.tag) {
          case 1:
            typeof a == "function" && (m = !0);
            break;
          case 0:
            (typeof a == "function" || g === $a) && (m = !0);
            break;
          case 11:
            (g === cr || g === $a) && (m = !0);
            break;
          case 14:
          case 15:
            (g === Ih || g === $a) && (m = !0);
            break;
          default:
            return !1;
        }
        return !!(m && (n = Ar(c), n !== void 0 && n === Ar(a)));
      }
      function Fg(n) {
        Ar !== null && typeof WeakSet == "function" && (xd === null && (xd = /* @__PURE__ */ new WeakSet()), xd.add(n));
      }
      function ym(n, a, c) {
        var m = n.alternate, g = n.child, b = n.sibling, O = n.tag, G = n.type, re = null;
        switch (O) {
          case 0:
          case 15:
          case 1:
            re = G;
            break;
          case 11:
            re = G.render;
        }
        if (Ar === null)
          throw Error("Expected resolveFamily to be set during hot reload.");
        var Ee = !1;
        G = !1, re !== null && (re = Ar(re), re !== void 0 && (c.has(re) ? G = !0 : a.has(re) && (O === 1 ? G = !0 : Ee = !0))), xd !== null && (xd.has(n) || m !== null && xd.has(m)) && (G = !0), G && (n._debugNeedsRemount = !0), (G || Ee) && (m = pe(n, 2), m !== null && ni(m, n, 2)), g === null || G || ym(
          g,
          a,
          c
        ), b !== null && ym(
          b,
          a,
          c
        );
      }
      function yS(n, a, c, m) {
        this.tag = n, this.key = c, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = a, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = m, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null, this.actualDuration = -0, this.actualStartTime = -1.1, this.treeBaseDuration = this.selfBaseDuration = -0, this._debugOwner = this._debugInfo = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, Ub || typeof Object.preventExtensions != "function" || Object.preventExtensions(this);
      }
      function _m(n) {
        return n = n.prototype, !(!n || !n.isReactComponent);
      }
      function Ao(n, a) {
        var c = n.alternate;
        switch (c === null ? (c = v(
          n.tag,
          a,
          n.key,
          n.mode
        ), c.elementType = n.elementType, c.type = n.type, c.stateNode = n.stateNode, c._debugOwner = n._debugOwner, c._debugHookTypes = n._debugHookTypes, c.alternate = n, n.alternate = c) : (c.pendingProps = a, c.type = n.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null, c.actualDuration = -0, c.actualStartTime = -1.1), c.flags = n.flags & 31457280, c.childLanes = n.childLanes, c.lanes = n.lanes, c.child = n.child, c.memoizedProps = n.memoizedProps, c.memoizedState = n.memoizedState, c.updateQueue = n.updateQueue, a = n.dependencies, c.dependencies = a === null ? null : {
          lanes: a.lanes,
          firstContext: a.firstContext,
          _debugThenableState: a._debugThenableState
        }, c.sibling = n.sibling, c.index = n.index, c.ref = n.ref, c.refCleanup = n.refCleanup, c.selfBaseDuration = n.selfBaseDuration, c.treeBaseDuration = n.treeBaseDuration, c._debugInfo = n._debugInfo, c._debugNeedsRemount = n._debugNeedsRemount, c.tag) {
          case 0:
          case 15:
            c.type = To(n.type);
            break;
          case 1:
            c.type = To(n.type);
            break;
          case 11:
            c.type = gm(n.type);
        }
        return c;
      }
      function Gg(n, a) {
        n.flags &= 31457282;
        var c = n.alternate;
        return c === null ? (n.childLanes = 0, n.lanes = a, n.child = null, n.subtreeFlags = 0, n.memoizedProps = null, n.memoizedState = null, n.updateQueue = null, n.dependencies = null, n.stateNode = null, n.selfBaseDuration = 0, n.treeBaseDuration = 0) : (n.childLanes = c.childLanes, n.lanes = c.lanes, n.child = c.child, n.subtreeFlags = 0, n.deletions = null, n.memoizedProps = c.memoizedProps, n.memoizedState = c.memoizedState, n.updateQueue = c.updateQueue, n.type = c.type, a = c.dependencies, n.dependencies = a === null ? null : {
          lanes: a.lanes,
          firstContext: a.firstContext,
          _debugThenableState: a._debugThenableState
        }, n.selfBaseDuration = c.selfBaseDuration, n.treeBaseDuration = c.treeBaseDuration), n;
      }
      function Sm(n, a, c, m, g, b) {
        var O = 0, G = n;
        if (typeof n == "function")
          _m(n) && (O = 1), G = To(G);
        else if (typeof n == "string")
          Vt && xi ? (O = J(), O = Sn(n, c, O) ? 26 : Bc(n) ? 27 : 5) : Vt ? (O = J(), O = Sn(n, c, O) ? 26 : 5) : O = xi && Bc(n) ? 27 : 5;
        else
          e: switch (n) {
            case cl:
              return ll(
                c.children,
                g,
                b,
                a
              );
            case Ph:
              O = 8, g |= 24;
              break;
            case Tm:
              return n = c, m = g, typeof n.id != "string" && console.error(
                'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
                typeof n.id
              ), a = v(12, n, a, m | 2), a.elementType = Tm, a.lanes = b, a.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }, a;
            case Ro:
              return a = v(13, c, a, g), a.elementType = Ro, a.lanes = b, a;
            case Ea:
              return a = v(19, c, a, g), a.elementType = Ea, a.lanes = b, a;
            case bc:
              return Xg(c, g, b, a);
            default:
              if (typeof n == "object" && n !== null)
                switch (n.$$typeof) {
                  case ES:
                  case Is:
                    O = 10;
                    break e;
                  case Hh:
                    O = 9;
                    break e;
                  case cr:
                    O = 11, G = gm(G);
                    break e;
                  case Ih:
                    O = 14;
                    break e;
                  case $a:
                    O = 16, G = null;
                    break e;
                }
              G = "", (n === void 0 || typeof n == "object" && n !== null && Object.keys(n).length === 0) && (G += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports."), n === null ? c = "null" : Pi(n) ? c = "array" : n !== void 0 && n.$$typeof === ul ? (c = "<" + (N(n.type) || "Unknown") + " />", G = " Did you accidentally export a JSX literal instead of a component?") : c = typeof n, O = m ? typeof m.tag == "number" ? U(m) : typeof m.name == "string" ? m.name : null : null, O && (G += `

Check the render method of \`` + O + "`."), O = 29, c = Error(
                "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (c + "." + G)
              ), G = null;
          }
        return a = v(O, c, a, g), a.elementType = n, a.type = G, a.lanes = b, a._debugOwner = m, a;
      }
      function Oh(n, a, c) {
        return a = Sm(
          n.type,
          n.key,
          n.props,
          n._owner,
          a,
          c
        ), a._debugOwner = n._owner, a;
      }
      function ll(n, a, c, m) {
        return n = v(7, n, m, a), n.lanes = c, n;
      }
      function Xg(n, a, c, m) {
        n = v(22, n, m, a), n.elementType = bc, n.lanes = c;
        var g = {
          _visibility: 1,
          _pendingVisibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            var b = g, O = b._current;
            if (O === null)
              throw Error(
                "Calling Offscreen.detach before instance handle has been set."
              );
            if ((b._pendingVisibility & 2) === 0) {
              var G = pe(O, 2);
              G !== null && (b._pendingVisibility |= 2, ni(G, O, 2));
            }
          },
          attach: function() {
            var b = g, O = b._current;
            if (O === null)
              throw Error(
                "Calling Offscreen.detach before instance handle has been set."
              );
            if ((b._pendingVisibility & 2) !== 0) {
              var G = pe(O, 2);
              G !== null && (b._pendingVisibility &= -3, ni(G, O, 2));
            }
          }
        };
        return n.stateNode = g, n;
      }
      function xm(n, a, c) {
        return n = v(6, n, null, a), n.lanes = c, n;
      }
      function Lh(n, a, c) {
        return a = v(
          4,
          n.children !== null ? n.children : [],
          n.key,
          a
        ), a.lanes = c, a.stateNode = {
          containerInfo: n.containerInfo,
          pendingChildren: null,
          implementation: n.implementation
        }, a;
      }
      function _S(n, a, c, m, g, b, O, G) {
        for (this.tag = 1, this.containerInfo = n, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Cc, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = _n(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = _n(0), this.hiddenUpdates = _n(null), this.identifierPrefix = m, this.onUncaughtError = g, this.onCaughtError = b, this.onRecoverableError = O, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = G, this.incompleteTransitions = /* @__PURE__ */ new Map(), this.passiveEffectDuration = this.effectDuration = -0, this.memoizedUpdaters = /* @__PURE__ */ new Set(), n = this.pendingUpdatersLaneMap = [], a = 0; 31 > a; a++) n.push(/* @__PURE__ */ new Set());
        this._debugRootType = c ? "hydrateRoot()" : "createRoot()";
      }
      function qg(n, a, c, m, g, b, O, G, re, Ee, ke, ot) {
        return n = new _S(
          n,
          a,
          c,
          O,
          G,
          re,
          Ee,
          ot
        ), a = 1, b === !0 && (a |= 24), $i && (a |= 2), b = v(3, null, null, a), n.current = b, b.stateNode = n, a = gh(), Eo(a), n.pooledCache = a, Eo(a), b.memoizedState = {
          element: m,
          isDehydrated: c,
          cache: a
        }, vi(b), n;
      }
      function Ja(n) {
        return "" + n;
      }
      function Em(n) {
        return n ? (n = xs, n) : xs;
      }
      function zh(n, a, c, m) {
        return a.tag === 0 && bo(), Mm(
          a.current,
          2,
          n,
          a,
          c,
          m
        ), 2;
      }
      function Mm(n, a, c, m, g, b) {
        if (Ot && typeof Ot.onScheduleFiberRoot == "function")
          try {
            Ot.onScheduleFiberRoot(ft, m, c);
          } catch (O) {
            La || (La = !0, console.error(
              "React instrumentation encountered an error: %s",
              O
            ));
          }
        st !== null && typeof st.markRenderScheduled == "function" && st.markRenderScheduled(a), g = Em(g), m.context === null ? m.context = g : m.pendingContext = g, Ki && Zi !== null && !Ob && (Ob = !0, console.error(
          `Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`,
          U(Zi) || "Unknown"
        )), m = Wa(a), m.payload = { element: c }, b = b === void 0 ? null : b, b !== null && (typeof b != "function" && console.error(
          "Expected the last optional `callback` argument to be a function. Instead received: %s.",
          b
        ), m.callback = b), c = fi(n, m, a), c !== null && (ni(c, n, a), Yl(c, n, a));
      }
      function bm(n, a) {
        if (n = n.memoizedState, n !== null && n.dehydrated !== null) {
          var c = n.retryLane;
          n.retryLane = c !== 0 && c < a ? c : a;
        }
      }
      function Bh(n, a) {
        bm(n, a), (n = n.alternate) && bm(n, a);
      }
      function SS() {
        return Zi;
      }
      function Yg() {
        for (var n = /* @__PURE__ */ new Map(), a = 1, c = 0; 31 > c; c++) {
          var m = $e(a);
          n.set(a, m), a *= 2;
        }
        return n;
      }
      var fn = {}, xS = ql, Ua = r2(), ji = Object.assign, Wg = Symbol.for("react.element"), ul = Symbol.for("react.transitional.element"), oi = Symbol.for("react.portal"), cl = Symbol.for("react.fragment"), Ph = Symbol.for("react.strict_mode"), Tm = Symbol.for("react.profiler"), ES = Symbol.for("react.provider"), Hh = Symbol.for("react.consumer"), Is = Symbol.for("react.context"), cr = Symbol.for("react.forward_ref"), Ro = Symbol.for("react.suspense"), Ea = Symbol.for("react.suspense_list"), Ih = Symbol.for("react.memo"), $a = Symbol.for("react.lazy"), bc = Symbol.for("react.offscreen"), Vh = Symbol.for("react.memo_cache_sentinel"), Tc = Symbol.iterator, Am = Symbol.for("react.client.reference"), Me = xS.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Ac = 0, gs, Rm, jg, Fh, Zg, Kg, Qg;
      I.__reactDisabledLog = !0;
      var fl, Na, Ma = !1, Gh = new (typeof WeakMap == "function" ? WeakMap : Map)(), Zi = null, Ki = !1, Pi = Array.isArray, Xh = e.rendererVersion, ys = e.rendererPackageName, es = e.extraDevToolsConfig, _s = e.getPublicInstance, Yr = e.getRootHostContext, Wr = e.getChildHostContext, Qi = e.prepareForCommit, Rc = e.resetAfterCommit, Co = e.createInstance, hu = e.appendInitialChild, ua = e.finalizeInitialChildren, Ri = e.shouldSetTextContent, Mn = e.createTextInstance, Vs = e.scheduleTimeout, fr = e.cancelTimeout, Cc = e.noTimeout, yi = e.isPrimaryRenderer;
      e.warnsIfNotActing;
      var di = e.supportsMutation, hr = e.supportsPersistence, ba = e.supportsHydration, hl = e.getInstanceFromNode;
      e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
      var Cm = e.preparePortalMount;
      e.prepareScopeUpdate, e.getInstanceFromScope;
      var ki = e.setCurrentUpdatePriority, jr = e.getCurrentUpdatePriority, du = e.resolveUpdatePriority;
      e.resolveEventType, e.resolveEventTimeStamp;
      var Dc = e.shouldAttemptEagerTransition, Dm = e.detachDeletedInstance;
      e.requestPostPaintCallback;
      var pu = e.maySuspendCommit, dl = e.preloadInstance, Do = e.startSuspendingCommit, qh = e.suspendInstance, MS = e.waitForCommitToBeReady, dr = e.NotPendingTransition, Zr = e.HostTransitionContext, Yh = e.resetFormInstance, mu = e.bindToConsole, vu = e.supportsMicrotasks, wc = e.scheduleMicrotask, Ss = e.supportsTestSelectors, kg = e.findFiberRoot, gu = e.getBoundingRect, Wh = e.getTextContent, ca = e.isHiddenSubtree, pr = e.matchAccessibilityRole, Ci = e.setFocusIfFocusable, wo = e.setupIntersectionObserver, ln = e.appendChild, zn = e.appendChildToContainer, _i = e.commitTextUpdate, jh = e.commitMount, yu = e.commitUpdate, pl = e.insertBefore, Zh = e.insertInContainerBefore, Uc = e.removeChild, _u = e.removeChildFromContainer, Jg = e.resetTextContent, wm = e.hideInstance, mr = e.hideTextInstance, ml = e.unhideInstance, Uo = e.unhideTextInstance, vl = e.clearContainer, Um = e.cloneInstance, Nm = e.createContainerChildSet, Om = e.appendChildToContainerChildSet, Hi = e.finalizeContainerChildren, Kh = e.replaceContainerChildren, Nc = e.cloneHiddenInstance, No = e.cloneHiddenTextInstance, Fs = e.isSuspenseInstancePending, Lm = e.isSuspenseInstanceFallback, bS = e.getSuspenseInstanceFallbackErrorDetails, TS = e.registerSuspenseInstanceRetry, li = e.canHydrateFormStateMarker, $g = e.isFormStateMarkerMatching, Kr = e.getNextHydratableSibling, vr = e.getFirstHydratableChild, ui = e.getFirstHydratableChildWithinContainer, zm = e.getFirstHydratableChildWithinSuspenseInstance, ey = e.canHydrateInstance, Ii = e.canHydrateTextInstance, ty = e.canHydrateSuspenseInstance, Si = e.hydrateInstance, ts = e.hydrateTextInstance, Gs = e.hydrateSuspenseInstance, gl = e.getNextHydratableInstanceAfterSuspenseInstance, AS = e.commitHydratedContainer, Qh = e.commitHydratedSuspenseInstance, kh = e.clearSuspenseBoundary, Jh = e.clearSuspenseBoundaryFromContainer, Oc = e.shouldDeleteUnhydratedTailInstances, Lc = e.diffHydratedPropsForDevWarnings, Su = e.diffHydratedTextForDevWarnings, ny = e.describeHydratableInstanceForDevWarnings, Bn = e.validateHydratableInstance, Yn = e.validateHydratableTextInstance, Vt = e.supportsResources, Sn = e.isHostHoistableType, Pn = e.getHoistableRoot, Oa = e.getResource, gr = e.acquireResource, yl = e.releaseResource, Bm = e.hydrateHoistable, yr = e.mountHoistable, ii = e.unmountHoistable, Oo = e.createHoistableInstance, _l = e.prepareToCommitHoistables, Pm = e.mayResourceSuspendCommit, ns = e.preloadResource, xu = e.suspendResource, xi = e.supportsSingletons, Xs = e.resolveSingletonInstance, Hm = e.clearSingleton, Im = e.acquireSingletonInstance, zc = e.releaseSingletonInstance, Bc = e.isHostSingletonType, _r = [], Eu = [], Ta = -1, xs = {};
      Object.freeze(xs);
      var Ji = Math.clz32 ? Math.clz32 : gt, Vm = Math.log, Pc = Math.LN2, Mu = 128, o = 4194304, l = Ua.unstable_scheduleCallback, d = Ua.unstable_cancelCallback, y = Ua.unstable_shouldYield, T = Ua.unstable_requestPaint, D = Ua.unstable_now, F = Ua.unstable_ImmediatePriority, te = Ua.unstable_UserBlockingPriority, de = Ua.unstable_NormalPriority, Ne = Ua.unstable_IdlePriority, nt = Ua.log, mt = Ua.unstable_setDisableYieldValue, ft = null, Ot = null, st = null, La = !1, $i = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u", ge = typeof Object.is == "function" ? Object.is : bt, fe = /* @__PURE__ */ new WeakMap(), xe = [], Ke = 0, wt = null, Hn = 0, Ut = [], kt = 0, $n = null, an = 1, fa = "", Lo = le(null), Fm = le(null), bu = le(null), iy = le(null), wM = /["'&<>\n\t]|^\s|\s$/, is = null, Aa = null, bn = !1, Sl = !1, Sr = null, Qr = null, zo = !1, RS = Error(
        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), ei = 0, xr = [], $h = 0, CS = 0, ed = Ua.unstable_now, ay = -0, Es = -1.1, Hc = -0, sy = !1, ry = !1, oy = null, td = null, DS = !1, wS = !1, ly = !1, US = !1, nd = 0, NS = {}, Gm = null, OS = 0, Ic = 0, id = null, UM = 0, NM = 1, OM = 2, LS = 3, Tu = !1, LM = !1, zS = null, BS = !1, A2 = Object.prototype.hasOwnProperty, kr = {
        recordUnsafeLifecycleWarnings: function() {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function() {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      }, Xm = [], qm = [], Ym = [], Wm = [], jm = [], Zm = [], Vc = /* @__PURE__ */ new Set();
      kr.recordUnsafeLifecycleWarnings = function(n, a) {
        Vc.has(n.type) || (typeof a.componentWillMount == "function" && a.componentWillMount.__suppressDeprecationWarning !== !0 && Xm.push(n), n.mode & 8 && typeof a.UNSAFE_componentWillMount == "function" && qm.push(n), typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && Ym.push(n), n.mode & 8 && typeof a.UNSAFE_componentWillReceiveProps == "function" && Wm.push(n), typeof a.componentWillUpdate == "function" && a.componentWillUpdate.__suppressDeprecationWarning !== !0 && jm.push(n), n.mode & 8 && typeof a.UNSAFE_componentWillUpdate == "function" && Zm.push(n));
      }, kr.flushPendingUnsafeLifecycleWarnings = function() {
        var n = /* @__PURE__ */ new Set();
        0 < Xm.length && (Xm.forEach(function(G) {
          n.add(
            U(G) || "Component"
          ), Vc.add(G.type);
        }), Xm = []);
        var a = /* @__PURE__ */ new Set();
        0 < qm.length && (qm.forEach(function(G) {
          a.add(
            U(G) || "Component"
          ), Vc.add(G.type);
        }), qm = []);
        var c = /* @__PURE__ */ new Set();
        0 < Ym.length && (Ym.forEach(function(G) {
          c.add(
            U(G) || "Component"
          ), Vc.add(G.type);
        }), Ym = []);
        var m = /* @__PURE__ */ new Set();
        0 < Wm.length && (Wm.forEach(
          function(G) {
            m.add(
              U(G) || "Component"
            ), Vc.add(G.type);
          }
        ), Wm = []);
        var g = /* @__PURE__ */ new Set();
        0 < jm.length && (jm.forEach(function(G) {
          g.add(
            U(G) || "Component"
          ), Vc.add(G.type);
        }), jm = []);
        var b = /* @__PURE__ */ new Set();
        if (0 < Zm.length && (Zm.forEach(function(G) {
          b.add(
            U(G) || "Component"
          ), Vc.add(G.type);
        }), Zm = []), 0 < a.size) {
          var O = M(
            a
          );
          console.error(
            `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`,
            O
          );
        }
        0 < m.size && (O = M(
          m
        ), console.error(
          `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state

Please update the following components: %s`,
          O
        )), 0 < b.size && (O = M(
          b
        ), console.error(
          `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`,
          O
        )), 0 < n.size && (O = M(n), console.warn(
          `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`,
          O
        )), 0 < c.size && (O = M(
          c
        ), console.warn(
          `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`,
          O
        )), 0 < g.size && (O = M(g), console.warn(
          `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`,
          O
        ));
      };
      var uy = /* @__PURE__ */ new Map(), zM = /* @__PURE__ */ new Set();
      kr.recordLegacyContextWarning = function(n, a) {
        for (var c = null, m = n; m !== null; )
          m.mode & 8 && (c = m), m = m.return;
        c === null ? console.error(
          "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
        ) : !zM.has(n.type) && (m = uy.get(c), n.type.contextTypes != null || n.type.childContextTypes != null || a !== null && typeof a.getChildContext == "function") && (m === void 0 && (m = [], uy.set(c, m)), m.push(n));
      }, kr.flushLegacyContextWarning = function() {
        uy.forEach(function(n) {
          if (n.length !== 0) {
            var a = n[0], c = /* @__PURE__ */ new Set();
            n.forEach(function(g) {
              c.add(U(g) || "Component"), zM.add(g.type);
            });
            var m = M(c);
            Q(a, function() {
              console.error(
                `Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://react.dev/link/legacy-context`,
                m
              );
            });
          }
        });
      }, kr.discardPendingWarnings = function() {
        Xm = [], qm = [], Ym = [], Wm = [], jm = [], Zm = [], uy = /* @__PURE__ */ new Map();
      };
      var cy = Error(
        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
      ), PS = Error(
        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
      ), fy = {
        then: function() {
          console.error(
            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
          );
        }
      }, ad = null, hy = !1, BM = {
        "react-stack-bottom-frame": function(n, a, c) {
          var m = Ki;
          Ki = !0;
          try {
            return n(a, c);
          } finally {
            Ki = m;
          }
        }
      }, HS = BM["react-stack-bottom-frame"].bind(BM), PM = {
        "react-stack-bottom-frame": function(n) {
          var a = Ki;
          Ki = !0;
          try {
            return n.render();
          } finally {
            Ki = a;
          }
        }
      }, HM = PM["react-stack-bottom-frame"].bind(PM), IM = {
        "react-stack-bottom-frame": function(n, a) {
          try {
            a.componentDidMount();
          } catch (c) {
            Dn(n, n.return, c);
          }
        }
      }, IS = IM["react-stack-bottom-frame"].bind(IM), VM = {
        "react-stack-bottom-frame": function(n, a, c, m, g) {
          try {
            a.componentDidUpdate(c, m, g);
          } catch (b) {
            Dn(n, n.return, b);
          }
        }
      }, FM = VM["react-stack-bottom-frame"].bind(VM), GM = {
        "react-stack-bottom-frame": function(n, a) {
          var c = a.stack;
          n.componentDidCatch(a.value, {
            componentStack: c !== null ? c : ""
          });
        }
      }, R2 = GM["react-stack-bottom-frame"].bind(GM), XM = {
        "react-stack-bottom-frame": function(n, a, c) {
          try {
            c.componentWillUnmount();
          } catch (m) {
            Dn(n, a, m);
          }
        }
      }, qM = XM["react-stack-bottom-frame"].bind(XM), YM = {
        "react-stack-bottom-frame": function(n) {
          var a = n.create;
          return n = n.inst, a = a(), n.destroy = a;
        }
      }, C2 = YM["react-stack-bottom-frame"].bind(YM), WM = {
        "react-stack-bottom-frame": function(n, a, c) {
          try {
            c();
          } catch (m) {
            Dn(n, a, m);
          }
        }
      }, D2 = WM["react-stack-bottom-frame"].bind(WM), jM = {
        "react-stack-bottom-frame": function(n) {
          var a = n._init;
          return a(n._payload);
        }
      }, Au = jM["react-stack-bottom-frame"].bind(jM), sd = null, Km = 0, un = null, VS, ZM = VS = !1, KM = {}, QM = {}, kM = {};
      R = function(n, a, c) {
        if (c !== null && typeof c == "object" && c._store && (!c._store.validated && c.key == null || c._store.validated === 2)) {
          if (typeof c._store != "object")
            throw Error(
              "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
            );
          c._store.validated = 1;
          var m = U(n), g = m || "null";
          if (!KM[g]) {
            KM[g] = !0, c = c._owner, n = n._debugOwner;
            var b = "";
            n && typeof n.tag == "number" && (g = U(n)) && (b = `

Check the render method of \`` + g + "`."), b || m && (b = `

Check the top-level render call using <` + m + ">.");
            var O = "";
            c != null && n !== c && (m = null, typeof c.tag == "number" ? m = U(c) : typeof c.name == "string" && (m = c.name), m && (O = " It was passed a child from " + m + ".")), Q(a, function() {
              console.error(
                'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
                b,
                O
              );
            });
          }
        }
      };
      var Fc = xp(!0), JM = xp(!1), rd = le(null), dy = le(0), Er = le(null), Bo = null, od = 1, Qm = 2, ea = le(0), Mr = 0, br = 1, as = 2, Ra = 4, ta = 8, ld, $M = /* @__PURE__ */ new Set(), eb = /* @__PURE__ */ new Set(), FS = /* @__PURE__ */ new Set(), tb = /* @__PURE__ */ new Set(), Ru = 0, Zt = null, Wn = null, Vi = null, py = !1, ud = !1, Gc = !1, my = 0, km = 0, xl = null, w2 = 0, U2 = 25, Ae = null, Tr = null, El = -1, Jm = !1, GS = function() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }, Po = {
        readContext: Zn,
        use: Or,
        useCallback: ri,
        useContext: ri,
        useEffect: ri,
        useImperativeHandle: ri,
        useLayoutEffect: ri,
        useInsertionEffect: ri,
        useMemo: ri,
        useReducer: ri,
        useRef: ri,
        useState: ri,
        useDebugValue: ri,
        useDeferredValue: ri,
        useTransition: ri,
        useSyncExternalStore: ri,
        useId: ri
      };
      Po.useCacheRefresh = ri, Po.useMemoCache = ri, Po.useHostTransitionStatus = ri, Po.useFormState = ri, Po.useActionState = ri, Po.useOptimistic = ri;
      var Cu = null, Xc = null, Du = null, qc = null, Ms = null, ss = null, wu = null;
      Cu = {
        readContext: function(n) {
          return Zn(n);
        },
        use: Or,
        useCallback: function(n, a) {
          return Ae = "useCallback", jt(), ko(a), Ap(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", jt(), Zn(n);
        },
        useEffect: function(n, a) {
          return Ae = "useEffect", jt(), ko(a), tu(n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", jt(), ko(c), tl(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          Ae = "useInsertionEffect", jt(), ko(a), vo(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", jt(), ko(a), Qf(n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", jt(), ko(a);
          var c = Me.H;
          Me.H = Ms;
          try {
            return Jf(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", jt();
          var m = Me.H;
          Me.H = Ms;
          try {
            return sc(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function(n) {
          return Ae = "useRef", jt(), Kf(n);
        },
        useState: function(n) {
          Ae = "useState", jt();
          var a = Me.H;
          Me.H = Ms;
          try {
            return nr(n);
          } finally {
            Me.H = a;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", jt();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", jt(), ir(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", jt(), $f();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", jt(), oc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", jt(), nh();
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", jt(), Up();
        }
      }, Cu.useMemoCache = fo, Cu.useHostTransitionStatus = ar, Cu.useFormState = function(n, a) {
        return Ae = "useFormState", jt(), kl(), po(n, a);
      }, Cu.useActionState = function(n, a) {
        return Ae = "useActionState", jt(), po(n, a);
      }, Cu.useOptimistic = function(n) {
        return Ae = "useOptimistic", jt(), Ns(n);
      }, Xc = {
        readContext: function(n) {
          return Zn(n);
        },
        use: Or,
        useCallback: function(n, a) {
          return Ae = "useCallback", je(), Ap(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", je(), Zn(n);
        },
        useEffect: function(n, a) {
          return Ae = "useEffect", je(), tu(n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", je(), tl(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          Ae = "useInsertionEffect", je(), vo(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", je(), Qf(n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", je();
          var c = Me.H;
          Me.H = Ms;
          try {
            return Jf(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", je();
          var m = Me.H;
          Me.H = Ms;
          try {
            return sc(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function(n) {
          return Ae = "useRef", je(), Kf(n);
        },
        useState: function(n) {
          Ae = "useState", je();
          var a = Me.H;
          Me.H = Ms;
          try {
            return nr(n);
          } finally {
            Me.H = a;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", je();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", je(), ir(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", je(), $f();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", je(), oc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", je(), nh();
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", je(), Up();
        }
      }, Xc.useMemoCache = fo, Xc.useHostTransitionStatus = ar, Xc.useFormState = function(n, a) {
        return Ae = "useFormState", je(), kl(), po(n, a);
      }, Xc.useActionState = function(n, a) {
        return Ae = "useActionState", je(), po(n, a);
      }, Xc.useOptimistic = function(n) {
        return Ae = "useOptimistic", je(), Ns(n);
      }, Du = {
        readContext: function(n) {
          return Zn(n);
        },
        use: Or,
        useCallback: function(n, a) {
          return Ae = "useCallback", je(), kf(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", je(), Zn(n);
        },
        useEffect: function(n, a) {
          Ae = "useEffect", je(), ra(2048, ta, n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", je(), qn(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          return Ae = "useInsertionEffect", je(), ra(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", je(), ra(4, Ra, n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", je();
          var c = Me.H;
          Me.H = ss;
          try {
            return go(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", je();
          var m = Me.H;
          Me.H = ss;
          try {
            return Jo(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function() {
          return Ae = "useRef", je(), Cn().memoizedState;
        },
        useState: function() {
          Ae = "useState", je();
          var n = Me.H;
          Me.H = ss;
          try {
            return Jo(ja);
          } finally {
            Me.H = n;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", je();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", je(), Rp(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", je(), eh();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", je(), lc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", je(), Cn().memoizedState;
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", je(), Cn().memoizedState;
        }
      }, Du.useMemoCache = fo, Du.useHostTransitionStatus = ar, Du.useFormState = function(n) {
        return Ae = "useFormState", je(), kl(), el(n);
      }, Du.useActionState = function(n) {
        return Ae = "useActionState", je(), el(n);
      }, Du.useOptimistic = function(n, a) {
        return Ae = "useOptimistic", je(), qf(n, a);
      }, qc = {
        readContext: function(n) {
          return Zn(n);
        },
        use: Or,
        useCallback: function(n, a) {
          return Ae = "useCallback", je(), kf(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", je(), Zn(n);
        },
        useEffect: function(n, a) {
          Ae = "useEffect", je(), ra(2048, ta, n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", je(), qn(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          return Ae = "useInsertionEffect", je(), ra(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", je(), ra(4, Ra, n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", je();
          var c = Me.H;
          Me.H = wu;
          try {
            return go(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", je();
          var m = Me.H;
          Me.H = wu;
          try {
            return $o(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function() {
          return Ae = "useRef", je(), Cn().memoizedState;
        },
        useState: function() {
          Ae = "useState", je();
          var n = Me.H;
          Me.H = wu;
          try {
            return $o(ja);
          } finally {
            Me.H = n;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", je();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", je(), Cp(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", je(), th();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", je(), lc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", je(), Cn().memoizedState;
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", je(), Cn().memoizedState;
        }
      }, qc.useMemoCache = fo, qc.useHostTransitionStatus = ar, qc.useFormState = function(n) {
        return Ae = "useFormState", je(), kl(), cc(n);
      }, qc.useActionState = function(n) {
        return Ae = "useActionState", je(), cc(n);
      }, qc.useOptimistic = function(n, a) {
        return Ae = "useOptimistic", je(), $l(n, a);
      }, Ms = {
        readContext: function(n) {
          return A(), Zn(n);
        },
        use: function(n) {
          return x(), Or(n);
        },
        useCallback: function(n, a) {
          return Ae = "useCallback", x(), jt(), Ap(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", x(), jt(), Zn(n);
        },
        useEffect: function(n, a) {
          return Ae = "useEffect", x(), jt(), tu(n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", x(), jt(), tl(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          Ae = "useInsertionEffect", x(), jt(), vo(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", x(), jt(), Qf(n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", x(), jt();
          var c = Me.H;
          Me.H = Ms;
          try {
            return Jf(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", x(), jt();
          var m = Me.H;
          Me.H = Ms;
          try {
            return sc(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function(n) {
          return Ae = "useRef", x(), jt(), Kf(n);
        },
        useState: function(n) {
          Ae = "useState", x(), jt();
          var a = Me.H;
          Me.H = Ms;
          try {
            return nr(n);
          } finally {
            Me.H = a;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", x(), jt();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", x(), jt(), ir(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", x(), jt(), $f();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", x(), jt(), oc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", x(), jt(), nh();
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", jt(), Up();
        },
        useMemoCache: function(n) {
          return x(), fo(n);
        }
      }, Ms.useHostTransitionStatus = ar, Ms.useFormState = function(n, a) {
        return Ae = "useFormState", x(), jt(), po(n, a);
      }, Ms.useActionState = function(n, a) {
        return Ae = "useActionState", x(), jt(), po(n, a);
      }, Ms.useOptimistic = function(n) {
        return Ae = "useOptimistic", x(), jt(), Ns(n);
      }, ss = {
        readContext: function(n) {
          return A(), Zn(n);
        },
        use: function(n) {
          return x(), Or(n);
        },
        useCallback: function(n, a) {
          return Ae = "useCallback", x(), je(), kf(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", x(), je(), Zn(n);
        },
        useEffect: function(n, a) {
          Ae = "useEffect", x(), je(), ra(2048, ta, n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", x(), je(), qn(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          return Ae = "useInsertionEffect", x(), je(), ra(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", x(), je(), ra(4, Ra, n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", x(), je();
          var c = Me.H;
          Me.H = ss;
          try {
            return go(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", x(), je();
          var m = Me.H;
          Me.H = ss;
          try {
            return Jo(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function() {
          return Ae = "useRef", x(), je(), Cn().memoizedState;
        },
        useState: function() {
          Ae = "useState", x(), je();
          var n = Me.H;
          Me.H = ss;
          try {
            return Jo(ja);
          } finally {
            Me.H = n;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", x(), je();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", x(), je(), Rp(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", x(), je(), eh();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", x(), je(), lc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", x(), je(), Cn().memoizedState;
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", je(), Cn().memoizedState;
        },
        useMemoCache: function(n) {
          return x(), fo(n);
        }
      }, ss.useHostTransitionStatus = ar, ss.useFormState = function(n) {
        return Ae = "useFormState", x(), je(), el(n);
      }, ss.useActionState = function(n) {
        return Ae = "useActionState", x(), je(), el(n);
      }, ss.useOptimistic = function(n, a) {
        return Ae = "useOptimistic", x(), je(), qf(n, a);
      }, wu = {
        readContext: function(n) {
          return A(), Zn(n);
        },
        use: function(n) {
          return x(), Or(n);
        },
        useCallback: function(n, a) {
          return Ae = "useCallback", x(), je(), kf(n, a);
        },
        useContext: function(n) {
          return Ae = "useContext", x(), je(), Zn(n);
        },
        useEffect: function(n, a) {
          Ae = "useEffect", x(), je(), ra(2048, ta, n, a);
        },
        useImperativeHandle: function(n, a, c) {
          return Ae = "useImperativeHandle", x(), je(), qn(n, a, c);
        },
        useInsertionEffect: function(n, a) {
          return Ae = "useInsertionEffect", x(), je(), ra(4, as, n, a);
        },
        useLayoutEffect: function(n, a) {
          return Ae = "useLayoutEffect", x(), je(), ra(4, Ra, n, a);
        },
        useMemo: function(n, a) {
          Ae = "useMemo", x(), je();
          var c = Me.H;
          Me.H = ss;
          try {
            return go(n, a);
          } finally {
            Me.H = c;
          }
        },
        useReducer: function(n, a, c) {
          Ae = "useReducer", x(), je();
          var m = Me.H;
          Me.H = ss;
          try {
            return $o(n, a, c);
          } finally {
            Me.H = m;
          }
        },
        useRef: function() {
          return Ae = "useRef", x(), je(), Cn().memoizedState;
        },
        useState: function() {
          Ae = "useState", x(), je();
          var n = Me.H;
          Me.H = ss;
          try {
            return $o(ja);
          } finally {
            Me.H = n;
          }
        },
        useDebugValue: function() {
          Ae = "useDebugValue", x(), je();
        },
        useDeferredValue: function(n, a) {
          return Ae = "useDeferredValue", x(), je(), Cp(n, a);
        },
        useTransition: function() {
          return Ae = "useTransition", x(), je(), th();
        },
        useSyncExternalStore: function(n, a, c) {
          return Ae = "useSyncExternalStore", x(), je(), lc(
            n,
            a,
            c
          );
        },
        useId: function() {
          return Ae = "useId", x(), je(), Cn().memoizedState;
        },
        useCacheRefresh: function() {
          return Ae = "useCacheRefresh", je(), Cn().memoizedState;
        },
        useMemoCache: function(n) {
          return x(), fo(n);
        }
      }, wu.useHostTransitionStatus = ar, wu.useFormState = function(n) {
        return Ae = "useFormState", x(), je(), cc(n);
      }, wu.useActionState = function(n) {
        return Ae = "useActionState", x(), je(), cc(n);
      }, wu.useOptimistic = function(n, a) {
        return Ae = "useOptimistic", x(), je(), $l(n, a);
      };
      var nb = {}, ib = /* @__PURE__ */ new Set(), ab = /* @__PURE__ */ new Set(), sb = /* @__PURE__ */ new Set(), rb = /* @__PURE__ */ new Set(), ob = /* @__PURE__ */ new Set(), lb = /* @__PURE__ */ new Set(), ub = /* @__PURE__ */ new Set(), cb = /* @__PURE__ */ new Set(), fb = /* @__PURE__ */ new Set(), hb = /* @__PURE__ */ new Set();
      Object.freeze(nb);
      var XS = {
        isMounted: function(n) {
          var a = Zi;
          if (a !== null && Ki && a.tag === 1) {
            var c = a.stateNode;
            c._warnedAboutRefsInRender || console.error(
              "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
              U(a) || "A component"
            ), c._warnedAboutRefsInRender = !0;
          }
          return (n = n._reactInternals) ? oe(n) === n : !1;
        },
        enqueueSetState: function(n, a, c) {
          n = n._reactInternals;
          var m = ka(n), g = Wa(m);
          g.payload = a, c != null && (rh(c), g.callback = c), a = fi(n, g, m), a !== null && (ni(a, n, m), Yl(a, n, m)), Re(n, m);
        },
        enqueueReplaceState: function(n, a, c) {
          n = n._reactInternals;
          var m = ka(n), g = Wa(m);
          g.tag = NM, g.payload = a, c != null && (rh(c), g.callback = c), a = fi(n, g, m), a !== null && (ni(a, n, m), Yl(a, n, m)), Re(n, m);
        },
        enqueueForceUpdate: function(n, a) {
          n = n._reactInternals;
          var c = ka(n), m = Wa(c);
          m.tag = OM, a != null && (rh(a), m.callback = a), a = fi(n, m, c), a !== null && (ni(a, n, c), Yl(a, n, c)), st !== null && typeof st.markForceUpdateScheduled == "function" && st.markForceUpdateScheduled(n, c);
        }
      }, db = typeof reportError == "function" ? reportError : function(n) {
        if (typeof window == "object" && typeof window.ErrorEvent == "function") {
          var a = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: typeof n == "object" && n !== null && typeof n.message == "string" ? String(n.message) : String(n),
            error: n
          });
          if (!window.dispatchEvent(a)) return;
        } else if (typeof process == "object" && typeof process.emit == "function") {
          process.emit("uncaughtException", n);
          return;
        }
        console.error(n);
      }, cd = null, qS = null, pb = Error(
        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
      ), ha = !1, mb = {}, vb = {}, gb = {}, yb = {}, fd = !1, _b = {}, YS = {}, WS = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0
      }, Sb = !1, vy = le(null), jS = le(null), ZS = le(null), gy = {}, yy = null, hd = null, dd = !1, N2 = typeof AbortController < "u" ? AbortController : function() {
        var n = [], a = this.signal = {
          aborted: !1,
          addEventListener: function(c, m) {
            n.push(m);
          }
        };
        this.abort = function() {
          a.aborted = !0, n.forEach(function(c) {
            return c();
          });
        };
      }, O2 = Ua.unstable_scheduleCallback, L2 = Ua.unstable_NormalPriority, Ei = {
        $$typeof: Is,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0,
        _currentRenderer: null,
        _currentRenderer2: null
      }, xb = Me.S;
      Me.S = function(n, a) {
        typeof a == "object" && a !== null && typeof a.then == "function" && Xn(n, a), xb !== null && xb(n, a);
      };
      var Yc = le(null), Eb = null;
      Eb = /* @__PURE__ */ new Set();
      var Ml = !1, Mi = !1, KS = !1, Mb = typeof WeakSet == "function" ? WeakSet : Set, da = null, pd = null, md = null, bb = !1, Fi = null, qs = !1, Jr = null, vd = 8192, z2 = {
        getCacheForType: function(n) {
          var a = Zn(Ei), c = a.data.get(n);
          return c === void 0 && (c = n(), a.data.set(n, c)), c;
        },
        getOwner: function() {
          return Zi;
        }
      }, _y = 0, Sy = 1, xy = 2, Ey = 3, My = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var $m = Symbol.for;
        _y = $m("selector.component"), Sy = $m("selector.has_pseudo_class"), xy = $m("selector.role"), Ey = $m("selector.test_id"), My = $m("selector.text");
      }
      var by = [], B2 = typeof WeakMap == "function" ? WeakMap : Map, rs = 0, za = 2, Ho = 4, bl = 0, ev = 1, gd = 2, QS = 3, Wc = 4, Tb = 5, Ty = 6, In = rs, Qn = null, mn = null, yn = 0, bs = 0, tv = 1, jc = 2, nv = 3, Ab = 4, kS = 5, yd = 6, iv = 7, JS = 8, kn = bs, Ys = null, Tl = !1, _d = !1, $S = !1, Io = 0, bi = bl, Uu = 0, Nu = 0, ex = 0, Ws = 0, Zc = 0, av = null, $r = null, Ay = !1, tx = 0, Rb = 300, sv = 1 / 0, nx = 500, rv = null, Ou = null, Ry = !1, Kc = null, ov = 0, ix = 0, ax = null, P2 = 50, lv = 0, sx = null, rx = !1, Cy = !1, H2 = 50, Qc = 0, uv = null, Sd = !1, Cb = 0, I2 = 1, V2 = 2, Dy = null, Db = !1, wb = /* @__PURE__ */ new Set(), F2 = {}, Ar = null, xd = null, Ub = !1;
      try {
        var Nb = Object.preventExtensions({});
      } catch {
        Ub = !0;
      }
      var Ob = !1, Lb = {}, zb = null, Bb = null, Pb = null, Hb = null, Ib = null, Vb = null, Fb = null, Gb = null, Xb = null;
      return zb = function(n, a, c, m) {
        a = t(n, a), a !== null && (c = i(a.memoizedState, c, 0, m), a.memoizedState = c, a.baseState = c, n.memoizedProps = ji({}, n.memoizedProps), c = pe(n, 2), c !== null && ni(c, n, 2));
      }, Bb = function(n, a, c) {
        a = t(n, a), a !== null && (c = f(a.memoizedState, c, 0), a.memoizedState = c, a.baseState = c, n.memoizedProps = ji({}, n.memoizedProps), c = pe(n, 2), c !== null && ni(c, n, 2));
      }, Pb = function(n, a, c, m) {
        a = t(n, a), a !== null && (c = s(a.memoizedState, c, m), a.memoizedState = c, a.baseState = c, n.memoizedProps = ji({}, n.memoizedProps), c = pe(n, 2), c !== null && ni(c, n, 2));
      }, Hb = function(n, a, c) {
        n.pendingProps = i(n.memoizedProps, a, 0, c), n.alternate && (n.alternate.pendingProps = n.pendingProps), a = pe(n, 2), a !== null && ni(a, n, 2);
      }, Ib = function(n, a) {
        n.pendingProps = f(n.memoizedProps, a, 0), n.alternate && (n.alternate.pendingProps = n.pendingProps), a = pe(n, 2), a !== null && ni(a, n, 2);
      }, Vb = function(n, a, c) {
        n.pendingProps = s(
          n.memoizedProps,
          a,
          c
        ), n.alternate && (n.alternate.pendingProps = n.pendingProps), a = pe(n, 2), a !== null && ni(a, n, 2);
      }, Fb = function(n) {
        var a = pe(n, 2);
        a !== null && ni(a, n, 2);
      }, Gb = function(n) {
        p = n;
      }, Xb = function(n) {
        h = n;
      }, fn.attemptContinuousHydration = function(n) {
        if (n.tag === 13) {
          var a = pe(n, 67108864);
          a !== null && ni(a, n, 67108864), Bh(n, 67108864);
        }
      }, fn.attemptHydrationAtCurrentPriority = function(n) {
        if (n.tag === 13) {
          var a = ka(n), c = pe(n, a);
          c !== null && ni(c, n, a), Bh(n, a);
        }
      }, fn.attemptSynchronousHydration = function(n) {
        switch (n.tag) {
          case 3:
            if (n = n.stateNode, n.current.memoizedState.isDehydrated) {
              var a = _e(n.pendingLanes);
              if (a !== 0) {
                for (n.pendingLanes |= 2, n.entangledLanes |= 2; a; ) {
                  var c = 1 << 31 - Ji(a);
                  n.entanglements[1] |= c, a &= ~c;
                }
                dn(n), (In & (za | Ho)) === rs && (sv = D() + nx, vn(0));
              }
            }
            break;
          case 13:
            a = pe(n, 2), a !== null && ni(a, n, 2), Mo(), Bh(n, 2);
        }
      }, fn.batchedUpdates = function(n, a) {
        return n(a);
      }, fn.createComponentSelector = function(n) {
        return { $$typeof: _y, value: n };
      }, fn.createContainer = function(n, a, c, m, g, b, O, G, re, Ee) {
        return qg(
          n,
          a,
          !1,
          null,
          c,
          m,
          b,
          O,
          G,
          re,
          Ee,
          null
        );
      }, fn.createHasPseudoClassSelector = function(n) {
        return { $$typeof: Sy, value: n };
      }, fn.createHydrationContainer = function(n, a, c, m, g, b, O, G, re, Ee, ke, ot, vt) {
        return n = qg(
          c,
          m,
          !0,
          n,
          g,
          b,
          G,
          re,
          Ee,
          ke,
          ot,
          vt
        ), n.context = Em(null), c = n.current, m = ka(c), g = Wa(m), g.callback = a ?? null, fi(c, g, m), n.current.lanes = m, Dt(n, m), dn(n), n;
      }, fn.createPortal = function(n, a, c) {
        var m = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        try {
          Ja(m);
          var g = !1;
        } catch {
          g = !0;
        }
        return g && (console.error(
          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
          typeof Symbol == "function" && Symbol.toStringTag && m[Symbol.toStringTag] || m.constructor.name || "Object"
        ), Ja(m)), {
          $$typeof: oi,
          key: m == null ? null : "" + m,
          children: n,
          containerInfo: a,
          implementation: c
        };
      }, fn.createRoleSelector = function(n) {
        return { $$typeof: xy, value: n };
      }, fn.createTestNameSelector = function(n) {
        return { $$typeof: Ey, value: n };
      }, fn.createTextSelector = function(n) {
        return { $$typeof: My, value: n };
      }, fn.defaultOnCaughtError = function(n, a) {
        var c = cd ? "The above error occurred in the <" + cd + "> component." : "The above error occurred in one of your React components.", m = "React will try to recreate this component tree from scratch using the error boundary you provided, " + ((qS || "Anonymous") + "."), g = Me.getCurrentStack, b = a.componentStack != null ? a.componentStack : "";
        Me.getCurrentStack = function() {
          return b;
        };
        try {
          typeof n == "object" && n !== null && typeof n.environmentName == "string" ? mu(
            "error",
            [
              `%o

%s

%s
`,
              n,
              c,
              m
            ],
            n.environmentName
          )() : console.error(
            `%o

%s

%s
`,
            n,
            c,
            m
          );
        } finally {
          Me.getCurrentStack = g;
        }
      }, fn.defaultOnRecoverableError = function(n) {
        db(n);
      }, fn.defaultOnUncaughtError = function(n, a) {
        db(n), n = cd ? "An error occurred in the <" + cd + "> component." : "An error occurred in one of your React components.";
        var c = Me.getCurrentStack, m = a.componentStack != null ? a.componentStack : "";
        Me.getCurrentStack = function() {
          return m;
        };
        try {
          console.warn(
            `%s

%s
`,
            n,
            `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://react.dev/link/error-boundaries to learn more about error boundaries.`
          );
        } finally {
          Me.getCurrentStack = c;
        }
      }, fn.deferredUpdates = function(n) {
        var a = Me.T, c = jr();
        try {
          return ki(32), Me.T = null, n();
        } finally {
          ki(c), Me.T = a;
        }
      }, fn.discreteUpdates = function(n, a, c, m, g) {
        var b = Me.T, O = jr();
        try {
          return ki(2), Me.T = null, n(a, c, m, g);
        } finally {
          ki(O), Me.T = b, In === rs && (sv = D() + nx);
        }
      }, fn.findAllNodes = Dh, fn.findBoundingRects = function(n, a) {
        if (!Ss)
          throw Error("Test selector API is not supported by this renderer.");
        a = Dh(n, a), n = [];
        for (var c = 0; c < a.length; c++)
          n.push(gu(a[c]));
        for (a = n.length - 1; 0 < a; a--) {
          c = n[a];
          for (var m = c.x, g = m + c.width, b = c.y, O = b + c.height, G = a - 1; 0 <= G; G--)
            if (a !== G) {
              var re = n[G], Ee = re.x, ke = Ee + re.width, ot = re.y, vt = ot + re.height;
              if (m >= Ee && b >= ot && g <= ke && O <= vt) {
                n.splice(a, 1);
                break;
              } else if (m !== Ee || c.width !== re.width || vt < b || ot > O) {
                if (!(b !== ot || c.height !== re.height || ke < m || Ee > g)) {
                  Ee > m && (re.width += Ee - m, re.x = m), ke < g && (re.width = g - Ee), n.splice(a, 1);
                  break;
                }
              } else {
                ot > b && (re.height += ot - b, re.y = b), vt < O && (re.height = O - ot), n.splice(a, 1);
                break;
              }
            }
        }
        return n;
      }, fn.findHostInstance = function(n) {
        var a = n._reactInternals;
        if (a === void 0)
          throw typeof n.render == "function" ? Error("Unable to find node on an unmounted component.") : (n = Object.keys(n).join(","), Error(
            "Argument appears to not be a ReactComponent. Keys: " + n
          ));
        return n = K(a), n === null ? null : _s(n.stateNode);
      }, fn.findHostInstanceWithNoPortals = function(n) {
        return n = B(n), n = n !== null ? se(n) : null, n === null ? null : _s(n.stateNode);
      }, fn.findHostInstanceWithWarning = function(n, a) {
        var c = n._reactInternals;
        if (c === void 0)
          throw typeof n.render == "function" ? Error("Unable to find node on an unmounted component.") : (n = Object.keys(n).join(","), Error(
            "Argument appears to not be a ReactComponent. Keys: " + n
          ));
        if (n = K(c), n === null) return null;
        if (n.mode & 8) {
          var m = U(c) || "Component";
          Lb[m] || (Lb[m] = !0, Q(n, function() {
            c.mode & 8 ? console.error(
              "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node",
              a,
              a,
              m
            ) : console.error(
              "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node",
              a,
              a,
              m
            );
          }));
        }
        return _s(n.stateNode);
      }, fn.flushPassiveEffects = bo, fn.flushSyncFromReconciler = function(n) {
        var a = In;
        In |= 1;
        var c = Me.T, m = jr();
        try {
          if (ki(2), Me.T = null, n)
            return n();
        } finally {
          ki(m), Me.T = c, In = a, (In & (za | Ho)) === rs && vn(0);
        }
      }, fn.flushSyncWork = Mo, fn.focusWithin = function(n, a) {
        if (!Ss)
          throw Error("Test selector API is not supported by this renderer.");
        for (n = la(n), a = Tg(n, a), a = Array.from(a), n = 0; n < a.length; ) {
          var c = a[n++], m = c.tag;
          if (!ca(c)) {
            if ((m === 5 || m === 26 || m === 27) && Ci(c.stateNode))
              return !0;
            for (c = c.child; c !== null; )
              a.push(c), c = c.sibling;
          }
        }
        return !1;
      }, fn.getFindAllNodesFailureDescription = function(n, a) {
        if (!Ss)
          throw Error("Test selector API is not supported by this renderer.");
        var c = 0, m = [];
        n = [la(n), 0];
        for (var g = 0; g < n.length; ) {
          var b = n[g++], O = b.tag, G = n[g++], re = a[G];
          if ((O !== 5 && O !== 26 && O !== 27 || !ca(b)) && (Gr(b, re) && (m.push(lm(re)), G++, G > c && (c = G)), G < a.length))
            for (b = b.child; b !== null; )
              n.push(b, G), b = b.sibling;
        }
        if (c < a.length) {
          for (n = []; c < a.length; c++)
            n.push(lm(a[c]));
          return `findAllNodes was able to match part of the selector:
  ` + (m.join(" > ") + `

No matching component was found for:
  `) + n.join(" > ");
        }
        return null;
      }, fn.getPublicRootInstance = function(n) {
        if (n = n.current, !n.child) return null;
        switch (n.child.tag) {
          case 27:
          case 5:
            return _s(n.child.stateNode);
          default:
            return n.child.stateNode;
        }
      }, fn.injectIntoDevTools = function() {
        var n = {
          bundleType: 1,
          version: Xh,
          rendererPackageName: ys,
          currentDispatcherRef: Me,
          findFiberByHostInstance: hl,
          reconcilerVersion: "19.0.0"
        };
        return es !== null && (n.rendererConfig = es), n.overrideHookState = zb, n.overrideHookStateDeletePath = Bb, n.overrideHookStateRenamePath = Pb, n.overrideProps = Hb, n.overridePropsDeletePath = Ib, n.overridePropsRenamePath = Vb, n.scheduleUpdate = Fb, n.setErrorHandler = Gb, n.setSuspenseHandler = Xb, n.scheduleRefresh = S, n.scheduleRoot = _, n.setRefreshHandler = E, n.getCurrentFiber = SS, n.getLaneLabelMap = Yg, n.injectProfilingHooks = Bt, Ve(n);
      }, fn.isAlreadyRendering = function() {
        return (In & (za | Ho)) !== rs;
      }, fn.observeVisibleRects = function(n, a, c, m) {
        function g() {
          var Ee = Dh(n, a);
          b.forEach(function(ke) {
            0 > Ee.indexOf(ke) && re(ke);
          }), Ee.forEach(function(ke) {
            0 > b.indexOf(ke) && G(ke);
          });
        }
        if (!Ss)
          throw Error("Test selector API is not supported by this renderer.");
        var b = Dh(n, a);
        c = wo(b, c, m);
        var O = c.disconnect, G = c.observe, re = c.unobserve;
        return by.push(g), {
          disconnect: function() {
            var Ee = by.indexOf(g);
            0 <= Ee && by.splice(Ee, 1), O();
          }
        };
      }, fn.shouldError = function(n) {
        return p(n);
      }, fn.shouldSuspend = function(n) {
        return h(n);
      }, fn.startHostTransition = function(n, a, c, m) {
        if (n.tag !== 5)
          throw Error(
            "Expected the form instance to be a HostComponent. This is a bug in React."
          );
        var g = wp(n).queue;
        Dp(
          n,
          g,
          a,
          dr,
          c === null ? C : function() {
            Me.T === null && console.error(
              "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
            );
            var b = wp(n).next.queue;
            return nl(
              n,
              b,
              {},
              ka(n)
            ), c(m);
          }
        );
      }, fn.updateContainer = function(n, a, c, m) {
        var g = a.current, b = ka(g);
        return Mm(
          g,
          b,
          n,
          a,
          c,
          m
        ), b;
      }, fn.updateContainerSync = zh, fn;
    }, r.exports.default = r.exports, Object.defineProperty(r.exports, "__esModule", { value: !0 }));
  })(aE)), aE.exports;
}
var VT;
function Uz() {
  return VT || (VT = 1, process.env.NODE_ENV === "production" ? T0.exports = Dz() : T0.exports = wz()), T0.exports;
}
var Nz = Uz();
const Oz = /* @__PURE__ */ nA(Nz);
var R0 = { exports: {} }, sE = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var FT;
function Lz() {
  return FT || (FT = 1, (function(r) {
    function e(B, K) {
      var q = B.length;
      B.push(K);
      e: for (; 0 < q; ) {
        var se = q - 1 >>> 1, le = B[se];
        if (0 < s(le, K))
          B[se] = K, B[q] = le, q = se;
        else break e;
      }
    }
    function t(B) {
      return B.length === 0 ? null : B[0];
    }
    function i(B) {
      if (B.length === 0) return null;
      var K = B[0], q = B.pop();
      if (q !== K) {
        B[0] = q;
        e: for (var se = 0, le = B.length, Te = le >>> 1; se < Te; ) {
          var we = 2 * (se + 1) - 1, gt = B[we], $e = we + 1, _e = B[$e];
          if (0 > s(gt, q))
            $e < le && 0 > s(_e, gt) ? (B[se] = _e, B[$e] = q, se = $e) : (B[se] = gt, B[we] = q, se = we);
          else if ($e < le && 0 > s(_e, q))
            B[se] = _e, B[$e] = q, se = $e;
          else break e;
        }
      }
      return K;
    }
    function s(B, K) {
      var q = B.sortIndex - K.sortIndex;
      return q !== 0 ? q : B.id - K.id;
    }
    if (r.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var u = performance;
      r.unstable_now = function() {
        return u.now();
      };
    } else {
      var f = Date, h = f.now();
      r.unstable_now = function() {
        return f.now() - h;
      };
    }
    var p = [], v = [], _ = 1, S = null, E = 3, x = !1, A = !1, C = !1, R = typeof setTimeout == "function" ? setTimeout : null, M = typeof clearTimeout == "function" ? clearTimeout : null, w = typeof setImmediate < "u" ? setImmediate : null;
    function N(B) {
      for (var K = t(v); K !== null; ) {
        if (K.callback === null) i(v);
        else if (K.startTime <= B)
          i(v), K.sortIndex = K.expirationTime, e(p, K);
        else break;
        K = t(v);
      }
    }
    function U(B) {
      if (C = !1, N(B), !A)
        if (t(p) !== null)
          A = !0, oe();
        else {
          var K = t(v);
          K !== null && Se(U, K.startTime - B);
        }
    }
    var I = !1, P = -1, X = 5, Y = -1;
    function z() {
      return !(r.unstable_now() - Y < X);
    }
    function L() {
      if (I) {
        var B = r.unstable_now();
        Y = B;
        var K = !0;
        try {
          e: {
            A = !1, C && (C = !1, M(P), P = -1), x = !0;
            var q = E;
            try {
              t: {
                for (N(B), S = t(p); S !== null && !(S.expirationTime > B && z()); ) {
                  var se = S.callback;
                  if (typeof se == "function") {
                    S.callback = null, E = S.priorityLevel;
                    var le = se(
                      S.expirationTime <= B
                    );
                    if (B = r.unstable_now(), typeof le == "function") {
                      S.callback = le, N(B), K = !0;
                      break t;
                    }
                    S === t(p) && i(p), N(B);
                  } else i(p);
                  S = t(p);
                }
                if (S !== null) K = !0;
                else {
                  var Te = t(v);
                  Te !== null && Se(
                    U,
                    Te.startTime - B
                  ), K = !1;
                }
              }
              break e;
            } finally {
              S = null, E = q, x = !1;
            }
            K = void 0;
          }
        } finally {
          K ? W() : I = !1;
        }
      }
    }
    var W;
    if (typeof w == "function")
      W = function() {
        w(L);
      };
    else if (typeof MessageChannel < "u") {
      var me = new MessageChannel(), Q = me.port2;
      me.port1.onmessage = L, W = function() {
        Q.postMessage(null);
      };
    } else
      W = function() {
        R(L, 0);
      };
    function oe() {
      I || (I = !0, W());
    }
    function Se(B, K) {
      P = R(function() {
        B(r.unstable_now());
      }, K);
    }
    r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function(B) {
      B.callback = null;
    }, r.unstable_continueExecution = function() {
      A || x || (A = !0, oe());
    }, r.unstable_forceFrameRate = function(B) {
      0 > B || 125 < B ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : X = 0 < B ? Math.floor(1e3 / B) : 5;
    }, r.unstable_getCurrentPriorityLevel = function() {
      return E;
    }, r.unstable_getFirstCallbackNode = function() {
      return t(p);
    }, r.unstable_next = function(B) {
      switch (E) {
        case 1:
        case 2:
        case 3:
          var K = 3;
          break;
        default:
          K = E;
      }
      var q = E;
      E = K;
      try {
        return B();
      } finally {
        E = q;
      }
    }, r.unstable_pauseExecution = function() {
    }, r.unstable_requestPaint = function() {
    }, r.unstable_runWithPriority = function(B, K) {
      switch (B) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          B = 3;
      }
      var q = E;
      E = B;
      try {
        return K();
      } finally {
        E = q;
      }
    }, r.unstable_scheduleCallback = function(B, K, q) {
      var se = r.unstable_now();
      switch (typeof q == "object" && q !== null ? (q = q.delay, q = typeof q == "number" && 0 < q ? se + q : se) : q = se, B) {
        case 1:
          var le = -1;
          break;
        case 2:
          le = 250;
          break;
        case 5:
          le = 1073741823;
          break;
        case 4:
          le = 1e4;
          break;
        default:
          le = 5e3;
      }
      return le = q + le, B = {
        id: _++,
        callback: K,
        priorityLevel: B,
        startTime: q,
        expirationTime: le,
        sortIndex: -1
      }, q > se ? (B.sortIndex = q, e(v, B), t(p) === null && B === t(v) && (C ? (M(P), P = -1) : C = !0, Se(U, q - se))) : (B.sortIndex = le, e(p, B), A || x || (A = !0, oe())), B;
    }, r.unstable_shouldYield = z, r.unstable_wrapCallback = function(B) {
      var K = E;
      return function() {
        var q = E;
        E = K;
        try {
          return B.apply(this, arguments);
        } finally {
          E = q;
        }
      };
    };
  })(sE)), sE;
}
var rE = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var GT;
function zz() {
  return GT || (GT = 1, (function(r) {
    process.env.NODE_ENV !== "production" && (function() {
      function e() {
        if (z) {
          var B = r.unstable_now();
          me = B;
          var K = !0;
          try {
            e: {
              U = !1, I && (I = !1, X(L), L = -1), N = !0;
              var q = w;
              try {
                t: {
                  for (f(B), M = i(A); M !== null && !(M.expirationTime > B && p()); ) {
                    var se = M.callback;
                    if (typeof se == "function") {
                      M.callback = null, w = M.priorityLevel;
                      var le = se(
                        M.expirationTime <= B
                      );
                      if (B = r.unstable_now(), typeof le == "function") {
                        M.callback = le, f(B), K = !0;
                        break t;
                      }
                      M === i(A) && s(A), f(B);
                    } else s(A);
                    M = i(A);
                  }
                  if (M !== null) K = !0;
                  else {
                    var Te = i(C);
                    Te !== null && _(
                      h,
                      Te.startTime - B
                    ), K = !1;
                  }
                }
                break e;
              } finally {
                M = null, w = q, N = !1;
              }
              K = void 0;
            }
          } finally {
            K ? Q() : z = !1;
          }
        }
      }
      function t(B, K) {
        var q = B.length;
        B.push(K);
        e: for (; 0 < q; ) {
          var se = q - 1 >>> 1, le = B[se];
          if (0 < u(le, K))
            B[se] = K, B[q] = le, q = se;
          else break e;
        }
      }
      function i(B) {
        return B.length === 0 ? null : B[0];
      }
      function s(B) {
        if (B.length === 0) return null;
        var K = B[0], q = B.pop();
        if (q !== K) {
          B[0] = q;
          e: for (var se = 0, le = B.length, Te = le >>> 1; se < Te; ) {
            var we = 2 * (se + 1) - 1, gt = B[we], $e = we + 1, _e = B[$e];
            if (0 > u(gt, q))
              $e < le && 0 > u(_e, gt) ? (B[se] = _e, B[$e] = q, se = $e) : (B[se] = gt, B[we] = q, se = we);
            else if ($e < le && 0 > u(_e, q))
              B[se] = _e, B[$e] = q, se = $e;
            else break e;
          }
        }
        return K;
      }
      function u(B, K) {
        var q = B.sortIndex - K.sortIndex;
        return q !== 0 ? q : B.id - K.id;
      }
      function f(B) {
        for (var K = i(C); K !== null; ) {
          if (K.callback === null) s(C);
          else if (K.startTime <= B)
            s(C), K.sortIndex = K.expirationTime, t(A, K);
          else break;
          K = i(C);
        }
      }
      function h(B) {
        if (I = !1, f(B), !U)
          if (i(A) !== null)
            U = !0, v();
          else {
            var K = i(C);
            K !== null && _(
              h,
              K.startTime - B
            );
          }
      }
      function p() {
        return !(r.unstable_now() - me < W);
      }
      function v() {
        z || (z = !0, Q());
      }
      function _(B, K) {
        L = P(function() {
          B(r.unstable_now());
        }, K);
      }
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error()), r.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
        var S = performance;
        r.unstable_now = function() {
          return S.now();
        };
      } else {
        var E = Date, x = E.now();
        r.unstable_now = function() {
          return E.now() - x;
        };
      }
      var A = [], C = [], R = 1, M = null, w = 3, N = !1, U = !1, I = !1, P = typeof setTimeout == "function" ? setTimeout : null, X = typeof clearTimeout == "function" ? clearTimeout : null, Y = typeof setImmediate < "u" ? setImmediate : null, z = !1, L = -1, W = 5, me = -1;
      if (typeof Y == "function")
        var Q = function() {
          Y(e);
        };
      else if (typeof MessageChannel < "u") {
        var oe = new MessageChannel(), Se = oe.port2;
        oe.port1.onmessage = e, Q = function() {
          Se.postMessage(null);
        };
      } else
        Q = function() {
          P(e, 0);
        };
      r.unstable_IdlePriority = 5, r.unstable_ImmediatePriority = 1, r.unstable_LowPriority = 4, r.unstable_NormalPriority = 3, r.unstable_Profiling = null, r.unstable_UserBlockingPriority = 2, r.unstable_cancelCallback = function(B) {
        B.callback = null;
      }, r.unstable_continueExecution = function() {
        U || N || (U = !0, v());
      }, r.unstable_forceFrameRate = function(B) {
        0 > B || 125 < B ? console.error(
          "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
        ) : W = 0 < B ? Math.floor(1e3 / B) : 5;
      }, r.unstable_getCurrentPriorityLevel = function() {
        return w;
      }, r.unstable_getFirstCallbackNode = function() {
        return i(A);
      }, r.unstable_next = function(B) {
        switch (w) {
          case 1:
          case 2:
          case 3:
            var K = 3;
            break;
          default:
            K = w;
        }
        var q = w;
        w = K;
        try {
          return B();
        } finally {
          w = q;
        }
      }, r.unstable_pauseExecution = function() {
      }, r.unstable_requestPaint = function() {
      }, r.unstable_runWithPriority = function(B, K) {
        switch (B) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            B = 3;
        }
        var q = w;
        w = B;
        try {
          return K();
        } finally {
          w = q;
        }
      }, r.unstable_scheduleCallback = function(B, K, q) {
        var se = r.unstable_now();
        switch (typeof q == "object" && q !== null ? (q = q.delay, q = typeof q == "number" && 0 < q ? se + q : se) : q = se, B) {
          case 1:
            var le = -1;
            break;
          case 2:
            le = 250;
            break;
          case 5:
            le = 1073741823;
            break;
          case 4:
            le = 1e4;
            break;
          default:
            le = 5e3;
        }
        return le = q + le, B = {
          id: R++,
          callback: K,
          priorityLevel: B,
          startTime: q,
          expirationTime: le,
          sortIndex: -1
        }, q > se ? (B.sortIndex = q, t(C, B), i(A) === null && B === i(C) && (I ? (X(L), L = -1) : I = !0, _(h, q - se))) : (B.sortIndex = le, t(A, B), U || N || (U = !0, v())), B;
      }, r.unstable_shouldYield = p, r.unstable_wrapCallback = function(B) {
        var K = w;
        return function() {
          var q = w;
          w = K;
          try {
            return B.apply(this, arguments);
          } finally {
            w = q;
          }
        };
      }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
    })();
  })(rE)), rE;
}
var XT;
function Bz() {
  return XT || (XT = 1, process.env.NODE_ENV === "production" ? R0.exports = Lz() : R0.exports = zz()), R0.exports;
}
var qT = Bz();
function RM(r, e, t) {
  if (!r) return;
  if (t(r) === !0) return r;
  let i = e ? r.return : r.child;
  for (; i; ) {
    const s = RM(i, e, t);
    if (s) return s;
    i = e ? null : i.sibling;
  }
}
function o2(r) {
  try {
    return Object.defineProperties(r, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return r;
  }
}
const CM = /* @__PURE__ */ o2(/* @__PURE__ */ hn.createContext(null));
class l2 extends hn.Component {
  render() {
    return /* @__PURE__ */ hn.createElement(CM.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function u2() {
  const r = hn.useContext(CM);
  if (r === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = hn.useId();
  return hn.useMemo(() => {
    for (const t of [r, r?.alternate]) {
      if (!t) continue;
      const i = RM(t, !1, (s) => {
        let u = s.memoizedState;
        for (; u; ) {
          if (u.memoizedState === e) return !0;
          u = u.next;
        }
      });
      if (i) return i;
    }
  }, [r, e]);
}
const Pz = Symbol.for("react.context"), Hz = (r) => r !== null && typeof r == "object" && "$$typeof" in r && r.$$typeof === Pz;
function Iz() {
  const r = u2(), [e] = hn.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let t = r;
  for (; t; ) {
    const i = t.type;
    Hz(i) && i !== CM && !e.has(i) && e.set(i, hn.use(o2(i))), t = t.return;
  }
  return e;
}
function Vz() {
  const r = Iz();
  return hn.useMemo(
    () => Array.from(r.keys()).reduce(
      (e, t) => (i) => /* @__PURE__ */ hn.createElement(e, null, /* @__PURE__ */ hn.createElement(t.Provider, { ...i, value: r.get(t) })),
      (e) => /* @__PURE__ */ hn.createElement(l2, { ...e })
    ),
    [r]
  );
}
function c2(r) {
  let e = r.root;
  for (; e.getState().previousRoot; ) e = e.getState().previousRoot;
  return e;
}
const f2 = (r) => r && r.isOrthographicCamera, Fz = (r) => r && r.hasOwnProperty("current"), Gz = (r) => r != null && (typeof r == "string" || typeof r == "number" || r.isColor), fg = /* @__PURE__ */ ((r, e) => typeof window < "u" && (((r = window.document) == null ? void 0 : r.createElement) || ((e = window.navigator) == null ? void 0 : e.product) === "ReactNative"))() ? hn.useLayoutEffect : hn.useEffect;
function h2(r) {
  const e = hn.useRef(r);
  return fg(() => void (e.current = r), [r]), e;
}
function Xz() {
  const r = u2(), e = Vz();
  return hn.useMemo(() => ({
    children: t
  }) => {
    const s = !!RM(r, !0, (u) => u.type === hn.StrictMode) ? hn.StrictMode : hn.Fragment;
    return /* @__PURE__ */ ci.jsx(s, {
      children: /* @__PURE__ */ ci.jsx(e, {
        children: t
      })
    });
  }, [r, e]);
}
function qz({
  set: r
}) {
  return fg(() => (r(new Promise(() => null)), () => r(!1)), [r]), null;
}
const Yz = /* @__PURE__ */ ((r) => (r = class extends hn.Component {
  constructor(...t) {
    super(...t), this.state = {
      error: !1
    };
  }
  componentDidCatch(t) {
    this.props.set(t);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}, r.getDerivedStateFromError = () => ({
  error: !0
}), r))();
function d2(r) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(r) ? Math.min(Math.max(r[0], t), r[1]) : r;
}
function Yd(r) {
  var e;
  return (e = r.__r3f) == null ? void 0 : e.root.getState();
}
const pi = {
  obj: (r) => r === Object(r) && !pi.arr(r) && typeof r != "function",
  fun: (r) => typeof r == "function",
  str: (r) => typeof r == "string",
  num: (r) => typeof r == "number",
  boo: (r) => typeof r == "boolean",
  und: (r) => r === void 0,
  nul: (r) => r === null,
  arr: (r) => Array.isArray(r),
  equ(r, e, {
    arrays: t = "shallow",
    objects: i = "reference",
    strict: s = !0
  } = {}) {
    if (typeof r != typeof e || !!r != !!e) return !1;
    if (pi.str(r) || pi.num(r) || pi.boo(r)) return r === e;
    const u = pi.obj(r);
    if (u && i === "reference") return r === e;
    const f = pi.arr(r);
    if (f && t === "reference") return r === e;
    if ((f || u) && r === e) return !0;
    let h;
    for (h in r) if (!(h in e)) return !1;
    if (u && t === "shallow" && i === "shallow") {
      for (h in s ? e : r) if (!pi.equ(r[h], e[h], {
        strict: s,
        objects: "reference"
      })) return !1;
    } else
      for (h in s ? e : r) if (r[h] !== e[h]) return !1;
    if (pi.und(h)) {
      if (f && r.length === 0 && e.length === 0 || u && Object.keys(r).length === 0 && Object.keys(e).length === 0) return !0;
      if (r !== e) return !1;
    }
    return !0;
  }
};
function Wz(r) {
  r.type !== "Scene" && (r.dispose == null || r.dispose());
  for (const e in r) {
    const t = r[e];
    t?.type !== "Scene" && (t == null || t.dispose == null || t.dispose());
  }
}
const p2 = ["children", "key", "ref"];
function jz(r) {
  const e = {};
  for (const t in r)
    p2.includes(t) || (e[t] = r[t]);
  return e;
}
function E_(r, e, t, i) {
  const s = r;
  let u = s?.__r3f;
  return u || (u = {
    root: e,
    type: t,
    parent: null,
    children: [],
    props: jz(i),
    object: s,
    eventCount: 0,
    handlers: {},
    isHidden: !1
  }, s && (s.__r3f = u)), u;
}
function tg(r, e) {
  let t = r[e];
  if (!e.includes("-")) return {
    root: r,
    key: e,
    target: t
  };
  t = r;
  for (const s of e.split("-")) {
    var i;
    e = s, r = t, t = (i = t) == null ? void 0 : i[e];
  }
  return {
    root: r,
    key: e,
    target: t
  };
}
const YT = /-\d+$/;
function M_(r, e) {
  if (pi.str(e.props.attach)) {
    if (YT.test(e.props.attach)) {
      const s = e.props.attach.replace(YT, ""), {
        root: u,
        key: f
      } = tg(r.object, s);
      Array.isArray(u[f]) || (u[f] = []);
    }
    const {
      root: t,
      key: i
    } = tg(r.object, e.props.attach);
    e.previousAttach = t[i], t[i] = e.object;
  } else pi.fun(e.props.attach) && (e.previousAttach = e.props.attach(r.object, e.object));
}
function b_(r, e) {
  if (pi.str(e.props.attach)) {
    const {
      root: t,
      key: i
    } = tg(r.object, e.props.attach), s = e.previousAttach;
    s === void 0 ? delete t[i] : t[i] = s;
  } else
    e.previousAttach == null || e.previousAttach(r.object, e.object);
  delete e.previousAttach;
}
const OE = [
  ...p2,
  // Instance props
  "args",
  "dispose",
  "attach",
  "object",
  "onUpdate",
  // Behavior flags
  "dispose"
], WT = /* @__PURE__ */ new Map();
function Zz(r) {
  let e = WT.get(r.constructor);
  try {
    e || (e = new r.constructor(), WT.set(r.constructor, e));
  } catch {
  }
  return e;
}
function Kz(r, e) {
  const t = {};
  for (const i in e)
    if (!OE.includes(i) && !pi.equ(e[i], r.props[i])) {
      t[i] = e[i];
      for (const s in e)
        s.startsWith(`${i}-`) && (t[s] = e[s]);
    }
  for (const i in r.props) {
    if (OE.includes(i) || e.hasOwnProperty(i)) continue;
    const {
      root: s,
      key: u
    } = tg(r.object, i);
    if (s.constructor && s.constructor.length === 0) {
      const f = Zz(s);
      pi.und(f) || (t[u] = f[u]);
    } else
      t[u] = 0;
  }
  return t;
}
const Qz = ["map", "emissiveMap", "sheenColorMap", "specularColorMap", "envMap"], kz = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;
function Xu(r, e) {
  var t;
  const i = r.__r3f, s = i && c2(i).getState(), u = i?.eventCount;
  for (const h in e) {
    let p = e[h];
    if (OE.includes(h)) continue;
    if (i && kz.test(h)) {
      typeof p == "function" ? i.handlers[h] = p : delete i.handlers[h], i.eventCount = Object.keys(i.handlers).length;
      continue;
    }
    if (p === void 0) continue;
    let {
      root: v,
      key: _,
      target: S
    } = tg(r, h);
    if (S instanceof rp && p instanceof rp)
      S.mask = p.mask;
    else if (S instanceof Et && Gz(p))
      S.set(p);
    else if (S !== null && typeof S == "object" && typeof S.set == "function" && typeof S.copy == "function" && p != null && p.constructor && S.constructor === p.constructor)
      S.copy(p);
    else if (S !== null && typeof S == "object" && typeof S.set == "function" && Array.isArray(p))
      typeof S.fromArray == "function" ? S.fromArray(p) : S.set(...p);
    else if (S !== null && typeof S == "object" && typeof S.set == "function" && typeof p == "number")
      typeof S.setScalar == "function" ? S.setScalar(p) : S.set(p);
    else {
      var f;
      v[_] = p, s && !s.linear && Qz.includes(_) && (f = v[_]) != null && f.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      v[_].format === Va && v[_].type === Dr && (v[_].colorSpace = Ia);
    }
  }
  if (i != null && i.parent && s != null && s.internal && (t = i.object) != null && t.isObject3D && u !== i.eventCount) {
    const h = i.object, p = s.internal.interaction.indexOf(h);
    p > -1 && s.internal.interaction.splice(p, 1), i.eventCount && h.raycast !== null && s.internal.interaction.push(h);
  }
  return i && i.props.attach === void 0 && (i.object.isBufferGeometry ? i.props.attach = "geometry" : i.object.isMaterial && (i.props.attach = "material")), i && vp(i), r;
}
function vp(r) {
  var e;
  if (!r.parent) return;
  r.props.onUpdate == null || r.props.onUpdate(r.object);
  const t = (e = r.root) == null || e.getState == null ? void 0 : e.getState();
  t && t.internal.frames === 0 && t.invalidate();
}
function Jz(r, e) {
  r.manual || (f2(r) ? (r.left = e.width / -2, r.right = e.width / 2, r.top = e.height / 2, r.bottom = e.height / -2) : r.aspect = e.width / e.height, r.updateProjectionMatrix());
}
const Rs = (r) => r?.isObject3D;
function C0(r) {
  return (r.eventObject || r.object).uuid + "/" + r.index + r.instanceId;
}
function m2(r, e, t, i) {
  const s = t.get(e);
  s && (t.delete(e), t.size === 0 && (r.delete(i), s.target.releasePointerCapture(i)));
}
function $z(r, e) {
  const {
    internal: t
  } = r.getState();
  t.interaction = t.interaction.filter((i) => i !== e), t.initialHits = t.initialHits.filter((i) => i !== e), t.hovered.forEach((i, s) => {
    (i.eventObject === e || i.object === e) && t.hovered.delete(s);
  }), t.capturedMap.forEach((i, s) => {
    m2(t.capturedMap, e, i, s);
  });
}
function eB(r) {
  function e(p) {
    const {
      internal: v
    } = r.getState(), _ = p.offsetX - v.initialClick[0], S = p.offsetY - v.initialClick[1];
    return Math.round(Math.sqrt(_ * _ + S * S));
  }
  function t(p) {
    return p.filter((v) => ["Move", "Over", "Enter", "Out", "Leave"].some((_) => {
      var S;
      return (S = v.__r3f) == null ? void 0 : S.handlers["onPointer" + _];
    }));
  }
  function i(p, v) {
    const _ = r.getState(), S = /* @__PURE__ */ new Set(), E = [], x = v ? v(_.internal.interaction) : _.internal.interaction;
    for (let M = 0; M < x.length; M++) {
      const w = Yd(x[M]);
      w && (w.raycaster.camera = void 0);
    }
    _.previousRoot || _.events.compute == null || _.events.compute(p, _);
    function A(M) {
      const w = Yd(M);
      if (!w || !w.events.enabled || w.raycaster.camera === null) return [];
      if (w.raycaster.camera === void 0) {
        var N;
        w.events.compute == null || w.events.compute(p, w, (N = w.previousRoot) == null ? void 0 : N.getState()), w.raycaster.camera === void 0 && (w.raycaster.camera = null);
      }
      return w.raycaster.camera ? w.raycaster.intersectObject(M, !0) : [];
    }
    let C = x.flatMap(A).sort((M, w) => {
      const N = Yd(M.object), U = Yd(w.object);
      return !N || !U ? M.distance - w.distance : U.events.priority - N.events.priority || M.distance - w.distance;
    }).filter((M) => {
      const w = C0(M);
      return S.has(w) ? !1 : (S.add(w), !0);
    });
    _.events.filter && (C = _.events.filter(C, _));
    for (const M of C) {
      let w = M.object;
      for (; w; ) {
        var R;
        (R = w.__r3f) != null && R.eventCount && E.push({
          ...M,
          eventObject: w
        }), w = w.parent;
      }
    }
    if ("pointerId" in p && _.internal.capturedMap.has(p.pointerId))
      for (let M of _.internal.capturedMap.get(p.pointerId).values())
        S.has(C0(M.intersection)) || E.push(M.intersection);
    return E;
  }
  function s(p, v, _, S) {
    if (p.length) {
      const E = {
        stopped: !1
      };
      for (const x of p) {
        let A = Yd(x.object);
        if (A || x.object.traverseAncestors((C) => {
          const R = Yd(C);
          if (R)
            return A = R, !1;
        }), A) {
          const {
            raycaster: C,
            pointer: R,
            camera: M,
            internal: w
          } = A, N = new j(R.x, R.y, 0).unproject(M), U = (z) => {
            var L, W;
            return (L = (W = w.capturedMap.get(z)) == null ? void 0 : W.has(x.eventObject)) != null ? L : !1;
          }, I = (z) => {
            const L = {
              intersection: x,
              target: v.target
            };
            w.capturedMap.has(z) ? w.capturedMap.get(z).set(x.eventObject, L) : w.capturedMap.set(z, /* @__PURE__ */ new Map([[x.eventObject, L]])), v.target.setPointerCapture(z);
          }, P = (z) => {
            const L = w.capturedMap.get(z);
            L && m2(w.capturedMap, x.eventObject, L, z);
          };
          let X = {};
          for (let z in v) {
            let L = v[z];
            typeof L != "function" && (X[z] = L);
          }
          let Y = {
            ...x,
            ...X,
            pointer: R,
            intersections: p,
            stopped: E.stopped,
            delta: _,
            unprojectedPoint: N,
            ray: C.ray,
            camera: M,
            // Hijack stopPropagation, which just sets a flag
            stopPropagation() {
              const z = "pointerId" in v && w.capturedMap.get(v.pointerId);
              if (
                // ...if this pointer hasn't been captured
                (!z || // ... or if the hit object is capturing the pointer
                z.has(x.eventObject)) && (Y.stopped = E.stopped = !0, w.hovered.size && Array.from(w.hovered.values()).find((L) => L.eventObject === x.eventObject))
              ) {
                const L = p.slice(0, p.indexOf(x));
                u([...L, x]);
              }
            },
            // there should be a distinction between target and currentTarget
            target: {
              hasPointerCapture: U,
              setPointerCapture: I,
              releasePointerCapture: P
            },
            currentTarget: {
              hasPointerCapture: U,
              setPointerCapture: I,
              releasePointerCapture: P
            },
            nativeEvent: v
          };
          if (S(Y), E.stopped === !0) break;
        }
      }
    }
    return p;
  }
  function u(p) {
    const {
      internal: v
    } = r.getState();
    for (const _ of v.hovered.values())
      if (!p.length || !p.find((S) => S.object === _.object && S.index === _.index && S.instanceId === _.instanceId)) {
        const E = _.eventObject.__r3f;
        if (v.hovered.delete(C0(_)), E != null && E.eventCount) {
          const x = E.handlers, A = {
            ..._,
            intersections: p
          };
          x.onPointerOut == null || x.onPointerOut(A), x.onPointerLeave == null || x.onPointerLeave(A);
        }
      }
  }
  function f(p, v) {
    for (let _ = 0; _ < v.length; _++) {
      const S = v[_].__r3f;
      S == null || S.handlers.onPointerMissed == null || S.handlers.onPointerMissed(p);
    }
  }
  function h(p) {
    switch (p) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => u([]);
      case "onLostPointerCapture":
        return (v) => {
          const {
            internal: _
          } = r.getState();
          "pointerId" in v && _.capturedMap.has(v.pointerId) && requestAnimationFrame(() => {
            _.capturedMap.has(v.pointerId) && (_.capturedMap.delete(v.pointerId), u([]));
          });
        };
    }
    return function(_) {
      const {
        onPointerMissed: S,
        internal: E
      } = r.getState();
      E.lastEvent.current = _;
      const x = p === "onPointerMove", A = p === "onClick" || p === "onContextMenu" || p === "onDoubleClick", R = i(_, x ? t : void 0), M = A ? e(_) : 0;
      p === "onPointerDown" && (E.initialClick = [_.offsetX, _.offsetY], E.initialHits = R.map((N) => N.eventObject)), A && !R.length && M <= 2 && (f(_, E.interaction), S && S(_)), x && u(R);
      function w(N) {
        const U = N.eventObject, I = U.__r3f;
        if (!(I != null && I.eventCount)) return;
        const P = I.handlers;
        if (x) {
          if (P.onPointerOver || P.onPointerEnter || P.onPointerOut || P.onPointerLeave) {
            const X = C0(N), Y = E.hovered.get(X);
            Y ? Y.stopped && N.stopPropagation() : (E.hovered.set(X, N), P.onPointerOver == null || P.onPointerOver(N), P.onPointerEnter == null || P.onPointerEnter(N));
          }
          P.onPointerMove == null || P.onPointerMove(N);
        } else {
          const X = P[p];
          X ? (!A || E.initialHits.includes(U)) && (f(_, E.interaction.filter((Y) => !E.initialHits.includes(Y))), X(N)) : A && E.initialHits.includes(U) && f(_, E.interaction.filter((Y) => !E.initialHits.includes(Y)));
        }
      }
      s(R, _, M, w);
    };
  }
  return {
    handlePointer: h
  };
}
const jT = (r) => !!(r != null && r.render), v2 = /* @__PURE__ */ hn.createContext(null), tB = (r, e) => {
  const t = Az((h, p) => {
    const v = new j(), _ = new j(), S = new j();
    function E(M = p().camera, w = _, N = p().size) {
      const {
        width: U,
        height: I,
        top: P,
        left: X
      } = N, Y = U / I;
      w.isVector3 ? S.copy(w) : S.set(...w);
      const z = M.getWorldPosition(v).distanceTo(S);
      if (f2(M))
        return {
          width: U / M.zoom,
          height: I / M.zoom,
          top: P,
          left: X,
          factor: 1,
          distance: z,
          aspect: Y
        };
      {
        const L = M.fov * Math.PI / 180, W = 2 * Math.tan(L / 2) * z, me = W * (U / I);
        return {
          width: me,
          height: W,
          top: P,
          left: X,
          factor: U / me,
          distance: z,
          aspect: Y
        };
      }
    }
    let x;
    const A = (M) => h((w) => ({
      performance: {
        ...w.performance,
        current: M
      }
    })), C = new ze();
    return {
      set: h,
      get: p,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      scene: null,
      xr: null,
      invalidate: (M = 1) => r(p(), M),
      advance: (M, w) => e(M, w, p()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new xM(),
      pointer: C,
      mouse: C,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const M = p();
          x && clearTimeout(x), M.performance.current !== M.performance.min && A(M.performance.min), x = setTimeout(() => A(p().performance.max), M.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: E
      },
      setEvents: (M) => h((w) => ({
        ...w,
        events: {
          ...w.events,
          ...M
        }
      })),
      setSize: (M, w, N = 0, U = 0) => {
        const I = p().camera, P = {
          width: M,
          height: w,
          top: N,
          left: U
        };
        h((X) => ({
          size: P,
          viewport: {
            ...X.viewport,
            ...E(I, _, P)
          }
        }));
      },
      setDpr: (M) => h((w) => {
        const N = d2(M);
        return {
          viewport: {
            ...w.viewport,
            dpr: N,
            initialDpr: w.viewport.initialDpr || N
          }
        };
      }),
      setFrameloop: (M = "always") => {
        const w = p().clock;
        w.stop(), w.elapsedTime = 0, M !== "never" && (w.start(), w.elapsedTime = 0), h(() => ({
          frameloop: M
        }));
      },
      previousRoot: void 0,
      internal: {
        // Events
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        lastEvent: /* @__PURE__ */ hn.createRef(),
        // Updates
        active: !1,
        frames: 0,
        priority: 0,
        subscribe: (M, w, N) => {
          const U = p().internal;
          return U.priority = U.priority + (w > 0 ? 1 : 0), U.subscribers.push({
            ref: M,
            priority: w,
            store: N
          }), U.subscribers = U.subscribers.sort((I, P) => I.priority - P.priority), () => {
            const I = p().internal;
            I != null && I.subscribers && (I.priority = I.priority - (w > 0 ? 1 : 0), I.subscribers = I.subscribers.filter((P) => P.ref !== M));
          };
        }
      }
    };
  }), i = t.getState();
  let s = i.size, u = i.viewport.dpr, f = i.camera;
  return t.subscribe(() => {
    const {
      camera: h,
      size: p,
      viewport: v,
      gl: _,
      set: S
    } = t.getState();
    if (p.width !== s.width || p.height !== s.height || v.dpr !== u) {
      s = p, u = v.dpr, Jz(h, p), v.dpr > 0 && _.setPixelRatio(v.dpr);
      const E = typeof HTMLCanvasElement < "u" && _.domElement instanceof HTMLCanvasElement;
      _.setSize(p.width, p.height, E);
    }
    h !== f && (f = h, S((E) => ({
      viewport: {
        ...E.viewport,
        ...E.viewport.getCurrentViewport(h)
      }
    })));
  }), t.subscribe((h) => r(h)), t;
};
function g2() {
  const r = hn.useContext(v2);
  if (!r) throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return r;
}
function Fu(r = (t) => t, e) {
  return g2()(r, e);
}
function y2(r, e = 0) {
  const t = g2(), i = t.getState().internal.subscribe, s = h2(r);
  return fg(() => i(s, e, t), [e, i, t]), null;
}
function nB(r) {
  const e = Oz(r);
  return e.injectIntoDevTools({
    bundleType: typeof process < "u" && process.env.NODE_ENV !== "production" ? 1 : 0,
    rendererPackageName: "@react-three/fiber",
    version: hn.version
  }), e;
}
const _2 = 0, cp = {}, iB = /^three(?=[A-Z])/, rS = (r) => `${r[0].toUpperCase()}${r.slice(1)}`;
let aB = 0;
const sB = (r) => typeof r == "function";
function rB(r) {
  if (sB(r)) {
    const e = `${aB++}`;
    return cp[e] = r, e;
  } else
    Object.assign(cp, r);
}
function S2(r, e) {
  const t = rS(r), i = cp[t];
  if (r !== "primitive" && !i) throw new Error(`R3F: ${t} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
  if (r === "primitive" && !e.object) throw new Error("R3F: Primitives without 'object' are invalid!");
  if (e.args !== void 0 && !Array.isArray(e.args)) throw new Error("R3F: The args prop must be an array!");
}
function oB(r, e, t) {
  var i;
  return r = rS(r) in cp ? r : r.replace(iB, ""), S2(r, e), r === "primitive" && (i = e.object) != null && i.__r3f && delete e.object.__r3f, E_(e.object, t, r, e);
}
function lB(r) {
  if (!r.isHidden) {
    var e;
    r.props.attach && (e = r.parent) != null && e.object ? b_(r.parent, r) : Rs(r.object) && (r.object.visible = !1), r.isHidden = !0, vp(r);
  }
}
function x2(r) {
  if (r.isHidden) {
    var e;
    r.props.attach && (e = r.parent) != null && e.object ? M_(r.parent, r) : Rs(r.object) && r.props.visible !== !1 && (r.object.visible = !0), r.isHidden = !1, vp(r);
  }
}
function DM(r, e, t) {
  const i = e.root.getState();
  if (!(!r.parent && r.object !== i.scene)) {
    if (!e.object) {
      var s, u;
      const f = cp[rS(e.type)];
      e.object = (s = e.props.object) != null ? s : new f(...(u = e.props.args) != null ? u : []), e.object.__r3f = e;
    }
    if (Xu(e.object, e.props), e.props.attach)
      M_(r, e);
    else if (Rs(e.object) && Rs(r.object)) {
      const f = r.object.children.indexOf(t?.object);
      if (t && f !== -1) {
        const h = r.object.children.indexOf(e.object);
        if (h !== -1) {
          r.object.children.splice(h, 1);
          const p = h < f ? f - 1 : f;
          r.object.children.splice(p, 0, e.object);
        } else
          e.object.parent = r.object, r.object.children.splice(f, 0, e.object), e.object.dispatchEvent({
            type: "added"
          }), r.object.dispatchEvent({
            type: "childadded",
            child: e.object
          });
      } else
        r.object.add(e.object);
    }
    for (const f of e.children) DM(e, f);
    vp(e);
  }
}
function oE(r, e) {
  e && (e.parent = r, r.children.push(e), DM(r, e));
}
function ZT(r, e, t) {
  if (!e || !t) return;
  e.parent = r;
  const i = r.children.indexOf(t);
  i !== -1 ? r.children.splice(i, 0, e) : r.children.push(e), DM(r, e, t);
}
function E2(r) {
  if (typeof r.dispose == "function") {
    const e = () => {
      try {
        r.dispose();
      } catch {
      }
    };
    typeof IS_REACT_ACT_ENVIRONMENT < "u" ? e() : qT.unstable_scheduleCallback(qT.unstable_IdlePriority, e);
  }
}
function LE(r, e, t) {
  if (!e) return;
  e.parent = null;
  const i = r.children.indexOf(e);
  i !== -1 && r.children.splice(i, 1), e.props.attach ? b_(r, e) : Rs(e.object) && Rs(r.object) && (r.object.remove(e.object), $z(c2(e), e.object));
  const s = e.props.dispose !== null && t !== !1;
  for (let u = e.children.length - 1; u >= 0; u--) {
    const f = e.children[u];
    LE(e, f, s);
  }
  e.children.length = 0, delete e.object.__r3f, s && e.type !== "primitive" && e.object.type !== "Scene" && E2(e.object), t === void 0 && vp(e);
}
function uB(r, e) {
  for (const t of [r, r.alternate])
    if (t !== null)
      if (typeof t.ref == "function") {
        t.refCleanup == null || t.refCleanup();
        const i = t.ref(e);
        typeof i == "function" && (t.refCleanup = i);
      } else t.ref && (t.ref.current = e);
}
const z0 = [];
function cB() {
  for (const [t] of z0) {
    const i = t.parent;
    if (i) {
      t.props.attach ? b_(i, t) : Rs(t.object) && Rs(i.object) && i.object.remove(t.object);
      for (const s of t.children)
        s.props.attach ? b_(t, s) : Rs(s.object) && Rs(t.object) && t.object.remove(s.object);
    }
    t.isHidden && x2(t), t.object.__r3f && delete t.object.__r3f, t.type !== "primitive" && E2(t.object);
  }
  for (const [t, i, s] of z0) {
    t.props = i;
    const u = t.parent;
    if (u) {
      var r, e;
      const f = cp[rS(t.type)];
      t.object = (r = t.props.object) != null ? r : new f(...(e = t.props.args) != null ? e : []), t.object.__r3f = t, uB(s, t.object), Xu(t.object, t.props), t.props.attach ? M_(u, t) : Rs(t.object) && Rs(u.object) && u.object.add(t.object);
      for (const h of t.children)
        h.props.attach ? M_(t, h) : Rs(h.object) && Rs(t.object) && t.object.add(h.object);
      vp(t);
    }
  }
  z0.length = 0;
}
const lE = () => {
}, KT = {};
let D0 = _2;
const fB = 0, hB = 4, zE = /* @__PURE__ */ nB({
  isPrimaryRenderer: !1,
  warnsIfNotActing: !1,
  supportsMutation: !0,
  supportsPersistence: !1,
  supportsHydration: !1,
  createInstance: oB,
  removeChild: LE,
  appendChild: oE,
  appendInitialChild: oE,
  insertBefore: ZT,
  appendChildToContainer(r, e) {
    const t = r.getState().scene.__r3f;
    !e || !t || oE(t, e);
  },
  removeChildFromContainer(r, e) {
    const t = r.getState().scene.__r3f;
    !e || !t || LE(t, e);
  },
  insertInContainerBefore(r, e, t) {
    const i = r.getState().scene.__r3f;
    !e || !t || !i || ZT(i, e, t);
  },
  getRootHostContext: () => KT,
  getChildHostContext: () => KT,
  commitUpdate(r, e, t, i, s) {
    var u, f, h;
    S2(e, i);
    let p = !1;
    if ((r.type === "primitive" && t.object !== i.object || ((u = i.args) == null ? void 0 : u.length) !== ((f = t.args) == null ? void 0 : f.length) || (h = i.args) != null && h.some((_, S) => {
      var E;
      return _ !== ((E = t.args) == null ? void 0 : E[S]);
    })) && (p = !0), p)
      z0.push([r, {
        ...i
      }, s]);
    else {
      const _ = Kz(r, i);
      Object.keys(_).length && (Object.assign(r.props, _), Xu(r.object, _));
    }
    (s.sibling === null || (s.flags & hB) === fB) && cB();
  },
  finalizeInitialChildren: () => !1,
  commitMount() {
  },
  getPublicInstance: (r) => r?.object,
  prepareForCommit: () => null,
  preparePortalMount: (r) => E_(r.getState().scene, r, "", {}),
  resetAfterCommit: () => {
  },
  shouldSetTextContent: () => !1,
  clearContainer: () => !1,
  hideInstance: lB,
  unhideInstance: x2,
  createTextInstance: lE,
  hideTextInstance: lE,
  unhideTextInstance: lE,
  scheduleTimeout: typeof setTimeout == "function" ? setTimeout : void 0,
  cancelTimeout: typeof clearTimeout == "function" ? clearTimeout : void 0,
  noTimeout: -1,
  getInstanceFromNode: () => null,
  beforeActiveInstanceBlur() {
  },
  afterActiveInstanceBlur() {
  },
  detachDeletedInstance() {
  },
  prepareScopeUpdate() {
  },
  getInstanceFromScope: () => null,
  shouldAttemptEagerTransition: () => !1,
  trackSchedulerEvent: () => {
  },
  resolveEventType: () => null,
  resolveEventTimeStamp: () => -1.1,
  requestPostPaintCallback() {
  },
  maySuspendCommit: () => !1,
  preloadInstance: () => !0,
  // true indicates already loaded
  startSuspendingCommit() {
  },
  suspendInstance() {
  },
  waitForCommitToBeReady: () => null,
  NotPendingTransition: null,
  // The reconciler types use the internal ReactContext with all the hidden properties
  // so we have to cast from the public React.Context type
  HostTransitionContext: /* @__PURE__ */ hn.createContext(null),
  setCurrentUpdatePriority(r) {
    D0 = r;
  },
  getCurrentUpdatePriority() {
    return D0;
  },
  resolveUpdatePriority() {
    var r;
    if (D0 !== _2) return D0;
    switch (typeof window < "u" && ((r = window.event) == null ? void 0 : r.type)) {
      case "click":
      case "contextmenu":
      case "dblclick":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
        return U0.DiscreteEventPriority;
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerenter":
      case "pointerleave":
      case "wheel":
        return U0.ContinuousEventPriority;
      default:
        return U0.DefaultEventPriority;
    }
  },
  resetFormInstance() {
  }
}), Af = /* @__PURE__ */ new Map(), Wd = {
  objects: "shallow",
  strict: !1
};
function dB(r, e) {
  if (!e && typeof HTMLCanvasElement < "u" && r instanceof HTMLCanvasElement && r.parentElement) {
    const {
      width: t,
      height: i,
      top: s,
      left: u
    } = r.parentElement.getBoundingClientRect();
    return {
      width: t,
      height: i,
      top: s,
      left: u
    };
  } else if (!e && typeof OffscreenCanvas < "u" && r instanceof OffscreenCanvas)
    return {
      width: r.width,
      height: r.height,
      top: 0,
      left: 0
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    ...e
  };
}
function pB(r) {
  const e = Af.get(r), t = e?.fiber, i = e?.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const s = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), u = i || tB(HE, kT), f = t || zE.createContainer(
    u,
    // container
    U0.ConcurrentRoot,
    // tag
    null,
    // hydration callbacks
    !1,
    // isStrictMode
    null,
    // concurrentUpdatesByDefaultOverride
    "",
    // identifierPrefix
    s,
    // onUncaughtError
    s,
    // onCaughtError
    s,
    // onRecoverableError
    null
    // transitionCallbacks
  );
  e || Af.set(r, {
    fiber: f,
    store: u
  });
  let h, p, v = !1, _ = null;
  return {
    async configure(S = {}) {
      let E;
      _ = new Promise((Te) => E = Te);
      let {
        gl: x,
        size: A,
        scene: C,
        events: R,
        onCreated: M,
        shadows: w = !1,
        linear: N = !1,
        flat: U = !1,
        legacy: I = !1,
        orthographic: P = !1,
        frameloop: X = "always",
        dpr: Y = [1, 2],
        performance: z,
        raycaster: L,
        camera: W,
        onPointerMissed: me
      } = S, Q = u.getState(), oe = Q.gl;
      if (!Q.gl) {
        const Te = {
          canvas: r,
          powerPreference: "high-performance",
          antialias: !0,
          alpha: !0
        }, we = typeof x == "function" ? await x(Te) : x;
        jT(we) ? oe = we : oe = new a2({
          ...Te,
          ...x
        }), Q.set({
          gl: oe
        });
      }
      let Se = Q.raycaster;
      Se || Q.set({
        raycaster: Se = new KR()
      });
      const {
        params: B,
        ...K
      } = L || {};
      if (pi.equ(K, Se, Wd) || Xu(Se, {
        ...K
      }), pi.equ(B, Se.params, Wd) || Xu(Se, {
        params: {
          ...Se.params,
          ...B
        }
      }), !Q.camera || Q.camera === p && !pi.equ(p, W, Wd)) {
        p = W;
        const Te = W?.isCamera, we = Te ? W : P ? new Yu(0, 0, 0, 0, 0.1, 1e3) : new Ui(75, 0, 0.1, 1e3);
        Te || (we.position.z = 5, W && (Xu(we, W), we.manual || ("aspect" in W || "left" in W || "right" in W || "bottom" in W || "top" in W) && (we.manual = !0, we.updateProjectionMatrix())), !Q.camera && !(W != null && W.rotation) && we.lookAt(0, 0, 0)), Q.set({
          camera: we
        }), Se.camera = we;
      }
      if (!Q.scene) {
        let Te;
        C != null && C.isScene ? (Te = C, E_(Te, u, "", {})) : (Te = new tM(), E_(Te, u, "", {}), C && Xu(Te, C)), Q.set({
          scene: Te
        });
      }
      R && !Q.events.handlers && Q.set({
        events: R(u)
      });
      const q = dB(r, A);
      if (pi.equ(q, Q.size, Wd) || Q.setSize(q.width, q.height, q.top, q.left), Y && Q.viewport.dpr !== d2(Y) && Q.setDpr(Y), Q.frameloop !== X && Q.setFrameloop(X), Q.onPointerMissed || Q.set({
        onPointerMissed: me
      }), z && !pi.equ(z, Q.performance, Wd) && Q.set((Te) => ({
        performance: {
          ...Te.performance,
          ...z
        }
      })), !Q.xr) {
        var se;
        const Te = ($e, _e) => {
          const Je = u.getState();
          Je.frameloop !== "never" && kT($e, !0, Je, _e);
        }, we = () => {
          const $e = u.getState();
          $e.gl.xr.enabled = $e.gl.xr.isPresenting, $e.gl.xr.setAnimationLoop($e.gl.xr.isPresenting ? Te : null), $e.gl.xr.isPresenting || HE($e);
        }, gt = {
          connect() {
            const $e = u.getState().gl;
            $e.xr.addEventListener("sessionstart", we), $e.xr.addEventListener("sessionend", we);
          },
          disconnect() {
            const $e = u.getState().gl;
            $e.xr.removeEventListener("sessionstart", we), $e.xr.removeEventListener("sessionend", we);
          }
        };
        typeof ((se = oe.xr) == null ? void 0 : se.addEventListener) == "function" && gt.connect(), Q.set({
          xr: gt
        });
      }
      if (oe.shadowMap) {
        const Te = oe.shadowMap.enabled, we = oe.shadowMap.type;
        if (oe.shadowMap.enabled = !!w, pi.boo(w))
          oe.shadowMap.type = Cv;
        else if (pi.str(w)) {
          var le;
          const gt = {
            basic: sA,
            percentage: R_,
            soft: Cv,
            variance: ao
          };
          oe.shadowMap.type = (le = gt[w]) != null ? le : Cv;
        } else pi.obj(w) && Object.assign(oe.shadowMap, w);
        (Te !== oe.shadowMap.enabled || we !== oe.shadowMap.type) && (oe.shadowMap.needsUpdate = !0);
      }
      return An.enabled = !I, v || (oe.outputColorSpace = N ? ju : Ia, oe.toneMapping = U ? Yo : VE), Q.legacy !== I && Q.set(() => ({
        legacy: I
      })), Q.linear !== N && Q.set(() => ({
        linear: N
      })), Q.flat !== U && Q.set(() => ({
        flat: U
      })), x && !pi.fun(x) && !jT(x) && !pi.equ(x, oe, Wd) && Xu(oe, x), h = M, v = !0, E(), this;
    },
    render(S) {
      return !v && !_ && this.configure(), _.then(() => {
        zE.updateContainer(/* @__PURE__ */ ci.jsx(mB, {
          store: u,
          children: S,
          onCreated: h,
          rootElement: r
        }), f, null, () => {
        });
      }), u;
    },
    unmount() {
      M2(r);
    }
  };
}
function mB({
  store: r,
  children: e,
  onCreated: t,
  rootElement: i
}) {
  return fg(() => {
    const s = r.getState();
    s.set((u) => ({
      internal: {
        ...u.internal,
        active: !0
      }
    })), t && t(s), r.getState().events.connected || s.events.connect == null || s.events.connect(i);
  }, []), /* @__PURE__ */ ci.jsx(v2.Provider, {
    value: r,
    children: e
  });
}
function M2(r, e) {
  const t = Af.get(r), i = t?.fiber;
  if (i) {
    const s = t?.store.getState();
    s && (s.internal.active = !1), zE.updateContainer(null, i, null, () => {
      s && setTimeout(() => {
        try {
          var u, f, h, p;
          s.events.disconnect == null || s.events.disconnect(), (u = s.gl) == null || (f = u.renderLists) == null || f.dispose == null || f.dispose(), (h = s.gl) == null || h.forceContextLoss == null || h.forceContextLoss(), (p = s.gl) != null && p.xr && s.xr.disconnect(), Wz(s.scene), Af.delete(r);
        } catch {
        }
      }, 500);
    });
  }
}
const vB = /* @__PURE__ */ new Set(), gB = /* @__PURE__ */ new Set(), yB = /* @__PURE__ */ new Set();
function uE(r, e) {
  if (r.size)
    for (const {
      callback: t
    } of r.values())
      t(e);
}
function Hv(r, e) {
  switch (r) {
    case "before":
      return uE(vB, e);
    case "after":
      return uE(gB, e);
    case "tail":
      return uE(yB, e);
  }
}
let cE, fE;
function BE(r, e, t) {
  let i = e.clock.getDelta();
  e.frameloop === "never" && typeof r == "number" && (i = r - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = r), cE = e.internal.subscribers;
  for (let s = 0; s < cE.length; s++)
    fE = cE[s], fE.ref.current(fE.store.getState(), i, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
let T_ = !1, PE = !1, hE, QT, jd;
function b2(r) {
  QT = requestAnimationFrame(b2), T_ = !0, hE = 0, Hv("before", r), PE = !0;
  for (const t of Af.values()) {
    var e;
    jd = t.store.getState(), jd.internal.active && (jd.frameloop === "always" || jd.internal.frames > 0) && !((e = jd.gl.xr) != null && e.isPresenting) && (hE += BE(r, jd));
  }
  if (PE = !1, Hv("after", r), hE === 0)
    return Hv("tail", r), T_ = !1, cancelAnimationFrame(QT);
}
function HE(r, e = 1) {
  var t;
  if (!r) return Af.forEach((i) => HE(i.store.getState(), e));
  (t = r.gl.xr) != null && t.isPresenting || !r.internal.active || r.frameloop === "never" || (e > 1 ? r.internal.frames = Math.min(60, r.internal.frames + e) : PE ? r.internal.frames = 2 : r.internal.frames = 1, T_ || (T_ = !0, requestAnimationFrame(b2)));
}
function kT(r, e = !0, t, i) {
  if (e && Hv("before", r), t) BE(r, t, i);
  else for (const s of Af.values()) BE(r, s.store.getState());
  e && Hv("after", r);
}
const dE = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function _B(r) {
  const {
    handlePointer: e
  } = eB(r);
  return {
    priority: 1,
    enabled: !0,
    compute(t, i, s) {
      i.pointer.set(t.offsetX / i.size.width * 2 - 1, -(t.offsetY / i.size.height) * 2 + 1), i.raycaster.setFromCamera(i.pointer, i.camera);
    },
    connected: void 0,
    handlers: Object.keys(dE).reduce((t, i) => ({
      ...t,
      [i]: e(i)
    }), {}),
    update: () => {
      var t;
      const {
        events: i,
        internal: s
      } = r.getState();
      (t = s.lastEvent) != null && t.current && i.handlers && i.handlers.onPointerMove(s.lastEvent.current);
    },
    connect: (t) => {
      const {
        set: i,
        events: s
      } = r.getState();
      if (s.disconnect == null || s.disconnect(), i((u) => ({
        events: {
          ...u.events,
          connected: t
        }
      })), s.handlers)
        for (const u in s.handlers) {
          const f = s.handlers[u], [h, p] = dE[u];
          t.addEventListener(h, f, {
            passive: p
          });
        }
    },
    disconnect: () => {
      const {
        set: t,
        events: i
      } = r.getState();
      if (i.connected) {
        if (i.handlers)
          for (const s in i.handlers) {
            const u = i.handlers[s], [f] = dE[s];
            i.connected.removeEventListener(f, u);
          }
        t((s) => ({
          events: {
            ...s.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function JT(r, e) {
  let t;
  return (...i) => {
    window.clearTimeout(t), t = window.setTimeout(() => r(...i), e);
  };
}
function SB({ debounce: r, scroll: e, polyfill: t, offsetSize: i } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const s = t || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!s) throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [u, f] = pE({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), h = mE({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: u, orientationHandler: null }), p = r ? typeof r == "number" ? r : r.scroll : null, v = r ? typeof r == "number" ? r : r.resize : null, _ = mE(!1);
  Rv(() => (_.current = !0, () => void (_.current = !1)));
  const [S, E, x] = X2(() => {
    const M = () => {
      if (!h.current.element) return;
      const { left: w, top: N, width: U, height: I, bottom: P, right: X, x: Y, y: z } = h.current.element.getBoundingClientRect(), L = { left: w, top: N, width: U, height: I, bottom: P, right: X, x: Y, y: z };
      h.current.element instanceof HTMLElement && i && (L.height = h.current.element.offsetHeight, L.width = h.current.element.offsetWidth), Object.freeze(L), _.current && !bB(h.current.lastBounds, L) && f(h.current.lastBounds = L);
    };
    return [M, v ? JT(M, v) : M, p ? JT(M, p) : M];
  }, [f, i, p, v]);
  function A() {
    h.current.scrollContainers && (h.current.scrollContainers.forEach((M) => M.removeEventListener("scroll", x, !0)), h.current.scrollContainers = null), h.current.resizeObserver && (h.current.resizeObserver.disconnect(), h.current.resizeObserver = null), h.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", h.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", h.current.orientationHandler));
  }
  function C() {
    h.current.element && (h.current.resizeObserver = new s(x), h.current.resizeObserver.observe(h.current.element), e && h.current.scrollContainers && h.current.scrollContainers.forEach((M) => M.addEventListener("scroll", x, { capture: !0, passive: !0 })), h.current.orientationHandler = () => {
      x();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", h.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", h.current.orientationHandler));
  }
  const R = (M) => {
    !M || M === h.current.element || (A(), h.current.element = M, h.current.scrollContainers = T2(M), C());
  };
  return EB(x, !!e), xB(E), Rv(() => {
    A(), C();
  }, [e, x, E]), Rv(() => A, []), [R, u, S];
}
function xB(r) {
  Rv(() => {
    const e = r;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [r]);
}
function EB(r, e) {
  Rv(() => {
    if (e) {
      const t = r;
      return window.addEventListener("scroll", t, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [r, e]);
}
function T2(r) {
  const e = [];
  if (!r || r === document.body) return e;
  const { overflow: t, overflowX: i, overflowY: s } = window.getComputedStyle(r);
  return [t, i, s].some((u) => u === "auto" || u === "scroll") && e.push(r), [...e, ...T2(r.parentElement)];
}
const MB = ["x", "y", "top", "bottom", "left", "right", "width", "height"], bB = (r, e) => MB.every((t) => r[t] === e[t]);
function TB({
  ref: r,
  children: e,
  fallback: t,
  resize: i,
  style: s,
  gl: u,
  events: f = _B,
  eventSource: h,
  eventPrefix: p,
  shadows: v,
  linear: _,
  flat: S,
  legacy: E,
  orthographic: x,
  frameloop: A,
  dpr: C,
  performance: R,
  raycaster: M,
  camera: w,
  scene: N,
  onPointerMissed: U,
  onCreated: I,
  ...P
}) {
  hn.useMemo(() => rB(pz), []);
  const X = Xz(), [Y, z] = SB({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...i
  }), L = hn.useRef(null), W = hn.useRef(null);
  hn.useImperativeHandle(r, () => L.current);
  const me = h2(U), [Q, oe] = hn.useState(!1), [Se, B] = hn.useState(!1);
  if (Q) throw Q;
  if (Se) throw Se;
  const K = hn.useRef(null);
  fg(() => {
    const se = L.current;
    if (z.width > 0 && z.height > 0 && se) {
      K.current || (K.current = pB(se));
      async function le() {
        await K.current.configure({
          gl: u,
          scene: N,
          events: f,
          shadows: v,
          linear: _,
          flat: S,
          legacy: E,
          orthographic: x,
          frameloop: A,
          dpr: C,
          performance: R,
          raycaster: M,
          camera: w,
          size: z,
          // Pass mutable reference to onPointerMissed so it's free to update
          onPointerMissed: (...Te) => me.current == null ? void 0 : me.current(...Te),
          onCreated: (Te) => {
            Te.events.connect == null || Te.events.connect(h ? Fz(h) ? h.current : h : W.current), p && Te.setEvents({
              compute: (we, gt) => {
                const $e = we[p + "X"], _e = we[p + "Y"];
                gt.pointer.set($e / gt.size.width * 2 - 1, -(_e / gt.size.height) * 2 + 1), gt.raycaster.setFromCamera(gt.pointer, gt.camera);
              }
            }), I?.(Te);
          }
        }), K.current.render(/* @__PURE__ */ ci.jsx(X, {
          children: /* @__PURE__ */ ci.jsx(Yz, {
            set: B,
            children: /* @__PURE__ */ ci.jsx(hn.Suspense, {
              fallback: /* @__PURE__ */ ci.jsx(qz, {
                set: oe
              }),
              children: e ?? null
            })
          })
        }));
      }
      le();
    }
  }), hn.useEffect(() => {
    const se = L.current;
    if (se) return () => M2(se);
  }, []);
  const q = h ? "none" : "auto";
  return /* @__PURE__ */ ci.jsx("div", {
    ref: W,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: q,
      ...s
    },
    ...P,
    children: /* @__PURE__ */ ci.jsx("div", {
      ref: Y,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ ci.jsx("canvas", {
        ref: L,
        style: {
          display: "block"
        },
        children: t
      })
    })
  });
}
function AB(r) {
  return /* @__PURE__ */ ci.jsx(l2, {
    children: /* @__PURE__ */ ci.jsx(TB, {
      ...r
    })
  });
}
function IE() {
  return IE = Object.assign ? Object.assign.bind() : function(r) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var i in t) ({}).hasOwnProperty.call(t, i) && (r[i] = t[i]);
    }
    return r;
  }, IE.apply(null, arguments);
}
var RB = Object.defineProperty, CB = (r, e, t) => e in r ? RB(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t, DB = (r, e, t) => (CB(r, e + "", t), t);
class wB {
  constructor() {
    DB(this, "_listeners");
  }
  /**
   * Adds a listener to an event type.
   * @param type The type of event to listen to.
   * @param listener The function that gets called when the event is fired.
   */
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const i = this._listeners;
    i[e] === void 0 && (i[e] = []), i[e].indexOf(t) === -1 && i[e].push(t);
  }
  /**
      * Checks if listener is added to an event type.
      * @param type The type of event to listen to.
      * @param listener The function that gets called when the event is fired.
      */
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const i = this._listeners;
    return i[e] !== void 0 && i[e].indexOf(t) !== -1;
  }
  /**
      * Removes a listener from an event type.
      * @param type The type of the listener that gets removed.
      * @param listener The listener function that gets removed.
      */
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const s = this._listeners[e];
    if (s !== void 0) {
      const u = s.indexOf(t);
      u !== -1 && s.splice(u, 1);
    }
  }
  /**
      * Fire an event type.
      * @param event The event that gets fired.
      */
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const i = this._listeners[e.type];
    if (i !== void 0) {
      e.target = this;
      const s = i.slice(0);
      for (let u = 0, f = s.length; u < f; u++)
        s[u].call(this, e);
      e.target = null;
    }
  }
}
var UB = Object.defineProperty, NB = (r, e, t) => e in r ? UB(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t, Ht = (r, e, t) => (NB(r, typeof e != "symbol" ? e + "" : e, t), t);
const w0 = /* @__PURE__ */ new Rf(), $T = /* @__PURE__ */ new zl(), OB = Math.cos(70 * (Math.PI / 180)), eA = (r, e) => (r % e + e) % e;
let LB = class extends wB {
  constructor(e, t) {
    super(), Ht(this, "object"), Ht(this, "domElement"), Ht(this, "enabled", !0), Ht(this, "target", new j()), Ht(this, "minDistance", 0), Ht(this, "maxDistance", 1 / 0), Ht(this, "minZoom", 0), Ht(this, "maxZoom", 1 / 0), Ht(this, "minPolarAngle", 0), Ht(this, "maxPolarAngle", Math.PI), Ht(this, "minAzimuthAngle", -1 / 0), Ht(this, "maxAzimuthAngle", 1 / 0), Ht(this, "enableDamping", !1), Ht(this, "dampingFactor", 0.05), Ht(this, "enableZoom", !0), Ht(this, "zoomSpeed", 1), Ht(this, "enableRotate", !0), Ht(this, "rotateSpeed", 1), Ht(this, "enablePan", !0), Ht(this, "panSpeed", 1), Ht(this, "screenSpacePanning", !0), Ht(this, "keyPanSpeed", 7), Ht(this, "zoomToCursor", !1), Ht(this, "autoRotate", !1), Ht(this, "autoRotateSpeed", 2), Ht(this, "reverseOrbit", !1), Ht(this, "reverseHorizontalOrbit", !1), Ht(this, "reverseVerticalOrbit", !1), Ht(this, "keys", { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }), Ht(this, "mouseButtons", {
      LEFT: hf.ROTATE,
      MIDDLE: hf.DOLLY,
      RIGHT: hf.PAN
    }), Ht(this, "touches", { ONE: df.ROTATE, TWO: df.DOLLY_PAN }), Ht(this, "target0"), Ht(this, "position0"), Ht(this, "zoom0"), Ht(this, "_domElementKeyEvents", null), Ht(this, "getPolarAngle"), Ht(this, "getAzimuthalAngle"), Ht(this, "setPolarAngle"), Ht(this, "setAzimuthalAngle"), Ht(this, "getDistance"), Ht(this, "getZoomScale"), Ht(this, "listenToKeyEvents"), Ht(this, "stopListenToKeyEvents"), Ht(this, "saveState"), Ht(this, "reset"), Ht(this, "update"), Ht(this, "connect"), Ht(this, "dispose"), Ht(this, "dollyIn"), Ht(this, "dollyOut"), Ht(this, "getScale"), Ht(this, "setScale"), this.object = e, this.domElement = t, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this.getPolarAngle = () => _.phi, this.getAzimuthalAngle = () => _.theta, this.setPolarAngle = (k) => {
      let ye = eA(k, 2 * Math.PI), qe = _.phi;
      qe < 0 && (qe += 2 * Math.PI), ye < 0 && (ye += 2 * Math.PI);
      let J = Math.abs(ye - qe);
      2 * Math.PI - J < J && (ye < qe ? ye += 2 * Math.PI : qe += 2 * Math.PI), S.phi = ye - qe, i.update();
    }, this.setAzimuthalAngle = (k) => {
      let ye = eA(k, 2 * Math.PI), qe = _.theta;
      qe < 0 && (qe += 2 * Math.PI), ye < 0 && (ye += 2 * Math.PI);
      let J = Math.abs(ye - qe);
      2 * Math.PI - J < J && (ye < qe ? ye += 2 * Math.PI : qe += 2 * Math.PI), S.theta = ye - qe, i.update();
    }, this.getDistance = () => i.object.position.distanceTo(i.target), this.listenToKeyEvents = (k) => {
      k.addEventListener("keydown", Re), this._domElementKeyEvents = k;
    }, this.stopListenToKeyEvents = () => {
      this._domElementKeyEvents.removeEventListener("keydown", Re), this._domElementKeyEvents = null;
    }, this.saveState = () => {
      i.target0.copy(i.target), i.position0.copy(i.object.position), i.zoom0 = i.object.zoom;
    }, this.reset = () => {
      i.target.copy(i.target0), i.object.position.copy(i.position0), i.object.zoom = i.zoom0, i.object.updateProjectionMatrix(), i.dispatchEvent(s), i.update(), p = h.NONE;
    }, this.update = (() => {
      const k = new j(), ye = new j(0, 1, 0), qe = new Fa().setFromUnitVectors(e.up, ye), J = qe.clone().invert(), Oe = new j(), Ye = new Fa(), lt = 2 * Math.PI;
      return function() {
        const Ue = i.object.position;
        qe.setFromUnitVectors(e.up, ye), J.copy(qe).invert(), k.copy(Ue).sub(i.target), k.applyQuaternion(qe), _.setFromVector3(k), i.autoRotate && p === h.NONE && oe(me()), i.enableDamping ? (_.theta += S.theta * i.dampingFactor, _.phi += S.phi * i.dampingFactor) : (_.theta += S.theta, _.phi += S.phi);
        let rt = i.minAzimuthAngle, Rt = i.maxAzimuthAngle;
        isFinite(rt) && isFinite(Rt) && (rt < -Math.PI ? rt += lt : rt > Math.PI && (rt -= lt), Rt < -Math.PI ? Rt += lt : Rt > Math.PI && (Rt -= lt), rt <= Rt ? _.theta = Math.max(rt, Math.min(Rt, _.theta)) : _.theta = _.theta > (rt + Rt) / 2 ? Math.max(rt, _.theta) : Math.min(Rt, _.theta)), _.phi = Math.max(i.minPolarAngle, Math.min(i.maxPolarAngle, _.phi)), _.makeSafe(), i.enableDamping === !0 ? i.target.addScaledVector(x, i.dampingFactor) : i.target.add(x), i.zoomToCursor && z || i.object.isOrthographicCamera ? _.radius = gt(_.radius) : _.radius = gt(_.radius * E), k.setFromSpherical(_), k.applyQuaternion(J), Ue.copy(i.target).add(k), i.object.matrixAutoUpdate || i.object.updateMatrix(), i.object.lookAt(i.target), i.enableDamping === !0 ? (S.theta *= 1 - i.dampingFactor, S.phi *= 1 - i.dampingFactor, x.multiplyScalar(1 - i.dampingFactor)) : (S.set(0, 0, 0), x.set(0, 0, 0));
        let Yt = !1;
        if (i.zoomToCursor && z) {
          let Ft = null;
          if (i.object instanceof Ui && i.object.isPerspectiveCamera) {
            const si = k.length();
            Ft = gt(si * E);
            const Jn = si - Ft;
            i.object.position.addScaledVector(X, Jn), i.object.updateMatrixWorld();
          } else if (i.object.isOrthographicCamera) {
            const si = new j(Y.x, Y.y, 0);
            si.unproject(i.object), i.object.zoom = Math.max(i.minZoom, Math.min(i.maxZoom, i.object.zoom / E)), i.object.updateProjectionMatrix(), Yt = !0;
            const Jn = new j(Y.x, Y.y, 0);
            Jn.unproject(i.object), i.object.position.sub(Jn).add(si), i.object.updateMatrixWorld(), Ft = k.length();
          } else
            console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."), i.zoomToCursor = !1;
          Ft !== null && (i.screenSpacePanning ? i.target.set(0, 0, -1).transformDirection(i.object.matrix).multiplyScalar(Ft).add(i.object.position) : (w0.origin.copy(i.object.position), w0.direction.set(0, 0, -1).transformDirection(i.object.matrix), Math.abs(i.object.up.dot(w0.direction)) < OB ? e.lookAt(i.target) : ($T.setFromNormalAndCoplanarPoint(i.object.up, i.target), w0.intersectPlane($T, i.target))));
        } else i.object instanceof Yu && i.object.isOrthographicCamera && (Yt = E !== 1, Yt && (i.object.zoom = Math.max(i.minZoom, Math.min(i.maxZoom, i.object.zoom / E)), i.object.updateProjectionMatrix()));
        return E = 1, z = !1, Yt || Oe.distanceToSquared(i.object.position) > v || 8 * (1 - Ye.dot(i.object.quaternion)) > v ? (i.dispatchEvent(s), Oe.copy(i.object.position), Ye.copy(i.object.quaternion), Yt = !1, !0) : !1;
      };
    })(), this.connect = (k) => {
      i.domElement = k, i.domElement.style.touchAction = "none", i.domElement.addEventListener("contextmenu", ct), i.domElement.addEventListener("pointerdown", Bt), i.domElement.addEventListener("pointercancel", H), i.domElement.addEventListener("wheel", He);
    }, this.dispose = () => {
      var k, ye, qe, J, Oe, Ye;
      i.domElement && (i.domElement.style.touchAction = "auto"), (k = i.domElement) == null || k.removeEventListener("contextmenu", ct), (ye = i.domElement) == null || ye.removeEventListener("pointerdown", Bt), (qe = i.domElement) == null || qe.removeEventListener("pointercancel", H), (J = i.domElement) == null || J.removeEventListener("wheel", He), (Oe = i.domElement) == null || Oe.ownerDocument.removeEventListener("pointermove", Z), (Ye = i.domElement) == null || Ye.ownerDocument.removeEventListener("pointerup", H), i._domElementKeyEvents !== null && i._domElementKeyEvents.removeEventListener("keydown", Re);
    };
    const i = this, s = { type: "change" }, u = { type: "start" }, f = { type: "end" }, h = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_PAN: 4,
      TOUCH_DOLLY_PAN: 5,
      TOUCH_DOLLY_ROTATE: 6
    };
    let p = h.NONE;
    const v = 1e-6, _ = new DE(), S = new DE();
    let E = 1;
    const x = new j(), A = new ze(), C = new ze(), R = new ze(), M = new ze(), w = new ze(), N = new ze(), U = new ze(), I = new ze(), P = new ze(), X = new j(), Y = new ze();
    let z = !1;
    const L = [], W = {};
    function me() {
      return 2 * Math.PI / 60 / 60 * i.autoRotateSpeed;
    }
    function Q() {
      return Math.pow(0.95, i.zoomSpeed);
    }
    function oe(k) {
      i.reverseOrbit || i.reverseHorizontalOrbit ? S.theta += k : S.theta -= k;
    }
    function Se(k) {
      i.reverseOrbit || i.reverseVerticalOrbit ? S.phi += k : S.phi -= k;
    }
    const B = (() => {
      const k = new j();
      return function(qe, J) {
        k.setFromMatrixColumn(J, 0), k.multiplyScalar(-qe), x.add(k);
      };
    })(), K = (() => {
      const k = new j();
      return function(qe, J) {
        i.screenSpacePanning === !0 ? k.setFromMatrixColumn(J, 1) : (k.setFromMatrixColumn(J, 0), k.crossVectors(i.object.up, k)), k.multiplyScalar(qe), x.add(k);
      };
    })(), q = (() => {
      const k = new j();
      return function(qe, J) {
        const Oe = i.domElement;
        if (Oe && i.object instanceof Ui && i.object.isPerspectiveCamera) {
          const Ye = i.object.position;
          k.copy(Ye).sub(i.target);
          let lt = k.length();
          lt *= Math.tan(i.object.fov / 2 * Math.PI / 180), B(2 * qe * lt / Oe.clientHeight, i.object.matrix), K(2 * J * lt / Oe.clientHeight, i.object.matrix);
        } else Oe && i.object instanceof Yu && i.object.isOrthographicCamera ? (B(
          qe * (i.object.right - i.object.left) / i.object.zoom / Oe.clientWidth,
          i.object.matrix
        ), K(
          J * (i.object.top - i.object.bottom) / i.object.zoom / Oe.clientHeight,
          i.object.matrix
        )) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), i.enablePan = !1);
      };
    })();
    function se(k) {
      i.object instanceof Ui && i.object.isPerspectiveCamera || i.object instanceof Yu && i.object.isOrthographicCamera ? E = k : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), i.enableZoom = !1);
    }
    function le(k) {
      se(E / k);
    }
    function Te(k) {
      se(E * k);
    }
    function we(k) {
      if (!i.zoomToCursor || !i.domElement)
        return;
      z = !0;
      const ye = i.domElement.getBoundingClientRect(), qe = k.clientX - ye.left, J = k.clientY - ye.top, Oe = ye.width, Ye = ye.height;
      Y.x = qe / Oe * 2 - 1, Y.y = -(J / Ye) * 2 + 1, X.set(Y.x, Y.y, 1).unproject(i.object).sub(i.object.position).normalize();
    }
    function gt(k) {
      return Math.max(i.minDistance, Math.min(i.maxDistance, k));
    }
    function $e(k) {
      A.set(k.clientX, k.clientY);
    }
    function _e(k) {
      we(k), U.set(k.clientX, k.clientY);
    }
    function Je(k) {
      M.set(k.clientX, k.clientY);
    }
    function We(k) {
      C.set(k.clientX, k.clientY), R.subVectors(C, A).multiplyScalar(i.rotateSpeed);
      const ye = i.domElement;
      ye && (oe(2 * Math.PI * R.x / ye.clientHeight), Se(2 * Math.PI * R.y / ye.clientHeight)), A.copy(C), i.update();
    }
    function Mt(k) {
      I.set(k.clientX, k.clientY), P.subVectors(I, U), P.y > 0 ? le(Q()) : P.y < 0 && Te(Q()), U.copy(I), i.update();
    }
    function yt(k) {
      w.set(k.clientX, k.clientY), N.subVectors(w, M).multiplyScalar(i.panSpeed), q(N.x, N.y), M.copy(w), i.update();
    }
    function Ct(k) {
      we(k), k.deltaY < 0 ? Te(Q()) : k.deltaY > 0 && le(Q()), i.update();
    }
    function _n(k) {
      let ye = !1;
      switch (k.code) {
        case i.keys.UP:
          q(0, i.keyPanSpeed), ye = !0;
          break;
        case i.keys.BOTTOM:
          q(0, -i.keyPanSpeed), ye = !0;
          break;
        case i.keys.LEFT:
          q(i.keyPanSpeed, 0), ye = !0;
          break;
        case i.keys.RIGHT:
          q(-i.keyPanSpeed, 0), ye = !0;
          break;
      }
      ye && (k.preventDefault(), i.update());
    }
    function Dt() {
      if (L.length == 1)
        A.set(L[0].pageX, L[0].pageY);
      else {
        const k = 0.5 * (L[0].pageX + L[1].pageX), ye = 0.5 * (L[0].pageY + L[1].pageY);
        A.set(k, ye);
      }
    }
    function ee() {
      if (L.length == 1)
        M.set(L[0].pageX, L[0].pageY);
      else {
        const k = 0.5 * (L[0].pageX + L[1].pageX), ye = 0.5 * (L[0].pageY + L[1].pageY);
        M.set(k, ye);
      }
    }
    function Be() {
      const k = L[0].pageX - L[1].pageX, ye = L[0].pageY - L[1].pageY, qe = Math.sqrt(k * k + ye * ye);
      U.set(0, qe);
    }
    function Ce() {
      i.enableZoom && Be(), i.enablePan && ee();
    }
    function Ie() {
      i.enableZoom && Be(), i.enableRotate && Dt();
    }
    function De(k) {
      if (L.length == 1)
        C.set(k.pageX, k.pageY);
      else {
        const qe = Tt(k), J = 0.5 * (k.pageX + qe.x), Oe = 0.5 * (k.pageY + qe.y);
        C.set(J, Oe);
      }
      R.subVectors(C, A).multiplyScalar(i.rotateSpeed);
      const ye = i.domElement;
      ye && (oe(2 * Math.PI * R.x / ye.clientHeight), Se(2 * Math.PI * R.y / ye.clientHeight)), A.copy(C);
    }
    function et(k) {
      if (L.length == 1)
        w.set(k.pageX, k.pageY);
      else {
        const ye = Tt(k), qe = 0.5 * (k.pageX + ye.x), J = 0.5 * (k.pageY + ye.y);
        w.set(qe, J);
      }
      N.subVectors(w, M).multiplyScalar(i.panSpeed), q(N.x, N.y), M.copy(w);
    }
    function Ve(k) {
      const ye = Tt(k), qe = k.pageX - ye.x, J = k.pageY - ye.y, Oe = Math.sqrt(qe * qe + J * J);
      I.set(0, Oe), P.set(0, Math.pow(I.y / U.y, i.zoomSpeed)), le(P.y), U.copy(I);
    }
    function Qe(k) {
      i.enableZoom && Ve(k), i.enablePan && et(k);
    }
    function ut(k) {
      i.enableZoom && Ve(k), i.enableRotate && De(k);
    }
    function Bt(k) {
      var ye, qe;
      i.enabled !== !1 && (L.length === 0 && ((ye = i.domElement) == null || ye.ownerDocument.addEventListener("pointermove", Z), (qe = i.domElement) == null || qe.ownerDocument.addEventListener("pointerup", H)), _t(k), k.pointerType === "touch" ? bt(k) : he(k));
    }
    function Z(k) {
      i.enabled !== !1 && (k.pointerType === "touch" ? Xe(k) : be(k));
    }
    function H(k) {
      var ye, qe, J;
      Ge(k), L.length === 0 && ((ye = i.domElement) == null || ye.releasePointerCapture(k.pointerId), (qe = i.domElement) == null || qe.ownerDocument.removeEventListener("pointermove", Z), (J = i.domElement) == null || J.ownerDocument.removeEventListener("pointerup", H)), i.dispatchEvent(f), p = h.NONE;
    }
    function he(k) {
      let ye;
      switch (k.button) {
        case 0:
          ye = i.mouseButtons.LEFT;
          break;
        case 1:
          ye = i.mouseButtons.MIDDLE;
          break;
        case 2:
          ye = i.mouseButtons.RIGHT;
          break;
        default:
          ye = -1;
      }
      switch (ye) {
        case hf.DOLLY:
          if (i.enableZoom === !1)
            return;
          _e(k), p = h.DOLLY;
          break;
        case hf.ROTATE:
          if (k.ctrlKey || k.metaKey || k.shiftKey) {
            if (i.enablePan === !1)
              return;
            Je(k), p = h.PAN;
          } else {
            if (i.enableRotate === !1)
              return;
            $e(k), p = h.ROTATE;
          }
          break;
        case hf.PAN:
          if (k.ctrlKey || k.metaKey || k.shiftKey) {
            if (i.enableRotate === !1)
              return;
            $e(k), p = h.ROTATE;
          } else {
            if (i.enablePan === !1)
              return;
            Je(k), p = h.PAN;
          }
          break;
        default:
          p = h.NONE;
      }
      p !== h.NONE && i.dispatchEvent(u);
    }
    function be(k) {
      if (i.enabled !== !1)
        switch (p) {
          case h.ROTATE:
            if (i.enableRotate === !1)
              return;
            We(k);
            break;
          case h.DOLLY:
            if (i.enableZoom === !1)
              return;
            Mt(k);
            break;
          case h.PAN:
            if (i.enablePan === !1)
              return;
            yt(k);
            break;
        }
    }
    function He(k) {
      i.enabled === !1 || i.enableZoom === !1 || p !== h.NONE && p !== h.ROTATE || (k.preventDefault(), i.dispatchEvent(u), Ct(k), i.dispatchEvent(f));
    }
    function Re(k) {
      i.enabled === !1 || i.enablePan === !1 || _n(k);
    }
    function bt(k) {
      switch (it(k), L.length) {
        case 1:
          switch (i.touches.ONE) {
            case df.ROTATE:
              if (i.enableRotate === !1)
                return;
              Dt(), p = h.TOUCH_ROTATE;
              break;
            case df.PAN:
              if (i.enablePan === !1)
                return;
              ee(), p = h.TOUCH_PAN;
              break;
            default:
              p = h.NONE;
          }
          break;
        case 2:
          switch (i.touches.TWO) {
            case df.DOLLY_PAN:
              if (i.enableZoom === !1 && i.enablePan === !1)
                return;
              Ce(), p = h.TOUCH_DOLLY_PAN;
              break;
            case df.DOLLY_ROTATE:
              if (i.enableZoom === !1 && i.enableRotate === !1)
                return;
              Ie(), p = h.TOUCH_DOLLY_ROTATE;
              break;
            default:
              p = h.NONE;
          }
          break;
        default:
          p = h.NONE;
      }
      p !== h.NONE && i.dispatchEvent(u);
    }
    function Xe(k) {
      switch (it(k), p) {
        case h.TOUCH_ROTATE:
          if (i.enableRotate === !1)
            return;
          De(k), i.update();
          break;
        case h.TOUCH_PAN:
          if (i.enablePan === !1)
            return;
          et(k), i.update();
          break;
        case h.TOUCH_DOLLY_PAN:
          if (i.enableZoom === !1 && i.enablePan === !1)
            return;
          Qe(k), i.update();
          break;
        case h.TOUCH_DOLLY_ROTATE:
          if (i.enableZoom === !1 && i.enableRotate === !1)
            return;
          ut(k), i.update();
          break;
        default:
          p = h.NONE;
      }
    }
    function ct(k) {
      i.enabled !== !1 && k.preventDefault();
    }
    function _t(k) {
      L.push(k);
    }
    function Ge(k) {
      delete W[k.pointerId];
      for (let ye = 0; ye < L.length; ye++)
        if (L[ye].pointerId == k.pointerId) {
          L.splice(ye, 1);
          return;
        }
    }
    function it(k) {
      let ye = W[k.pointerId];
      ye === void 0 && (ye = new ze(), W[k.pointerId] = ye), ye.set(k.pageX, k.pageY);
    }
    function Tt(k) {
      const ye = k.pointerId === L[0].pointerId ? L[1] : L[0];
      return W[ye.pointerId];
    }
    this.dollyIn = (k = Q()) => {
      Te(k), i.update();
    }, this.dollyOut = (k = Q()) => {
      le(k), i.update();
    }, this.getScale = () => E, this.setScale = (k) => {
      se(k), i.update();
    }, this.getZoomScale = () => Q(), t !== void 0 && this.connect(t), this.update();
  }
};
const zB = /* @__PURE__ */ hn.forwardRef(({
  makeDefault: r,
  camera: e,
  regress: t,
  domElement: i,
  enableDamping: s = !0,
  keyEvents: u = !1,
  onChange: f,
  onStart: h,
  onEnd: p,
  ...v
}, _) => {
  const S = Fu((P) => P.invalidate), E = Fu((P) => P.camera), x = Fu((P) => P.gl), A = Fu((P) => P.events), C = Fu((P) => P.setEvents), R = Fu((P) => P.set), M = Fu((P) => P.get), w = Fu((P) => P.performance), N = e || E, U = i || A.connected || x.domElement, I = hn.useMemo(() => new LB(N), [N]);
  return y2(() => {
    I.enabled && I.update();
  }, -1), hn.useEffect(() => (u && I.connect(u === !0 ? U : u), I.connect(U), () => void I.dispose()), [u, U, t, I, S]), hn.useEffect(() => {
    const P = (z) => {
      S(), t && w.regress(), f && f(z);
    }, X = (z) => {
      h && h(z);
    }, Y = (z) => {
      p && p(z);
    };
    return I.addEventListener("change", P), I.addEventListener("start", X), I.addEventListener("end", Y), () => {
      I.removeEventListener("start", X), I.removeEventListener("end", Y), I.removeEventListener("change", P);
    };
  }, [f, h, p, I, S, C]), hn.useEffect(() => {
    if (r) {
      const P = M().controls;
      return R({
        controls: I
      }), () => R({
        controls: P
      });
    }
  }, [r, I]), /* @__PURE__ */ hn.createElement("primitive", IE({
    ref: _,
    object: I,
    enableDamping: s
  }, v));
});
function tA(r) {
  const e = mE(), [t, i] = pE(!1), [s, u] = pE(!1);
  return y2((f, h) => e.current.rotation.x += h), /* @__PURE__ */ ci.jsxs(
    "mesh",
    {
      ...r,
      ref: e,
      scale: s ? 1.5 : 1,
      onClick: (f) => u(!s),
      onPointerOver: (f) => i(!0),
      onPointerOut: (f) => i(!1),
      children: [
        /* @__PURE__ */ ci.jsx("boxGeometry", { args: [1, 1, 1] }),
        /* @__PURE__ */ ci.jsx("meshStandardMaterial", { color: t ? "hotpink" : r.boxColor })
      ]
    }
  );
}
function BB(r) {
  return /* @__PURE__ */ ci.jsx("div", { style: { width: "100%", height: "100%", background: r.canvasBgColor }, children: /* @__PURE__ */ ci.jsxs(AB, { children: [
    /* @__PURE__ */ ci.jsx("ambientLight", { intensity: 0.5 }),
    /* @__PURE__ */ ci.jsx("spotLight", { position: [10, 10, 10], angle: 0.15, penumbra: 1 }),
    /* @__PURE__ */ ci.jsx("pointLight", { position: [-10, -10, -10] }),
    /* @__PURE__ */ ci.jsx(tA, { position: [-1.2, 0, 0], boxColor: r.boxColor }),
    /* @__PURE__ */ ci.jsx(tA, { position: [1.2, 0, 0], boxColor: r.boxColor }),
    /* @__PURE__ */ ci.jsx(zB, {}),
    " "
  ] }) });
}
q2(BB, {
  boxColor: {
    type: qb.Color,
    title: "Box Color",
    defaultValue: "#007AFF"
  },
  canvasBgColor: {
    type: qb.Color,
    title: "Canvas BG",
    defaultValue: "#F0F0F0"
  }
});
export {
  BB as default
};
